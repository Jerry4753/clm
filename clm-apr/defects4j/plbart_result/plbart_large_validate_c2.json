{
  "config": "PLBART_SEQFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "<s> public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } /* boolean removed = markers.remove(marker); */ <mask> if (removed && notify) { fireChangeEvent(); } return removed; } </s> java",
      "function range": "2155,5-2171,5",
      "output": [
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker (int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (markers == null) { return false; } if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (removed && notify) { fireChangeEvent(); } if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (marker == null) { return false; } if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (removed && notify) { fireChangeEvent(); } else if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (markers == null || markers.isEmpty()) { return false; } if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (markers.isEmpty()) { return false; } if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (markers == null || markers.isEmpty()) { return false; } else if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); }  if (removed && notify) { fireChangeEvent(); } if (removed && notify) { fireChangeEvent(); } return removed; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "<s> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns != null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns != null && ns.onlyAffectsClassDef) { /* JsName name = getName(ns.name, false); */ <mask> if (name != null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } } </s> java",
      "function range": "595,5-642,5",
      "output": [
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } else if (n.isName()) { JsName name = getName(n.getString(), false); if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } else if (n.isNew()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) { if (ns.name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { if (NodeUtil.isVarDeclaration(n)) { NameInformation ns = createNameInformation(t, n, parent); Preconditions.checkNotNull(ns); recordSet(ns.name, n); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { JsName nameInfo = getName(nameNode.getString(), true); recordSet(nameInfo.name, nameNode); } } else if (NodeUtil.isObjectLitKey(n, parent)) { NameInformation ns = createNameInformation(t, n, parent); if (ns!= null) { recordSet(ns.name, n); } } } if (n.isAssign()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null) { if (ns.isPrototype) { recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n); } else { recordSet(ns.name, nameNode); } } } else if (n.isCall()) { Node nameNode = n.getFirstChild(); NameInformation ns = createNameInformation(t, nameNode, n); if (ns!= null && ns.onlyAffectsClassDef) {  if (name!= null) { refNodes.add(new ClassDefiningFunctionNode( name, n, parent, parent.getParent())); } } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "<s> @Override public JSType getLeastSupertype(JSType that) { /* if (!that.isRecordType()) { return super.getLeastSupertype(that); } */ <mask> RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); } </s> java",
      "function range": "140,3-155,3",
      "output": [
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  Map<String, JSType> properties = that.toMaybeRecordType().getProperties(); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return null; } RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeRegistry registry = new RecordTypeRegistry(this); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeRegistry registry = new RecordTypeRegistry(); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeRegistry registry = new RecordTypeRegistry(); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)) ; } } return builder.build(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeRegistry registry = new RecordTypeRegistry(this); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)) } } return builder.build(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  if (that.toMaybeRecordType() == null) { return super.getLeastSupertype(that); } RecordTypeRegistry registry = new RecordTypeRegistry(); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)) } } return builder.build(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JSType getLeastSupertype(JSType that) {  Map<String, JSType> properties = that.toMaybeRecordType().getProperties(); RecordTypeBuilder builder = new RecordTypeBuilder(registry); for (String property : properties.keySet()) { if (that.toMaybeRecordType().hasProperty(property) && that.toMaybeRecordType().getPropertyType(property).isEquivalentTo( getPropertyType(property))) { builder.addProperty(property, getPropertyType(property), getPropertyNode(property)); } } return builder.build(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "<s> static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; /* case '\\r': sb.append(\"\\\\r\"); break; */ <mask> case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } </s> java",
      "function range": "956,3-1025,3",
      "output": [
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  /* case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  /* case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  /* case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break;  case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append (quote); return sb.toString(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "<s> private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i); /* if(Character.isWhitespace(c)) { if(!wasWhite) { wasWhite= true; regex.append(\"\\\\s*+\"); } continue; } */ <mask> wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; } </s> java",
      "function range": "303,5-343,5",
      "output": [
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append(\"\\\\s*+\"); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
          "correctness": "plausible"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append('\\\\s*+'); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append(\"\\\\s*+\"); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
          "correctness": "plausible"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(!wasWhite) { regex.append(\"\\\\s*+\"); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
          "correctness": "timeout"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append(\"\\\\s*+\"); } regex.append(c); wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
          "correctness": "timeout"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append('\\\\s*+'); } regex.append(c); wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); } return regex; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append('\\\\s*+'); } regex.append(c); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append(\"\\\\s*+\"); } regex.append(c); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(!wasWhite) { wasWhite= true; regex.append(\"\\\\s*+\"); } regex.append(c); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) { boolean wasWhite= false; for(int i= 0; i<value.length(); ++i) { char c= value.charAt(i);  if(wasWhite) { regex.append('\\\\s*+'); } regex.append(c); } wasWhite= false; switch(c) { case '\\'': if(unquote) { if(++i==value.length()) { return regex; } c= value.charAt(i); } break; case '?': case '[': case ']': case '(': case ')': case '{': case '}': case '\\\\': case '|': case '*': case '+': case '^': case '$': case '.': regex.append('\\\\'); } regex.append(c); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "<s> public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { /* calendar = (Calendar) calendar.clone(); */ <mask> calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); } </s> java",
      "function range": "870,5-876,5",
      "output": [
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "plausible"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "plausible"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  mTimeZoneForced = false; calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  } else { calendar = (Calendar) calendar.clone(); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "wrong"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  mTimeZone = TimeZone.getTimeZone(mTimeZoneForced ) ; calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  mTimeZone = TimeZone.getTimeZone (mTimeZoneForced ) ; calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  mTimeZone = TimeZone.getDefault(); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  } if (mTimeZone!= null &&!mTimeZoneForced ) { calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "wrong"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  mTimeZone = TimeZone.getTimeZone(mTimeZoneName); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) {  calendar.setFirstDayOfWeek(Calendar.MONDAY); calendar.setFirstDayOfMonth(Calendar.DAY_OF_MONTH); calendar.setFirstDayOfYear(Calendar.DAY_OF_YEAR); calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "<s> public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; /* chiSquare += residual * residual / residualsWeights[i]; */ <mask> } return chiSquare; } </s> java",
      "function range": "254,5-261,5",
      "output": [
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  chiSquare = Math. sqrt ( chiSquare ) ; } return chiSquare; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } return chiSquare; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < columns; ++i) { chiSquare += residualsWeights[i]; } return chiSquare; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < columns; ++i) { chiSquare /= residualsWeights[i]; } return chiSquare; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < columns; ++i) { chiSquare *= residualsWeights[i]; } return chiSquare; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < columns; ++i) { chiSquare /= rows; } return chiSquare; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < cols; ++i) { chiSquare += residualsWeights[i]; } return chiSquare; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < columns; ++i) { chiSquare += chiSquare * chiSquare; } return chiSquare; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i];  } for (int i = 0; i < columns; ++i) { chiSquare += chiSquare * chiSquare / rows; } return chiSquare; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "<s> public static double distance(int[] p1, int[] p2) { /* int sum = 0; */ <mask> for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); } </s> java",
      "function range": "1623,5-1630,5",
      "output": [
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  sum = 0 ; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  double sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  int sum = 0 ; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt (sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  int sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  sum = 0 ; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double distance(int[] p1, int[] p2) {  double sum = 0; for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "<s> public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length != this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension(); /* final BigDecimal[] out = new BigDecimal[v.length]; */ <mask> for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; } </s> java",
      "function range": "985,5-1000,5",
      "output": [
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "plausible"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "plausible"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  final BigDecimal [ ] data = this.getData(); for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  final BigDecimal[] data = this.getData(); for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  final BigDecimal [ ] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "plausible"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  BigDecimal [ ] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "plausible"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  BigDecimal[] out = new BigDecimal[nRows * nCols]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out; }",
          "correctness": "wrong"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  final BigDecimal[] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  BigDecimal[] out = new BigDecimal[nRows * nCols]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException { if (v.length!= this.getColumnDimension()) { throw new IllegalArgumentException(\"vector has wrong length\"); } final int nRows = this.getRowDimension(); final int nCols = this.getColumnDimension();  final BigDecimal [ ] out = new BigDecimal[nRows]; for (int row = 0; row < nRows; row++) { BigDecimal sum = ZERO; for (int i = 0; i < nCols; i++) { sum = sum.add(data[row][i].multiply(v[i])); } out[row] = sum; } return out ; }",
          "correctness": "plausible"
        }
      ]
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "<s> public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index); /* if (dataset != null) { */ <mask> return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item != null) { result.add(item); } } } } return result; } </s> java",
      "function range": "1790,5-1822,5",
      "output": [
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (dataset.getRowCount() == 0) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (dataset == null) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (isSeriesVisibleInLegend(index)) { LegendItem item = getLegendItem(index, index); if (item!= null) { result.add(item); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (dataset == null) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (isSeriesVisibleInLegend(index)) { LegendItem item = getLegendItem(index, 0); if (item!= null) { result.add(item); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (dataset == null) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (isSeriesVisibleInLegend(index)) { LegendItem item = getLegendItem(index, index); if (item!= null) { result.add(item); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (isSeriesVisibleInLegend(index)) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (dataset.getRowCount() == 0) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.plot == null) { return result; } int index = this.plot.getIndexOf(this); CategoryDataset dataset = this.plot.getDataset(index);  if (dataset.getRowCount() == 0) { return result; } int seriesCount = dataset.getRowCount(); if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) { for (int i = 0; i < seriesCount; i++) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } else { for (int i = seriesCount - 1; i >= 0; i--) { if (isSeriesVisibleInLegend(i)) { LegendItem item = getLegendItem(index, i); if (item!= null) { result.add(item); } } } } return result; }",
          "correctness": "plausible"
        }
      ]
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "<s> public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone(); /* copy.data = new java.util.ArrayList(); */ <mask> if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; } </s> java",
      "function range": "1048,5-1072,5",
      "output": [
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  if (this.data == null) { copy.data = new java.util.ArrayList(); } else if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  if (this.data == null) { copy.data = new java.util.ArrayList(); } if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  copy.data.add(new java.util.ArrayList()); copy.data.add(new java.util.ArrayList()); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  copy.data.clear(); copy.data.addAll(this.data); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  copy.data.clear(); copy.data.addAll(new java.util.ArrayList()); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  copy.data.add(new java.util.ArrayList()); copy.data.add(new java.util.ArrayList()); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  copy.data.clear(); copy.data.addAll(new java.util.ArrayList()); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  if (this.data == null) { copy.data = new java.util.ArrayList(); } else if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException { if (start < 0) { throw new IllegalArgumentException(\"Requires start >= 0.\"); } if (end < start) { throw new IllegalArgumentException(\"Requires start <= end.\"); } TimeSeries copy = (TimeSeries) super.clone();  if (this.data == null) { copy.data = new java.util.ArrayList(); } if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index); TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone(); try { copy.add(clone); } catch (SeriesException e) { e.printStackTrace(); } } } return copy ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "<s> public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; } /* return super.equals(obj); */ <mask> } </s> java",
      "function range": "103,5-113,5",
      "output": [
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  return obj.equals(this); }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  ShapeList other = (ShapeList) obj; return super.equals(other); }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  return obj instanceof ShapeList; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  ShapeList other = (ShapeList) obj; return equals(other); }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  return ((ShapeList) obj).getId() == this.getId(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  ShapeList other = (ShapeList) obj; return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; }  return obj.getClass() == getClass(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int hashCode() { return super.hashCode(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "<s> public Week(Date time, TimeZone zone) { /* this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()); */ <mask> } </s> java",
      "function range": "173,5-176,5",
      "output": [
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.time = time; this.zone = zone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.timeZone = zone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.time = time ; this.zone = zone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.time = time; this.timezone = zone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.zone = zone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this(time, zone, Locale.getDefault()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.time = time; this.zone = zone ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  this.zone = zone; this.time = time; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  }",
          "correctness": "wrong"
        },
        {
          "patch": "public Week(Date time, TimeZone zone) {  super(time, zone); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "<s> public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null 'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; } /* if (endIndex < 0) { */ <mask> emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } } </s> java",
      "function range": "918,5-956,5",
      "output": [
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); return copy; } else { return createCopy(startIndex, endIndex); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); } copy.data.add(start); copy.data.add(end); return copy; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); copy.data.add(start); copy.data.add(end); return copy; } return createCopy(startIndex, endIndex); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); copy.data.add(start); copy.data.add(end); return copy; } return createCopy(startIndex, endIndex); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); copy.data.add(start); copy.data.add(end); return copy; } else { return createCopy(startIndex, endIndex); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); copy.data.add(start); copy.data.add(end); return copy; } else { return createCopy(startIndex, endIndex); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); copy.data.add(this.data.get(startIndex)); copy.data.add(this.data.get(endIndex)); return copy; } return createCopy(startIndex, endIndex); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException { if (start == null) { throw new IllegalArgumentException(\"Null'start' argument.\"); } if (end == null) { throw new IllegalArgumentException(\"Null 'end' argument.\"); } if (start.compareTo(end) > 0) { throw new IllegalArgumentException( \"Requires start on or before end.\"); } boolean emptyRange = false; int startIndex = getIndex(start); if (startIndex < 0) { startIndex = -(startIndex + 1); if (startIndex == this.data.size()) { emptyRange = true; } } int endIndex = getIndex(end); if (endIndex < 0) { endIndex = -(endIndex + 1); endIndex = endIndex - 1; }  if (endIndex == this.data.size()) { emptyRange = true; } if (emptyRange) { TimeSeries copy = (TimeSeries) super.clone(); copy.data = new java.util.ArrayList(); copy.data.add(start); copy.data.add(end); return copy; } else { return createCopy(startIndex, endIndex); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "<s> public String generateToolTipFragment(String toolTipText) { /* return \" title=\\\"\" + toolTipText */ <mask> + \"\\\" alt=\\\"\\\"\"; } </s> java",
      "function range": "64,5-67,5",
      "output": [
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment (String toolTipText) {  return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" title=\\\" \" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" < img src=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" alt=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" title=\\\"\"+ toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" < img src=\\\" \" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" < img src=\\\"\" + toolTipImage + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String generateToolTipFragment (String toolTipText) {  return \" < img src=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String generateToolTipFragment(String toolTipText) {  return \" < img src=\\\"\" + toolTipUrl + \"\\\" alt=\\\"\\\"\"; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "<s> public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); /* PathIterator iterator2 = p1.getPathIterator(null); */ <mask> double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } </s> java",
      "function range": "264,5-296,5",
      "output": [
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null || iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  PathIterator iterator2 = p2.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return false; } if (iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return (p2 == null); } if (iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return false; } PathIterator iterator2 = p2.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null || iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return (p2 == null); } if (iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return True; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return false; } if (iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return True; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return false; } if (iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule()!= p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null);  if (iterator1 == null) { return (p2 == null); } if (iterator2 == null) { return false; } double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone()!= iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1!= seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "<s> public MultiplePiePlot(CategoryDataset dataset) { super(); /* this.dataset = dataset; */ <mask> PiePlot piePlot = new PiePlot(null); this.pieChart = new JFreeChart(piePlot); this.pieChart.removeLegend(); this.dataExtractOrder = TableOrder.BY_COLUMN; this.pieChart.setBackgroundPaint(null); TextTitle seriesTitle = new TextTitle(\"Series Title\", new Font(\"SansSerif\", Font.BOLD, 12)); seriesTitle.setPosition(RectangleEdge.BOTTOM); this.pieChart.setTitle(seriesTitle); this.aggregatedItemsKey = \"Other\"; this.aggregatedItemsPaint = Color.lightGray; this.sectionPaints = new HashMap(); } </s> java",
      "function range": "143,5-158,5",
      "output": [
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot (CategoryDataset dataset) { super();  }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.pieChart = new JFreeChart(null); this.pieChart.removeLegend(); this.dataExtractOrder = TableOrder.BY_ROW; this.pieChart.setBackgroundPaint(null); }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.pieChart = null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.pieChart = new JFreeChart(null); }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.dataExtractOrder = TableOrder.BY_ROW; this.pieChart = null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.pieChart = new JFreeChart(null); this.pieChart.removeLegend(); this.dataExtractOrder = TableOrder.BY_ROW; }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.dataExtractOrder = TableOrder.BY_ROW; }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot(CategoryDataset dataset) { super();  this.dataExtractOrder = TableOrder.BY_ROW; this.pieChart = new JFreeChart(null); this.pieChart.setBackgroundPaint(null); }",
          "correctness": "wrong"
        },
        {
          "patch": "public MultiplePiePlot() { super();  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "<s> public Object clone() throws CloneNotSupportedException { /* Object clone = createCopy(0, getItemCount() - 1); */ <mask> return clone; } </s> java",
      "function range": "856,5-859,5",
      "output": [
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  Object clone = super. clone(); return clone; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  return super. clone(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  Object clone = super.clone(); return clone; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  super. clone ( ) ; return clone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  super. clone(); return clone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  clone = super. clone(); return clone; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  return super. clone ( ) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object clone() throws CloneNotSupportedException {  Object clone = super. clone(); return clone ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "<s> public ValueMarker(double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) { /* super(paint, stroke, paint, stroke, alpha); */ <mask> this.value = value; } </s> java",
      "function range": "93,5-97,5",
      "output": [
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.alpha = alpha; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.paint = paint; this.stroke = stroke; this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.alpha = alpha; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.paint = paint; this.stroke = stroke; this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.alpha = alpha; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.strokePaint = paint; this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.stroke = stroke; this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public ValueMarker (double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha) {  this.outlinePaint = outlinePaint; this.outlineStroke = outlineStroke; this.value = value; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "<s> public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound); /* int g = (int) ((value - this.lowerBound) / (this.upperBound */ <mask> - this.lowerBound) * 255.0); return new Color(g, g, g); } </s> java",
      "function range": "123,5-129,5",
      "output": [
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  (v - this.lowerBound) * 255.0)); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  ) * 255.0); int g = (int) ((value - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  v); int g = (int) ((value - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  g = (int) (v - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  ) * 255.0); int g = (int) ((v - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  * 255.0); int g = (int) ((value - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  * 255.0); g = (int) ((value - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  * 255.0); int g = (int) ((v - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  (v - this.lowerBound) * 255.0); return new Color(g, g, g); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Paint getPaint(double value) { double v = Math.max(value, this.lowerBound); v = Math.min(v, this.upperBound);  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "<s> private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); /* StringBuffer buff = new StringBuffer(); */ <mask> while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } } </s> java",
      "function range": "290,5-309,5",
      "output": [
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  buff = new StringBuffer(); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  StringBuffer buff = new StringBuffer(); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  if (iter.hasNext()) { buff.append(\", \"); } while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  if (iter.hasNext()) { buff.append(iter.next()); } while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  buff.append(iter.next()); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  while (iter.hasNext()) { buff.append(iter.next()); } buff.append(\" \"); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  buff.append(iter.next()); while (iter.hasNext()) { buff.append(\" \"); } buff.append(iter.next()); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  while (iter.hasNext()) { buff.append(iter.next()); } buff.append(\"\\n\"); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator();  buff.append(iter.next()); while (iter.hasNext()) { buff.append(\" \"); } buff.append(\" \"); while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "<s> protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); /* pos = findWrapPos(text, width, nextLineTabStop); */ <mask> if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } </s> java",
      "function range": "792,5-823,5",
      "output": [
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop + text.length()); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText (StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop + 1); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText (StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop + text.length()); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop + 1 ); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop - text.length()); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "timeout"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); pos = findWrapPos(text, width, nextLineTabStop); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  if (pos == -1) { sb.append(rtrim(text)); return sb; } pos = findWrapPos(text, width, nextLineTabStop); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();  pos = findWrapPos(text, width, nextLineTabStop + text.length() - 1 ); if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "<s> private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); } /* if (option.hasArg() && (option.getArgName() != null)) */ <mask> { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } } </s> java",
      "function range": "613,5-642,5",
      "output": [
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.hasArg()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } else { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.hasArg()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } else { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.getArg()!= null) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.getArg()!= null) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.hasArg()) { buff.append(\" <\").append(option.getArg()).append(\">\"); } else { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.hasArg()) { buff.append(\" <\").append(option.getArg()).append(\">\"); } else { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.getArg()!= null) { buff.append(\" <\").append(option.getArg()).append(\">\"); } else { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.getArg()!= null) { buff.append(\" <\").append(option.getArg()).append(\">\"); } else { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.hasArg()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } else { buff.append(\" <\").append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt()!= null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); }  if (option.hasArg()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } else { buff.append(\" <\").append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "<s> protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { /* throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\"); */ <mask> } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } </s> java",
      "function range": "809,5-852,5",
      "output": [
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\"); } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "timeout"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop - 1))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop - 1))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { sb.append(rtrim(text.substring(0, nextLineTabStop - 1))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { sb.append(rtrim(text.substring(0, nextLineTabStop - 1))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { sb.append(rtrim(text.substring(0, nextLineTabStop - 1))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "<s> protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { /* nextLineTabStop = width - 1; */ <mask> } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } </s> java",
      "function range": "809,5-851,5",
      "output": [
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(pos + nextLineTabStop - 1)); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(pos, nextLineTabStop + 1))); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(pos + 1)); sb.append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); } else { sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "timeout"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { sb.append(rtrim(text.substring(0, nextLineTabStop - 1))).append(defaultNewLine); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (text.length() > width) { sb.append(rtrim(text.substring(0, width))).append(defaultNewLine); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {  sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine); return sb; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (text.length() > width) { sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "<s> protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) { /* break; */ <mask> } cmd.addOption(opt); } } } </s> java",
      "function range": "252,5-296,5",
      "output": [
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } else { opt.addValueForProcessing(value); } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } else if (!(\"no\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value) || \"0\".equalsIgnoreCase(value))) { opt.addValueForProcessing(value); } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } else { if (opt.getValues() == null || opt.getValues().length == 0) { opt.addValueForProcessing(value); } } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } else if (!(\"no\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value) || \"0\".equalsIgnoreCase(value))) { break; } cmd.addOption(opt); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } else { opt.setValue(value); } cmd.addOption(opt); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {  } else { opt.setValue(value); } cmd.addOption(opt); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-942": {
      "loc": "937-942",
      "input": "<s> protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width; /* while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; } */ <mask> return pos == text.length() ? -1 : pos; } </s> java",
      "function range": "902,5-943,5",
      "output": [
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  while ((pos <= text.length()) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  while ((pos <= text.length()) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { ++pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  if (pos > startPos) { return pos; } pos = startPos + width; return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  char c; while ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { ++pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  char c; while ((c = text.charAt(pos))!='') { ++pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  char c; while ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  while ((pos <= text.length()) && ((c = text.charAt(pos)))!='') { ++pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  char c; while ((c = text.charAt(pos))!='') { --pos; } if (pos < startPos) { return pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  while ((pos <= text.length()) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { pos++; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos))!='') && (c!= '\\n') && (c!= '\\r')) { --pos; } if (pos > startPos) { return pos; } pos = startPos + width;  while ((pos <= text.length()) && ((c = text.charAt(pos))!='') && (c!= '\\r')) { --pos; } return pos == text.length()? -1 : pos; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "<s> @SuppressWarnings(\"unchecked\") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else { /* return null; */ <mask> } } </s> java",
      "function range": "62,5-105,5",
      "output": [
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  return null; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  return null; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  return (T) null; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  throw new ParseException(str, 0); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else { return null; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) createString(str); } else { return (T) createObject(str); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  return null; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"unchecked\") public static <T> T createValue (final String str, final Class<T> clazz) throws ParseException { if (PatternOptionBuilder.STRING_VALUE == clazz) { return (T) str; } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) { return (T) createObject(str); } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) { return (T) createNumber(str); } else if (PatternOptionBuilder.DATE_VALUE == clazz) { return (T) createDate(str); } else if (PatternOptionBuilder.CLASS_VALUE == clazz) { return (T) createClass(str); } else if (PatternOptionBuilder.FILE_VALUE == clazz) { return (T) createFile(str); } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) { return (T) openFile(str); } else if (PatternOptionBuilder.FILES_VALUE == clazz) { return (T) createFiles(str); } else if (PatternOptionBuilder.URL_VALUE == clazz) { return (T) createURL(str); } else {  return (T) createObject(str); } }",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "<s> private void removeUnreferencedFunctionArgs(Scope fnScope) { /* */ <mask> Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild()) != null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } } </s> java",
      "function range": "369,3-406,3",
      "output": [
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Set < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Collection < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Set < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null || referenced. isEmpty()) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Collection < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null || referenced. isEmpty()) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Set < Var > referenced = fnScope.getReferencedVars(); if (referenced == null) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Set < Var > referenced = fnScope.getReferencedVars(); if (referenced == null || referenced. isEmpty()) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Collection < Var > referenced = fnScope.getReferencedVars(); if (referenced == null || referenced. isEmpty()) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Collection < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null || referenced.isEmpty()) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Set < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null || referenced.isEmpty()) { return; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {  Set < Var > referenced = fnScope.getReferencedVariables(); if (referenced == null || referenced. isEmpty()) { return ; } Node function = fnScope.getRootNode(); Preconditions.checkState(function.isFunction()); if (NodeUtil.isGetOrSetKey(function.getParent())) { return; } Node argList = getFunctionArgList(function); boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function); if (!modifyCallers) { Node lastArg; while ((lastArg = argList.getLastChild())!= null) { Var var = fnScope.getVar(lastArg.getString()); if (!referenced.contains(var)) { argList.removeChild(lastArg); compiler.reportCodeChange(); } else { break; } } } else { callSiteOptimizer.optimize(fnScope, referenced); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "<s> private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } /* */ <mask> String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; } </s> java",
      "function range": "155,5-253,5",
      "output": [
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == null) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == name) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  String propName = parent.getFirstChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (parent.isName()) { String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  String propName = parent.getFirstChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  String propName = parent.getFirstChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (parent.isAssign()) { String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == name) { return false; } if (parent.getLastChild() == gramps) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == null) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == null) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == name) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; Set<String> validProperties = Sets.newHashSet(); for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; }  if (parent.getLastChild() == null) { return false; } String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child!= null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } validProperties.add(child.getString()); Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret; }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "<s> static boolean mayBeString(Node n, boolean recurse) { if (recurse) { /* return allResultsMatch(n, MAY_BE_STRING_PREDICATE); */ <mask> } else { return mayBeStringHelper(n); } } </s> java",
      "function range": "1415,3-1421,3",
      "output": [
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n); } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return! mayBeStringHelper(n); } else { return mayBeStringHelper(n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n); } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean mayBeString (Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n); } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n ) ; } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return allResultsMatch(n, MAY_BE_STRING_MATCHER); } else { return mayBeStringHelper(n); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return allResultsMatch(n, MAY_BE_STRING_MATCHER); } else { return mayBeStringHelper(n); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n); } else if ( mayBeStringHelper(n ) ) { return true; } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n); } else if ( mayBeStringHelper(n) ) { return true; } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean mayBeString(Node n, boolean recurse) { if (recurse) {  return mayBeStringHelper(n); } else if ( mayBeStringHelper(n ) ) { return true ; } else { return mayBeStringHelper(n); } }",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "<s> private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\"); /* } else if (n.getJSType() != null && parent.isAssign()) { return; */ <mask> } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); } </s> java",
      "function range": "1303,3-1321,3",
      "output": [
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "plausible"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (n.getJSType()!= null && parent.isAssign()) { return; } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "plausible"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (n.getJSType()!= null && parent.isAssign()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"assign\"); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"assign\"); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess (childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "plausible"
        },
        {
          "patch": "private void visitGetProp(NodeTraversal t, Node n, Node parent) { Node property = n.getLastChild(); Node objNode = n.getFirstChild(); JSType childType = getJSType(objNode); if (childType.isDict()) { report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");  } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } else if (validator.expectNotNullOrUndefined(t, n, childType, \"No properties on this expression\", getNativeType(OBJECT_TYPE))) { checkPropertyAccess(childType, property.getString(), t, n); } ensureTyped(t, n); }",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768": {
      "loc": "767-768",
      "input": "<s> private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext() != null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa != null) { for (Node finallyNode : cfa.finallyMap.get(parent)) { /* cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); */ <mask> } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling != null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling != null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } } </s> java",
      "function range": "692,3-789,3",
      "output": [
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } } return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  return finallyNode; } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } break; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  return finallyNode; } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  return finallyNode; } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } break; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static Node computeFollowNode( Node fromNode, Node node, ControlFlowAnalysis cfa) { Node parent = node.getParent(); if (parent == null || parent.isFunction() || (cfa!= null && node == cfa.root)) { return null; } switch (parent.getType()) { case Token.IF: return computeFollowNode(fromNode, parent, cfa); case Token.CASE: case Token.DEFAULT_CASE: if (parent.getNext()!= null) { if (parent.getNext().isCase()) { return parent.getNext().getFirstChild().getNext(); } else if (parent.getNext().isDefaultCase()) { return parent.getNext().getFirstChild(); } else { Preconditions.checkState(false, \"Not reachable\"); } } else { return computeFollowNode(fromNode, parent, cfa); } break; case Token.FOR: if (NodeUtil.isForIn(parent)) { return parent; } else { return parent.getFirstChild().getNext().getNext(); } case Token.WHILE: case Token.DO: return parent; case Token.TRY: if (parent.getFirstChild() == node) { if (NodeUtil.hasFinally(parent)) { return computeFallThrough(parent.getLastChild()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (NodeUtil.getCatchBlock(parent) == node){ if (NodeUtil.hasFinally(parent)) { return computeFallThrough(node.getNext()); } else { return computeFollowNode(fromNode, parent, cfa); } } else if (parent.getLastChild() == node){ if (cfa!= null) { for (Node finallyNode : cfa.finallyMap.get(parent)) {  } } return computeFollowNode(fromNode, parent, cfa); } } Node nextSibling = node.getNext(); while (nextSibling!= null && nextSibling.isFunction()) { nextSibling = nextSibling.getNext(); } if (nextSibling!= null) { return computeFallThrough(nextSibling); } else { return computeFollowNode(fromNode, parent, cfa); } case Token.ELSE: return parent; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "<s> @Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; } /* */ <mask> for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; } </s> java",
      "function range": "83,7-109,7",
      "output": [
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (n.getFirstChild() == null) { return false; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (!ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } if (ControlFlowGraph.isExitingNewCfgNode(n)) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n.getFirstChild())) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } if (ControlFlowGraph.isExitingNewCfgNode(n)) { return false; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n.getFirstChild()) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } if (ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean apply(Node n) { if (n == null) { return false; } if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) { return true; } if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) { return true; }  if (!ControlFlowGraph.isEnteringNewCfgNode(n)) { return true; } for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) { return true; } } return false; }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "<s> private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext(); /* if (value != null) { */ <mask> Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } } return n; } </s> java",
      "function range": "208,3-230,3",
      "output": [
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  if (value.hasChildren()) { value = value.getNext(); } Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  if (value.isFunction()) { value = tryFoldSimpleFunctionCall(value); } Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  if (value.isFunction()) { value = tryFoldSimpleFunctionCall(value); } if (value!= null) { Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } } return n; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  value = value.getNext(); if (value == null) { value = IR.nullNode(); } Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  if (value.isFunction()) { value = tryFoldSimpleFunctionCall(value); } Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } else { return n; } }",
          "correctness": "wrong"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  if (value.isFunction()) { value = tryFoldSimpleFunctionCall(value); } Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  if (value.isFunction()) { value = tryFoldSimpleFunctionCall(value); } if (value!= null) { Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } } return n ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldSimpleFunctionCall(Node n) { Preconditions.checkState(n.isCall()); Node callTarget = n.getFirstChild(); if (callTarget!= null && callTarget.isName() && callTarget.getString().equals(\"String\")) { Node value = callTarget.getNext();  value = value.getNext(); if (value == null) { value = IR.nullNode(); } Node addition = IR.add( IR.string(\"\").srcref(callTarget), value.detachFromParent()); n.getParent().replaceChild(n, addition); reportCodeChange(); return addition; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "<s> @Override public void matchConstraint(ObjectType constraintObj) { /* */ <mask> if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE) .getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } } </s> java",
      "function range": "554,3-580,3",
      "output": [
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  super. matchConstraint(constraintObj); if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  super. matchConstraint (constraintObj); if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  if (constraintObj == null) { return; } if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  if (constraintObj == null) { return ; } if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  super. matchConstraint(constraintObj); if (constraintObj == null) { return; } if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  super. matchConstraint(constraintObj); if (constraintObj == null) { return ; } if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  super. matchConstraint(constraintObj); if (constraintObj.isFunctionType()) { return; } if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  super. matchConstraint(constraintObj); if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void matchConstraint(ObjectType constraintObj) {  if (constraintObj.isRecordType()) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!hasProperty(prop)) { typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType); } defineInferredProperty(prop, typeToInfer, null); } } } else { super. matchConstraint(constraintObj); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136": {
      "loc": "1121-1136",
      "input": "<s> private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined()); /* if (constraintObj != null && constraintObj.isRecordType()) { ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined()); if (objType != null) { for (String prop : constraintObj.getOwnPropertyNames()) { JSType propType = constraintObj.getPropertyType(prop); if (!objType.isPropertyTypeDeclared(prop)) { JSType typeToInfer = propType; if (!objType.hasProperty(prop)) { typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType); } objType.defineInferredProperty(prop, typeToInfer, null); } } } */ <mask> } } </s> java",
      "function range": "1113,3-1137,3",
      "output": [
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inferPropertyTypesToMatchConstraint( JSType type, JSType constraint) { if (type == null || constraint == null) { return; } ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());  }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "<s> private boolean canInline( Reference declaration, Reference initialization, Reference reference) { if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) { return false; } if (declaration != initialization && !initialization.getGrandparent().isExprResult()) { return false; } if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) { return false; } Node value = initialization.getAssignedValue(); Preconditions.checkState(value != null); if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) { return false; } if (value.isFunction()) { Node callNode = reference.getParent(); if (reference.getParent().isCall()) { CodingConvention convention = compiler.getCodingConvention(); SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode); if (relationship != null) { return false; } /* } */ <mask> } return canMoveAggressively(value) || canMoveModerately(initialization, reference); } </s> java",
      "function range": "519,5-580,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "<s> void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); /* if (x < 0 && prev == '-') { */ <mask> add(\" \"); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } } </s> java",
      "function range": "240,3-267,3",
      "output": [
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (x < 0) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (negativeZero) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (x == 0 &&!negativeZero) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (x == 0 &&!negativeZero) { add(\"0\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (x == 0) { add(\"0\"); } else if (x == 0) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (isNegativeZero(x)) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (x == 0) { add(\"0\"); } else if (x == 0) { add(\"0\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (negativeZero) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (x < 0) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "void addNumber(double x) { char prev = getLastChar(); boolean negativeZero = isNegativeZero(x);  if (isNegativeZero(x)) { add(\"-\"); } else { add(\" \"); } if ((long) x == x &&!negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + \"E\" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "<s> static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } } /* return len > 0; */ <mask> } </s> java",
      "function range": "737,3-746,3",
      "output": [
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return len == 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return true ; }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return len == 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return (len == 0); }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return len > 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  return (len == 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean isSimpleNumber(String s) { int len = s.length(); for (int index = 0; index < len; index++) { char c = s.charAt(index); if (c < '0' || c > '9') { return false; } }  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "<s> private static boolean isReduceableFunctionExpression(Node n) { /* return NodeUtil.isFunctionExpression(n); */ <mask> } </s> java",
      "function range": "116,3-118,3",
      "output": [
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return isReduceableFunctionExpression (n. getFirstChild ( ) ) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return n. isFunction ( ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return n instanceof FunctionNode; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return NodeUtil.isReduceableFunctionExpression (n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression(Node n) {  return NodeUtil.isReduceableFunctionExpression(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return NodeUtil.isFunctionDeclaration(n); }",
          "correctness": "wrong"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return isReduceableFunctionExpression (n. getFirstChild ( ) ); }",
          "correctness": "wrong"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return NodeUtil.isReduceableFunctionExpression(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression(Node n) {  return NodeUtil.isReduceableFunctionExpression (n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static boolean isReduceableFunctionExpression (Node n) {  return isReduceableFunctionExpression (n. getFirstChild ( )); }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "<s> private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); /* if (target != null) { */ <mask> className = target.getString(); } } } } return className; } </s> java",
      "function range": "188,3-204,3",
      "output": [
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.isString()) { className = target.getString(); } } } } return className; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.STRING) { className = target.getString(); } } } } return className; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.NAME) { className = target.getString(); } } } } return className; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.isString()) { className = target.getString(); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.NAME) { className = target.getString(); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.STRING) { className = target.getString(); } } } } return className; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.NAME) { className = target.getString(); } } } } return className; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getNodeType() == Token.NAME) { className = target.getString(); } } } } return className; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.STRING) { className = target.getString(); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName){ String className = null; if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee!= null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext();  if (target.getType() == Token.NAME) { className = target.getString(); } } } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "<s> public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); } /* if (options.checkGlobalThisLevel.isOn()) { */ <mask> options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); } if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) { options.setWarningLevel( DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR); } List<WarningsGuard> guards = Lists.newArrayList(); guards.add( new SuppressDocWarningsGuard( getDiagnosticGroups().getRegisteredGroups())); guards.add(options.getWarningsGuard()); ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards); if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) { composedGuards.addGuard(new DiagnosticGroupWarningsGuard( DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF)); } this.warningsGuard = composedGuards; } </s> java",
      "function range": "226,3-288,3",
      "output": [
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, CheckLevel.ON); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, CheckLevel.ON); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, CheckLevel.ON); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void initOptions(CompilerOptions options) { this.options = options; if (errorManager == null) { if (outStream == null) { setErrorManager( new LoggerErrorManager(createMessageFormatter(), logger)); } else { PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream); printer.setSummaryDetailLevel(options.summaryDetailLevel); setErrorManager(printer); } } if (options.enables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = true; } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) { options.checkTypes = false; } else if (!options.checkTypes) { options.setWarningLevel( DiagnosticGroup.forType( RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF); }  options.setWarningLevel( DiagnosticGroups.GLOBAL_THIS, CheckLevel.ON); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "<s> private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) /* && 0 <= charno && charno < sourceExcerpt.length()) { */ <mask> for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); } </s> java",
      "function range": "66,3-111,3",
      "output": [
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  if (charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  if (charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  if (charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\" ^\\n\"); } } return b.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  if (charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\" ^\\n\"); } } return b.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  if (charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName!= null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(\": \"); } b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(\" - \"); b.append(error.description); b.append('\\n'); if (sourceExcerpt!= null) { b.append(sourceExcerpt); b.append('\\n'); int charno = error.getCharno(); if (excerpt.equals(LINE)  if (charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append(\"^\\n\"); } } return b.toString(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "<s> static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { /* case '\\0': sb.append(\"\\\\0\"); break; */ <mask> case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } </s> java",
      "function range": "1005,3-1075,3",
      "output": [
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case 'a': sb.append(\"\\\\a\"); break; case 'b': sb.append(\"\\\\b\"); break; case 'c': sb.append(\"\\\\c\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\t': sb.append(\"\\\\t\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case 'n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { sb.appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\t': sb.append(\"\\\\t\"); break; case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) {  case '\\b': sb.append(\"\\\\b\"); break; case '\\f': sb.append(\"\\\\f\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "<s> private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP /* ) { */ <mask> boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; } </s> java",
      "function range": "314,5-334,5",
      "output": [
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  ) { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild().getType() == Token.STRING && n.getString().equals(\"prototype\")) { return true; } boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild().getType() == Token.STRING && n.getFirstChild().getString().equals(\"prototype\")) { return true; } boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  ) { if (n.getFirstChild().getType() == Token.STRING && n.getString().equals(\"prototype\")) { return true; } boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals(\"prototype\")) { return true; } boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild().getType() == Token.STRING && n.getString().equals(\"prototype\")) { return true; } else { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild()!= null && n.getFirstChild().getFirstChild()!= null) { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  ) { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild()!= null && n.getFirstChild().getFirstChild()!= null) { boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean isPrototypePropertyAssign(Node assign) { Node n = assign.getFirstChild(); if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP  if (n.getFirstChild().getType() == Token.STRING && n.getString().equals(\"prototype\")) { return true; } boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP; if (isChainedProperty) { Node child = n.getFirstChild().getFirstChild().getNext(); if (child.getType() == Token.STRING && child.getString().equals(\"prototype\")) { return true; } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "<s> private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType != null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters != null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter != null) { defineSlot(astParameter, functionNode, /* jsDocParameter.getJSType(), true); */ <mask> jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } } </s> java",
      "function range": "1734,5-1753,5",
      "output": [
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (body!= null) { defineSlot(body, functionNode, null, true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (body!= null) { defineSlot(astParameter, functionNode, body.getJSType(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (body!= null) { defineSlot(body, functionNode, null, true); body = body.getNext(); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (astParameter == body) { defineSlot(astParameter, functionNode, null, true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (astParameter == body && jsDocParameter!= null) { jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (body!= null) { defineSlot(astParameter, functionNode, body.getFirstChild(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (body!= null) { defineSlot(astParameter, functionNode, body.getJSType(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (astParameter == body) { defineSlot(astParameter, functionNode, null, true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void declareArguments(Node functionNode) { Node astParameters = functionNode.getFirstChild().getNext(); Node body = astParameters.getNext(); FunctionType functionType = (FunctionType) functionNode.getJSType(); if (functionType!= null) { Node jsDocParameters = functionType.getParametersNode(); if (jsDocParameters!= null) { Node jsDocParameter = jsDocParameters.getFirstChild(); for (Node astParameter : astParameters.children()) { if (jsDocParameter!= null) { defineSlot(astParameter, functionNode,  jsDocParameter = jsDocParameter.getNext(); } else if (body!= null) { defineSlot(astParameter, functionNode, body.getJSType(), true); jsDocParameter = jsDocParameter.getNext(); } else { defineSlot(astParameter, functionNode, null, true); } } } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_73_/src/com/google/javascript/jscomp/CodeGenerator.java_1045-1046": {
      "loc": "1045-1046",
      "input": "<s> static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { /* if (c > 0x1f && c <= 0x7f) { */ <mask> sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } </s> java",
      "function range": "988,3-1058,3",
      "output": [
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\0': sb.append(\"\\\\0\"); break; case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = \"/script\"; final String START_COMMENT = \"!--\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder!= null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else {  sb.append(c); } else { sb.append(c); } } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "<s> public final boolean isEmptyType() { /* return isNoType() || isNoObjectType() || isNoResolvedType(); */ <mask> } </s> java",
      "function range": "162,3-164,3",
      "output": [
        {
          "patch": "public final boolean isEmptyType() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final boolean isEmptyType() {  return false ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public final boolean isEmptyType() {  return super. isEmptyType(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final boolean isEmptyType() {  return true ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public final boolean isEmptyType() {  return isNoType(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public final boolean isEmptyType() {  return type == null ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final boolean isEmptyType() {  return getType ( ) == null ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final boolean isEmptyType() {  return isEmptyTypeImpl ( ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final boolean isEmptyType() {  return this == EMPTY_TYPE ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final boolean isEmptyType() {  return isNoType ( ) ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "<s> @Override public int parseArguments(Parameters params) throws CmdLineException { /* String param = params.getParameter(0); */ <mask> if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } } </s> java",
      "function range": "332,7-351,7",
      "output": [
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int parseArguments (Parameters params) throws CmdLineException {  String param = params.getParameter(1); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  Setter setter = new Setter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); Setter setter = new Setter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(\"param\"); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); Setter setter = params.getSetter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); ParameterSetter setter = params.getSetter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); Setter setter = new Setter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1 } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); ParameterSetter setter = params.getSetter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1 } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int parseArguments(Parameters params) throws CmdLineException {  String param = params.getParameter(1); Setter setter = params.getSetter(); if (param == null) { setter.addValue(true); return 0; } else { String lowerParam = param.toLowerCase(); if (TRUES.contains(lowerParam)) { setter.addValue(true); } else if (FALSES.contains(lowerParam)) { setter.addValue(false); } else { setter.addValue(true); return 0; } return 1 } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "<s> static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW: /* return true; */ <mask> case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } } </s> java",
      "function range": "2424,3-2489,3",
      "output": [
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  return isImmutableValue(value) || locals.apply(value); case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.VARKEY: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.STRING: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.VARDEF: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.VARKEY: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node \" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  return isImmutableValue(value) || locals.apply(value); case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        },
        {
          "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW:  case Token.VAR: return isImmutableValue(value) || locals.apply(value); case Token.STRING: return isImmutableValue(value) || locals.apply(value); case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( \"Unexpected expression node\" + value + \"\\n parent:\" + value.getParent()); } }",
          "correctness": "plausible"
        }
      ]
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "<s> void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition != null && explicitNode != null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else { /* int indexOfDot = namespace.indexOf('.'); */ <mask> if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule) .addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode != null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } } </s> java",
      "function range": "747,5-809,5",
      "output": [
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length()) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void replace() { if (firstNode == null) { replacementNode = candidateDefinition; return; } if (candidateDefinition!= null && explicitNode!= null) { explicitNode.detachFromParent(); compiler.reportCodeChange(); replacementNode = candidateDefinition; if (NodeUtil.isExpressionNode(candidateDefinition)) { candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true); Node assignNode = candidateDefinition.getFirstChild(); Node nameNode = assignNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { Node valueNode = nameNode.getNext(); assignNode.removeChild(nameNode); assignNode.removeChild(valueNode); nameNode.addChildToFront(valueNode); Node varNode = new Node(Token.VAR, nameNode); varNode.copyInformationFrom(candidateDefinition); candidateDefinition.getParent().replaceChild( candidateDefinition, varNode); nameNode.setJSDocInfo(assignNode.getJSDocInfo()); compiler.reportCodeChange(); replacementNode = varNode; } } } else { replacementNode = createDeclarationNode(); if (firstModule == minimumModule) { firstNode.getParent().addChildBefore(replacementNode, firstNode); } else {  if (indexOfDot == 0) { compiler.getNodeForCodeInsertion(minimumModule).addChildToFront(replacementNode); } else if (indexOfDot == namespace.length() - 1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else if (indexOfDot == -1) { compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode); } else { ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot)); Preconditions.checkNotNull(parentName); Preconditions.checkNotNull(parentName.replacementNode); parentName.replacementNode.getParent().addChildAfter( replacementNode, parentName.replacementNode); } } if (explicitNode!= null) { explicitNode.detachFromParent(); } compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "<s> private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH: /* result = lvalInt >>> rvalInt; */ <mask> break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; } </s> java",
      "function range": "652,3-713,3",
      "output": [
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SUB: result = lvalInt -= rvalInt; break; case Token.MUL: result = lvalInt *= rvalInt; break; case Token.DIV: result = lvalInt /= rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SUB: result = lvalInt -= rvalInt; break; case Token.MUL: result = lvalInt *= rvalInt; break; case Token.DIV: result = lvalInt /= rvalInt; break; case Token.MOD: result = lvalInt % rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHUL: result = lvalInt >>> rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt & rvalInt; break; case Token.SHR: result = lvalInt ^ rvalInt; break; case Token.SHR: result = lvalInt | rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHUL: result = lvalInt >>> rvalInt; break; case Token.SHR: result = lvalInt << rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHUL: result = lvalInt *= rvalInt; break; case Token.SHR: result = lvalInt /= rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHUL: result = lvalInt >>> rvalInt; break; case Token.RUL: result = lvalInt << rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHUL: result = lvalInt >>> rvalInt; break; case Token.SHR: result = lvalInt & rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } int lvalInt = (int) lval; if (lvalInt!= lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt!= rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:  break; case Token.SHL: result = lvalInt << rvalInt; break; case Token.SHR: result = lvalInt >> rvalInt; break; case Token.SHUL: result = lvalInt *= rvalInt; break; case Token.SHNE: result = lvalInt /= rvalInt; break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } return n; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "<s> JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build(); /* if (result != null) { */ <mask> return result; } else if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.NO_OBJECT_TYPE); } else { return getNativeType(JSTypeNative.NO_TYPE); } } </s> java",
      "function range": "273,3-298,3",
      "output": [
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { result = getNativeType(JSTypeNative.OBJECT_TYPE); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && this.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { result = getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && this.isObject()) { result = getNativeType(JSTypeNative.OBJECT_TYPE); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { result = getNativeType(JSTypeNative.NO_OBJECT_TYPE); } else { result = getNativeType(JSTypeNative.NO_TYPE); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && this.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else { return result; } }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { result = getNativeType(JSTypeNative.OBJECT_TYPE); } else { result = getNativeType(JSTypeNative.TYPE); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && this.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else { return result; } }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && this.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "JSType meet(JSType that) { UnionTypeBuilder builder = new UnionTypeBuilder(registry); for (JSType alternate : alternates) { if (alternate.isSubtype(that)) { builder.addAlternate(alternate); } } if (that instanceof UnionType) { for (JSType otherAlternate : ((UnionType) that).alternates) { if (otherAlternate.isSubtype(this)) { builder.addAlternate(otherAlternate); } } } else if (that.isSubtype(this)) { builder.addAlternate(that); } JSType result = builder.build();  if (this.isObject() && that.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else if (that.isObject() && this.isObject()) { return getNativeType(JSTypeNative.OBJECT_TYPE); } else { return result; } }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "<s> private Node parseContextTypeExpression(JsDocToken token) { /* return parseTypeName(token); */ <mask> } </s> java",
      "function range": "1907,3-1909,3",
      "output": [
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parseTypeExpression ( token ) ; }",
          "correctness": "plausible"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parser. parseTypeExpression ( token ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parseTypeExpression(token ) ; }",
          "correctness": "plausible"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parseTypeExpression(token); }",
          "correctness": "plausible"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parseContextTypeExpressionHelper ( token ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parseTypeName(token); }",
          "correctness": "wrong"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) {  return parseTypeName(token.getParentNode()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Node parseContextTypeExpression(JsDocToken token) { return parseTypeName(token); }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "<s> @Override protected JSType caseTopType(JSType topType) { /* return topType; */ <mask> } </s> java",
      "function range": "52,9-55,9",
      "output": [
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return super. caseTopType(topType); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return super. caseTopType (topType); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return null ; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return this ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return super. caseTopType ( topType); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return super. caseTopType(topType ); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return super. caseTopType(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JSType caseTopType(JSType topType) {  return JSType. UNKNOWN ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "<s> private void processRequireCall(NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null || !provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg); /* if (provided != null) { */ <mask> parent.detachFromParent(); compiler.reportCodeChange(); } } } </s> java",
      "function range": "295,3-334,3",
      "output": [
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } if (parent!= null) { parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null &&!moduleGraph.dependsOn(module, provided.explicitModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } if (parent!= null) { parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null &&!moduleGraph.dependsOn(providedModule, t.getModule())) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), t.getSourceName())); } parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  if (moduleGraph!= null &&!moduleGraph.dependsOn(module, provided.explicitModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } if (parent!= null) { parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void processRequireCall (NodeTraversal t, Node n, Node parent) { Node left = n.getFirstChild(); Node arg = left.getNext(); if (verifyLastArgumentIsString(t, left, arg)) { String ns = arg.getString(); ProvidedName provided = providedNames.get(ns); if (provided == null ||!provided.isExplicitlyProvided()) { unrecognizedRequires.add( new UnrecognizedRequire(n, ns, t.getSourceName())); } else { JSModule providedModule = provided.explicitModule; Preconditions.checkNotNull(providedModule); JSModule module = t.getModule(); if (moduleGraph!= null && module!= providedModule &&!moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);  parent.detachFromParent(); compiler.reportCodeChange(); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "<s> private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns != null) { if (parent.isFor() && !NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext() != n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } /* } else { */ <mask> recordDepScope(recordNode, ns); } } } </s> java",
      "function range": "558,5-588,5",
      "output": [
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } } else { recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  recordDepScope(recordNode, ns); } } else { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  recordDepScope(recordNode, ns); } } else { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); } } else { recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  recordDepScope(recordNode, ns); } } else { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { recordDepScope(recordNode, ns); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(recordNode, ns); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) { Node nameNode = n.getFirstChild(); Node parent = n.getParent(); NameInformation ns = createNameInformation(t, nameNode); if (ns!= null) { if (parent.isFor() &&!NodeUtil.isForIn(parent)) { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } else { recordDepScope(nameNode, ns); }  recordDepScope(recordNode, ns); } /* } else { if (parent.getFirstChild().getNext()!= n) { recordDepScope(recordNode, ns); } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "<s> private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child != null; child = child.getNext()) { /* */ <mask> String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()), n.toString(), \"\")); } } } } </s> java",
      "function range": "490,5-513,5",
      "output": [
        {
          "patch": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {  if (child.isString()) { String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" : type.toString()), n.toString(), \"\")); } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {  if (child.isName()) { String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" : type.toString()), n.toString(), \"\")); } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {  if (child.getNodeType() == Token.NAME) { String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" : type.toString()), n.toString(), \"\")); } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {  child = child.getNextSibling(); if (child == null) { continue; } String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" : type.toString()), n.toString(), \"\")); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {  if (child.isObjectLit()) { handleObjectLit(t, child); } else { String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" : type.toString()), n.toString(), \"\")); } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleObjectLit(NodeTraversal t, Node n) { for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {  if (child.isString()) { String name = child.getString(); T type = typeSystem.getType(getScope(), n, name); Property prop = getProperty(name); if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) { if (propertiesToErrorFor.containsKey(name)) { compiler.report(JSError.make( t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null? \"null\" : type.toString()), n.toString(), \"\")); } propertiesToErrorFor.put(name, prop); } } else { processProperty(t, child, null, null); } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "<s> boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) { if (block.isFunction) { /* break; */ <mask> } else if (block.isLoop) { return false; } } return true; } </s> java",
      "function range": "421,5-438,5",
      "output": [
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isVariable) { return false; } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isAssignment) { return false; } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isClass) { return false; } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isVar) { return false; } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "boolean isAssignedOnceInLifetime() { Reference ref = getOneAndOnlyAssignment(); if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block!= null; block = block.getParent()) { if (block.isFunction) {  } else if (block.isAssignment) { return false; } else if (block.isLoop) { return false; } } return true; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "<s> private void handleBlockComment(Comment comment) { /* if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) { */ <mask> errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } } </s> java",
      "function range": "251,3-258,3",
      "output": [
        {
          "patch": "private void handleBlockComment(Comment comment) {  if (comment.getValue().indexOf(\"\\n * @\")!= -1) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  if (errorReporter!= null) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  if (comment.getValue().indexOf(\"/* @\")!= -1) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  String sourceName = comment.getValue(); errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  if (comment.getValue().indexOf(\"\\n * @\") == -1) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  if (comment.getValue().indexOf(\"/* @\") == -1) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  String sourceName = comment.getValue().substring(0, comment.getValue().indexOf(\"/* @\")); errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  if (comment.getValue().indexOf(\"/@\")!= -1) { errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void handleBlockComment(Comment comment) {  errorReporter.warning( SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), \"\", 0); }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "<s> private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType(); /* if (fnType != null) { */ <mask> visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } } else { report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n); } } </s> java",
      "function range": "1656,3-1671,3",
      "output": [
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  report(t, n, NOT_A_CONSTRUCTOR); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  ensureTyped(t, n, fnType); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  report(t, n, NOT_A_CONSTRUCTOR); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType. getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n, fnType); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  report(t, n, NOT_A_CONSTRUCTOR); visitParameterList(t, n, fnType); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  if (fnType.hasInstanceType()) { report(t, n, NOT_A_CONSTRUCTOR); } visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  if (fnType.hasInstanceType()) { report(t, n, NOT_A_CONSTRUCTOR); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } } else { report(t, n, NOT_A_CONSTRUCTOR); ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew(NodeTraversal t, Node n) { Node constructor = n.getFirstChild(); JSType type = getJSType(constructor).restrictByNotNullOrUndefined(); if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) { FunctionType fnType = type.toMaybeFunctionType();  report(t, n, NOT_A_CONSTRUCTOR); visitParameterList(t, n, fnType); ensureTyped(t, n, fnType.getInstanceType()); } else { ensureTyped(t, n); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void visitNew() { }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "<s> private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild(); /* */ <mask> if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } } </s> java",
      "function range": "158,5-177,5",
      "output": [
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first == null) { return; } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isCall()) { annotateCalls(first); } else if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isName() && \"call\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_CALL, true); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first == null) { n.putBooleanProp(Node.FREE_CALL, true); } else if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isName()) { first.putBooleanProp(Node.DIRECT_CALL, true); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isCall()) { annotateCalls(first); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isName() && \"call\".equals(first.getString())) { n.putBooleanProp(Node.DIRECT_CALL, true); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first == null) { n.putBooleanProp(Node.FREE_CALL, true); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isFunction()) { n.putBooleanProp(Node.FREE_CALL, true); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void annotateCalls(Node n) { Preconditions.checkState(n.isCall()); Node first = n.getFirstChild();  if (first.isName() && \"call\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_CALL, true); } if (!NodeUtil.isGet(first)) { n.putBooleanProp(Node.FREE_CALL, true); } if (first.isName() && \"eval\".equals(first.getString())) { first.putBooleanProp(Node.DIRECT_EVAL, true); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "<s> private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; } /* if (name.globalSets == 1 && name.localSets == 0 && */ <mask> name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) { workList.addAll(name.props); } } } </s> java",
      "function range": "161,3-197,3",
      "output": [
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if (name.type == Name.Type.FUNCTION && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if (name.type == Name.Type.OBJECTLIT && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if (name.globalSets == 0 && name.localSets == 1 && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if ((name.type == Name.Type.FUNCTION || name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if (name.type == Name.Type.FUNCTION && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if (name.type == Name.Type.OBJECTLIT && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } else { workList.add(name); } } }",
          "correctness": "timeout"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } else { workList.add(name); } } }",
          "correctness": "timeout"
        },
        {
          "patch": "private void inlineAliases(GlobalNamespace namespace) { Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.type == Name.Type.GET || name.type == Name.Type.SET) { continue; }  if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props!= null) { workList.addAll(name.props); } } }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "<s> private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine(); /* return result; */ <mask> } </s> java",
      "function range": "2399,3-2402,3",
      "output": [
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return null ; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return \" \" + result; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return result. trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return \" \" + result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "private String getRemainingJSDocLine() { String result = stream.getRemainingJSDocLine();  return result + \" }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "<s> public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE: /* return new TypePair(null, null); */ <mask> case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); } </s> java",
      "function range": "696,3-715,3",
      "output": [
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(null, this); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(this, that); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(null, that); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(that, this); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(this, null); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(null, this); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(this, that); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(this, null); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(null, that); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public TypePair getTypesUnderInequality(JSType that) { if (that instanceof UnionType) { TypePair p = that.getTypesUnderInequality(this); return new TypePair(p.typeB, p.typeA); } switch (this.testForEquality(that)) { case TRUE:  return new TypePair(that, this); case FALSE: case UNKNOWN: return new TypePair(this, that); } throw new IllegalStateException(); }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1466": {
      "loc": "1451-1466",
      "input": "<s> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; } /* attachLiteralTypes(n); switch (n.getType()) { case Token.FUNCTION: if (parent.getType() == Token.NAME) { return; } defineDeclaredFunction(n, parent); break; case Token.CATCH: defineCatch(n, parent); break; case Token.VAR: defineVar(n, parent); break; } */ <mask> } </s> java",
      "function range": "1443,5-1466,5",
      "output": [
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  super.visit(t, n, parent); }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  if (n.getType() == Token.FUNCTION && parent == scope.getRootNode()) { handleFunctionInputs(parent); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  if (n == scope.getRootNode()) { handleFunctionInputs(parent); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  super.visit(t, n, parent); if (n == scope.getRootNode()) { handleFunctionInputs(parent); } }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  if (n.getType() == Token.FUNCTION && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  super.visit(t, n, parent); if (n == scope.getRootNode()) { handleFunctionInputs(parent); return; } }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  super.visit(t, n, parent); if (n == scope.getRootNode()) { return; } }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  if (n.getType() == Token.VAR && parent == scope.getRootNode()) { handleVarInputs(parent); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n == scope.getRootNode()) return; if (n.getType() == Token.LP && parent == scope.getRootNode()) { handleFunctionInputs(parent); return; }  super.visit(t, n, parent); if (n.getType() == Token.FUNCTION) { handleFunctionInputs(n); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "<s> @Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope); /* typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); */ <mask> boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface != iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes != null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); } </s> java",
      "function range": "861,3-892,3",
      "output": [
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface!= iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes!= null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  if (typeOfThis!= null) { typeOfThis = (ObjectType) typeOfThis.resolve(t, scope); } boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface!= iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes!= null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); returnType = (ObjectType) safeResolve(typeReturnType, t, scope); boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface!= iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes!= null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (FunctionType) safeResolve(typeOfThis, t, scope); typeOfThis = (FunctionType) safeResolve(typeOfThis, t, scope); boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface!= iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes!= null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); return super.resolveInternal(t, scope); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); returnType = (ObjectType) safeResolve(typeReturnType, t, scope); returnType = (ObjectType) safeResolve(typeReturnType, t, scope); boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface!= iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes!= null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  return super.resolveInternal(t, scope); }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); returnType = (ObjectType) safeResolve(typeReturnType, t, scope); returnType = (ObjectType) safeResolve(typeType, t, scope); boolean changed = false; ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder(); for (ObjectType iface : implementedInterfaces) { ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope); resolvedInterfaces.add(resolvedIface); changed |= (resolvedIface!= iface); } if (changed) { implementedInterfaces = resolvedInterfaces.build(); } if (subTypes!= null) { for (int i = 0; i < subTypes.size(); i++) { subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope)); } } return super.resolveInternal(t, scope); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  super.resolveInternal(t, scope); return this; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); call = (ArrowType) safeResolve(call, t, scope); prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope); return super.resolveInternal(t, scope); }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "<s> private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed != null); /* if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString()); */ <mask> } } for (Node c = node.getFirstChild(); c != null; c = c.getNext()) { findCalledFunctions(c, changed); } } </s> java",
      "function range": "773,3-787,3",
      "output": [
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed!= null);  }",
          "correctness": "wrong"
        }
      ]
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "<s> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild() != null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); } /* if (t.getScopeDepth() <= 2) { */ <mask> return; } if (n.isName() && NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var != null) { Scope ownerScope = var.getScope(); if (scope != ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()) .recordEscapedQualifiedName(n.getQualifiedName()); } } } } </s> java",
      "function range": "1987,5-2038,5",
      "output": [
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordAssignedName(n.getString()); } if (n.isGetProp() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } else if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } else if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isGetProp() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getQualifiedName()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isGetProp() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedQualifiedName(n.getQualifiedName()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } else if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } else if (n.isName() && NodeUtil.isLValue(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordAssignedName(n.getString()); } if (n.isGetProp() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } if (n.isGetProp() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedQualifiedName(n.getQualifiedName()); } if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { return; } if (n.isReturn() && n.getFirstChild()!= null) { data.get(t.getScopeRoot()).recordNonEmptyReturn(); }  if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } else if (n.isName() && NodeUtil.isLValue(n) &&!NodeUtil.isBleedingFunctionName(n)) { data.get(t.getScopeRoot()).recordEscapedVarName(n.getString()); } else if (n.isName() && NodeUtil.isLValue(n)) { String name = n.getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordAssignedName(name); } if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedVarName(name); } } } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) { String name = NodeUtil.getRootOfQualifiedName(n).getString(); Scope scope = t.getScope(); Var var = scope.getVar(name); if (var!= null) { Scope ownerScope = var.getScope(); if (scope!= ownerScope && ownerScope.isLocal()) { data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName()); } } } }",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "<s> void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } /* if (lineLength > 0) { */ <mask> System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } } </s> java",
      "function range": "414,5-473,5",
      "output": [
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  if (lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  currentLinePos += 4; if (lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; lineLength = 0; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) { case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; }  for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } } } } }",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "<s> public Base64() { /* this(false); */ <mask> } </s> java",
      "function range": "224,5-226,5",
      "output": [
        {
          "patch": "public Base64() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Base64() {  this(true); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Base64() {  super(true); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Base64() {  this(false); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Base64() {  super(false); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Base64() {  this (true); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Base64() {  base64 = false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Base64() {  base64 = true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Base64() {  super(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Base64() {  this.base64 = false; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "<s> public static String encodeBase64String(byte[] binaryData) { /* return StringUtils.newStringUtf8(encodeBase64(binaryData, true)); */ <mask> } </s> java",
      "function range": "669,5-671,5",
      "output": [
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return StringUtils.newStringUtf8(encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return StringUtils.newStringUtf8(encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String (byte[] binaryData) {  return StringUtils.newStringUtf8(encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return encodeBase64(binaryData, false); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return StringUtils. newStringUtf8(encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return StringUtils.newStringUtf8( encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return new String(encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return StringUtils.newStringUtf8(encodeBase64(binaryData, false)); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encodeBase64String(byte[] binaryData) {  return Base64.encodeBase64String(binaryData); }",
          "correctness": "wrong"
        }
      ]
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "<s> public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; } /* long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); */ <mask> if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); } </s> java",
      "function range": "822,5-837,5",
      "output": [
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  long len = isChunked? getEncodeLength(binaryData, CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  long len = isChunked? getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  if (isChunked && len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  if (len < MIME_CHUNK_SIZE) { throw new IllegalArgumentException(\"Input array too small\"); } if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  if (isChunked && len < MIME_CHUNK_SIZE) { throw new IllegalArgumentException(\"Input array too small\"); } if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  long len = isChunked? getEncodeLength(binaryData, CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  long len = isChunked? getEncodeLength(binaryData, CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode (binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  long len = isChunked? getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  long len = isChunked? getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR) : getEncodeLength(binaryData, CHUNK_SEPARATOR, urlSafe); if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0); return b64.encode(binaryData); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) { if (binaryData == null || binaryData.length == 0) { return binaryData; }  if (isChunked && len < MIME_CHUNK_SIZE) { throw new IllegalArgumentException(\"Input array too small\"); } if (len > maxResultSize) { throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" + len + \") than the specified maxium size of \" + maxResultSize); } Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); return b64.encode(binaryData) ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "<s> public static String newStringIso8859_1(final byte[] bytes) { /* return new String(bytes, Charsets.ISO_8859_1); */ <mask> } </s> java",
      "function range": "338,5-340,5",
      "output": [
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, Charsets.ISO_8859_1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, Charsets.ISO_8859_1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, Charsets.UTF_8); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String (bytes, Charsets.ISO_8859_1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, Charsets.ISO_8859_1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, Charsets.ISO_8859_1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String (bytes, Charsets.ISO_8859_1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, Charsets.UTF_8); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String newStringIso8859_1(final byte[] bytes) {  return new String(bytes, \"ISO8859_1\"); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "<s> public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } /* return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); */ <mask> } </s> java",
      "function range": "71,5-82,5",
      "output": [
        {
          "patch": "public static boolean equals (final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return cs1.equals(cs2); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return cs1.equals(cs2); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals (final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals (final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return cs1.toString().equals(cs2.toString()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equals (final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return cs1.length() == cs2.length(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return cs1.toString().equals(cs2.toString()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equals (final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return CharSequenceUtils.regionMatches(cs2, false, 0, cs1, 0, Math.max(cs1.length(), cs2.length())); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return CharSequenceUtils.regionMatches(cs2, false, 0, cs1, 0, Math.max(cs1.length(), cs2.length())); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals (final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); }  return CharSequenceUtils.regionMatches(cs1, false, cs2, 0, Math.max(cs1.length(), cs2.length())); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "<s> /* private Object readResolve() { */ <mask> calculateHashCode(keys); return this; } </s> java",
      "function range": "277,5-280,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "<s> public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } /* if (read == 0 && inf.finished()) { return -1; */ <mask> } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); } </s> java",
      "function range": "191,5-246,5",
      "output": [
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  } if (read == 0 && current.getMethod()!= ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod()!= ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod()!= ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return - 1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) { if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; } count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead); offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; } } int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); }  if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return -1; } if (read == 0 && current.getMethod() == ZipArchiveOutputStream.STORED) { return - 1; } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "<s> public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } /* currEntry = new TarArchiveEntry(headerBuf); */ <mask> entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; } </s> java",
      "function range": "172,5-238,5",
      "output": [
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { currEntry = new TarArchiveEntry(new ByteArrayInputStream(headerBuf)); } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  return currEntry; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { currEntry = new TarArchiveEntry(new ByteArrayInputStream(headerBuf)); } if (currEntry == null) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { currEntry = new TarArchiveEntry(new ByteArrayInputStream(headerBuf)); } if (currEntry.isEOF()) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { currEntry = new TarArchiveEntry(new ByteArrayInputStream(headerBuf)); } if (currEntry == null) { currEntry = new TarArchiveEntry(); } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte [ ] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); return currEntry; }",
          "correctness": "wrong"
        },
        {
          "patch": "public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry!= null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; }  if (currEntry == null) { return null; } entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } entrySize = currEntry.getSize(); if (currEntry.isPaxHeader()){ paxHeaders(); } if (currEntry.isGNUSparse()){ readGNUSparse(); } return currEntry; }",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-73": {
      "loc": "65-73",
      "input": "<s> public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } /* boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { */ <mask> return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); } trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; } </s> java",
      "function range": "56,5-112,5",
      "output": [
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, end)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer[end - 1])); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer[end - 1])); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, end)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer[end - 1])); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); }  throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, buffer[end - 1])); }",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "<s> public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData != null) { int expectedLength = (hasUncompressedSize ? DWORD : 0) + (hasCompressedSize ? DWORD : 0) + (hasRelativeHeaderOffset ? DWORD : 0) + (hasDiskStart ? WORD : 0); /* if (rawCentralDirectoryData.length != expectedLength) { */ <mask> throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } } </s> java",
      "function range": "249,5-287,5",
      "output": [
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  if (rawCentralDirectoryData.length < expectedLength) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
          "correctness": "plausible"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  if (expectedLength!= rawCentralDirectoryData.length) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  if (rawCentralDirectoryData.length!= expectedLength) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  if (rawCentralDirectoryData.length < expectedLength) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
          "correctness": "plausible"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  if (expectedLength!= rawCentralDirectoryData.length) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  if (rawCentralDirectoryData.length!= expectedLength) { throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory\" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length doesn't match central directory \" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart) throws ZipException { if (rawCentralDirectoryData!= null) { int expectedLength = (hasUncompressedSize? DWORD : 0) + (hasCompressedSize? DWORD : 0) + (hasRelativeHeaderOffset? DWORD : 0) + (hasDiskStart? WORD : 0);  throw new ZipException(\"central directory zip64 extended\" + \" information extra field's length\" + \" doesn't match central directory \" + \" data. Expected length \" + expectedLength + \" but is \" + rawCentralDirectoryData.length); } int offset = 0; if (hasUncompressedSize) { size = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasCompressedSize) { compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasRelativeHeaderOffset) { relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset); offset += DWORD; } if (hasDiskStart) { diskStart = new ZipLong(rawCentralDirectoryData, offset); offset += WORD; } }",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "<s> @Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) { /* dictSize |= (coder.properties[i + 1] << (8 * i)); */ <mask> } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); } </s> java",
      "function range": "106,9-118,9",
      "output": [
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  } if (dictSize < LZMAInputStream.DICT_SIZE_MIN) { throw new IOException(\"Dictionary smaller than 4GiB minimum size\"); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize >= LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize == LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); } return in; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException { byte propsByte = coder.properties[0]; long dictSize = coder.properties[1]; for (int i = 1; i < 4; i++) {  if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } if (dictSize > LZMAInputStream.DICT_SIZE_MAX) { throw new IOException(\"Dictionary larger than 4GiB maximum size\"); } return new LZMAInputStream(in, -1, propsByte, (int) dictSize); } return in ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-137": {
      "loc": "133-137",
      "input": "<s> public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } /* if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } */ <mask> for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; } </s> java",
      "function range": "102,5-150,5",
      "output": [
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer ==''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer =='' || trailer =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer =='' || trailer ==''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer ==''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer =='') { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer =='' ) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer =='' || trailer =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer ==''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer ==''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; }  if (trailer == 0 || trailer =='' || trailer =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result ; }",
          "correctness": "timeout"
        }
      ]
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_135-138": {
      "loc": "135-138",
      "input": "<s> public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; /* if (currentByte == 0) { break; } */ <mask> if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; } </s> java",
      "function range": "101,5-148,5",
      "output": [
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte =='' || currentByte =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte =='' || currentByte =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte =='' || currentByte =='' || currentByte =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte =='' || currentByte =='' || currentByte =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte =='' || currentByte =='' || currentByte =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte =='' || currentByte =='' || currentByte =='\\n'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } if (currentByte < '0' || currentByte > '7''){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long parseOctal (final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] ==''){ start++; } else { break; } } byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer =='')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + currentByte - '0'; } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "<s> @Override public boolean isDirectory() { if (file != null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; } /* if (getName().endsWith(\"/\")) { */ <mask> return true; } return false; } </s> java",
      "function range": "849,5-864,5",
      "output": [
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (file!= null && file.isDirectory()) { return true; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (getName().endsWith(\".\")) { return true; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (file!= null) { return file.isDirectory(); } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (getName().endsWith(\"/\")) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (name.endsWith(\"/\")) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (getName().endsWith(\".\")) { return true; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (linkFlag == LF_DIR) { return true; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isDirectory() { if (file!= null) { return file.isDirectory(); } if (linkFlag == LF_DIR) { return true; }  if (getName().endsWith(\"/\")) { return true; } return false; }",
          "correctness": "wrong"
        }
      ]
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "<s> private static ZipLong unixTimeToZipLong(long l) { /* final long TWO_TO_32 = 0x100000000L; if (l >= TWO_TO_32) { */ <mask> throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); } </s> java",
      "function range": "528,5-534,5",
      "output": [
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < 0 ) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "wrong"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < TWO_TO_32) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < 0 || l > TWO_TO_32 ) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < 0 || l > TWO_TO_32 ) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < 0 || l > 0xFFFFFFFFL ) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "wrong"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < 0 ) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "wrong"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < TWO_TO_32) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < TWO_TO_32) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < TWO_TO_32) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static ZipLong unixTimeToZipLong(long l) {  if (l < TWO_TO_32) { throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l); } return new ZipLong(l); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "<s> @Override public int read() throws IOException { int current = super.read(); /* if (current == '\\n') { */ <mask> lineCounter++; } lastChar = current; return lastChar; } </s> java",
      "function range": "55,5-63,5",
      "output": [
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter < lineLimit) { lineCounter++; } lastChar = current; return lastChar; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter % 2 == 0) { lineCounter++; } lastChar = current; return lastChar; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter < MAX_LINE_COUNT) { lineCounter++; } lastChar = current; return lastChar; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter < maxLines) { lineCounter++; } lastChar = current; return lastChar; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter < lineLimit) { return current; } lineCounter++; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter < MAX_LINE_COUNT ) { lineCounter++; } lastChar = current; return lastChar; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  if (lineCounter < maxLinesPerLine) { lineCounter++; } lastChar = current; return lastChar; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  return current; }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  return current; }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public int read() throws IOException { int current = super.read();  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "<s> public Map<String, Integer> getHeaderMap() { /* return new LinkedHashMap<String, Integer>(this.headerMap); */ <mask> } </s> java",
      "function range": "287,5-289,5",
      "output": [
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return this.headerMap; }",
          "correctness": "plausible"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return this.headerMap ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return headerMap; }",
          "correctness": "plausible"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return headerMap ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return Collections. unmodifiableMap(this.headerMap); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return this.headerMap; }",
          "correctness": "plausible"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return this.headerMap ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public Map<String, Integer> getHeaderMap() {  return Collections.unmodifiableMap(headerMap); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "<s> private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header); /* final boolean emptyHeader = header.trim().isEmpty(); */ <mask> if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; } </s> java",
      "function range": "359,5-394,5",
      "output": [
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader &&!emptyHeader) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader && this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \" + header + \" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader && this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader!= null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord!= null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord!= null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header);  if (containsHeader && (emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } if (containsHeader && (!emptyHeader || (emptyHeader &&!this.format.getIgnoreEmptyHeaders()))) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "<s> private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); /* if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) { */ <mask> quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); } </s> java",
      "function range": "1001,5-1106,5",
      "output": [
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= CR) { quote = true; } else if (c <= LF) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "timeout"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= CR) { quote = true; } else if (c <= LF) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "timeout"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "timeout"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= CR) { quote = true; } else if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "timeout"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "plausible"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= CR) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "plausible"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); return; }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c <= SP) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); return; }",
          "correctness": "wrong"
        }
      ]
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1192": {
      "loc": "1189-1192",
      "input": "<s> private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos); /* if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) { quote = true; } else if (c <= COMMENT) { */ <mask> quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); } </s> java",
      "function range": "1151,5-1256,5",
      "output": [
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == CR || c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == CR || c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == CR || c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == CR || c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == LF || c == CR || c == quoteChar || c == delimChar || c == SP) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == LF || c == CR) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == CR || c == LF) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, pos); out.append(quoteChar); }",
          "correctness": "wrong"
        },
        {
          "patch": "private void printAndQuote (final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = getDelimiter(); final char quoteChar = getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = getQuoteMode(); if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: case ALL_NON_NULL: quote = true; break; case NON_NUMERIC: quote =!(object instanceof Number); break; case NONE: printAndEscape(value, offset, len, out); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);  if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break; } pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } } } } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); } if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos; } pos++; } out.append(value, start, end); out.append(quoteChar); }",
          "correctness": "wrong"
        }
      ]
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "<s> @SuppressWarnings({\"unchecked\", \"rawtypes\"}) @Override void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException { Object fieldValue = field.get(value); /* TypeAdapter t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType()); */ <mask> t.write(writer, fieldValue); } </s> java",
      "function range": "118,7-125,7",
      "output": [
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}",
          "correctness": "uncompilable"
        }
      ]
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "<s> public JsonWriter value(double value) throws IOException { writeDeferredName(); /* if (Double.isNaN(value) || Double.isInfinite(value)) { */ <mask> throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; } </s> java",
      "function range": "493,3-501,3",
      "output": [
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0.0 || value > 1.0) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value <= 0.0 || value >= 1.0) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0 || value > Double.MAX_VALUE) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value <= 0) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0 || value > 1.0) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0 || Double.isInfinite(value)) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0.0 || value > Double.MAX_VALUE) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0 || value > Double.MAX_VALUE ) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0.0 || value > 1.0) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)) return this; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public JsonWriter value(double value) throws IOException { writeDeferredName();  if (value < 0 || value > Double.MAX_VALUE) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "<s> @Override public Date read(JsonReader in) throws IOException { /* if (in.peek() != JsonToken.STRING) { throw new JsonParseException(\"The date should be a string value\"); */ <mask> } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } } </s> java",
      "function range": "97,3-113,3",
      "output": [
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public Date read(JsonReader in) throws IOException {  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "<s> private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) { /* char c = str.charAt(i++); */ <mask> if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); } </s> java",
      "function range": "185,5-205,5",
      "output": [
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  if (c < '0' || c > '9') { return -1; } if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  char c = str.charAt(i); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "plausible"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  char c = Character.toLowerCase(str.charAt(i)); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "plausible"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  if (c < 'A' || c > 'Z') { return -1; } if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  char c = str.charAt(0); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "wrong"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  if (c < '0' || c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  if (c < '0' || c > '9') { return -1; } if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parse(str); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  char c = Character.toLowerCase(str.charAt(i)); if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parse(str); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) {  if (c < 'A' || c > 'Z') { return -1; } if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parse(str); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "<s> private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } /* for (int i = 0; i < len; ++i) { char c = str.charAt(i); */ <mask> if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); } </s> java",
      "function range": "185,5-206,5",
      "output": [
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < '0' || c > '9') { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < '0' || c > '9' ) { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < 'A' || c > 'Z') { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < 'a' || c > 'z') { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < '0' || c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < '0' || c > '9') { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < '0' || c > '9' ) { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; }  if (c < '0' || c > '9') { return -1; } if (c > '9' || c < '0') { return -1; } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "<s> public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray != null) return _resultArray; if (_resultString != null) { return (_resultArray = _resultString.toCharArray()); } /* if (!_hasSegments) return _currentSegment; */ <mask> return contentsAsArray(); } </s> java",
      "function range": "298,5-310,5",
      "output": [
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  _hasSegments = true; return contentsAsArray(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  return _currentSegment; }",
          "correctness": "wrong"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  _hasSegments = true; _currentSegment = null; return contentsAsArray(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  _hasSegments = false; return contentsAsArray(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  _hasSegments = false; _currentSegment = null; return contentsAsArray(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  if (_currentSegment!= null) return _currentSegment; return contentsAsArray(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  _hasSegments = true; return _currentSegment; }",
          "correctness": "wrong"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  _hasSegments = true; _currentSegment = new Segment(); return contentsAsArray(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  if (_currentSegment!= null) return _currentSegment.toCharArray(); return contentsAsArray(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray!= null) return _resultArray; if (_resultString!= null) { return (_resultArray = _resultString.toCharArray()); }  if (_currentSegment!= null) return _currentSegment.getBuffer(); return contentsAsArray(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "<s> public void writeEmbeddedObject(Object object) throws IOException { /* throw new JsonGenerationException(\"No native support for writing embedded objects\", */ <mask> this); } </s> java",
      "function range": "1328,5-1332,5",
      "output": [
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new JsonGenerationException(\"No native support for writing embedded objects\", this); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new UnsupportedOperationException(\"No native support for writing embedded objects\", this); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  }",
          "correctness": "wrong"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new JsonGenerationException ( \"No native support for writing embedded objects\", this); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void writeEmbeddedObject (Object object) throws IOException {  throw new JsonGenerationException(\"No native support for writing embedded objects\", this); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new JsonGenerationException( \"No native support for writing embedded objects\", this); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new UnsupportedOperationException(\"Native support for writing embedded objects\", this); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new JsonGenerationException(\"No native support for writing embedded objects.\", this); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new UnsupportedOperationException(\"Not supported yet.\", this); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void writeEmbeddedObject(Object object) throws IOException {  throw new JsonGenerationException(\"No native support for writing embedded objects\", this); }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "<s> private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c; /* if (i <= maxCode) { */ <mask> if (codes[i] != 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } } </s> java",
      "function range": "1948,5-1990,5",
      "output": [
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (!Character.isJavaIdentifierStart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "plausible"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (Character.isJavaIdentifierStart(c)) { if (codes[i]!= 0) { break; } } else if (Character.isJavaIdentifierPart(c)) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (!Character.isJavaIdentifierStart(c)) { if (codes[i]!= 0) { break; } } else if (Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "plausible"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (!Character.isJavaIdentifierStart(c)) { break; } if (Character.isJavaIdentifierPart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (Character.isJavaIdentifierStart(c) || Character.isJavaIdentifierPart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (Character.isJavaIdentifierStart(c)) { if (codes[i]!= 0) { break; } } else if (Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (Character.isJavaIdentifierStart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (!Character.isJavaIdentifierStart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "plausible"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (Character.isJavaIdentifierStart(c) || Character.isJavaIdentifierPart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException { _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr)); char[] outBuf = _textBuffer.getCurrentSegment(); int outPtr = _textBuffer.getCurrentSegmentSize(); final int maxCode = codes.length; while (true) { if (_inputPtr >= _inputEnd) { if (!_loadMore()) { break; } } char c = _inputBuffer[_inputPtr]; int i = (int) c;  if (!Character.isJavaIdentifierStart(c)) { break; } if (Character.isJavaIdentifierPart(c)) { if (codes[i]!= 0) { break; } } else if (!Character.isJavaIdentifierPart(c)) { break; } ++_inputPtr; hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i; outBuf[outPtr++] = c; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } } _textBuffer.setCurrentLength(outPtr); { TextBuffer tb = _textBuffer; char[] buf = tb.getTextBuffer(); int start = tb.getTextOffset(); int len = tb.size(); return _symbols.findSymbol(buf, start, len, hash); } }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "<s> @Override public boolean isCachable() { /* return (_valueTypeDeserializer == null) */ <mask> && (_ignorableProperties == null); } </s> java",
      "function range": "298,5-305,5",
      "output": [
        {
          "patch": "@Override public boolean isCachable() {  return super. isCachable() && (_ignorableProperties == null); }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isCachable() {  return super. isCachable(); }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( (_valueTypeDeserializer == null) && (_ignorableProperties == null); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable() && _ignorableProperties == null); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean isCachable() {  return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable() && (_ignorableProperties == null); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( _valueTypeDeserializer!= null && _valueTypeDeserializer. isCachable() && _ignorableProperties == null); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( _valueTypeDeserializer!= null && _valueTypeDeserializer!= null && _ignorableProperties == null); }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( _valueTypeDeserializer!= null && (_ignorableProperties == null); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( _valueTypeDeserializer!= null && _valueTypeDeserializer. isCachable() && (_ignorableProperties == null); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean isCachable() {  return ( _valueTypeDeserializer!= null && _valueTypeDeserializer!= null && (_ignorableProperties == null); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "<s> protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann); /* return (previous != null) && previous.equals(ann); */ <mask> } </s> java",
      "function range": "107,5-113,5",
      "output": [
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return previous == null; }",
          "correctness": "plausible"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return ann!= null; }",
          "correctness": "plausible"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return previous == ann; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return previous!= null; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return (previous == null) || previous.equals(ann); }",
          "correctness": "plausible"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return (ann!= null) && ann.equals(previous); }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return (previous == ann); }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return previous == null || previous.equals(ann); }",
          "correctness": "plausible"
        },
        {
          "patch": "protected final boolean _add(Annotation ann) { if (_annotations == null) { _annotations = new HashMap<Class<? extends Annotation>,Annotation>(); } Annotation previous = _annotations.put(ann.annotationType(), ann);  return (previous!= null) && previous.equals(ann); }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "<s> public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete() /* || TreeNode.class.isAssignableFrom(t.getRawClass())); */ <mask> case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } } </s> java",
      "function range": "167,9-193,9",
      "output": [
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case OBJECT: return (t.getRawClass() == Object.class); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case OBJECT: return (t.getRawClass() == Object.class) ||!t.isConcrete(); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case OBJECT: return (t.getRawClass() == Object.class) || (t.isConcrete() &&!TreeNode.class.isAssignableFrom(t.getRawClass())); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case NON_CONCRETE: return!t.isConcrete() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case OBJECT_AND_NON_FINAL: return (t.getRawClass() == Object.class) || (t.isConcrete() &&!TreeNode.class.isAssignableFrom(t.getRawClass())); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case NON_CONCRETE: while (t.isConcrete()) { t = t.getContentType(); } return!t.isConcrete(); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case NON_CONCRETE: return (t.getRawClass() == Object.class) ||!t.isConcrete(); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case OBJECT_AND_NON_FINAL: return (t.getRawClass() == Object.class) ||!t.isFinal(); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean useForType(JavaType t) { switch (_appliesFor) { case NON_CONCRETE_AND_ARRAYS: while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete()  case OBJECT_AND_NON_FINAL: return (t.getRawClass() == Object.class) || (t.isConcrete() &&!TreeNode.class.isAssignableFrom(t.getRawClass())); case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return!t.isFinal() &&!TreeNode.class.isAssignableFrom(t.getRawClass(); default: return (t.getRawClass() == Object.class); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "<s> @Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg != null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann != null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class) /* || _hasAnnotation(a, JsonRawValue.class)) { */ <mask> name = \"\"; } else { return null; } } return PropertyName.construct(name); } </s> java",
      "function range": "730,5-755,5",
      "output": [
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  } else if (_hasAnnotation(a, JsonDeserialize.class) || _hasAnnotation(a, JsonRawValue.class)) { name = \"\"; } else { return null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  } else if (_hasAnnotation(a, JsonDeserializer.class) || _hasAnnotation(a, JsonDeserializer.class)) { name = \"\"; } else { return null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  } else if (_hasAnnotation(a, JsonDeserialize.class) || _hasAnnotation(a, JsonDeserializer.class)) { name = \"\"; } else { return null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  name = _findAnnotation(a, JsonValue.class); } else if (_hasAnnotation(a, JsonNull.class)) { name = \"\"; } else { return null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  ) { name = \"\"; } else { return null; } } return PropertyName.construct(name); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  ) { name = \"\"; } else { return null; } } return PropertyName.construct(name); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  name = \"\"; } else { return null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class) ) { name = \"\"; } else { return null; } } return PropertyName.construct(name); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  name = \"\"; } else { return null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public PropertyName findNameForSerialization(Annotated a) { String name = null; JsonGetter jg = _findAnnotation(a, JsonGetter.class); if (jg!= null) { name = jg.value(); } else { JsonProperty pann = _findAnnotation(a, JsonProperty.class); if (pann!= null) { name = pann.value(); } else if (_hasAnnotation(a, JsonSerialize.class) || _hasAnnotation(a, JsonView.class)  || _hasAnnotation(a, JsonDeserializer.class)) { name = \"\"; } else { return null; } } return PropertyName.construct(name); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "<s> @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) { /* visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); */ <mask> } else { visitor.expectNumberFormat(typeHint); } } } </s> java",
      "function range": "73,5-87,5",
      "output": [
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitor.expectNumberFormat(typeHint); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitLongFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitLongFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitBigDecimalFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) {  visitLongFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitDoubleFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); visitStringFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { visitor.expectNumberFormat(typeHint); } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "<s> @Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; } /* return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, */ <mask> _valueHandler, _typeHandler, _asStatic); } </s> java",
      "function range": "119,5-137,5",
      "output": [
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _nameHandler, _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _typeHandler, _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _valueHandler, _typeHandler, _asStatic); return new WildcardType(subclass, _bindings, _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _valueHandler, _typeHandler, _asStatic); return new SimpleType(subclass, _bindings, _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _valueHandler, _typeHandler, _asStatic); return super._narrow(subclass); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _fieldHandler, _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _valueHandler, _typeHandler, _asStatic); return super.narrow(subclass); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _valueHandler, _typeHandler, _asStatic); return new SimpleType(subclass, _bindings, _class, _superInterfaces, _valueHandler, _typeHandler, _asStatic); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; }  _typeHandler, _valueHandler, _typeHandler, _asStatic); return super._narrow(subclass); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "<s> @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property != null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format != null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } /* if (format.getShape() == JsonFormat.Shape.STRING) { */ <mask> TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this; } </s> java",
      "function range": "49,5-81,5",
      "output": [
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  final TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  return withFormat(Boolean.FALSE, format.toString()); } else if (shape == JsonFormat.Shape.DATE) { final TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { final TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format == null) { return withFormat(Boolean.FALSE, null); } final TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  final TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (property!= null) { JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember()); if (format!= null) { JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); }  final TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern()? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "<s> @Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb); /* sb.append(';'); */ <mask> return sb; } </s> java",
      "function range": "150,5-158,5",
      "output": [
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb = _referencedType.getGenericSignature(sb); sb.append('>'); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb.append('>'); sb = _referencedType.getGenericSignature(sb); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb = _referencedType.getGenericSignature(sb); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb.append('>'); sb = _referencedType.getGenericSignature(sb); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb = _referencedType.getGenericSignature(sb, true); sb.append('>'); return sb; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb = _referencedType.getGenericSignature(sb); sb.append(';'); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb = _referencedType.getGenericSignature(sb, true); return sb; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb.append('>'); sb = _referencedType.getGenericSignature(sb); sb.append('>'); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb.append('>'); sb = _referencedType.getGenericSignature(sb); sb.append(';'); return sb; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb);  sb.append('>'); sb = _referencedType.getGenericSignature(sb); sb.append('>'); return sb; }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "<s> public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } /* return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), */ <mask> true)); } </s> java",
      "function range": "1435,5-1443,5",
      "output": [
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  _dataFormatReaders == null? null : _dataFormatReaders.findFormat(src, offset, length), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  return _detectBindAndReadValues(_parserFactory.createParser(src, offset, length), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  true)); return _detectBindAndReadValues(_parserFactory.createParser(src, offset, length), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  true)); return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  _dataFormatReaders == null? null : _dataFormatReaders.findFormat(src, offset, length), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  true)); return _detectBindAndReadValues(_parserFactory.createParser(src), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  true)); return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  return _detectBindAndReadValues(_parserFactory.createParser(src), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  _dataFormatReaders!= null? _dataFormatReaders.findFormat(src, offset, length), true)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders!= null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); }  true)); return _detectBindAndReadValues(_parserFactory.createParser(src), true); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "<s> public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) { /* found = key.equals(prop.getName()); */ <mask> if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); } </s> java",
      "function range": "426,5-453,5",
      "output": [
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  found = _propsInOrder[_findFromOrdered(prop)]!= null; if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  found = _propsInOrder[_findFromOrdered(prop)] == null; if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } else { if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } if (key.equals(propToRm.getName())) { if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } if (key.equals(prop.getName())) { if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init(props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } else { if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init (props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } if (key.equals(propToRm.getName())) { if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init (props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init (props); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void remove(SettableBeanProperty propToRm) { ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size); String key = getPropertyName(propToRm); boolean found = false; for (int i = 1, end = _hashArea.length; i < end; i += 2) { SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i]; if (prop == null) { continue; } if (!found) {  if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } if (key.equals(prop.getName())) { if (found) { _propsInOrder[_findFromOrdered(prop)] = null; continue; } } props.add(prop); } if (!found) { throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\"); } init (props); }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "<s> public static StdKeyDeserializer forType(Class<?> raw) { int kind; /* if (raw == String.class || raw == Object.class) { */ <mask> return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); } </s> java",
      "function range": "70,5-116,5",
      "output": [
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  kind = TYPE_STRING; return new StdKeyDeserializer(kind, raw); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  kind = TYPE_STRING; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  kind = TYPE_STRING; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  kind = TYPE_STRING; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  kind = TYPE_STRING; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == String.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  kind = TYPE_STRING; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == String.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == String.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static StdKeyDeserializer forType(Class<?> raw) { int kind;  if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == String.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else { return null; } return new StdKeyDeserializer(kind, raw); }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_76_/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java_583-604": {
      "loc": "583-604",
      "input": "<s> @SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp != null) { /* if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) { t = p.nextToken(); Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt); continue; } while (t == JsonToken.FIELD_NAME) { p.nextToken(); tokens.copyCurrentStructure(p); t = p.nextToken(); } tokens.writeEndObject(); if (bean.getClass() != _beanType.getRawClass()) { ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\"); return null; } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); } */ <mask> continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop != null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter != null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); } </s> java",
      "function range": "565,5-637,5",
      "output": [
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  } else { continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped (JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped (JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  } else { continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        },
        {
          "patch": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt ) throws IOException, JsonProcessingException { final PropertyBasedCreator creator = _propertyBasedCreator; PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader); TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.writeStartObject(); JsonToken t = p.getCurrentToken(); for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String propName = p.getCurrentName(); p.nextToken(); SettableBeanProperty creatorProp = creator.findCreatorProperty(propName); if (creatorProp!= null) {  continue; } if (buffer.readIdProperty(propName)) { continue; } SettableBeanProperty prop = _beanProperties.find(propName); if (prop!= null) { buffer.bufferProperty(prop, prop.deserialize(p, ctxt)); continue; } if (_ignorableProps!= null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, handledType(), propName); continue; } tokens.writeFieldName(propName); tokens.copyCurrentStructure(p); if (_anySetter!= null) { buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt)); } } Object bean; try { bean = creator.build(ctxt, buffer); } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens); }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "<s> public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } /* if (full.startsWith(PREFIX_STRING)) { for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) { */ <mask> String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); } </s> java",
      "function range": "67,5-99,5",
      "output": [
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getName().startsWith(PREFIX_STRING)) { break main_check; } String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getSimpleName().startsWith(PREFIX_STRING)) { break main_check; } String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getName().startsWith(PREFIX_STRING)) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getSimpleName().startsWith(PREFIX_STRING)) { break main_check; } } if (cls.getSimpleName().startsWith(PREFIX_STRING)) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getSimpleName().startsWith(PREFIX_STRING)) { break main_check; } if (cls.getSimpleName().endsWith(PREFIX_STRING)) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getName().startsWith(PREFIX_STRING)) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getName().startsWith(PREFIX_STRING)) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getName().startsWith(PREFIX_STRING)) { String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } } return; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; }  if (cls.getSimpleName().startsWith(PREFIX_STRING)) { break main_check; } String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "<s> protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1 != candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName != null) || (injectId != null); if (!useProps && (paramDef != null)) { /* paramName = candidate.findImplicitParamName(0); */ <mask> useProps = (paramName != null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef != null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } } </s> java",
      "function range": "701,5-752,5",
      "output": [
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  paramName = candidate.findImplicitParamName(1); paramDef = candidate.propertyDef(0); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitParamName(3); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitParamName(3); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitInjectId(0); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  if (paramName == null) { paramName = candidate.findImplicitParamName(1); } if (paramName == null) { paramName = candidate.findImplicitParamName(2); } useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitParamName(3); paramDef = candidate.propertyDef(0); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitParamName(3); paramDef = candidate.propertyDef(0); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  paramName = candidate.findImplicitParamName(1); paramDef = candidate.propertyDef(0); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitParamName(3); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1!= candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate); return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0); boolean useProps = (paramName!= null) || (injectId!= null); if (!useProps && (paramDef!= null)) {  injectId = candidate.findImplicitParamName(3); useProps = (paramName!= null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties); return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef!= null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "<s> @Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else { /* gen.writeObject(_value); */ <mask> } } </s> java",
      "function range": "104,5-116,5",
      "output": [
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerializeObject(gen, _value); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  gen.writeNull(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerializeObject (gen, _value); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerializeObject(gen); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerializeObject(_value, gen); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  gen.writeEndObject(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerializeObject(gen, this); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerializeNull(gen); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException { if (_value == null) { ctxt.defaultSerializeNull(gen); } else if (_value instanceof JsonSerializable) { ((JsonSerializable) _value).serialize(gen, ctxt); } else {  ctxt.defaultSerialize(gen, _value); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "<s> public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { /* buffer.assignParameter(typeProp, typeId); */ <mask> } } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; } </s> java",
      "function range": "255,5-311,5",
      "output": [
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(typeProp, values[i]); } } else { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(prop, values[i]); } } else { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(typeProp, values[i]); } } else if (prop.getCreatorIndex() < 0) { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(prop, values[i]); } } else if (prop.getCreatorIndex() < 0) { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } } else if (prop.getCreatorIndex() < 0) { buffer.assignParameter(prop, values[i]); if (typeProp!= null) { buffer.assignParameter(typeProp, typeId); } } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(typeProp, values[i]); } } else { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } else { buffer.assignParameter(prop, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(typeProp, values[i]); } } else if (prop.getCreatorIndex() < 0) { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } else { buffer.assignParameter(prop, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(prop, values[i]); } } else if (prop.getCreatorIndex() < 0) { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } else { buffer.assignParameter(prop, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(typeProp, values[i]); } } else { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } else { buffer.assignParameter(prop, values[i]); prop.set(bean, values[i]); } } return bean; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType, \"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {  } else { buffer.assignParameter(typeProp, values[i]); } } else { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } else { buffer.assignParameter(prop, values[i]); buffer.assignParameter(prop, values[i]); } } return bean; }",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "<s> @Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { /* if (property == null) { return this; } */ <mask> JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); } </s> java",
      "function range": "61,5-136,5",
      "output": [
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return withFormat(Boolean.FALSE, null); } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return withFormat(Boolean.FALSE, null); } final JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return this; } final JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return withFormat(Boolean.TRUE, null); } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return withFormat(Boolean.TRUE, null); } final JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "timeout"
        },
        {
          "patch": "@Override public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException {  if (serializers == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale()? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone()? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale &&!hasTZ &&!asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportBadDefinition(handledType(), String.format( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\", df0.getClass().getName())); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz!= null) &&!newTz.equals(df.getTimeZone()); if (changeTZ) { df = df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "<s> protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) { /* return null; */ <mask> } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; } </s> java",
      "function range": "146,5-199,5",
      "output": [
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } if ((_baseType!= null) && _baseType.getClass() == actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } else { if ((_baseType!= null) && _baseType.getClass() == actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass()); } } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  return null; } if ((_baseType!= null) && _baseType.getClass() == actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } if ((_baseType!= null) && _baseType.getClass()!= actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } if ((_baseType!= null) && _baseType.getClass() == actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructGenericType(_baseType, actual.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } else { if ((_baseType!= null) && _baseType.getClass()!= actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass()); } } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } if ((_baseType!= null) && _baseType.getClass() == actual.getClass()) { if (!actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(actual, actual.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) {  } if ((_baseType!= null) && _baseType.getClass() == actual.getClass()) { if (actual.hasGenericTypes()) { actual = ctxt.getTypeFactory().constructSpecializedType(_baseType, actual.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType!= null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "<s> protected XmlSerializerProvider(XmlSerializerProvider src) { super(src); /* _rootNameLookup = src._rootNameLookup; */ <mask> } </s> java",
      "function range": "55,5-60,5",
      "output": [
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  this._rootNameLookup = src._rootNameLookup; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  _rootNameLookup = src._rootNameLookup; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  super._rootNameLookup = src._rootNameLookup; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  _rootNameLookup = null; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  _xmlSerializer = src._xmlSerializer; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  _serializer = src._serializer; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  this._rootNameLookup = src._rootNameLookup ; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  _rootNameLookup = src._rootNameLookup ; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected XmlSerializerProvider(XmlSerializerProvider src) { super(src);  _rootNameLookup = _rootNameLookup; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "<s> private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node); /* body().appendChild(new TextNode(\" \", \"\")); body().appendChild(node); */ <mask> } } </s> java",
      "function range": "113,5-128,5",
      "output": [
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  element.appendChild(node); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  body().appendChild(new TextNode(\" \", \"\")); body().appendChild(node); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  element.appendChild(new TextNode(\" \", \"\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  } for (Node node: element.childNodes) { element.appendChild(node); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  } for (Node node: element.childNodes) { if (node instanceof TextNode) { normalise(node); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  } for (Node node: element.childNodes) { if (node instanceof TextNode) { node.normalize(); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  element.appendChild(new TextNode(\" \", \"\")); body().appendChild(node); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  element.appendChild(new TextNode(\" \", \"\")); element.appendChild(node); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void normalise(Element element) { List<Node> toMove = new ArrayList<Node>(); for (Node node: element.childNodes) { if (node instanceof TextNode) { TextNode tn = (TextNode) node; if (!tn.isBlank()) toMove.add(tn); } } for (Node node: toMove) { element.removeChild(node);  } for (Node node: element.childNodes) { element.removeChild(node); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "<s> void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name); /* r.advance(); */ <mask> return; } if (t.isAppropriateEndTagToken() && !r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case ' ': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { anythingElse(t, r); } } </s> java",
      "function range": "553,9-586,9",
      "output": [
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  return; } if (t.isAppropriateAttributeNameToken()) { t.tagPending.appendAttributeName(r.consumeLetterSequence()); t.dataBuffer.append(r.consumeLetterSequence()); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { t.dataBuffer.append(r.consume()); anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { t.dataBuffer.append(c); anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { t.dataBuffer.append(r.consume()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else { t.dataBuffer.append(r.consume()); t.transition(Data); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else if (t.isAppropriateAttributeNameToken() &&!r.isEmpty()) { char c = r.consume(); t.dataBuffer.append(c); anythingElse(t, r); } else { anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else if (t.isAppropriateAttributeNameToken() &&!r.isEmpty()) { char c = r.consume(); t.dataBuffer.append(c); anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else if (t.isAppropriateAttributeNameToken() &&!r.isEmpty()) { char c = r.consume(); t.tagPending.appendAttributeName(c); t.dataBuffer.append(c); anythingElse(t, r); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void read(Tokeniser t, CharacterReader r) { if (r.matchesLetter()) { String name = r.consumeLetterSequence(); t.tagPending.appendTagName(name.toLowerCase()); t.dataBuffer.append(name);  anythingElse(t, r); return; } if (t.isAppropriateEndTagToken() &&!r.isEmpty()) { char c = r.consume(); switch (c) { case '\\t': case '\\n': case '\\f': case'': t.transition(BeforeAttributeName); break; case '/': t.transition(SelfClosingStartTag); break; case '>': t.emitTagPending(); t.transition(Data); break; default: t.dataBuffer.append(c); anythingElse(t, r); break; } } else if (t.isAppropriateAttributeNameToken() &&!r.isEmpty()) { char c = r.consume(); t.tagPending.appendAttributeName(c); t.dataBuffer.append(c); anythingElse(t, r); break; } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "<s> int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar != input[offset]) while(++offset < length && startChar != input[offset]); int i = offset + 1; int last = i + seq.length()-1; /* if (offset < length) { */ <mask> for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; } </s> java",
      "function range": "82,5-98,5",
      "output": [
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (i == last) return offset - pos; for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (seq.charAt(offset) == input[i]) { for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; }",
          "correctness": "wrong"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  while (i < last && seq.charAt(i) == input[i]) i++; for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (seq.charAt(offset) == input[i]) return offset - pos; for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (seq.charAt(last) == input[i]) return offset - pos; for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (seq.charAt(offset) == input[i]) { for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; }",
          "correctness": "wrong"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  for (int j = 1; i < last && seq.charAt(j)!= input[i]; i++, j++); if (i == last) return offset - pos; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (seq.charAt(offset) == input[i]) { for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; }",
          "correctness": "wrong"
        },
        {
          "patch": "int nextIndexOf(CharSequence seq) { char startChar = seq.charAt(0); for (int offset = pos; offset < length; offset++) { if (startChar!= input[offset]) while(++offset < length && startChar!= input[offset]); int i = offset + 1; int last = i + seq.length()-1;  if (seq.charAt(offset) == input[i]) { for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++); if (i == last) return offset - pos; } } return -1; }",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "<s> public String html() { StringBuilder accum = new StringBuilder(); html(accum); /* return accum.toString().trim(); */ <mask> } </s> java",
      "function range": "1098,5-1102,5",
      "output": [
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum.toString().trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum.toString().trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum.toString().toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String html() { StringBuilder accum = new StringBuilder(); html(accum);  return accum.toString().trim(); }",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "<s> public DocumentType(String name, String publicId, String systemId, String baseUri) { super(baseUri); /* Validate.notEmpty(name); */ <mask> attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); } </s> java",
      "function range": "19,5-26,5",
      "output": [
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "plausible"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  Validate.notEmpty(publicId); Validate.notEmpty(systemId); attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "wrong"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  this.name = name; this.publicId = publicId; this.systemId = systemId; attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "plausible"
        },
        {
          "patch": "public DocumentType(String name, String publicId, String systemId, String baseUri) { super(baseUri);  attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "plausible"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  // Validate.notEmpty(publicId); // Validate.notEmpty(systemId); attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  Validate.notEmpty(systemId); attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId); }",
          "correctness": "wrong"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  attr(\"name\", name); attr(\"publicId\", publicId); attr (\"systemId\", systemId); }",
          "correctness": "plausible"
        },
        {
          "patch": "public DocumentType (String name, String publicId, String systemId, String baseUri) { super(baseUri);  attr(\"name\", name); attr(\"publicId\", publicId); attr(\"systemId\", systemId);}",
          "correctness": "plausible"
        },
        {
          "patch": "public DocumentType() { }",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "<s> @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o; /* return this == o; */ <mask> } </s> java",
      "function range": "1167,5-1176,5",
      "output": [
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return true ; }",
          "correctness": "plausible"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return this.id == element.id; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return this.id == element.id; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return name. equals(element.name); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return this.name. equals(element.name); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return this.id == element.id && this.name == element.name; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return this.id == element.id && this.name == element.name; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass()!= o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o;  return this.id == element.id && this.name == element.name ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "<s> private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i); /* if (element.equals(search)) */ <mask> return i; } return null; } </s> java",
      "function range": "568,5-578,5",
      "output": [
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null && element.equals(search)) { return i; } return null; } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null && element.equals(search)) return i; } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element.equals(search)) { return i + 1; } return i; } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null) { return i; } return null; } return i; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (search.equals(element)) { return i + 1; } return i; } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null && element.equals(search)) { return i; } return null; } return i; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null) { return i; } return null; } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (search == element) { return i; } return null; } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null) { return i; } return null; } return i; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i);  if (element!= null && element.equals(search)) { return i; } return null; } return i; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "<s> void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; /* } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) { */ <mask> transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } } </s> java",
      "function range": "382,5-429,5",
      "output": [
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if (\"td\".equals(name) || \"td\".equals(name) && last) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if (\"th\".equals(name) || \"th\".equals(name) &&!last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if ((\"td\".equals(name) || \"td\".equals(name) && last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if (\"td\".equals(name) || \"td\".equals(name) && last) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if (\"th\".equals(name) || \"th\".equals(name) &&!last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if (\"td\".equals(name) || \"td\".equals(name) && last) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if ((\"td\".equals(name) || \"td\".equals(name) && last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break;  transition(HtmlTreeBuilderState.InCell); break; } else if (\"td\".equals(name) || \"td\".equals(name) && last) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; } else if (last) { transition(HtmlTreeBuilderState.InBody); break; } else if (last) { transition(HtmlTreeBuilderState.BeforeBody); break; } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "<s> static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else /* accum.append(c); */ <mask> break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } } </s> java",
      "function range": "79,5-154,5",
      "output": [
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  break; case'&': accum.append(\"&amp;\"); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  } break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  break; case'' : accum.append(\"&apos;\"); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  break; case '&#': accum.append(\"&amp;\"); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  break; default: accum.append(c); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  } break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else  break; case 0xD0: accum.append(\"&amp;\"); break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "<s> static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<': /* if (!inAttribute) */ <mask> accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } } </s> java",
      "function range": "79,5-155,5",
      "output": [
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<':  if (inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<':  if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<':  if (inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<':  if (map.containsKey(c)) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<':  if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name()); final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) { case '&': accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode!= EscapeMode.xhtml) accum.append(\"&nbsp;\"); else accum.append(\"&#xa0;\"); break; case '<':  if (!map.containsKey(c)) accum.append(\"&lt;\"); else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"': if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';'); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "<s> boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos]; /* return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); */ <mask> } </s> java",
      "function range": "296,5-301,5",
      "output": [
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return (c >= '0' && c <= '9'); }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return (c >= '0' && c <= '9' ); }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return (c >= 'A' && c <= 'Z'); }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return c >= '0' && c <= '9' ; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return c >= 'A' && c <= 'Z'; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return (c >= '0' && c <= '9' ) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return Character. isLetterOrDigit(c); }",
          "correctness": "timeout"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return (c >= '0' && c <= '9'); }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  return (c >= 'a' && c <= 'z'); }",
          "correctness": "wrong"
        },
        {
          "patch": "boolean matchesLetter() { if (isEmpty()) return false; char c = input[pos];  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "<s> public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key)) /* attributes.remove(attrKey); */ <mask> } } </s> java",
      "function range": "118,5-127,5",
      "output": [
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  it.remove(); } }",
          "correctness": "plausible"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  else { it.remove(); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  else it.remove(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  else attributes.remove(attrKey); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  else { attributes.remove(attrKey); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  it.remove(); } if (attributes.isEmpty()) { attributes = null; } }",
          "correctness": "plausible"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  it.remove(); } if (attributes!= null) { attributes.clear(); } }",
          "correctness": "plausible"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  } if (attributes.isEmpty()) { attributes = null; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void removeIgnoreCase(String key) { Validate.notEmpty(key); if (attributes == null) return; for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) { String attrKey = it.next(); if (attrKey.equalsIgnoreCase(key))  it.remove(); } if (attributes.isEmpty()) { attributes.clear(); } }",
          "correctness": "plausible"
        }
      ]
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "<s> public boolean hasClass(String className) { /* final String classAttr = attributes.get(\"class\"); */ <mask> final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; } </s> java",
      "function range": "1091,5-1132,5",
      "output": [
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null || className == null) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null || className == null || className.length() == 0) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null) { return false; } if (className == null) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null || classAttr.length() == 0) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null || className == null || classAttr.length() == 0) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null) { return false; } if (className == null) { return true; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null) { return false; } final String classAttr = classAttr.trim(); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } if (inClass && len - start == wantLen) { return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean hasClass(String className) {  if (classAttr == null) { return false; } final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false; } } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } if (inClass && len - start == wantLen) { return false; } return false; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-472": {
      "loc": "468-472",
      "input": "<s> private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { /* int bottom = stack.size() -1; if (bottom > MaxScopeSearchDepth) { bottom = MaxScopeSearchDepth; } */ <mask> final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } </s> java",
      "function range": "466,5-486,5",
      "output": [
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  final int bottom = stack.size() - 1; final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.isEmpty()) { return false; } final int bottom = stack.size() - 1; final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.size() <= bottom) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  final int bottom = stack.size() - 1; if (bottom < 0) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.size() == 0) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.get(bottom) == null) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.isEmpty()) { return false; } final int bottom = stack.size() - 1; final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false ; }",
          "correctness": "plausible"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.size() <= bottom) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  final int bottom = stack.size() - 1; if (bottom < 0) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false ; }",
          "correctness": "plausible"
        },
        {
          "patch": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {  if (stack.get(bottom) == null) { return false; } final int top = bottom > MaxScopeSearchDepth? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes!= null && inSorted(elName, extraTypes)) return false; } return false ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "<s> final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key); /* if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) { */ <mask> accum.append(\"=\\\"\"); Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false); accum.append('\"'); } } } </s> java",
      "function range": "310,5-326,5",
      "output": [
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html && val!= null &&! val.equals(key)) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key)) && Attribute.isBooleanAttribute(key)) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html && Attribute.isBooleanAttribute(key)) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key))) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html) { accum.append(\"=\"); Entities.escape(accum, key, out, true, false, false); accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html && Attribute.isBooleanAttribute(key)) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html) { accum.append(\"=\"); Entities.escape(accum, key, out, true, false, false); accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key);  if (out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key)) && Attribute.isBooleanAttribute(key)) { accum.append(\"=\\\"\"); Entities.escape(accum, val == null? EmptyString : val, out, true, false, false); accum.append('\"'); } } }",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "<s> private void popStackToClose(Token.EndTag endTag) { /* String elName = endTag.name(); */ <mask> Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } } </s> java",
      "function range": "116,5-136,5",
      "output": [
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null || elName.length() == 0) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null || elName.length() == 0 ) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null || elName.isEmpty()) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null || elName.equals(\"\")) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null) return; List < Element > stack = this.stack; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null || elName.length() == 0) return; List < Element > stack = this.stack; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null) return; List < Element > stack = (List < Element > ) endTag.parentNode; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void popStackToClose(Token.EndTag endTag) {  if (elName == null || elName.length() == 0) return; Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } if (firstFound == null) return; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "<s> public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null; /* if (doc.childNodeSize() > 0) { */ <mask> Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; } </s> java",
      "function range": "74,5-84,5",
      "output": [
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  if (doc.childNodeSize() == 1) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
          "correctness": "wrong"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  if (doc.hasChildNodes()) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  if (doc.childNodeCount() == 1) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  Element el = doc.childNode(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  if (doc.hasChildNodes()) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  return decl; }",
          "correctness": "wrong"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  return decl; }",
          "correctness": "wrong"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  if (doc.childNodeSize() == 1) { Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }",
          "correctness": "wrong"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  return decl; }",
          "correctness": "wrong"
        },
        {
          "patch": "public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null;  return null; }",
          "correctness": "wrong"
        }
      ]
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "<s> public String getValue() { /* return val; */ <mask> } </s> java",
      "function range": "79,5-81,5",
      "output": [
        {
          "patch": "public String getValue() {  return null ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String getValue() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String getValue() {  return value ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String getValue() {  return val ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String getValue ( ) {  return null ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String getValue() {  return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String getValue() {  return \" \" ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String getValue() {  return super. getValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String getValue() {  return \" value \" ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public String getValue ( ) {  return \" \" ; }",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "<s> private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0 ? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0 ? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1 != null && p1.equals(p2)) { return 0; } if (depth1 == 1) { /* throw new JXPathException( \"Cannot compare pointers that do not belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\"); */ <mask> } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r != 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); } </s> java",
      "function range": "642,5-675,5",
      "output": [
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } if (depth2 == 1) { throw new JXPathException( \"Cannot compare pointers that do not belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\"); } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } if (depth2 == 1) { throw new JXPathException( \"Cannot compare pointers that belong to the same tree: '\" + p1 + \"' and '\" + p2 + \"'\"); } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } if (depth2 == 1) { return compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "plausible"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        },
        {
          "patch": "private int compareNodePointers( NodePointer p1, int depth1, NodePointer p2, int depth2) { if (depth1 < depth2) { int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1); return r == 0? -1 : r; } if (depth1 > depth2) { int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2); return r == 0? 1 : r; } if (p1 == null && p2 == null) { return 0; } if (p1!= null && p1.equals(p2)) { return 0; } if (depth1 == 1) {  } int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1); if (r!= 0) { return r; } return p1.parent.compareChildNodePointers(p1, p2); }",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "<s> public final Object computeValue(EvalContext context) { /* return compute(args[0].computeValue(context), args[1].computeValue(context)) */ <mask> ? Boolean.TRUE : Boolean.FALSE; } </s> java",
      "function range": "41,5-44,5",
      "output": [
        {
          "patch": "public final Object computeValue(EvalContext context) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return args. length == 2? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "wrong"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return args[0].getValue() == args[1].getValue()? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return args[0].equals(args[1])? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "wrong"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return (args[0].getValue() == args[1].getValue())? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return (args[0].equals(args[1]) || args[1].equals(args[0]) )? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "wrong"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return compute(args[2].computeValue(context), args[3].computeValue(context)); }",
          "correctness": "wrong"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return args[0].equals(args[1].getValue())? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final Object computeValue(EvalContext context) {  return (args[0].equals(args[1]) && args[1].equals(args[2]) )? Boolean.TRUE : Boolean.FALSE; }",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "<s> public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); /* return equalStrings(namespaceURI, nodeNS); */ <mask> } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; } </s> java",
      "function range": "87,5-136,5",
      "output": [
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NamespaceTest) { if (node.getNodeType() == Node.NAMESPACE_NODE) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NamespaceTest) { if (node.getNodeType() == Node.ELEMENT_NODE) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NamespaceTest) { if (node.getNodeType() == Node.NAMESPACE_NODE) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType()!= Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);  } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }",
          "correctness": "wrong"
        }
      ]
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "<s> public int getLength() { /* return ValueUtils.getLength(getBaseValue()); */ <mask> } </s> java",
      "function range": "151,5-153,5",
      "output": [
        {
          "patch": "public int getLength() {  return super.getLength(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getLength() {  return super.getLength(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getLength() {  return super. getLength(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getLength() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getLength() {  return ValueUtils.getLength(getValue()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getLength() {  return 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getLength() {  return baseValue. getLength(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getLength() {  return ValueUtils.getLength(getValue()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getLength() {  return getValue ( ). length(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getLength() {  return ValueUtils.getLength(value); }",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "<s> public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) { /* pos += Character.charCount(Character.codePointAt(input, pos)); */ <mask> } } } </s> java",
      "function range": "75,5-98,5",
      "output": [
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate (CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate (CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } if (pos == len) { break; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } if (pos == len) { break; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } if (pos >= len) { break; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; } if (pos >= len) { break; } } }",
          "correctness": "wrong"
        },
        {
          "patch": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) {  char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos += c.length; if (pos >= len) { break; } } } }",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "<s> public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && /* cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && */ <mask> cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); } </s> java",
      "function range": "258,5-270,5",
      "output": [
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.HOUR_OF_WEEK) == cal2.get(Calendar.HOUR_OF_WEEK) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass())); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean isSameLocalTime (Calendar cal1, Calendar cal2) { if (cal1 == null || cal2 == null) { throw new IllegalArgumentException(\"The date must not be null\"); } return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&  cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass()) ; }",
          "correctness": "plausible"
        }
      ]
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "<s> public String format(Date date) { /* Calendar c = new GregorianCalendar(mTimeZone); */ <mask> c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); } </s> java",
      "function range": "819,5-823,5",
      "output": [
        {
          "patch": "public String format(Date date) {  Calendar c = new GregorianCalendar(mTimeZone); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public String format(Date date) {  c.setFirstDayOfWeek(Calendar. MONDAY); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setTimeZone(mTimeZone); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setTimeZone ( mTimeZone); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setTimeZone(mTimeZone); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setTimeZone ( TimeZone. getTimeZone(\"UTC\")); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setFirstDayOfWeek(mFirstDayOfWeek); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setLenient(false); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setTimeInMillis(date.getTimeInMillis()); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public String format(Date date) {  c.setFirstDayOfWeek(mFirstDayOfWeek); c.setMonth(mMonth); c.setDayOfMonth(mDayOfMonth); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "<s> /* static float toJavaVersionInt(String version) { */ <mask> return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE)); } </s> java",
      "function range": "1672,5-1674,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_33_/src/main/java/org/apache/commons/lang3/ClassUtils.java_910-911": {
      "loc": "910-911",
      "input": "<s> public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) { /* classes[i] = array[i].getClass(); */ <mask> } return classes; } </s> java",
      "function range": "902,5-913,5",
      "output": [
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  classes[i] = array[i].getClass(); } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (array[i].getClass()!= null) { classes[i] = array[i].getClass(); } } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (array[i].getClass()!= null) { classes [i] = array[i].getClass(); } } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  } for (int i = 0; i < array.length; i++) { classes[i] = array[i].getClass(); } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (classes[i] == null) { classes[i] = array[i].getClass(); } } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (array[i]!= null) { classes[i] = array[i].getClass(); } } return classes; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (i!= array.length - 1) { classes[i] = array[i].getClass(); } } return classes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (classes[i] == null) { classes[i] = array[i]; } } return classes; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Class<?>[] toClass(Object[] array) { if (array == null) { return null; } else if (array.length == 0) { return ArrayUtils.EMPTY_CLASS_ARRAY; } Class<?>[] classes = new Class[array.length]; for (int i = 0; i < array.length; i++) {  if (array[i].getClass().isArray()) { classes = ArrayUtils. toClass(array[i]); } } return classes; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Lang_40_/src/java/org/apache/commons/lang/StringUtils.java_1048-1049": {
      "loc": "1048-1049",
      "input": "<s> public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; } /* return contains(str.toUpperCase(), searchStr.toUpperCase()); */ <mask> } </s> java",
      "function range": "1044,5-1049,5",
      "output": [
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toLowerCase().contains(searchStr.toLowerCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toUpperCase().contains(searchStr.toUpperCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return contains(str.toLowerCase(), searchStr.toLowerCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toUpperCase().equals(searchStr.toUpperCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toUpperCase().startsWith(searchStr.toUpperCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toUpperCase(). contains(searchStr.toUpperCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return contains(str, searchStr.toLowerCase()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toUpperCase().indexOf(searchStr.toUpperCase()) >= 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean containsIgnoreCase(String str, String searchStr) { if (str == null || searchStr == null) { return false; }  return str.toUpperCase().indexOf(searchStr.toUpperCase())!= -1; }",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_43_/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java_422-423": {
      "loc": "422-423",
      "input": "<s> private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) { /* return appendTo == null ? null : appendTo.append(QUOTE); */ <mask> } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); } </s> java",
      "function range": "417,5-444,5",
      "output": [
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, c.length - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "wrong"
        },
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, pos.getIndex() - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "timeout"
        },
        {
          "patch": "private StringBuffer appendQuotedString (String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, c.length - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "wrong"
        },
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(QUOTE); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "wrong"
        },
        {
          "patch": "private StringBuffer appendQuotedString (String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, pos.getIndex() - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "timeout"
        },
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, c.length - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "wrong"
        },
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, pos.getIndex() - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start ); }",
          "correctness": "timeout"
        },
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, pos.getIndex() - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start)); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private StringBuffer appendQuotedString (String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, pos.getIndex() - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start ); }",
          "correctness": "timeout"
        },
        {
          "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo, boolean escapingOn) { int start = pos.getIndex(); char[] c = pattern.toCharArray(); if (escapingOn && c[start] == QUOTE) {  return appendTo == null? null : appendTo.append(c, start, pos.getIndex() - start); } int lastHold = start; for (int i = pos.getIndex(); i < pattern.length(); i++) { if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) { appendTo.append(c, lastHold, pos.getIndex() - lastHold).append( QUOTE); pos.setIndex(i + ESCAPED_QUOTE.length()); lastHold = pos.getIndex(); continue; } switch (c[pos.getIndex()]) { case QUOTE: next(pos); return appendTo == null? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold); default: next(pos); } } throw new IllegalArgumentException( \"Unterminated quoted string at position \" + start); }",
          "correctness": "timeout"
        }
      ]
    },
    "Lang_51_/src/java/org/apache/commons/lang/BooleanUtils.java_682-683": {
      "loc": "682-683",
      "input": "<s> public static boolean toBoolean(String str) { if (str == \"true\") { return true; } if (str == null) { return false; } switch (str.length()) { case 2: { char ch0 = str.charAt(0); char ch1 = str.charAt(1); return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N'); } case 3: { char ch = str.charAt(0); if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S'); } if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's'); } /* } */ <mask> case 4: { char ch = str.charAt(0); if (ch == 't') { return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E'); } if (ch == 'T') { return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e'); } } } return false; } </s> java",
      "function range": "649,5-700,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean toBoolean(String str) { if (str == \"true\") { return true; } if (str == null) { return false; } switch (str.length()) { case 2: { char ch0 = str.charAt(0); char ch1 = str.charAt(1); return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N'); } case 3: { char ch = str.charAt(0); if (ch == 'y') { return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) =='s' || str.charAt(2) == 'S'); } if (ch == 'Y') { return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) =='s'); }  return false; } case 4: { char ch = str.charAt(0); if (ch == 't') { return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'e'); } if (ch == 'T') { return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'e' || str.charAt(3) == 'e'); } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_57_/src/java/org/apache/commons/lang/LocaleUtils.java_223-224": {
      "loc": "223-224",
      "input": "<s> public static boolean isAvailableLocale(Locale locale) { /* return cAvailableLocaleSet.contains(locale); */ <mask> } </s> java",
      "function range": "222,5-224,5",
      "output": [
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return (locale!= null); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return locale!= null; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return cAvailableLocaleSet.contains(locale); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return locale!= null ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return cAvailableLocaleSet.contains(locale.getLocale()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return cAvailableLocaleSet. contains(locale); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean isAvailableLocale(Locale locale) {  return cAvailableLocaleSet.contains(locale); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean isAvailableLocale (Locale locale) {  return cAvailableLocaleSet.contains(locale); }",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_59_/src/java/org/apache/commons/lang/text/StrBuilder.java_884-885": {
      "loc": "884-885",
      "input": "<s> public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null ? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) { /* str.getChars(0, strLen, buffer, size); */ <mask> } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; } </s> java",
      "function range": "878,5-895,5",
      "output": [
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  for (int i = 0; i < width - strLen; i++) { buffer[size + i] = padChar; } } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  buffer[size + strLen] = padChar; } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  for (int i = 0; i < width; i++) { buffer[size + i] = padChar; } } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  for (int i = 0; i < width - strLen; i++) { buffer[size + i] = padChar; } } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  buffer[size] = padChar; buffer[size + strLen] = padChar; } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  buffer[size + strLen - width] = padChar; } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  for (int i = 0; i < width; i++) { buffer[size + strLen + i] = padChar; } } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  buffer[size + strLen] = padChar; buffer[size + strLen + 1] = padChar; } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  for (int i = 0; i < width - strLen; i++) { buffer[size + i] = padChar; } } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) { if (width > 0) { ensureCapacity(size + width); String str = (obj == null? getNullText() : obj.toString()); int strLen = str.length(); if (strLen >= width) {  for (int i = 0; i < width; i++) { buffer[size + i] = padChar; } } else { int padLen = width - strLen; str.getChars(0, strLen, buffer, size); for (int i = 0; i < padLen; i++) { buffer[size + strLen + i] = padChar; } } size += width; } return this ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Lang_61_/src/java/org/apache/commons/lang/text/StrBuilder.java_1776-1777": {
      "loc": "1776-1777",
      "input": "<s> public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0 ? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer; /* int len = thisBuf.length - strLen; */ <mask> outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j) != thisBuf[i + j]) { continue outer; } } return i; } return -1; } </s> java",
      "function range": "1760,5-1787,5",
      "output": [
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  if (strLen == 0) { return startIndex; } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  if (strLen > len) { return -1; } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  for (int i = startIndex; i < len; i++) { thisBuf[i] = str.charAt(i); } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  if (strLen < len) { return -1; } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  for (int i = 0; i < len; i++) { thisBuf[i] = str.charAt(i); } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  if (strLen == 0) { return thisBuf.length - startIndex; } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  for (int i = startIndex; i < len; i++) { if (str.charAt(i)!= thisBuf[i]) { continue outer; } } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  for (int i = startIndex; i < len; i++) { if (str.charAt(i)!= thisBuf[i]) { return i; } } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf[i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  for (int i = startIndex; i < len; i++) { if (str.charAt(i)!= thisBuf[i]) { continue outer; } } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf [i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int indexOf(String str, int startIndex) { startIndex = (startIndex < 0? 0 : startIndex); if (str == null || startIndex >= size) { return -1; } int strLen = str.length(); if (strLen == 1) { return indexOf(str.charAt(0), startIndex); } if (strLen == 0) { return startIndex; } if (strLen > size) { return -1; } char[] thisBuf = buffer;  for (int i = startIndex; i < len; i++) { if (str.charAt(i)!= thisBuf[i]) { return i; } } outer: for (int i = startIndex; i < len; i++) { for (int j = 0; j < strLen; j++) { if (str.charAt(j)!= thisBuf [i + j]) { continue outer; } } return i; } return -1; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_2_/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java_268-269": {
      "loc": "268-269",
      "input": "<s> public double getNumericalMean() { /* return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize(); */ <mask> } </s> java",
      "function range": "267,5-269,5",
      "output": [
        {
          "patch": "public double getNumericalMean() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getNumericalMean() {  return super. getNumericalMean(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) (getSampleSize() * getNumberOfSuccesses()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) getNumberOfSuccesses() / getPopulationSize(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) (getSampleSize() / getNumberOfSuccesses()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return Double. NaN ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) getSampleSize() / getNumberOfSuccesses(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) getSampleSize() / getPopulationSize(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) getPopulationSize(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getNumericalMean() {  return (double) getNumberOfSuccesses(); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_5_/src/main/java/org/apache/commons/math3/complex/Complex.java_305-306": {
      "loc": "305-306",
      "input": "<s> public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) { /* return NaN; */ <mask> } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } } </s> java",
      "function range": "299,5-321,5",
      "output": [
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isZero) { return ZERO; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (real == 0.0 && imaginary == 0.0) { return ZERO; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  return ZERO; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isNegativeInfinity) { return NEGATIVE_INFINITY; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isInfinite && real == 0.0 && imaginary == 0.0) { return ZERO; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex reciprocal() { if (isNaN) { return NaN; } if (real == 0.0 && imaginary == 0.0) {  return ZERO; } if (isInfinite) { return ZERO; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { double q = real / imaginary; double scale = 1. / (real * q + imaginary); return createComplex(scale * q, -scale); } else { double q = imaginary / real; double scale = 1. / (imaginary * q + real); return createComplex(scale, -scale * q); } }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_9_/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java_87-88": {
      "loc": "87-88",
      "input": "<s> public Line revert() { /* final Line reverted = new Line(zero, zero.subtract(direction)); */ <mask> return reverted; } </s> java",
      "function range": "86,5-89,5",
      "output": [
        {
          "patch": "public Line revert() {  final Line reverted = new Line(direction, direction.subtract(zero)); return reverted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  final Line reverted = new Line(direction, zero); return reverted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  return this; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  final Line reverted = new Line(zero, direction); return reverted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  final Line reverted = new Line(one, one.subtract(direction)); return reverted; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Line revert() {  final Line reverted = new Line(direction, zero.subtract(direction)); return reverted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  final Line reverted = this; return reverted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  return reverted; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Line revert() {  final Line reverted = new Line(zero, direction.subtract(zero)); return reverted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public Line revert() {  final Line reverted = new Line(direction.subtract(zero), direction); return reverted; }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184": {
      "loc": "183-184",
      "input": "<s> public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length != dim) { throw new DimensionMismatchException(vals.length, dim); } /* return FastMath.pow(2 * FastMath.PI, -dim / 2) * */ <mask> FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); } </s> java",
      "function range": "177,5-186,5",
      "output": [
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = getCovarianceMatrixDeterminant(vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = getCovarianceMatrixDeterminant(); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = covarianceMatrixDeterminant (vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = covarianceMatrixDeterminant(vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = covarianceMatrixInverse (vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  double covarianceMatrixDeterminant = getCovarianceMatrixDeterminant(vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = getDeterminant(vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = getVarianceMatrixDeterminant(vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  final double covarianceMatrixDeterminant = getCovarianceMatrixDeterminant (vals); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double density(final double[] vals) throws DimensionMismatchException { final int dim = getDimension(); if (vals.length!= dim) { throw new DimensionMismatchException(vals.length, dim); }  double covarianceMatrixDeterminant = getCovarianceMatrixDeterminant(); return FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_20_/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java_921-922": {
      "loc": "921-922",
      "input": "<s> public double[] repairAndDecode(final double[] x) { /* return */ <mask> decode(x); } </s> java",
      "function range": "920,9-923,9",
      "output": [
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return decode(x); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return this. decode(x); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return repair(x); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return repair (x); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return repair ( x )? x : decode(x); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return decode (x); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return repair (x)? x : decode(x); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return repair (x )? x : decode(x); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return super. repairAndDecode (x); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double[] repairAndDecode (final double[] x) {  return super. repairAndDecode(x); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_27_/src/main/java/org/apache/commons/math3/fraction/Fraction.java_597-598": {
      "loc": "597-598",
      "input": "<s> public double percentageValue() { /* return multiply(100).doubleValue(); */ <mask> } </s> java",
      "function range": "596,5-598,5",
      "output": [
        {
          "patch": "public double percentageValue() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double percentageValue() {  return multiply(100).doubleValue(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double percentageValue() {  return multiply(100).doubleValue()*100; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double percentageValue() {  return this.percentageValue(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double percentageValue() {  return 100 * doubleValue(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public double percentageValue() {  return this. doubleValue(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double percentageValue() {  return multiply(100).doubleValue() / 100; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double percentageValue() {  return multiply(100).doubleValue() * 100; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double percentageValue() {  return this.value * 100; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double percentageValue() {  return multiply(100).doubleValue(); ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_30_/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java_173-174": {
      "loc": "173-174",
      "input": "<s> private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException { /* final int n1n2prod = n1 * n2; */ <mask> final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); } </s> java",
      "function range": "168,5-184,5",
      "output": [
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final int n2n1prod = n2 * n1; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  if (n1n2prod == 0 ) { throw new MaxCountExceededException(); } final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  if (n1n2prod == 0 || n1n2prod == 1 || n1n2prod == 2 ) { throw new MaxCountExceededException(); } final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final int n2n1prod = n2 * n1; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1, 1); return 2 * standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final int n2n1prod = n2 * n1; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z) / standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  if (n1n2prod == 0 ) { throw new MaxCountExceededException(); } final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z) / standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final int n2n1prod = n2 * n1; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z) / standardNormal.cumulativeProbability(z - EU); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final int n2n1prod = n2 * n1; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z) / standardNormal.cumulativeProbability(z + EU); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private double calculateAsymptoticPValue (final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {  final int n2n1prod = n2 * n1; final double EU = n1n2prod / 2.0; final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0; final double z = (Umin - EU) / FastMath.sqrt(VarU); final NormalDistribution standardNormal = new NormalDistribution(0, 1); return 2 * standardNormal.cumulativeProbability(z) / standardNormal.cumulativeProbability(z - EU) / standardNormal.cumulativeProbability(z); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_32_/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java_136-137": {
      "loc": "136-137",
      "input": "<s> @Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false); /* if ((Boolean) tree.getAttribute()) { */ <mask> setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { double sum = 0; double sumX = 0; double sumY = 0; for (Vector2D[] loop : v) { double x1 = loop[loop.length - 1].getX(); double y1 = loop[loop.length - 1].getY(); for (final Vector2D point : loop) { final double x0 = x1; final double y0 = y1; x1 = point.getX(); y1 = point.getY(); final double factor = x0 * y1 - y0 * x1; sum += factor; sumX += factor * (x0 + x1); sumY += factor * (y0 + y1); } } if (sum < 0) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(sum / 2); setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum))); } } } </s> java",
      "function range": "129,5-181,5",
      "output": [
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { final Vector2D[][] v = getVertices(); if (v.length == 0) { final BSPTree<Euclidean2D> tree = getTree(false);  if (v[0][0] == null) { setSize(Double.POSITIVE_INFINITY); setBarycenter(Vector2D.NaN); } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } } else { setSize(0); setBarycenter(new Vector2D(0, 0)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override protected void computeGeometricalProperties() { }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_33_/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java_338-339": {
      "loc": "338-339",
      "input": "<s> protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); /* if (Precision.compareTo(entry, 0d, maxUlps) > 0) { */ <mask> columnsToDrop.add(i); } } for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; } </s> java",
      "function range": "327,5-367,5",
      "output": [
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  if (getBasicRow(i) == null) { columnsToDrop.add(i); } } else if (Precision.compareTo(entry, 0d, maxUlps) < 0) { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  columnsToDrop.add(i); } else if (Precision.compareTo(entry, 0d, maxUlps) < 0) { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(i); } } for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } else { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  if (getBasicRow(i) == null) { columnsToDrop.add(i); } } else if (Precision.compareTo(entry, 0d, maxUlps) == 0) { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(i); } } for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0; for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix); this.numArtificialVariables = 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  if (getBasicRow(i) == null) { columnsToDrop.add(i); } } else if (Precision.compareTo(entry, 0d, maxUlps) < 0) { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  columnsToDrop.add(i); } else if (Precision.compareTo(entry, 0d, maxUlps) < 0) { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } else { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void dropPhase1Objective() { if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i);  if (getBasicRow(i) == null) { columnsToDrop.add(i); } } else if (Precision.compareTo(entry, 0d, maxUlps) < 0) { columnsToDrop.add(i); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_34_/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java_209-210": {
      "loc": "209-210",
      "input": "<s> public Iterator<Chromosome> iterator() { /* return chromosomes.iterator(); */ <mask> } </s> java",
      "function range": "208,5-210,5",
      "output": [
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes.iterator(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes. iterator(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes.iterator(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes. iterator ( ); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return this.iterator(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return this; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Iterator<Chromosome> iterator() {  return chromosomes.iterator(); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_41_/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java_520-521": {
      "loc": "520-521",
      "input": "<s> public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0; /* for (int i = 0; i < weights.length; i++) { */ <mask> sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; } </s> java",
      "function range": "501,5-532,5",
      "output": [
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights.length; j++) { sumWts += weights[j]; } sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  if (isBiasCorrected) { sumWts += weights[i + 1]; } else { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights.length; j++) { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights[i].length; j++) { sumWts += weights[i][j]; } sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights[i].length; j++) { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights[i].length; j++) { sumWts += weights[i][j]; } sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights[i].length; j++) { sumWts += weights[i] * weights[j]; } sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  if (isBiasCorrected) { sumWts += weights[i + 1]; } else { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights.length; j++) { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double evaluate(final double[] values, final double[] weights, final double mean, final int begin, final int length) { double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0;  for (int j = 0; j < weights[i].length; j++) { sumWts += weights[i]; } if (isBiasCorrected) { var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0); } else { var = (accum - (accum2 * accum2 / sumWts)) / sumWts; } } } return var; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_48_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_189-190": {
      "loc": "189-190",
      "input": "<s> protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI: /* break; */ <mask> default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } } </s> java",
      "function range": "129,5-251,5",
      "output": [
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  f0 *= f1 / (f1 + fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  f0 *= f1 / (f1 - fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  case FALSI: f0 *= f1 / (f1 + fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  case REGULA: f0 *= f1 / (f1 + fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  f0 *= f1 / (f1 + fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } x0 = x1; f0 = fx; } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  f0 *= f1 / (f1 - fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } x0 = x1; f0 = fx; } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; } if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted =!inverted; } else { switch (method) { case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; case REGULA_FALSI:  f0 *= f1 / (f1 + fx); break; default: throw new MathInternalError(); } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted? x1 : x0; case RIGHT_SIDE: return inverted? x0 : x1; case BELOW_SIDE: return (f1 <= 0)? x1 : x0; case ABOVE_SIDE: return (f1 >= 0)? x1 : x0; default: throw new MathInternalError(); } } x0 = x1; f0 = f1; } }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_53_/src/main/java/org/apache/commons/math/complex/Complex.java_153-154": {
      "loc": "153-154",
      "input": "<s> public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs); /* return createComplex(real + rhs.getReal(), */ <mask> imaginary + rhs.getImaginary()); } </s> java",
      "function range": "150,5-155,5",
      "output": [
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(real - rhs.getReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(complexReal + rhs.getComplexReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(imaginary + rhs.getImaginary(), imaginary + rhs.getImaginary()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex( imaginary + rhs.getImaginary()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex( real + rhs.getReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(imaginary + rhs.getImaginary(), real + rhs.getReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(imaginary + rhs.getReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(imaginary + rhs.getImaginary()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Complex add(Complex rhs) throws NullArgumentException { MathUtils.checkNotNull(rhs);  return createComplex(real + rhs.getReal(), imaginary + rhs.getReal(), imaginary + rhs.getImaginary()); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_56_/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java_237-244": {
      "loc": "237-244",
      "input": "<s> public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; } /* int idx = 1; while (count < index) { count += idx; ++idx; } --idx; indices[last] = idx; */ <mask> return indices; } </s> java",
      "function range": "216,5-246,5",
      "output": [
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  return indices; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count < index) { count += offset; ++offset; } --offset; indices[last] = offset; return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count > index) { count -= offset; ++offset; } indices[last] = offset; return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count < index) { count += offset; ++offset; } indices[last] = offset; return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  for (int i = 0; i < last; i++) { indices[i] = uniCounterOffset[i]; } return indices; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count >= index) { count -= offset; ++offset; } indices[last] = offset; return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count > index) { count -= offset; --offset; indices[last] = offset; } return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count > index) { count -= offset; ++offset; } --offset; indices[last] = offset; return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count < index) { count += offset; ++offset; } --count; indices[last] = offset; return indices; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int[] getCounts(int index) { if (index < 0 || index >= totalSize) { throw new OutOfRangeException(index, 0, totalSize); } final int[] indices = new int[dimension]; int count = 0; for (int i = 0; i < last; i++) { int idx = 0; final int offset = uniCounterOffset[i]; while (count <= index) { count += offset; ++idx; } --idx; count -= offset; indices[i] = idx; }  final int offset = uniCounterOffset[last]; while (count > index) { count -= offset; ++offset; indices[last] = offset; } return indices; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_57_/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java_175-176": {
      "loc": "175-176",
      "input": "<s> private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) { /* int sum = 0; */ <mask> for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; } </s> java",
      "function range": "161,5-198,5",
      "output": [
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  sum = 0; for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.remove(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0 ; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0; i < pointSet.size() ; i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  sum = 0; for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters (final Collection<T> points, final int k, final Random random) { final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) {  sum = 0; for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; } } } return resultSet ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_58_/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java_121-122": {
      "loc": "121-122",
      "input": "<s> public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess(); /* return fit(new Gaussian.Parametric(), guess); */ <mask> } </s> java",
      "function range": "119,5-122,5",
      "output": [
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return guess; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return guess ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return fit(new Gaussian.Parametric(), guess); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return fit (new Gaussian.Parametric(), guess); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double [ ] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return guess; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return (new Gaussian.Parametric()).fit(guess); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return fit ( new Gaussian.Parametric(), guess); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return new Gaussian.Parametric().fit(guess); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double[] fit() { final double[] guess = (new ParameterGuesser(getObservations())).guess();  return (new ParameterGuesser(getObservations()).guess()); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_59_/src/main/java/org/apache/commons/math/util/FastMath.java_3482-3483": {
      "loc": "3482-3483",
      "input": "<s> public static float max(final float a, final float b) { /* return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b); */ <mask> } </s> java",
      "function range": "3481,5-3483,5",
      "output": [
        {
          "patch": "public static float max(final float a, final float b) {  return a > b? a : b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max (final float a, final float b) {  return a > b? a : b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return a < b? a : b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return (a <= b)? a : b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return a <= b? a : b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return (a > b)? a : b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return Math.max(a, b); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return a > b? Float.NaN : a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static float max(final float a, final float b) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static float max(final float a, final float b) {  return a > b? Float.NaN : a ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_63_/src/main/java/org/apache/commons/math/util/MathUtils.java_417-418": {
      "loc": "417-418",
      "input": "<s> public static boolean equals(double x, double y) { /* return (Double.isNaN(x) && Double.isNaN(y)) || x == y; */ <mask> } </s> java",
      "function range": "416,5-418,5",
      "output": [
        {
          "patch": "public static boolean equals(double x, double y) {  return x == y; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equals(double x, double y) {  return Double.isNaN(x) || Double.isNaN(y); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals (double x, double y) {  return x == y; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals(double x, double y) {  return x == y ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equals(double x, double y) {  return Double.isNaN(x) && Double.isNaN(y); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals (double x, double y) {  return Double.isNaN(x) || Double.isNaN(y); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean equals(double x, double y) {  return (x == y); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equals (double x, double y) {  return x == y ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean equals(double x, double y) {  return Double.equals(x, y); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean equals (double x, double y) {  return Double.isNaN(x) && Double.isNaN(y); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172": {
      "loc": "171-172",
      "input": "<s> public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); /* out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); */ <mask> } } } return new BlockRealMatrix(out); } </s> java",
      "function range": "160,5-176,5",
      "output": [
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = 2 * tDistribution.cumulativeProbability(t); } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  if (i == j) { out[i][j] = tDistribution.cumulativeProbability(t); } else { out[i][j] = tDistribution.cumulativeProbability(t); } } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); out[i][j] = tDistribution.cumulativeProbability(t); } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); } if (i == j) { out[i][j] = 1d; } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); out[i][j] /= tDistribution.cumulativeProbability(t); } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); if (i == j) { out[i][j] = 1d; } } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); out[i][j] = tDistribution.cumulativeProbability(t); out[i][j] = tDistribution.cumulativeProbability(t); } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  if (i == j) { out[i][j] = tDistribution.cumulativeProbability(t); } else { out[i][j] = tDistribution.cumulativeProbability(t - r); } } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        },
        {
          "patch": "public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));  out[i][j] = tDistribution.cumulativeProbability(t); } if (i == j) { out[i][j] = 1d; } else { out[i][j] = 0d; } } } return new BlockRealMatrix(out); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_70_/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java_72-73": {
      "loc": "72-73",
      "input": "<s> public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { /* return solve(min, max); */ <mask> } </s> java",
      "function range": "70,5-73,5",
      "output": [
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. value ( initial ) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. value ( min, max ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. valueAt ( initial ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return solve(initial, min, max); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return solve(min, max, initial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. evaluate ( min, max ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. valueAt ( min, max ) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. value ( min, max, initial ); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {  return f. value ( min, max, initial); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_73_/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java_136-137": {
      "loc": "136-137",
      "input": "<s> public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); } /* */ <mask> return solve(f, min, yMin, max, yMax, initial, yInitial); } </s> java",
      "function range": "98,5-140,5",
      "output": [
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  yMin = f.value(min); yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } return solve(f, min, yMin, max, yMax, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  yMin = f.value(min); yMax = f.value(max); if (yInitial * yMax < 0) { return solve(f, min, yMin, max, yMax, initial, yInitial); } return solve(f, min, yMin, max, yMax, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  if (yInitial * yMin > yInitial * yMax) { return solve(f, min, yMin, max, yMax, initial, yInitial); } return solve(f, min, yMin, max, yMax, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  return solve(f, initial, yInitial, min, yMin, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  return solve(f, initial, yInitial, min, yMin, max, yMax); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  if (yInitial * yMin > yMax) { return solve(f, min, yMin, max, yMax, initial, yInitial); } return solve(f, min, yMin, max, yMax, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  return solve(f, min, yMin, initial, yInitial, min, yMin); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return solve(f, min, yMin, max, yMax, initial, yInitial); } return solve(f, min, yMin, max, yMax, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifySequence(min, initial, max); double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(f, min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(f, initial, yInitial, max, yMax, initial, yInitial); }  yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } yMax = f.value(max); return solve(f, min, yMin, max, yMax, initial, yInitial); }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_75_/src/main/java/org/apache/commons/math/stat/Frequency.java_303-304": {
      "loc": "303-304",
      "input": "<s> @Deprecated public double getPct(Object v) { /* return getCumPct((Comparable<?>) v); */ <mask> } </s> java",
      "function range": "301,5-304,5",
      "output": [
        {
          "patch": "@Deprecated public double getPct(Object v) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct((Comparable<?>) v.getClass()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return super. getPct(v); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct(v.getClass()); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct((Comparable<Integer>) v); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct((Comparable<? extends Number>) v); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct((Comparable<Object>) v); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct((Comparable<?>) v); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return getCumPct((Class<?>) v); }",
          "correctness": "wrong"
        },
        {
          "patch": "@Deprecated public double getPct(Object v) {  return (double) v; }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_80_/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java_1135-1136": {
      "loc": "1135-1136",
      "input": "<s> private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) { /* int j = 4 * n - 1; */ <mask> for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; } </s> java",
      "function range": "1132,5-1147,5",
      "output": [
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i] = work[i + step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted (final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i + step] = work[j - step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted (final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i] = work[i + step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i + step] = work[i]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i + step] = work[i - step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i] = work[i + step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work [j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i + step] = work[j - step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work [j - k] = tmp; } j -= 4; } return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean flipIfWarranted(final int n, final int step) { if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {  for (int i = 0; i < j; i += step) { work[i + step] = work[j - step]; } for (int i = 0; i < j; i += 4) { for (int k = 0; k < 4; k += step) { final double tmp = work[i + k]; work[i + k] = work[j - k]; work[j - k] = tmp; } j -= 4; } return true; } return false ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_82_/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java_82-83": {
      "loc": "82-83",
      "input": "<s> private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); /* if (MathUtils.compareTo(entry, 0, epsilon) >= 0) { */ <mask> final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; } </s> java",
      "function range": "76,5-91,5",
      "output": [
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (MathUtils.compareTo(rhs, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (MathUtils.compareTo(rhs, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (MathUtils.compareTo(rhs, 0, epsilon) >= 0) { return i; } final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (rhs < minRatio) { minRatio = rhs; minRatioPos = i; } else { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (entry < minRatio) { minRatio = entry; minRatioPos = i; } else { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (entry < minRatio) { minRatio = entry; minRatioPos = i; } final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (MathUtils.compareTo(rhs, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (MathUtils.compareTo(rhs, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col);  if (MathUtils.compareTo(rhs, 0, epsilon) >= 0) { final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } } } return minRatioPos; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "Math_85_/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java_198-199": {
      "loc": "198-199",
      "input": "<s> public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound))); /* if (fa * fb >= 0.0 ) { */ <mask> throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; } </s> java",
      "function range": "165,5-208,5",
      "output": [
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations > maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations >= maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations == maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations >= maximumIterations ) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations > maximumIterations ) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations < maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations == maximumIterations ) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations == maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations == maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound); } return new double[]{a, b}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException { if (function == null) { throw MathRuntimeException.createIllegalArgumentException(\"function is null\"); } if (maximumIterations <= 0) { throw MathRuntimeException.createIllegalArgumentException( \"bad value for maximum iterations number: {0}\", maximumIterations); } if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) { throw MathRuntimeException.createIllegalArgumentException( \"invalid bracketing parameters: lower bound={0}, initial={1}, upper bound={2}\", lowerBound, initial, upperBound); } double a = initial; double b = initial; double fa; double fb; int numIterations = 0 ; do { a = Math.max(a - 1.0, lowerBound); b = Math.min(b + 1.0, upperBound); fa = function.value(a); fb = function.value(b); numIterations++ ; } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));  if (numIterations >= maximumIterations) { throw new ConvergenceException( \"number of iterations={0}, maximum iterations={1}, \" + \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" + \"final b value={6}, f(a)={7}, f(b)={8}\", numIterations, maximumIterations, initial, lowerBound, upperBound, a, b); } return new double[]{a, b}; }",
          "correctness": "plausible"
        }
      ]
    },
    "Math_91_/src/java/org/apache/commons/math/fraction/Fraction.java_259-261": {
      "loc": "259-261",
      "input": "<s> public int compareTo(Fraction object) { /* double nOd = doubleValue(); double dOn = object.doubleValue(); */ <mask> return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } </s> java",
      "function range": "258,5-262,5",
      "output": [
        {
          "patch": "public int compareTo(Fraction object) {  double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "wrong"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) { return 0; } return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) { return 0 ; } return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) return 0; return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) return 0 ; return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) return 0 ; else return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) return 0; else return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  if (nOd == dOn) { return 0; } else { return (nOd < dOn)? -1 : ((nOd > dOn)? +1 : 0); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int compareTo(Fraction object) {  double nOd = doubleValue(); double dOn = object.doubleValue(); return (nOd < dOn)? -1 : ((nOd > dOn)? +1 :0); }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_94_/src/java/org/apache/commons/math/util/MathUtils.java_412-413": {
      "loc": "412-413",
      "input": "<s> public static int gcd(int u, int v) { /* if (u * v == 0) { */ <mask> return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1) ? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t != 0); return -u * (1 << k); } </s> java",
      "function range": "411,5-460,5",
      "output": [
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } if (v == 0) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } if (v == 0) { return u; } return (Math.abs(u) + Math.abs(v)); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } else if (v == 0) { return u; } else { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0 || v == 0) { throw new ArithmeticException(\"overflow: gcd is zero\"); } return (Math.abs(u) + Math.abs(v)); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } if (v == 0) { return u; } if (u < v) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } if (v == 0) { return u; } if (u == v) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } if (v == 0) { return u; } if (u == 0) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } else if (v == 0) { return u; } else { return (Math.abs(u) + Math.abs(v)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } if (v == 0) { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int gcd(int u, int v) {  if (u == 0) { return v; } else if (v == 0) { return u; } else { return (Math.abs(u) + Math.abs(v)); } if (u > 0) { u = -u; } if (v > 0) { v = -v; } int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { u /= 2; v /= 2; k++; } if (k == 31) { throw new ArithmeticException(\"overflow: gcd is 2^31\"); } int t = ((u & 1) == 1)? v : -(u / 2); do { while ((t & 1) == 0) { t /= 2; } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t!= 0); return -u * (1 << k); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Math_96_/src/java/org/apache/commons/math/complex/Complex.java_258-259": {
      "loc": "258-259",
      "input": "<s> public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else { /* ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); */ <mask> } } catch (ClassCastException ex) { ret = false; } } return ret; } </s> java",
      "function range": "245,5-267,5",
      "output": [
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (real == rhs.getReal()) && (imaginary == rhs.getImaginary()); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  if (ret) { ret = true; } else { ret = false; } } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  if (ret == false) { ret = false; } } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (Double.doubleToRawLongBits(real) == rhs.getReal()) && (Double.doubleToRawLongBits(imaginary) == rhs.getImaginary()); } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())); if (ret) { ret = (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); } } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public boolean equals(Object other) { boolean ret; if (this == other) { ret = true; } else if (other == null) { ret = false; } else { try { Complex rhs = (Complex)other; if (rhs.isNaN()) { ret = this.isNaN(); } else {  ret = Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()); if (ret) { ret = Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()); } } } catch (ClassCastException ex) { ret = false; } } return ret; }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_101_/src/java/org/apache/commons/math/complex/ComplexFormat.java_377-378": {
      "loc": "377-378",
      "input": "<s> public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n; /* if ( */ <mask> source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter()) != 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); } </s> java",
      "function range": "320,5-389,5",
      "output": [
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return new Complex(re.doubleValue(), im.doubleValue() * sign); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Complex parse(String source, ParsePosition pos) { int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number re = parseNumber(source, getRealFormat(), pos); if (re == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); int sign = 0; switch (c) { case 0 : return new Complex(re.doubleValue(), 0.0); case '-' : sign = -1; break; case '+' : sign = 1; break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number im = parseNumber(source, getRealFormat(), pos); if (im == null) { pos.setIndex(initialIndex); return null; } int n = getImaginaryCharacter().length(); startIndex = pos.getIndex(); int endIndex = startIndex + n;  if ( source.substring(startIndex, endIndex).compareTo( getImaginaryCharacter())!= 0) { pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } pos.setIndex(endIndex); return null; }",
          "correctness": "wrong"
        }
      ]
    },
    "Math_105_/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java_264-265": {
      "loc": "264-265",
      "input": "<s> public double getSumSquaredErrors() { /* return sumYY - sumXY * sumXY / sumXX; */ <mask> } </s> java",
      "function range": "263,5-265,5",
      "output": [
        {
          "patch": "public double getSumSquaredErrors() {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return Double. NaN ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return 0.0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return super. getSumSquaredErrors(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return sumYY - sumXY * sumXX; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return sumYY / sumXX ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return sumYY - sumXY * sumXX ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return sumYY / sumXX; }",
          "correctness": "wrong"
        },
        {
          "patch": "public double getSumSquaredErrors() {  return Math. sqrt ( sumYY ) ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_1_/src/org/mockito/internal/invocation/InvocationMatcher.java_123-124": {
      "loc": "123-124",
      "input": "<s> public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1; /* throw new UnsupportedOperationException(); */ <mask> } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } } </s> java",
      "function range": "120,5-150,5",
      "output": [
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  Matcher m = matchers.get(indexOfVararg); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  if (indexOfVararg >= 0 && indexOfVararg < matchers.size()) { matchers.get(indexOfVararg).captureFrom(invocation.getRawArguments()[indexOfVararg]); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  if (indexOfVararg >= 0 && indexOfVararg < matchers.size()) { matchers.get(indexOfVararg).captureFrom(invocation.getArgumentAt(indexOfVararg, Object.class)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  if (indexOfVararg >= 0 && indexOfVararg < matchers.size()) { matchers.get(indexOfVararg).captureFrom(invocation.getArgumentAt(indexOfVararg)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  Matcher matcher = matchers.get(indexOfVararg); if (matcher instanceof CapturesArguments) { ((CapturesArguments) matcher).captureFrom(invocation.getArgumentAt(indexOfVararg)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  Matcher m = matchers.get(indexOfVararg); m.captureFrom(invocation.getArgumentAt(indexOfVararg, Object.class)); } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  if (indexOfVararg >= 0 && indexOfVararg < matchers.size()) { matchers.set(indexOfVararg, matchers.get(indexOfVararg)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "plausible"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  Matcher m = matchers.get(indexOfVararg); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg + 1)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  Matcher m = matchers.get(indexOfVararg); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)) ; } } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation invocation) { if (invocation.getMethod().isVarArgs()) { int indexOfVararg = invocation.getRawArguments().length - 1;  if (indexOfVararg >= 0 && indexOfVararg < matchers.size()) { matchers.get(indexOfVararg).captureFrom(invocation.getArgumentAt(indexOfVararg, Object.class)); } } else { for (int position = 0; position < matchers.size(); position++) { Matcher m = matchers.get(position); if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class)); } } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_5_/src/org/mockito/internal/verification/VerificationOverTimeImpl.java_91-92": {
      "loc": "91-92",
      "input": "<s> public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); } /* catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) { */ <mask> error = handleVerifyException(e); } } if (error != null) { throw error; } } </s> java",
      "function range": "75,5-99,5",
      "output": [
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  } catch (Exception e) { error = handleVerifyException(e); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  error = handleVerifyException(e); } catch (Exception e) { error = handleVerifyException(e); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) { error = handleVerifyException(e); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  } catch (AssertionError e) { error = handleVerifyException(e); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  error = handleVerifyException(e); } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) { error = handleVerifyException(e); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  } catch (MockitoAssertionError e) { error = handleVerifyException(e); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  try { delegate.verify(data); } catch (MockitoAssertionError e) { error = handleVerifyException(e); } } if (error!= null) { throw error; } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  try { delegate.verify(data); } catch (MockitoAssertionError e) { error = handleVerifyException(e); } } if (error!= null) { throw error; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); }  try { delegate.verify(data); if (returnOnSuccess) { return; } else { error = handleVerifyException(e); } } if (error!= null) { throw error; } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_7_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_379-380": {
      "loc": "379-380",
      "input": "<s> private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); } /* registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable)); */ <mask> } </s> java",
      "function range": "375,9-380,9",
      "output": [
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  for (Type type : typeVariable.getSuperBounds()) { registerTypeVariablesOn(type); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  for (Type type : typeVariable.getSupertypes()) { registerTypeVariablesOn(type); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  for (Type type : typeVariable.getActualTypeArguments()) { registerTypeVariablesOn(type); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  for (Type type : typeVariable.getSuperTypes()) { registerTypeVariablesOn(type); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  }",
          "correctness": "wrong"
        },
        {
          "patch": "private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); }  }",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_8_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_79-80": {
      "loc": "79-80",
      "input": "<s> protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument)); /* } else { */ <mask> contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } } </s> java",
      "function range": "66,5-84,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));  } if (actualTypeArgument instanceof TypeVariable) { contextualActualTypeParameters.put(typeParameter, (TypeVariable) actualTypeArgument); } else { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));  } if (actualTypeArgument instanceof ParameterizedType) { contextualActualTypeParameters.put(typeParameter, (ParameterizedType) actualTypeArgument); } else { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));  contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }",
          "correctness": "wrong"
        },
        {
          "patch": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));  if (actualTypeArgument instanceof TypeVariable) { contextualActualTypeParameters.put(typeParameter, (TypeVariable) actualTypeArgument); } else { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));  } if (actualTypeArgument instanceof TypeVariable) { contextualActualTypeParameters.put(typeParameter, ((TypeVariable) actualTypeArgument).getType()); } else { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_22_/src/org/mockito/internal/matchers/Equality.java_13-14": {
      "loc": "13-14",
      "input": "<s> public static boolean areEqual(Object o1, Object o2) { /* if (o1 == null || o2 == null) { */ <mask> return o1 == null && o2 == null; } else if (isArray(o1)) { return isArray(o2) && areArraysEqual(o1, o2); } else { return o1.equals(o2); } } </s> java",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null || o2 == null) { return o1 == null && o2 == null; } else if (isArray(o1)) { return isArray(o2) && areArraysEqual(o1, o2); } else { return o1.equals(o2); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null || o2 == null ) { return o1 == null && o2 == null; } else if (isArray(o1)) { return isArray(o2) && areArraysEqual(o1, o2); } else { return o1.equals(o2); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null && o2 == null ) { return true; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null && o2 == null) { return true; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null || o2 == null) { return false; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null && o2 == null ) { return true ; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (isObject(o1)) { return o1 == null && o2 == null; } else if (isArray(o1)) { return isArray(o2) && areArraysEqual(o1, o2); } else { return o1.equals(o2); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null && o2 == null ) { return true; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null && o2 == null ) { return true; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean areEqual (Object o1, Object o2) {  if (o1 == null && o2 == null) { return true; } return o1 == null && o2 == null; }",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_24_/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java_76-77": {
      "loc": "76-77",
      "input": "<s> public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) { /* return 1; */ <mask> } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); } </s> java",
      "function range": "63,5-81,5",
      "output": [
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        },
        {
          "patch": "public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock(); MockName name = mockUtil.getMockName(mock); if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {  } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); }",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_27_/src/org/mockito/internal/util/MockUtil.java_64-66": {
      "loc": "64-66",
      "input": "<s> public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); /* MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)); */ <mask> ((Factory) mock).setCallback(0, newFilter); } </s> java",
      "function range": "62,5-67,5",
      "output": [
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  ((Factory) oldMockHandler).setCallback(0, newFilter); ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  ((Factory) mock).setCallback(0, oldMockHandler); ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  ((Factory) mock).setCallback(0, null); ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  if (mock instanceof Factory) ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  ((Factory) mock).setCallback(0, newFilter); ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  Mockito.reset(oldMockHandler); ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  oldMockHandler.setCallback(0, newFilter); ((Factory) mock).setCallback(0, newFilter); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);  if (mock instanceof Factory) { ((Factory) mock).setCallback(0, newFilter); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94": {
      "loc": "93-94",
      "input": "<s> private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) { /* mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); */ <mask> } } </s> java",
      "function range": "91,5-95,5",
      "output": [
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mocks.add(fieldInstance); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mocks. add(fieldInstance); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mocks.add(fieldInstance); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mockCandidateFilter.filterCandidate(mocks, field, null).thenInject(); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mockCandidateFilter.filterCandidate(mocks, field, fieldInstance); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mocks.add(mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)); } }",
          "correctness": "wrong"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenUninject(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenUnInject(); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {  mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenIgnore(); } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Mockito_29_/src/org/mockito/internal/matchers/Same.java_29-30": {
      "loc": "29-30",
      "input": "<s> public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description); /* description.appendText(wanted.toString()); */ <mask> appendQuoting(description); description.appendText(\")\"); } </s> java",
      "function range": "26,5-32,5",
      "output": [
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\" and \"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\" or \"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\" \"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\" and(\"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\"(\"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  appendQuoting(description); description.appendText(\" or \"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\" in \"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  description.appendText(\"and(\"); appendQuoting(description); description.appendText(\")\"); }",
          "correctness": "wrong"
        },
        {
          "patch": "public void describeTo(Description description) { description.appendText(\"same(\"); appendQuoting(description);  appendQuoting(description); description.appendText(\" or \"); appendQuoting(description); description.appendText(\" )\"); }",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_34_/src/org/mockito/internal/invocation/InvocationMatcher.java_106-107": {
      "loc": "106-107",
      "input": "<s> public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) { /* if (m instanceof CapturesArguments) { */ <mask> ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } } </s> java",
      "function range": "103,5-111,5",
      "output": [
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (i.getArguments()[k] instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (i.getArguments()[k] instanceof CapturesArguments ) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (i.getArguments()[k]!= null) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (k < i.getArguments().length) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (i.getArguments().length > k) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (k < i.getArguments().length) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (i.getArguments()[k]!= null) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (m instanceof CapturesArguments) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) {  if (i.getArguments().length > k) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++; } }",
          "correctness": "wrong"
        }
      ]
    },
    "Mockito_38_/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java_48-49": {
      "loc": "48-49",
      "input": "<s> private boolean toStringEquals(Matcher m, Object arg) { /* return StringDescription.toString(m).equals(arg.toString()); */ <mask> } </s> java",
      "function range": "47,5-49,5",
      "output": [
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return m.toString().equals(arg.toString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return m == arg; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return StringDescription.toString(m).equals(arg); }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return StringDescription.toString(m) == arg.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return m.toString().equals(arg.toString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return m.matches(arg); }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return StringDescription.toString(m).equals(arg); }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return arg instanceof Matcher; }",
          "correctness": "wrong"
        },
        {
          "patch": "private boolean toStringEquals(Matcher m, Object arg) {  return arg instanceof StringDescription; }",
          "correctness": "wrong"
        }
      ]
    },
    "Time_4_/src/main/java/org/joda/time/Partial.java_464-465": {
      "loc": "464-465",
      "input": "<s> public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); /* Partial newPartial = new Partial(iChronology, newTypes, newValues); */ <mask> iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); } </s> java",
      "function range": "426,5-474,5",
      "output": [
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newTypes); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return newPartial; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return newPartial; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).get(this, index, newValues, value); return new Partial(this, newValues); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).get(this, index, newValues); return new Partial(this, newValues); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(iChronology, newTypes, newValues); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newTypes); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).get(this, index, newValues); return new Partial(this, newValues); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);  newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newTypes); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139": {
      "loc": "138-139",
      "input": "<s> public static long safeMultiply(long val1, int val2) { switch (val2) { case -1: /* return -val1; */ <mask> case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2 != val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; } </s> java",
      "function range": "135,5-149,5",
      "output": [
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply(long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long safeMultiply (long val1, int val2) { switch (val2) { case -1:  case 0: return 0L; case 1: return val1; } long total = val1 * val2; if (total / val2!= val1) { throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2); } return total ; }",
          "correctness": "wrong"
        }
      ]
    },
    "Time_16_/src/main/java/org/joda/time/format/DateTimeFormatter.java_709-710": {
      "loc": "709-710",
      "input": "<s> public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( /* instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); */ <mask> int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; } </s> java",
      "function range": "697,5-724,5",
      "output": [
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = chrono.withOffsetMillis(parsedOffset); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ); if (text == null) { throw new IllegalArgumentException(\"Text must not be null\"); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  DateTimeParserBucket bucket = new DateTimeParserBucket( /* instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = DateTimeZone.forOffsetMillis(parsedOffset); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ) ; if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = chrono.withOffsetMillis(parsedOffset); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = chrono.withZone(parsedZone); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = chrono.withOffsetMillis(parsedOffset); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone (iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = DateTimeZone.forOffsetMillis(parsedOffset); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone (iZone); } return newPos; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  DateTimeParserBucket bucket = new DateTimeParserBucket( /* instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException(\"Instant must not be null\"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket(  ) ; if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); chrono = chrono.withOffsetMillis(parsedOffset); } int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger()!= null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone()!= null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone!= null) { instant.setZone(iZone); } return newPos ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "Time_19_/src/main/java/org/joda/time/DateTimeZone.java_900-901": {
      "loc": "900-901",
      "input": "<s> public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal != offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal != nextAdjusted) { return offsetLocal; } } /* } else if (offsetLocal > 0) { */ <mask> long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; } </s> java",
      "function range": "880,5-911,5",
      "output": [
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal (long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetAdjusted; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = previousTransition(instantAdjusted); long nextAdjusted = previousTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal (long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetAdjusted; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetLocal); if (nextLocal!= nextAdjusted) { return offsetLocal; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetAdjusted; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal!= offsetAdjusted) { if ((offsetLocal - offsetAdjusted) < 0) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetLocal; } }  long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal!= nextAdjusted) { return offsetAdjusted; } long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted - prev <= diff) { return offsetPrev; } } } return offsetAdjusted; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}