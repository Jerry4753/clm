{
  "config": "CODET5_BASE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "model": "codet5-base",
  "data": {
    "Chart_4_source/org/jfree/chart/plot/XYPlot.java_4493-4493": {
      "loc": "4493-4493",
      "input": "public Range getDataRange(ValueAxis axis) {\n    Range result = null;\n    List mappedDatasets = new ArrayList();\n    List includedAnnotations = new ArrayList();\n    boolean isDomainAxis = true;\n    int domainIndex = getDomainAxisIndex(axis);\n    if (domainIndex >= 0) {\n        isDomainAxis = true;\n        mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                new Integer(domainIndex)));\n        if (domainIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n    int rangeIndex = getRangeAxisIndex(axis);\n    if (rangeIndex >= 0) {\n        isDomainAxis = false;\n        mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                new Integer(rangeIndex)));\n        if (rangeIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n    Iterator iterator = mappedDatasets.iterator();\n    while (iterator.hasNext()) {\n        XYDataset d = (XYDataset) iterator.next();\n        if (d != null) {\n            XYItemRenderer r = getRendererForDataset(d);\n            if (isDomainAxis) {\n                if (r != null) {\n                    result = Range.combine(result, r.findDomainBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findDomainBounds(d));\n                }\n            }\n            else {\n                if (r != null) {\n                    result = Range.combine(result, r.findRangeBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findRangeBounds(d));\n                }\n            }\n// buggy line:                Collection c = r.getAnnotations();\n                <extra_id_0>\n                Iterator i = c.iterator();\n                while (i.hasNext()) {\n                    XYAnnotation a = (XYAnnotation) i.next();\n                    if (a instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(a);\n                    }\n                }\n        }\n    }\n    Iterator it = includedAnnotations.iterator();\n    while (it.hasNext()) {\n        XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n        if (xyabi.getIncludeInDataBounds()) {\n            if (isDomainAxis) {\n                result = Range.combine(result, xyabi.getXRange());\n            }\n            else {\n                result = Range.combine(result, xyabi.getYRange());\n            }\n        }\n    }\n    return result;\n}",
      "output": [
        "if (c.size() > 0) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getYRange",
        "if (c!= null) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getYRange());}",
        "if (c!= null) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xy",
        "if (c!= null) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getYRange());if",
        "if (c!= null) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result,",
        "if (c!= null) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getYRange());result",
        "if (c.size() > 0) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getXRange",
        "if (c.size() > 0) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getYRange());if (isDomainAxis)",
        "if (c.size() > 0) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(",
        "if (c!= null) {if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getYRange());if (isDomainAxis) {result = Range.combine(result, xyabi.getXRange());result = Range.combine(result, xyabi.getXRange());}"
      ],
      "function range": "4425,5-4519,5"
    },
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    <extra_id_0>\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n}",
      "output": [
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)= (ArrayList) this.foregroundDomainMarkers.get(new",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new Integer",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND) {= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND) {= (ArrayList) this.backgroundDomainMarkers.get(",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND) {= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND) {= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND) {if (layer == Layer.FOREGROUND) {",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)= (ArrayList) this.foregroundDomainMarkers.get(index",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND)= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)if (layer == Layer.FOREGROUND) {if (",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND) {= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)if (layer == Layer.FOREGROUND) {(",
        "// buggy line:if (layer == Layer.FOREGROUND) {= (ArrayList) this.foregroundDomainMarkers.get(new Integer(\nindex);if (layer == Layer.FOREGROUND) {= (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n               index);if (layer == Layer.FOREGROUND)if (layer == Layer.FOREGROUND) {if"
      ],
      "function range": "2155,5-2171,5"
    },
    "Chart_26_source/org/jfree/chart/axis/Axis.java_1192-1193": {
      "loc": "1192-1193",
      "input": "protected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n// buggy line:            EntityCollection entities = owner.getEntityCollection();\n            <extra_id_0>\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n}",
      "output": [
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() +TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() -TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() +TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(),TextAnchor.CENTER",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() +TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER);TextAnchor.CENTER);Text",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() + insets.getLeft()TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER);TextAnchor",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() +TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(),TextAnchor.CENTER);TextAnchor.CENTER);TextAnchor.CENTER);",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() -TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER);TextAnchor.CENTER);Text",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() +TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() -TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(),TextAnchor.CENTER);TextAnchor.CENTER);TextAnchor.CENTER);",
        "// buggy line:if (plotState!= null) {= (float) (state.getCursor() + insets.getLeft()TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);TextAnchor.CENTER, getLabelAngle(),TextAnchor.CENTER);TextAnchor.CENTER);Text"
      ],
      "function range": "1092,5-1200,5"
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      <extra_id_0>\n      if (name != null) {\n      refNodes.add(new ClassDefiningFunctionNode(\n          name, n, parent, parent.getParent()));\n      }\n    }\n  }\n}",
      "output": [
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (t.inFunctionScope()) { //System.out.println(n); //System.out.println(n);",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (n.isAssign()) {nameNode = n.getFirstChild();nameNode = n.getFirstChild();",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsClassDef);if (n.isAssign()) {nameNode = n.getFirstChild();nameNode = n.getFirstChild();",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsFunctionDef);if (n.isAssign()) {nameNode = n.getFirstChild();nameNode = n.getFirstChild();",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (t.inFunctionScope()) { //System.out.println(n); //System.out.println(parent);",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (NodeUtil.isObjectLitKey(n, parent)) {nameNode = n.getFirstChild();nameNode",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (NodeUtil.isObjectLitKey(n, parent)) {nameNode = n.getFirstChild();if (",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (t.inFunctionScope()) { //System.out.println(n); //System.out.println(n.get",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (NodeUtil.isObjectLitKey(n, parent)) {nameNode = n.getFirstChild();ns =",
        "//System.out.println(name); //System.out.println(ns.name); //System.out.println(ns.onlyAffectsClassDef); //System.out.println(ns.onlyAffectsFunctionDef); //System.out.println(ns.onlyAffectsClassDef);if (NodeUtil.isObjectLitKey(n, parent)) {nameNode = n.getFirstChild();if"
      ],
      "function range": "595,5-642,5"
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n  <extra_id_0>\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String property : properties.keySet()) {\n    if (that.toMaybeRecordType().hasProperty(property) &&\n        that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n            getPropertyType(property))) {\n      builder.addProperty(property, getPropertyType(property),\n          getPropertyNode(property));\n    }\n  }\n  return builder.build();\n}",
      "output": [
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybe",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)) {",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),that.toMaybe",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property)) {\n",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getClassType(property)) {",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))) {\n",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getPropertyType(property))}",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(getClassType(property)) {\n",
        "if (that.isRecordType()) {if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyType(property));if (that.toMaybeRecordType().hasProperty(property)) {builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property)) {}"
      ],
      "function range": "140,3-155,3"
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      <extra_id_0>\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          if (c > 0x1f && c <= 0x7f) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}",
      "output": [
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,else if (s.regionMatches(false,",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_COMMENT.length",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   START_COMMENT.length",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,else if (s.regionMatches(true,",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {else if (s.regionMatches(false, i +0,\n                                   END_COMMENT.length()",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {else if (s.regionMatches(false, i +0,\n                                   END_SCRIPT.length()",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,END_SCRIPT.length())) {else",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,END_SCRIPT.length())) {sb",
        "// buggy line:= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,END_SCRIPT.length())) {}"
      ],
      "function range": "956,3-1025,3"
    },
    "Closure_119_src/com/google/javascript/jscomp/GlobalNamespace.java_366-366": {
      "loc": "366-366",
      "input": "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent != null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n          <extra_id_0>\n          case Token.DEC:\n            isSet = true;\n            type = Name.Type.OTHER;\n            break;\n          default:\n            if (NodeUtil.isAssignmentOp(parent) &&\n                parent.getFirstChild() == n) {\n              isSet = true;\n              type = Name.Type.OTHER;\n            }\n        }\n      }\n      name = n.getString();\n      break;\n    case Token.GETPROP:\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n              isPropAssign = true;\n            }\n            break;\n          case Token.INC:\n          case Token.DEC:\n            isSet = true;\n            type = Name.Type.OTHER;\n            break;\n          case Token.GETPROP:\n            return;\n          default:\n            if (NodeUtil.isAssignmentOp(parent) &&\n                parent.getFirstChild() == n) {\n              isSet = true;\n              type = Name.Type.OTHER;\n            }\n        }\n      }\n      name = n.getQualifiedName();\n      if (name == null) {\n        return;\n      }\n      break;\n    default:\n      return;\n  }\n  if (!isGlobalNameReference(name, scope)) {\n    return;\n  }\n  if (isSet) {\n    if (isGlobalScope(scope)) {\n      handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n    } else {\n      handleSetFromLocal(module, scope, n, parent, name);\n    }\n  } else {\n    handleGet(module, scope, n, parent, name);\n  }\n}",
      "output": [
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy line:break; // buggy",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // buggy line:case Token.",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // buggy line:// buggy line:case Token.",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // bugg",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // buggy line:break; // buggy line:case",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:case Token.ASSIGN:",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // buggy line:break; // buggy line:break",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // buggy line:break; //",
        "//if (!isGlobalNameReference(name, scope)) {n, parent, name, isPropAssign, type);// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:break; // buggy line:break;"
      ],
      "function range": "306,5-430,5"
    },
    "Closure_123_src/com/google/javascript/jscomp/CodeGenerator.java_285-286": {
      "loc": "285-286",
      "input": "void add(Node n, Context context) {\n  if (!cc.continueProcessing()) {\n    return;\n  }\n  int type = n.getType();\n  String opstr = NodeUtil.opToStr(type);\n  int childCount = n.getChildCount();\n  Node first = n.getFirstChild();\n  Node last = n.getLastChild();\n  if (opstr != null && first != last) {\n    Preconditions.checkState(\n        childCount == 2,\n        \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n        opstr, childCount);\n    int p = NodeUtil.precedence(type);\n    Context rhsContext = getContextForNoInOperator(context);\n    if (last.getType() == type &&\n        NodeUtil.isAssociative(type)) {\n      addExpr(first, p, context);\n      cc.addOp(opstr, true);\n      addExpr(last, p, rhsContext);\n    } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {\n      addExpr(first, p, context);\n      cc.addOp(opstr, true);\n      addExpr(last, p, rhsContext);\n    } else {\n      unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n    }\n    return;\n  }\n  cc.startSourceMapping(n);\n  switch (type) {\n    case Token.TRY: {\n      Preconditions.checkState(first.getNext().isBlock() &&\n              !first.getNext().hasMoreThanOneChild());\n      Preconditions.checkState(childCount >= 2 && childCount <= 3);\n      add(\"try\");\n      add(first, Context.PRESERVE_BLOCK);\n      Node catchblock = first.getNext().getFirstChild();\n      if (catchblock != null) {\n        add(catchblock);\n      }\n      if (childCount == 3) {\n        add(\"finally\");\n        add(last, Context.PRESERVE_BLOCK);\n      }\n      break;\n    }\n    case Token.CATCH:\n      Preconditions.checkState(childCount == 2);\n      add(\"catch(\");\n      add(first);\n      add(\")\");\n      add(last, Context.PRESERVE_BLOCK);\n      break;\n    case Token.THROW:\n      Preconditions.checkState(childCount == 1);\n      add(\"throw\");\n      add(first);\n      cc.endStatement(true);\n      break;\n    case Token.RETURN:\n      add(\"return\");\n      if (childCount == 1) {\n        add(first);\n      } else {\n        Preconditions.checkState(childCount == 0);\n      }\n      cc.endStatement();\n      break;\n    case Token.VAR:\n      if (first != null) {\n        add(\"var \");\n        addList(first, false, getContextForNoInOperator(context));\n      }\n      break;\n    case Token.LABEL_NAME:\n      Preconditions.checkState(!n.getString().isEmpty());\n      addIdentifier(n.getString());\n      break;\n    case Token.NAME:\n      if (first == null || first.isEmpty()) {\n        addIdentifier(n.getString());\n      } else {\n        Preconditions.checkState(childCount == 1);\n        addIdentifier(n.getString());\n        cc.addOp(\"=\", true);\n        if (first.isComma()) {\n          addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n        } else {\n          addExpr(first, 0, getContextForNoInOperator(context));\n        }\n      }\n      break;\n    case Token.ARRAYLIT:\n      add(\"[\");\n      addArrayList(first);\n      add(\"]\");\n      break;\n    case Token.PARAM_LIST:\n      add(\"(\");\n      addList(first);\n      add(\")\");\n      break;\n    case Token.COMMA:\n      Preconditions.checkState(childCount == 2);\n      unrollBinaryOperator(n, Token.COMMA, \",\", context,\n          getContextForNoInOperator(context), 0, 0);\n      break;\n    case Token.NUMBER:\n      Preconditions.checkState(childCount == 0);\n      cc.addNumber(n.getDouble());\n      break;\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.NOT:\n    case Token.BITNOT:\n    case Token.POS: {\n      Preconditions.checkState(childCount == 1);\n      cc.addOp(NodeUtil.opToStrNoFail(type), false);\n      addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n      break;\n    }\n    case Token.NEG: {\n      Preconditions.checkState(childCount == 1);\n      if (n.getFirstChild().isNumber()) {\n        cc.addNumber(-n.getFirstChild().getDouble());\n      } else {\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n      }\n      break;\n    }\n    case Token.HOOK: {\n      Preconditions.checkState(childCount == 3);\n      int p = NodeUtil.precedence(type);\n// buggy line:      Context rhsContext = Context.OTHER;\n      <extra_id_0>\n      addExpr(first, p + 1, context);\n      cc.addOp(\"?\", true);\n      addExpr(first.getNext(), 1, rhsContext);\n      cc.addOp(\":\", true);\n      addExpr(last, 1, rhsContext);\n      break;\n    }\n    case Token.REGEXP:\n      if (!first.isString() ||\n          !last.isString()) {\n        throw new Error(\"Expected children to be strings\");\n      }\n      String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n      if (childCount == 2) {\n        add(regexp + last.getString());\n      } else {\n        Preconditions.checkState(childCount == 1);\n        add(regexp);\n      }\n      break;\n    case Token.FUNCTION:\n      if (n.getClass() != Node.class) {\n        throw new Error(\"Unexpected Node subclass.\");\n      }\n      Preconditions.checkState(childCount == 3);\n      boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n      if (funcNeedsParens) {\n        add(\"(\");\n      }\n      add(\"function\");\n      add(first);\n      add(first.getNext());\n      add(last, Context.PRESERVE_BLOCK);\n      cc.endFunction(context == Context.STATEMENT);\n      if (funcNeedsParens) {\n        add(\")\");\n      }\n      break;\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n      Preconditions.checkState(n.getParent().isObjectLit());\n      Preconditions.checkState(childCount == 1);\n      Preconditions.checkState(first.isFunction());\n      Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n      if (type == Token.GETTER_DEF) {\n        Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n        add(\"get \");\n      } else {\n        Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n        add(\"set \");\n      }\n      String name = n.getString();\n      Node fn = first;\n      Node parameters = fn.getChildAtIndex(1);\n      Node body = fn.getLastChild();\n      if (!n.isQuotedString() &&\n          TokenStream.isJSIdentifier(name) &&\n          NodeUtil.isLatin(name)) {\n        add(name);\n      } else {\n        double d = getSimpleNumber(name);\n        if (!Double.isNaN(d)) {\n          cc.addNumber(d);\n        } else {\n          addJsString(n);\n        }\n      }\n      add(parameters);\n      add(body, Context.PRESERVE_BLOCK);\n      break;\n    case Token.SCRIPT:\n    case Token.BLOCK: {\n      if (n.getClass() != Node.class) {\n        throw new Error(\"Unexpected Node subclass.\");\n      }\n      boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n      if (preserveBlock) {\n        cc.beginBlock();\n      }\n      boolean preferLineBreaks =\n          type == Token.SCRIPT ||\n          (type == Token.BLOCK &&\n              !preserveBlock &&\n              n.getParent() != null &&\n              n.getParent().isScript());\n      for (Node c = first; c != null; c = c.getNext()) {\n        add(c, Context.STATEMENT);\n        if (c.isVar()) {\n          cc.endStatement();\n        }\n        if (c.isFunction()) {\n          cc.maybeLineBreak();\n        }\n        if (preferLineBreaks) {\n          cc.notePreferredLineBreak();\n        }\n      }\n      if (preserveBlock) {\n        cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n      }\n      break;\n    }\n    case Token.FOR:\n      if (childCount == 4) {\n        add(\"for(\");\n        if (first.isVar()) {\n          add(first, Context.IN_FOR_INIT_CLAUSE);\n        } else {\n          addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n        }\n        add(\";\");\n        add(first.getNext());\n        add(\";\");\n        add(first.getNext().getNext());\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n      } else {\n        Preconditions.checkState(childCount == 3);\n        add(\"for(\");\n        add(first);\n        add(\"in\");\n        add(first.getNext());\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n      }\n      break;\n    case Token.DO:\n      Preconditions.checkState(childCount == 2);\n      add(\"do\");\n      addNonEmptyStatement(first, Context.OTHER, false);\n      add(\"while(\");\n      add(last);\n      add(\")\");\n      cc.endStatement();\n      break;\n    case Token.WHILE:\n      Preconditions.checkState(childCount == 2);\n      add(\"while(\");\n      add(first);\n      add(\")\");\n      addNonEmptyStatement(\n          last, getContextForNonEmptyExpression(context), false);\n      break;\n    case Token.EMPTY:\n      Preconditions.checkState(childCount == 0);\n      break;\n    case Token.GETPROP: {\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n      Preconditions.checkState(\n          last.isString(),\n          \"Bad GETPROP: RHS should be STRING\");\n      boolean needsParens = (first.isNumber());\n      if (needsParens) {\n        add(\"(\");\n      }\n      addExpr(first, NodeUtil.precedence(type), context);\n      if (needsParens) {\n        add(\")\");\n      }\n      if (this.languageMode == LanguageMode.ECMASCRIPT3\n          && TokenStream.isKeyword(last.getString())) {\n        add(\"[\");\n        add(last);\n        add(\"]\");\n      } else {\n        add(\".\");\n        addIdentifier(last.getString());\n      }\n      break;\n    }\n    case Token.GETELEM:\n      Preconditions.checkState(\n          childCount == 2,\n          \"Bad GETELEM: expected 2 children but got %s\", childCount);\n      addExpr(first, NodeUtil.precedence(type), context);\n      add(\"[\");\n      add(first.getNext());\n      add(\"]\");\n      break;\n    case Token.WITH:\n      Preconditions.checkState(childCount == 2);\n      add(\"with(\");\n      add(first);\n      add(\")\");\n      addNonEmptyStatement(\n          last, getContextForNonEmptyExpression(context), false);\n      break;\n    case Token.INC:\n    case Token.DEC: {\n      Preconditions.checkState(childCount == 1);\n      String o = type == Token.INC ? \"++\" : \"--\";\n      int postProp = n.getIntProp(Node.INCRDECR_PROP);\n      if (postProp != 0) {\n        addExpr(first, NodeUtil.precedence(type), context);\n        cc.addOp(o, false);\n      } else {\n        cc.addOp(o, false);\n        add(first);\n      }\n      break;\n    }\n    case Token.CALL:\n      if (isIndirectEval(first)\n          || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n        add(\"(0,\");\n        addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n        add(\")\");\n      } else {\n        addExpr(first, NodeUtil.precedence(type), context);\n      }\n      add(\"(\");\n      addList(first.getNext());\n      add(\")\");\n      break;\n    case Token.IF:\n      boolean hasElse = childCount == 3;\n      boolean ambiguousElseClause =\n          context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n      if (ambiguousElseClause) {\n        cc.beginBlock();\n      }\n      add(\"if(\");\n      add(first);\n      add(\")\");\n      if (hasElse) {\n        addNonEmptyStatement(\n            first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n        add(\"else\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n      } else {\n        addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n        Preconditions.checkState(childCount == 2);\n      }\n      if (ambiguousElseClause) {\n        cc.endBlock();\n      }\n      break;\n    case Token.NULL:\n      Preconditions.checkState(childCount == 0);\n      cc.addConstant(\"null\");\n      break;\n    case Token.THIS:\n      Preconditions.checkState(childCount == 0);\n      add(\"this\");\n      break;\n    case Token.FALSE:\n      Preconditions.checkState(childCount == 0);\n      cc.addConstant(\"false\");\n      break;\n    case Token.TRUE:\n      Preconditions.checkState(childCount == 0);\n      cc.addConstant(\"true\");\n      break;\n    case Token.CONTINUE:\n      Preconditions.checkState(childCount <= 1);\n      add(\"continue\");\n      if (childCount == 1) {\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(\" \");\n        add(first);\n      }\n      cc.endStatement();\n      break;\n    case Token.DEBUGGER:\n      Preconditions.checkState(childCount == 0);\n      add(\"debugger\");\n      cc.endStatement();\n      break;\n    case Token.BREAK:\n      Preconditions.checkState(childCount <= 1);\n      add(\"break\");\n      if (childCount == 1) {\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(\" \");\n        add(first);\n      }\n      cc.endStatement();\n      break;\n    case Token.EXPR_RESULT:\n      Preconditions.checkState(childCount == 1);\n      add(first, Context.START_OF_EXPR);\n      cc.endStatement();\n      break;\n    case Token.NEW:\n      add(\"new \");\n      int precedence = NodeUtil.precedence(type);\n      if (NodeUtil.containsType(\n          first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n        precedence = NodeUtil.precedence(first.getType()) + 1;\n      }\n      addExpr(first, precedence, Context.OTHER);\n      Node next = first.getNext();\n      if (next != null) {\n        add(\"(\");\n        addList(next);\n        add(\")\");\n      }\n      break;\n    case Token.STRING_KEY:\n      Preconditions.checkState(\n          childCount == 1, \"Object lit key must have 1 child\");\n      addJsString(n);\n      break;\n    case Token.STRING:\n      Preconditions.checkState(\n          childCount == 0, \"A string may not have children\");\n      addJsString(n);\n      break;\n    case Token.DELPROP:\n      Preconditions.checkState(childCount == 1);\n      add(\"delete \");\n      add(first);\n      break;\n    case Token.OBJECTLIT: {\n      boolean needsParens = (context == Context.START_OF_EXPR);\n      if (needsParens) {\n        add(\"(\");\n      }\n      add(\"{\");\n      for (Node c = first; c != null; c = c.getNext()) {\n        if (c != first) {\n          cc.listSeparator();\n        }\n        if (c.isGetterDef() || c.isSetterDef()) {\n          add(c);\n        } else {\n          Preconditions.checkState(c.isStringKey());\n          String key = c.getString();\n          if (!c.isQuotedString()\n              && !(languageMode == LanguageMode.ECMASCRIPT3\n                  && TokenStream.isKeyword(key))\n              && TokenStream.isJSIdentifier(key)\n              && NodeUtil.isLatin(key)) {\n            add(key);\n          } else {\n            double d = getSimpleNumber(key);\n            if (!Double.isNaN(d)) {\n              cc.addNumber(d);\n            } else {\n              addExpr(c, 1, Context.OTHER);\n            }\n          }\n          add(\":\");\n          addExpr(c.getFirstChild(), 1, Context.OTHER);\n        }\n      }\n      add(\"}\");\n      if (needsParens) {\n        add(\")\");\n      }\n      break;\n    }\n    case Token.SWITCH:\n      add(\"switch(\");\n      add(first);\n      add(\")\");\n      cc.beginBlock();\n      addAllSiblings(first.getNext());\n      cc.endBlock(context == Context.STATEMENT);\n      break;\n    case Token.CASE:\n      Preconditions.checkState(childCount == 2);\n      add(\"case \");\n      add(first);\n      addCaseBody(last);\n      break;\n    case Token.DEFAULT_CASE:\n      Preconditions.checkState(childCount == 1);\n      add(\"default\");\n      addCaseBody(first);\n      break;\n    case Token.LABEL:\n      Preconditions.checkState(childCount == 2);\n      if (!first.isLabelName()) {\n        throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n      }\n      add(first);\n      add(\":\");\n      addNonEmptyStatement(\n          last, getContextForNonEmptyExpression(context), true);\n      break;\n    case Token.CAST:\n      add(\"(\");\n      add(first);\n      add(\")\");\n      break;\n    default:\n      throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n  }\n  cc.endSourceMapping(n);\n}",
      "output": [
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 1) {if (childCount == 2)if (",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 2)if (",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1)if (",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 1) {if (childCount == 1)if (",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2)if (",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 1)if (",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 2) {if",
        "if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 2) {if (childCount == 1) {if (childCount ==if (childCount == 2) {if (childCount == 1) {if (childCount == 2) {if (childCount == 1) {if (childCount == 1) {if"
      ],
      "function range": "107,3-771,3"
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        <extra_id_0>\n        wasWhite= false;\n        switch(c) {\n        case '\\'':\n            if(unquote) {\n                if(++i==value.length()) {\n                    return regex;\n                }\n                c= value.charAt(i);\n            }\n            break;\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n        }\n        regex.append(c);\n    }\n    return regex;\n}",
      "output": [
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {if(++i==value.length()) {",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {if(++i==value.length())",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {if(++i==value.length() {",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {if(++i==value.length()",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {if(++i==value.length()){",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {\n                   if(!wasWhite) {",
        "if(!wasWhite) {if(!unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           if(unquote) {if(++i==value.length()) {\n                   break;if(unquote) {",
        "if(!wasWhite) {if(!unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n            }if(unquote) {if(++i==value.length()) {\n                   break;if(unquote) {",
        "if(!wasWhite) {if(unquote) {if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   if(++i==value.length()) {\n                   c= value.charAt(i);\n           break;if(unquote) {if(++i==value.length()) {if(++i==value.length) {"
      ],
      "function range": "303,5-343,5"
    },
    "Lang_24_src/main/java/org/apache/commons/lang3/math/NumberUtils.java_1413-1414": {
      "loc": "1413-1414",
      "input": "public static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    int start = (chars[0] == '-') ? 1 : 0;\n    if (sz > start + 1) {\n        if (chars[start] == '0' && chars[start + 1] == 'x') {\n            int i = start + 2;\n            if (i == sz) {\n                return false; \n            }\n            for (; i < chars.length; i++) {\n                if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    sz--; \n    int i = start;\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            hasDecPoint = true;\n        } else if (chars[i] == 'e' || chars[i] == 'E') {\n            if (hasExp) {\n                return false;\n            }\n            if (!foundDigit) {\n                return false;\n            }\n            hasExp = true;\n            allowSigns = true;\n        } else if (chars[i] == '+' || chars[i] == '-') {\n            if (!allowSigns) {\n                return false;\n            }\n            allowSigns = false;\n            foundDigit = false; \n        } else {\n            return false;\n        }\n        i++;\n    }\n    if (i < chars.length) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            return true;\n        }\n        if (chars[i] == 'e' || chars[i] == 'E') {\n            return false;\n        }\n        if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                return false;\n            }\n            return foundDigit;\n        }\n        if (!allowSigns\n            && (chars[i] == 'd'\n                || chars[i] == 'D'\n                || chars[i] == 'f'\n                || chars[i] == 'F')) {\n            return foundDigit;\n        }\n        if (chars[i] == 'l'\n            || chars[i] == 'L') {\n// buggy line:            return foundDigit && !hasExp;\n            <extra_id_0>\n        }\n        return false;\n    }\n    return !allowSigns && foundDigit;\n}",
      "output": [
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a' |||| chars[i] == 'A') {if (chars[i] == '",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A') {|| chars[i] == 'A')",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a' |||| chars[i] == 'A') {if (chars[i] ==",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A')if (chars[i] == 'A')",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A')if (chars[i] == 'a'",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A') {if (chars[i] == 'a",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A') {if (chars[i] == 'A",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A') {if (chars[i] =='",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a' |||| chars[i] == 'A')if (chars[i] == 'a",
        "if (!allowSigns) { return false;if (!allowSigns) {if (!hasDecPoint) {return false;if (chars[i] == 'a' |||| chars[i] == 'A')|| chars[i] == 'F') {if (chars[i] == 'a'|| chars[i] == 'A')if (chars[i] == 'a')"
      ],
      "function range": "1319,5-1421,5"
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        <extra_id_0>\n        calendar.setTimeZone(mTimeZone);\n    }\n    return applyRules(calendar, buf);\n}",
      "output": [
        "//",
        "//buggy line:",
        "// buggy line:",
        "// bugy line:",
        "//buggy line:",
        "}else{// buggy line:",
        "}else {// buggy line:",
        "}else {// bugy line:",
        "}else{// bugy line:",
        "// bug:"
      ],
      "function range": "870,5-876,5"
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        <extra_id_0>\n    }\n    return chiSquare;\n}",
      "output": [
        "//",
        "// public double}",
        "// public void}",
        "//",
        "//}",
        "++i;",
        "//}",
        "// public double",
        "// private void}",
        "// public void"
      ],
      "function range": "254,5-261,5"
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n  <extra_id_0>\n  for (int i = 0; i < p1.length; i++) {\n      final int dp = p1[i] - p2[i];\n      sum += dp * dp;\n  }\n  return Math.sqrt(sum);\n}",
      "output": [
        "//if (p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length); }",
        "//if (p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);",
        "//if(p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length); }",
        "//if(p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);",
        "//if (p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);}",
        "//if(p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);}",
        "//if(p1.length!=p2.length) return Double.NaN;return Math.abs(p1.length-p2.length);",
        "//if (p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);}",
        "//if(p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);\n}",
        "//if (p1.length!=p2.length) {return Math.sqrt(p1.length-p2.length);return Math.sqrt(p1.length-p2.length);\n}"
      ],
      "function range": "1623,5-1630,5"
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length != this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    <extra_id_0>\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = ZERO;\n        for (int i = 0; i < nCols; i++) {\n            sum = sum.add(data[row][i].multiply(v[i]));\n        }\n        out[row] = sum;\n    }\n    return out;\n}",
      "output": [
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].multiply(v[i",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].add(v[i])",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.subtract(data[row][i].multiply(v[",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i]).multiply(v[",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].multiply(v[j",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].add(v[i]);",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].multiply(v[0",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].multiply(v));",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].multiply(data[row",
        "// buggy line:for (int i = 0;< nRows; i++) {= sum.add(data[row][i].multiply(v[i]));\nfor (int i = 0;< nCols; i++) {= sum.add(data[row][i].multiply(v[i]));= sum.add(data[row][i].multiply(v[n"
      ],
      "function range": "985,5-1000,5"
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset != null) {\n    <extra_id_0>\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}",
      "output": [
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\n                }",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\n}",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {{",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {{",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\n               ",
        "//if (dataset.getRowRenderingOrder().equals(SortOrder.DESCENDING)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {if (isSeriesVisibleInLegend(i)) {result.add(item);\nif"
      ],
      "function range": "1790,5-1822,5"
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    <extra_id_0>\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}",
      "output": [
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));new java.util.ArrayList(); copy.data.",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));= new java.util.ArrayList(); copy.data",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));= (TimeSeriesDataItem) this.data.get(",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));copy.data.add(this.data.get",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));if (this.data.size() > 0)",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));copy.data.add(new TimeSeriesDataItem(start",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));copy.data.add(this.data); copy",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));copy.data.clear(); copy.data.clear",
        "copy.data.add(new TimeSeriesDataItem(start, end));copy.data.add(new TimeSeriesDataItem(start, end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end)); copy.data.add(this.data.get(start)); copy.data.add(this.data.get(end));copy.data.add(new TimeSeriesDataItem(this"
      ],
      "function range": "1048,5-1072,5"
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    <extra_id_0>\n}",
      "output": [
        "//????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
      ],
      "function range": "103,5-113,5"
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "//buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "// bugy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimeZone());",
        "// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE);",
        "return this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Locale.getDefault());",
        "// bugy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimeZone());",
        "//buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()); return",
        "//buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault().getTimeZone());"
      ],
      "function range": "173,5-176,5"
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n    <extra_id_0>\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n}",
      "output": [
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {=",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {}",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {} else",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {{",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (endIndex == this.data.size()) {=",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return create",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {;",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {= this.data.get(startIndex);if (endIndex == this.data.size()) {=",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (endIndex == this.data.size()) {} else",
        "             \n        endIndex = -(endIndex+1);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (startIndex == this.data.size()) {return createCopy(startIndex, endIndex);if (endIndex == this.data.size()) {}"
      ],
      "function range": "918,5-956,5"
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText\n    <extra_id_0>\n        + \"\\\" alt=\\\"\\\"\";\n}",
      "output": [
        "+ \"\\\" class=\\\"\" +",
        "+ \"\\\" for=\\\"\" +",
        "+ \"\\\" id=\\\"\" +",
        "+ \"\\\" src=\\\"\" +",
        "+ \"\\\" onkeyup=\\\"\" +",
        "+ \"\\\" url=\\\"\" +",
        "+ \"\\\" in=\\\"\" +",
        "+ \"\\\" onload=\\\"\" +",
        "+ \"\\\" onkeyup=\\\"#\" +",
        "+ \"\\\" onload=\\\"#\" +"
      ],
      "function range": "64,5-67,5"
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    <extra_id_0>\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}",
      "output": [
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;}",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;return",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false; }",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;(",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;;",
        "// buggy line:if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;if (!Arrays.equals(p1.getWindingRule(), p2.getWindingRule())) {return false;//"
      ],
      "function range": "264,5-296,5"
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    <extra_id_0>\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}",
      "output": [
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrderthis.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrder.set",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrder= TableOrder.BY_",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrderthis.dataExtractOrder =",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrder =this.dataExtractOrder",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrderthis.pieChart.",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrderthis.dataExtractOrder",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrderthis.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrder =",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.pieChart.setTitle(seriesTitle",
        "//this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN;this.dataExtractOrder = TableOrder.BY_COLUMN; this.dataExtractOrderthis.dataExtractOrder."
      ],
      "function range": "143,5-158,5"
    },
    "Chart_13_/source/org/jfree/chart/block/BorderArrangement.java_455-456": {
      "loc": "455-456",
      "input": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                <extra_id_0>\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
      "output": [
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());new Size2D(",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());if (this.bottom",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());new Size2D(constraint.getWidth(), constraint.getHeight());if (this.bottomBlock",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());new Size2D(constraint.getWidth(), constraint.getHeight());if (this.centerBlock",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());if (this.center",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());if (this.right",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());if (this.left",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());new Size2D(constraint.getWidth(), constraint.getHeight());if (this.rightBlock",
        "LengthConstraintType.RANGE, 0.0, new Range(0.0, constraint.getWidth()),= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());= new Size2D(constraint.getWidth(), constraint.getHeight());new Size2D(constraint.getWidth(), constraint.getHeight());if (this.leftBlock"
      ],
      "function range": "422,5-489,5"
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n    <extra_id_0>\n    return clone;\n}",
      "output": [
        "// buggy line:",
        "// bugy line:",
        "clone.setParent(this); // buggy line:",
        "// buggy line:// buggy line:",
        "// buggy line: clone",
        "//buggy line:",
        "// buggy line: clone =",
        "//buggy line:",
        "// buggy line: clone //",
        "clone.setParent(this); // bugy line:"
      ],
      "function range": "856,5-859,5"
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n    <extra_id_0>\n    this.value = value;\n}",
      "output": [
        "//",
        "//buggy line:",
        "//buggy line:",
        "////",
        "// buggy line:",
        "//if(value!=0.0)",
        "//if(value==0.0)",
        "//if(value<0.0)",
        "//if(value!=0)",
        "//if(value>0.0)"
      ],
      "function range": "93,5-97,5"
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n    <extra_id_0>\n            - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n}",
      "output": [
        "- this.lowerBound) + (this.upperBound}",
        "- this.lowerBound) + (this.upperBound}",
        "- this.lowerBound) + (this.upperBound public Paint}",
        "- this.lowerBound) + (this.upperBound public Paint getPaint}",
        "- this.lowerBound) + (this.upperBound public}",
        "- this.lowerBound) + (this.upperBound public void}",
        "- this.lowerBound) - (this.upperBound public Paint getPaint}",
        "- this.lowerBound) - (this.upperBound public Paint}",
        "- this.lowerBound) * (this.upperBound public Paint}",
        "- this.lowerBound) * (this.upperBound public Paint getPaint}"
      ],
      "function range": "123,5-129,5"
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        <extra_id_0>\n        while (iter.hasNext())\n        {\n            buff.append(iter.next());\n        }\n        throw new MissingOptionException(buff.toString());\n    }\n}",
      "output": [
        "if(iter.hasNext())buff.append(iter.next());}",
        "buff.append(iter.next());}",
        "if(iter.hasNext())buff.append(iter.next());} }",
        "if(iter.hasNext())buff.append(iter.next());if (requiredOptions.size() > 0)}",
        "if(iter.hasNext())buff.append(iter.next());if(requiredOptions.size() > 0)}",
        "if(iter.hasNext())buff.append(iter.next());if (requiredOptions.size()>0)}",
        "if(iter.hasNext())buff.append(iter.next());if(requiredOptions.size()>0)\n           }",
        "if(iter.hasNext())buff.append(iter.next());if(requiredOptions.size()>0) {}",
        "if(iter.hasNext())buff.append(iter.next());if (requiredOptions.size()>0)\n           }",
        "if(iter.hasNext())buff.append(iter.next());if (requiredOptions.size()>0) {}"
      ],
      "function range": "290,5-309,5"
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        <extra_id_0>\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "output": [
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(pos))).append(default",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(0, pos))).append",
        "// buggy line:pos = findWrapPos(text, width, nextLineTabStop);(pos == -1)\nsb.append(text);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(pos",
        "// buggy line:pos = findWrapPos(text, width, nextLineTabStop);(pos == -1)\nsb.append(text);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(0",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(pos)))).append(default",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(0, pos)))).append",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(pos)).append(default",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);if (pos == -1)\n{\n            sb.append(rtrim(text.",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n           sb.append(rtrim(text.substring(pos));\n            sb.",
        "// buggy line:pos = findWrapPos(text, width, 0);sb.append(text).append(defaultNewLine);\n            sb.append(rtrim(text.substring(pos))).append(defaultNewLine);\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);if (pos == -1)\n{\n            sb.append(text);\n           "
      ],
      "function range": "792,5-823,5"
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt() != null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName() != null))\n    <extra_id_0>\n    {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}",
      "output": [
        "{buff.append(\"--\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\nif (!required)\n{buff.append(\"--\").append(option.getLongOpt());",
        "{buff.append(\"--\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());",
        "{buff.append(\"=\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\nif (!required)\n{buff.append(\"--\").append(option.getLongOpt());",
        "{buff.append(\"=\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());",
        "{buff.append(\"--\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n",
        "{buff.append(\"--\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\nif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n    } else{buff.append",
        "{buff.append(\"=\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\nif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n    } else{buff.append",
        "{buff.append(\"--\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n    }\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());",
        "{buff.append(\"--\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n    } else{buff.",
        "{buff.append(\"=\").append(option.getArgName());\n    } elseif (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());\n    }\n   if (!required)\n{buff.append(\"--\").append(option.getLongOpt());"
      ],
      "function range": "613,5-642,5"
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        <extra_id_0>\n    }\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "output": [
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(padding); //System.",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop+",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop+",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(padding);//System",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(padding); //System.out.println(nextLineTabStop);//System",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop)",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop)",
        "//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop);//System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(nextLineTabStop); //System.out.println(padding);(next"
      ],
      "function range": "809,5-852,5"
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        <extra_id_0>\n    }\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(text);\n            return sb;\n        }\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "output": [
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width,pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0, pos))).append(",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width, 0);pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0, pos))).",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width,pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(pos))).append(defaultNewLine",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width,pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0, pos)))).append(",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width, 0);pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(pos))).append(",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width,pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(nextLineTabStop))).append",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width, 0);pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0, pos)))).",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width,pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0,) sb.append",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width, 0);pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0,) sb",
        "sb.append(rtrim(text.substring(0, nextLineTabStop))).append(defaultNewLine);pos = findWrapPos(text, width, 0);pos = findWrapPos(text, width,(pos == nextLineTabStop - 1)sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    sb.append(rtrim(text.substring(0,)"
      ],
      "function range": "809,5-851,5"
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n                <extra_id_0>\n            }\n            cmd.addOption(opt);\n        }\n    }\n}",
      "output": [
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.get",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd))))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd)))))))))cmd.addOption(cmd.get",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption)))))))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption())))))))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption()))))))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption))))))))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd)))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd))))))))))))))",
        "}if (cmd.hasOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd.getOption(cmd)))))))))cmd.add"
      ],
      "function range": "252,5-296,5"
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-942": {
      "loc": "937-942",
      "input": "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n            && (c != '\\n') && (c != '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n// buggy line:           && (c != '\\n') && (c != '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        \n    <extra_id_0>\n    return pos == text.length() ? -1 : pos;\n}",
      "output": [
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\n')&& (c!= '\\r')&& (c!= '\\n",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n')&& (c!= '\\r')&& (c!= '\\",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n')&& (c!= '\\r')(c = text.char",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n') &&&& (c!= '\\r')&& (c!=",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n')&& (c!= '\\r')&& (c!=",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\n')&& (c!= '\\r')&& (c!= '\\t",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n') &&&& (c!= '\\r')&& (c",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n') &&&& (c!= '\\r')(c = text.",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n') &&&& (c!= '\\n') &&&& (c!= '\\r')(c =",
        "if ((pos >= text.length())if ((c = text.charAt(pos))(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\r')(c = text.charAt(pos))!=&& (c!= '\\n')&& (c!= '\\n')&& (c!= '\\r')&& (c!=)"
      ],
      "function range": "902,5-943,5"
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        <extra_id_0>\n    }\n}",
      "output": [
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE =={ // buggy line:return (T) createDate(str);else if (PatternOption",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE =={ // buggy line:return (T) createDate(str);else if (Pattern",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE ==return (T) createDate(str);else if (PatternOptionBuilder.CLASS_VALUE ==",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE ==return (T) createDate(str);else if (PatternOptionBuilder.DATE_VALUE ==",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.DATE_VALUE =={ // buggy line:return (T) createDate(str);else if (PatternOptionBuilder.DATE_VALUE =={ // buggy line:return (T) createDate(str);else if (PatternOption",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.DATE_VALUE =={ // buggy line:return (T) createDate(str);else if (PatternOptionBuilder.DATE_VALUE =={ // buggy line:return (T) createDate(str);else if (Pattern",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE ==return (T) createDate(str);else if (PatternOptionBuilder.CLASS_VALUE == clazz",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE ==return (T) createDate(str);else if (PatternOptionBuilder.CLASS_VALUE =={",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE ==return (T) createDate(str);else if (PatternOptionBuilder.DATE_VALUE =={",
        "//if (PatternOptionBuilder.OBJECT_VALUE == clazz){ // buggy line:return (T) createObject(str);else if (PatternOptionBuilder.NUMBER_VALUE =={ // buggy line:return (T) createNumber(str);else if (PatternOptionBuilder.DATE_VALUE ==return (T) createDate(str);else if (PatternOptionBuilder.DATE_VALUE == clazz"
      ],
      "function range": "62,5-105,5"
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n<extra_id_0>\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    return;\n  }\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
      "output": [
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.get",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString()))if (!referenced.contains(fnScope.getVar(function.getString",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {} else if (!referenced.contains(fnScope.getVar(",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(function.getString())) {",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getName",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString()))if (!referenced.contains(fnScope.getVar(function.getName()",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(fnScope.",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.toString",
        "//if (!referenced.contains(fnScope.getVar(function.getString()))) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(fnScope.getVar(function.getString())) {if (!referenced.contains(function.getString())) {}"
      ],
      "function range": "369,3-406,3"
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n<extra_id_0>\n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n      continue;\n    }\n    if (!isVarOrAssignExprLhs(name)) {\n       return false;\n    }\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      continue;\n    }\n    if (!val.isObjectLit()) {\n      return false;\n    }\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() ||\n          child.isSetterDef()) {\n        return false;\n      }\n      validProperties.add(child.getString());\n      Node childVal = child.getFirstChild();\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            return false;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n    ret = true;\n  }\n  return ret;\n}",
      "output": [
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!validProperties.contains(name))",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrAssignExprLhs",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;return false;if (!isVarOr",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!validProperties.contains(propName",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOr",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;return false;if (!validProperties.",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;return false;if (!isVarOrSimpleAssignLhs(name)) {return false;return false;}",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;return false;return false;}",
        "gramps = gramps.getLastChild();if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!isVarOrSimpleAssignLhs(name)) {return false;if (!validProperties.contains(name."
      ],
      "function range": "155,5-253,5"
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    <extra_id_0>\n  } else {\n    return mayBeStringHelper(n);\n  }\n}",
      "output": [
        "//",
        "if(allResultsMatch(n, MAY_BE_STRING_PREDICATE))",
        "return mayBeStringHelper(n,MAY_BE_STRING_PREDICATE);",
        "return mayBeStringHelper(n, MAY_BE_STRING_PREDICATE);",
        "if(!allResultsMatch(n, MAY_BE_STRING_PREDICATE))",
        "if(allResultsMatch(n, MAY_BE_STRING_PREDICATE));",
        "if(!allResultsMatch(n, MAY_BE_STRING_PREDICATE));",
        "if(!allResultsMatch(n,MAY_BE_STRING_PREDICATE))",
        "if(allResultsMatch(n,MAY_BE_STRING_PREDICATE))",
        "if(allResultsMatch(n, MAY_BE_STRING_PREDICATE)) return"
      ],
      "function range": "1415,3-1421,3"
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType() != null && parent.isAssign()) {\n// buggy line:    return;\n  <extra_id_0>\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n  ensureTyped(t, n);\n}",
      "output": [
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),checkPropertyAccess(childType, property.getString(), t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if (n, childType,\n",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);\n} else if (",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),checkPropertyAccess(childType, property.getString(), t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if (n, childType,",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if ()",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if (n",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if{\n    checkPropertyAccess(childType, property.getString(), t, n);} else if () {",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if ({",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if (.",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if{\n    checkPropertyAccess(childType, property.getString(), t, n);} else if (n,",
        "// buggy line:if () {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),) {\n    checkPropertyAccess(childType, property.getString(),t, n);} else if ({\n    checkPropertyAccess(childType, property.getString(), t, n);} else if (("
      ],
      "function range": "1303,3-1321,3"
    },
    "Closure_14_/src/com/google/javascript/jscomp/ControlFlowAnalysis.java_767-768": {
      "loc": "767-768",
      "input": "private static Node computeFollowNode(\n    Node fromNode, Node node, ControlFlowAnalysis cfa) {\n  Node parent = node.getParent();\n  if (parent == null || parent.isFunction() ||\n      (cfa != null && node == cfa.root)) {\n    return null;\n  }\n  switch (parent.getType()) {\n    case Token.IF:\n      return computeFollowNode(fromNode, parent, cfa);\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      if (parent.getNext() != null) {\n        if (parent.getNext().isCase()) {\n          return parent.getNext().getFirstChild().getNext();\n        } else if (parent.getNext().isDefaultCase()) {\n          return parent.getNext().getFirstChild();\n        } else {\n          Preconditions.checkState(false, \"Not reachable\");\n        }\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n      break;\n    case Token.FOR:\n      if (NodeUtil.isForIn(parent)) {\n        return parent;\n      } else {\n        return parent.getFirstChild().getNext().getNext();\n      }\n    case Token.WHILE:\n    case Token.DO:\n      return parent;\n    case Token.TRY:\n      if (parent.getFirstChild() == node) {\n        if (NodeUtil.hasFinally(parent)) { \n          return computeFallThrough(parent.getLastChild());\n        } else { \n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (NodeUtil.getCatchBlock(parent) == node){\n        if (NodeUtil.hasFinally(parent)) { \n          return computeFallThrough(node.getNext());\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      } else if (parent.getLastChild() == node){\n        if (cfa != null) {\n          for (Node finallyNode : cfa.finallyMap.get(parent)) {\n// buggy line:            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            <extra_id_0>\n          }\n        }\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n  }\n  Node nextSibling = node.getNext();\n  while (nextSibling != null && nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (nextSibling != null) {\n    return computeFallThrough(nextSibling);\n  } else {\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
      "output": [
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getFirstChild().getNext().getFirstChild().getNext();",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getFirstChild().getNext().getFirstChild().getNext().",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getFirstChild().getNext().getNext().getFirstChild().",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getNext().getFirstChild().getNext().getNext().get",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getNext().getNext().getFirstChild().getNext().get",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getNext().getFirstChild().getNext().getFirstChild().",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getFirstChild().getNext().getNext().getNext().get",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getNext().getNext().getFirstChild().getNext();",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getFirstChild().getNext().getNext().getFirstChild();",
        "//cfa.createEdge(fromNode, Branch.UNCOND, finallyNode); //cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);if (parent.getNext()!= null) {return computeFollowNode(fromNode, parent, cfa);if (parent.getNext().isCase()) {return parent.getNext().getNext().getFirstChild().getNext().getNext();"
      ],
      "function range": "692,3-789,3"
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n<extra_id_0>\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
      "output": [
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {if (n.isNew() &&",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\nreturn true;",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\n}if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\n}",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {if (n.isNew()) {",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\n}if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\n}",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\nreturn false;",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\n}if",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\n}return",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {if (n.isNew()",
        "if (ControlFlowGraph.isEnteringNewCfgNode(n)) {if (!ControlFlowGraph.isEnteringNewCfgNode(n) && apply(n)) {return true;\n}if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {return true;\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {return true;\nif (n"
      ],
      "function range": "83,7-109,7"
    },
    "Closure_18_/src/com/google/javascript/jscomp/Compiler.java_1288-1289": {
      "loc": "1288-1289",
      "input": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    <extra_id_0>\n      for (CompilerInput input : inputs) {\n        for (String provide : input.getProvides()) {\n          getTypeRegistry().forwardDeclareType(provide);\n        }\n      }\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n            .manageDependencies(options.dependencyOptions, inputs);\n        staleInputs = true;\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    hoistNoCompileFiles();\n    if (staleInputs) {\n      repartitionInputs();\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n      if (devMode) {\n        runSanityCheck();\n        if (hasErrors()) {\n          return null;\n        }\n      }\n      if (options.sourceMapOutputPath != null ||\n          options.nameReferenceReportPath != null) {\n        SourceInformationAnnotator sia =\n            new SourceInformationAnnotator(\n                input.getName(), options.devMode != DevMode.OFF);\n        NodeTraversal.traverse(this, n, sia);\n      }\n      jsRoot.addChildToBack(n);\n    }\n    if (hasErrors()) {\n      return null;\n    }\n    return externAndJsRoot;\n  } finally {\n    stopTracer(tracer, \"parseInputs\");\n  }\n}",
      "output": [
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {null;",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {null;",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors())",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;return null;}",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return}",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {null;\n",
        "if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return}"
      ],
      "function range": "1240,3-1362,3"
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value != null) {\n    <extra_id_0>\n      Node addition = IR.add(\n          IR.string(\"\").srcref(callTarget),\n          value.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n  }\n  return n;\n}",
      "output": [
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget));n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(call",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(call",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget));n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(call",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(value",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget));n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(call",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget));n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(value",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget));n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(value",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\".srcref(callTarget),IR.string(\"\").srcref(call",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\".srcref(call",
        "Node\n          = value.detachFromParent();n.getParent().replaceChild(n, IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\").srcref(callTarget),IR.string(\"\".srcref(callTarget),IR.string(\"\").srcref(value"
      ],
      "function range": "208,3-230,3"
    },
    "Closure_31_/src/com/google/javascript/jscomp/Compiler.java_1285-1286": {
      "loc": "1285-1286",
      "input": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:        !options.skipAllPasses &&\n        <extra_id_0>\n        options.closurePass) {\n      for (CompilerInput input : inputs) {\n        for (String provide : input.getProvides()) {\n          getTypeRegistry().forwardDeclareType(provide);\n        }\n      }\n      try {\n        inputs =\n            (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n            .manageDependencies(options.dependencyOptions, inputs);\n        staleInputs = true;\n      } catch (CircularDependencyException e) {\n        report(JSError.make(\n            JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      } catch (MissingProvideException e) {\n        report(JSError.make(\n            MISSING_ENTRY_ERROR, e.getMessage()));\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n      if (n.getJSDocInfo() != null) {\n        JSDocInfo info = n.getJSDocInfo();\n        if (info.isExterns()) {\n          externsRoot.addChildToBack(n);\n          input.setIsExtern(true);\n          input.getModule().remove(input);\n          externs.add(input);\n          staleInputs = true;\n        } else if (info.isNoCompile()) {\n          input.getModule().remove(input);\n          staleInputs = true;\n        }\n      }\n    }\n    if (staleInputs) {\n      fillEmptyModules(modules);\n      rebuildInputsFromModules();\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n      if (devMode) {\n        runSanityCheck();\n        if (hasErrors()) {\n          return null;\n        }\n      }\n      if (options.sourceMapOutputPath != null ||\n          options.nameReferenceReportPath != null) {\n        SourceInformationAnnotator sia =\n            new SourceInformationAnnotator(\n                input.getName(), options.devMode != DevMode.OFF);\n        NodeTraversal.traverse(this, n, sia);\n      }\n      jsRoot.addChildToBack(n);\n    }\n    if (hasErrors()) {\n      return null;\n    }\n    return externAndJsRoot;\n  } finally {\n    stopTracer(tracer, \"parseInputs\");\n  }\n}",
      "output": [
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.sourceMapOutputPath!= null)",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.nameReferenceReportPath!= null)",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.nameReferenceReportPath!= null) {",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.sourceMapOutputPath!= null) {",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.sourceMapOutputPath!=null)",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.sourceMapOutputPath == null)",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (hasErrors()) {return null;}",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.sourceMapOutputPath!={",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.sourceMapOutputPath!=) {",
        "!hasErrors() &&!hasErrors()) { if(!hasErrors() &&if (hasErrors()) {return null;if (hasErrors()) {return null;if (hasErrors()) {return null;if (devMode) {if (options.sourceMapOutputPath!=null) {if (options.nameReferenceReportPath!= null) {if (options.nameReferenceReportPath!={"
      ],
      "function range": "1236,3-1387,3"
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n<extra_id_0>\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
      "output": [
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {}",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {)",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {{",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {constraint",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {get",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {(",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())){",
        "if (constraintObj.isUnionType()) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())) {if (!hasProperty(constraintObj.getPropertyName())){"
      ],
      "function range": "554,3-580,3"
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136": {
      "loc": "1121-1136",
      "input": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj != null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType != null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n  <extra_id_0>\n  }\n}",
      "output": [
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggyline:// buggy line",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggyline:if (!objType.",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggyline:if (objType.",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggyline:// buggy",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggy// buggyline:",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggy// buggy line:if",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null);// buggy line:if (objType.",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggy// buggy line:}",
        "}{ // buggy line:if (objType!= null){ // buggy line:if (objType.isRecordType()) { // buggyline:if (objType.hasOwnProperty(prop)) { // buggy// buggy line:objType.defineInferredProperty(prop, typeToInfer, null); // buggy// buggy line:obj"
      ],
      "function range": "1113,3-1137,3"
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n// buggy line:    }\n    <extra_id_0>\n  }\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}",
      "output": [
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrand",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= initialization.getGrand",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();= declaration.getGrandparent().get",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();= declaration.getGrandparent();",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().getGrandparent();",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();if",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent();= initialization.getG",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();= declaration.getGrandparent().is",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().isExprResult();=",
        "return canMoveModerately(initialization, reference);= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().isExprResult();= declaration.getGrandparent().getGrandparent().getGrandparent().get"
      ],
      "function range": "519,5-580,5"
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  <extra_id_0>\n    add(\" \");\n  }\n  if ((long) x == x && !negativeZero) {\n    long value = (long) x;\n    long mantissa = value;\n    int exp = 0;\n    if (Math.abs(x) >= 100) {\n      while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n        mantissa /= 10;\n        exp++;\n      }\n    }\n    if (exp > 2) {\n      add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n    } else {\n      add(Long.toString(value));\n    }\n  } else {\n    add(String.valueOf(x));\n  }\n}",
      "output": [
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));add(Long.toString(value",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));add(Double.toString(x",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));else {add(Double.",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));else {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));} else {",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));} else {add(Double",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));add(Long.toString(m",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));} else {if (x",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));} else {if (Math",
        "if (negativeZero) {if (Math.abs(x) >= 100) {if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));if (Math.abs(x) >= 100) {add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));} else {add(String"
      ],
      "function range": "240,3-267,3"
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  <extra_id_0>\n}",
      "output": [
        "//return true;}",
        "//return false;}",
        "//return true;return false;}",
        "return true;return false;}",
        "//return true;if(s.length()>0) {if(s.charAt(len-1)return false;}",
        "//return true;if(s.length()>0) {if(s.charAt(len-1)return false;return false; }",
        "//return true;if(s.length()>0) {if(s.charAt(len-1)) {return false;}",
        "//return true;if(s.length()>0) {if(s.charAt(len-1)!=0) {return false;}",
        "//return true;if(s.length()>0) {if(s.length()>0) {return false;}",
        "//return true;if(s.length()>0) {if(s.charAt(len-1)) {return false;return false;}"
      ],
      "function range": "737,3-746,3"
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n  <extra_id_0>\n}",
      "output": [
        "// buggy line: \u5982\u679c\u662f\u6570\u7ec4\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\ufffd",
        "// buggy line: \u5982\u679c\u662f\u6570\u7ec4\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\ufffd",
        "// buggy line: \u5982\u679c\u662f\u6570\u7ec4\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\ufffd",
        "// buggy line: \u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\u8fd4\u56detrue\uff0c\u5219\u8fd4\u56defalse\uff0c\u5219\ufffd"
      ],
      "function range": "116,3-118,3"
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee != null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target != null) {\n        <extra_id_0>\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}",
      "output": [
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { // buggyif (target.getType() == Token.",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (target.getType() == Token.GETPROP)",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { // b",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName))if (",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { // className",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName)){ //",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) {if",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { // buggy// buggy line:if (target",
        "// buggy line:if (functionName.equals(functionName)) {if (functionName.equals(functionName)) { // buggyif (functionName.equals(functionName)) { // buggy// buggy line:if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) { //if (functionName.equals(functionName)) {="
      ],
      "function range": "188,3-204,3"
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n  <extra_id_0>\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  }\n  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n    options.setWarningLevel(\n        DiagnosticGroups.ES5_STRICT,\n        CheckLevel.ERROR);\n  }\n  List<WarningsGuard> guards = Lists.newArrayList();\n  guards.add(\n      new SuppressDocWarningsGuard(\n          getDiagnosticGroups().getRegisteredGroups()));\n  guards.add(options.getWarningsGuard());\n  ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n  if (!options.checkSymbols &&\n      !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n    composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n  }\n  this.warningsGuard = composedGuards;\n}",
      "output": [
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_SYMBOLS)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_SYMBOLS)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.enables(DiagnosticGroups.CHECK_SYMBOLS)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_SYMBOLS)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.",
        "if (!options.checkSymbols &&!options.checkGlobalThisLevel.enables(DiagnosticGroups.CHECK_GLOBAL_THIS)) {if (!composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));if (!composedGuards.disables(DiagnosticGroups.CHECK_VARIABLES)) {DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ON"
      ],
      "function range": "226,3-288,3"
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null ? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName != null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt != null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        <extra_id_0>\n      for (int i = 0; i < charno; i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (Character.isWhitespace(c)) {\n          b.append(c);\n        } else {\n          b.append(' ');\n        }\n      }\n      b.append(\"^\\n\");\n    }\n  }\n  return b.toString();\n}",
      "output": [
        "//b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? Check",
        "// b.append('\\n');b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(",
        "// b.append('\\n');b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(\"",
        "// b.append('\\n');b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.ERROR : CheckLevel.ERROR))b.append(",
        "//b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(CheckLevel.",
        "// b.append('\\n');b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append('",
        "//b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning?",
        "// b.append('\\n');b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.ERROR : CheckLevel.ERROR))b.append(\"",
        "//b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(checkLevel",
        "// b.append('\\n');b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR))b.append(getLevelName(warning? CheckLevel.ERROR : CheckLevel.ERROR))b.append('"
      ],
      "function range": "66,3-111,3"
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n      <extra_id_0>\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n          if (c > 0x1f && c < 0x7f) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}",
      "output": [
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,0,",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,END_SCRIPT",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(true, i + 1,0,",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,else {",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,0,\n",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,else if (",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,} else {",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,END_COMMENT",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(true, i + 1,0,\n",
        "case '\\b': sb.append(\"\\\\b\"); break;= 0; i < s.length();if (s.regionMatches(true, i + 1,0,\n                                   START_COMMENT.length())) {if (s.regionMatches(false, i + 1,0,\n                                   END_SCRIPT.length())) {if (s.regionMatches(false, i + 1,} else"
      ],
      "function range": "1005,3-1075,3"
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      <extra_id_0>\n    boolean isChainedProperty =\n        n.getFirstChild().getType() == Token.GETPROP;\n    if (isChainedProperty) {\n      Node child = n.getFirstChild().getFirstChild().getNext();\n      if (child.getType() == Token.STRING &&\n          child.getString().equals(\"prototype\")) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
      "output": [
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().get",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\"))",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getNext().getType() == Token.",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getNext().getType",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getNext().getType() == Token.GETPROP)",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getType() == Token",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getType() ==",
        "if (n.getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getString().equals(\"prototype\")) {if (n.getFirstChild().getFirstChild().getFirstChild().getFirstChild().getFirstChild().getNext().getType() == Token.GETPROP) {"
      ],
      "function range": "314,5-334,5"
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              <extra_id_0>\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n}",
      "output": [
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:              functionNode.getJSType(),functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy// buggy line:",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggyfunctionNode.getJSType",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy line:             // bugg",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(),functionNode.getJSType(), true); // bugg",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy line:             if (body",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode,",
        "// buggy line:              jsDocParameter.setJSType(functionType.getJSType());functionNode.getFirstChild().getNext();if (body!= null) {functionNode.getFirstChild().getNext(); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode.getJSType(), true); // buggy line:             functionNode."
      ],
      "function range": "1734,5-1753,5"
    },
    "Closure_71_/src/com/google/javascript/jscomp/CheckAccessControls.java_416-417": {
      "loc": "416-417",
      "input": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType != null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&\n    <extra_id_0>\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n    if (objectType == null) {\n      return;\n    }\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n    if (isOverride) {\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                objectType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED &&\n          overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      if (sameInput) {\n        return;\n      } else if (visibility == Visibility.PRIVATE &&\n          (currentClass == null || ownerType.differsFrom(currentClass))) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n}",
      "output": [
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {if (docInfo.isConstructor() &&) {} else if (docInfo.",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {} else if (docInfo.isConstructor()) {} else if (visibility",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {} else if (docInfo.isConstructor()) {if (visibility == Visibility.",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {} else if (docInfo.isConstructor()) {} else if (docInfo",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.INHERITED ) {} else if (docInfo.isConstructor()) {} else if (visibility",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {if (docInfo.isConstructor() &&) {} else if (docInfo",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {if (docInfo.isConstructor() &&) {} else if (visibility)",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {if (docInfo.isConstructor() &&) {} else if (visibility{",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {if (docInfo.isConstructor() &&) {} else if (visibility==",
        "t.getInput().getName().equals(parent.g e tSourceName()) &&if (visibility == Visibility.PROTECTED) {if (visibility == Visibility.PROTECTED)if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent))if (docInfo.isConstructor() &&== Visibility.PROTECTED) {} else if (docInfo.isConstructor() &&) {} else if (visibility"
      ],
      "function range": "407,3-500,3"
    },
    "Closure_73_/src/com/google/javascript/jscomp/CodeGenerator.java_1045-1046": {
      "loc": "1045-1046",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\0': sb.append(\"\\\\0\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      case '\\\"': sb.append(doublequoteEscape); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '>':                       \n        if (i >= 2 &&\n            ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n             (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n          sb.append(\"\\\\>\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      case '<':\n        final String END_SCRIPT = \"/script\";\n        final String START_COMMENT = \"!--\";\n        if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                            END_SCRIPT.length())) {\n          sb.append(\"<\\\\\");\n        } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                   START_COMMENT.length())) {\n          sb.append(\"<\\\\\");\n        } else {\n          sb.append(c);\n        }\n        break;\n      default:\n        if (outputCharsetEncoder != null) {\n          if (outputCharsetEncoder.canEncode(c)) {\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        } else {\n// buggy line:          if (c > 0x1f && c <= 0x7f) {\n          <extra_id_0>\n            sb.append(c);\n          } else {\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}",
      "output": [
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder!= null) {sb.append",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)){",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);else { sb.append(c);else { sb.",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);else { sb.append(c);} else {",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c))else",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c))sb",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);else { sb.append(c);} else { sb",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);} else {sb.append(c);}",
        "if (outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder!= null) {sb.append(outputCharsetEncoder.canEncode(c)) {if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);if (outputCharsetEncoder.canEncode(c)) {appendHexJavaScriptRepresentation(sb, c);} else {sb.append(c);} else"
      ],
      "function range": "988,3-1058,3"
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n  <extra_id_0>\n}",
      "output": [
        "// buggy line:",
        "// bugy line:",
        "// buggy line: buggy line:",
        "// buggy line: return false;",
        "// bugy line: buggy line:",
        "// buggy line: return true;",
        "buggy line: buggy line:",
        "// buggy line: return",
        "// bug: buggy line:",
        "// buggy line: //"
      ],
      "function range": "162,3-164,3"
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n  <extra_id_0>\n  if (param == null) {\n    setter.addValue(true);\n    return 0;\n  } else {\n    String lowerParam = param.toLowerCase();\n    if (TRUES.contains(lowerParam)) {\n      setter.addValue(true);\n    } else if (FALSES.contains(lowerParam)) {\n      setter.addValue(false);\n    } else {\n      setter.addValue(true);\n      return 0;\n    }\n    return 1;\n  }\n}",
      "output": [
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);return 0;\n}",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);return 1;\n}",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);\n} else {\n",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);} else {return",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);\n} else {}",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);\n} else {return",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);} else {}",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);} else {} else",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);return 0;\nreturn",
        "// buggy line:if (falseS.contains(param)) {if (TRUES.contains(lowerParam)) {else if (FALSES.contains(lowerParam)) {return 0;\n} else if (TRUES.contains(lowerParam)) {return 1;\n} else {if (FALSES.contains(lowerParam)) {setter.addValue(false);return 1;\nreturn"
      ],
      "function range": "332,7-351,7"
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n      <extra_id_0>\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      return true;\n    case Token.IN:\n      return true;\n    default:\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}",
      "output": [
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getLastChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getLastChild(), locals);",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(),locals",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(),locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.get",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getLastChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getLastChild(), locals);",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild().getNext",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(),return",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getSecondChild(), locals);",
        "return locals.apply(value);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getLastChild(), locals);return evaluatesToLocalValue(value.getFirstChild(), locals);return evaluatesToLocalValue(value.getFirstChild(),locals"
      ],
      "function range": "2424,3-2489,3"
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n      <extra_id_0>\n      if (indexOfDot == -1) {\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        ProvidedName parentName =\n            providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(\n            replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
      "output": [
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1));(candidateDefinition!= null && explicitNode{ //System.out.println(candidateDefinition); //System.out.println(candidateDefinition",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null) {candidateDefinition.getFirstChild().getParent().removeChild(candidateDefinition); //System.out.println(candidateDefinition);",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null) {candidateDefinition.getFirstChild().getParent().removeChild(candidateDefinition.getFirstChild()); //System.out.println",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null)candidateDefinition.getParent().removeChild(candidateDefinition); //System.out.println(candidateDefinition",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null) {candidateDefinition.getFirstChild().getParent().removeChild(candidateDefinition); //System.out.println(candidateDefinition.",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null) {candidateDefinition.getParent().removeChild(candidateDefinition); //System.out.println(candidate",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1));(candidateDefinition!= null && explicitNodeexplicitNode.getParent().removeChild(explicitNode); //System.out.println(explicit",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null)candidateDefinition.getFirstChild().getParent().removeChild(candidateDefinition); //System.out.",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null) {candidateDefinition.getFirstChild().getParent().removeChild(candidateDefinition); //System.out.println(namespace); //",
        "//System.out.println(namespace); //System.out.println(indexOfDot); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1)); //System.out.println(namespace.substring(indexOfDot+1));if (candidateDefinition!= null) {candidateDefinition.getParent().removeChild(candidateDefinition); //System.out.println(namespace"
      ],
      "function range": "747,5-809,5"
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        <extra_id_0>\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n            Node.tokenToName(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}",
      "output": [
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);return n;return n",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);return n;n;",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);return n;}",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);return n;if (",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, right);return n;return n",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, right);return n;}",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);return n;return",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);return n;} else",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, right);return n;return",
        "result = lvalInt << rvalInt;if (left.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, left);return n;if (right.getType() == Token.BITWISE_OPERAND) {n.getParent().replaceChild(n, right);n.getParent().replaceChild(n, left);if (rvalInt"
      ],
      "function range": "652,3-713,3"
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result != null) {\n  <extra_id_0>\n    return result;\n  } else if (this.isObject() && that.isObject()) {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  } else {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n}",
      "output": [
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);}",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);}",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);if",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);if (that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);if",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return",
        "if (that.isSubtype(this)) {if (this.isObject() && that.isObject()) {return getNativeType(JSTypeNative.NO_OBJECT_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);return getNativeType(JSTypeNative.NO_TYPE);if (that"
      ],
      "function range": "273,3-298,3"
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        <extra_id_0>\n}",
      "output": [
        "// buggy line: ContextTypeExpression return",
        "buggy line: ContextTypeExpression return",
        "// buggy line: ContextType return",
        "// buggy line:        return",
        "buggy line: ContextTypeExpression return parseTypeExpression(token);",
        "// buggy line: contextTypeExpression return",
        "buggy line: ContextTypeExpression return parseContextTypeExpression(token);",
        "buggy line:        return parseTypeName(token);",
        "buggy line:        return",
        "buggy line: ContextTypeExpression return parseTypeName(token);"
      ],
      "function range": "1907,3-1909,3"
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n  <extra_id_0>\n}",
      "output": [
        "// buggy line: return",
        "// bugy line: return",
        "// bug: buggy line: return",
        "// buggy line:",
        "// bugy line:",
        "// buggy line: buggy line:",
        "// bug: buggy line:",
        "// buggy line: // return",
        "// broken line: return",
        "// buggy line: return topType;"
      ],
      "function range": "52,9-55,9"
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided != null) {\n    <extra_id_0>\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n  }\n}",
      "output": [
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n);//System.out.println(n); //System.out.println(n); //System.out",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(arg);//System.out.println(n); //System.out.println(n); //System.out",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n); //System.out.println(n);//System.out.println(n); //System.out",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n);//System.out.println(n); //System.out.println(); //System.out.println",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(arg);//System.out.println(n); //System.out.println(); //System.out.println",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n); //System.out.println(arg);//System.out.println(n); //System.out",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n);//System.out.println(n); //System.out.println(arg); //System.out",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(arg); //System.out.println(n);//System.out.println(n); //System.out",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n);//System.out.println(n); //System.out.println(n); //System.err",
        "//System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided); //System.out.println(provided);{ //System.out.println(n); //System.out.println(n); //System.out.println(n); //System.out.println(n);//System.out.println(n); //System.err"
      ],
      "function range": "295,3-334,3"
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n    <extra_id_0>\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
      "output": [
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(nameNode,recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(nameNode,recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode,",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode",
        "// if(parent.isFor() &&!NodeUtil.isForIn(parent)) {recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(nameNode,recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(recordNode, ns);recordDepScope(nameNode, ns);recordDepScope(nameNode, ns"
      ],
      "function range": "558,5-588,5"
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n<extra_id_0>\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
      "output": [
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type ==? \"null\" : type.toString()), n.toString",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type == null? \"null\" : type.toString()), n.",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type == null? \"null\" : type.toString()),)",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type ==? \"null\" : type.toString()),name,",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type == null? \"null\" : type.toString()),}",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type == null? \"null\" : type.toString()),name",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type ==? \"null\" : type.toString()),)",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type == null? \"null\" : type.toString()),,",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type == null? \"null\" : type.toString()),.",
        "if (child.isObjectLit()) {if (propertiesToErrorFor.containsKey(name)) {if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(),child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION,name,\n            (type ==? \"null\" : type.toString()),) ;"
      ],
      "function range": "490,5-513,5"
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      <extra_id_0>\n    } else if (block.isLoop) {\n      return false;\n    }\n  }\n  return true;\n}",
      "output": [
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop)return false;\n",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop)if (ref.is",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop)return false;",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\n} else if (ref.isLoop) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop) {return false;\n} else if (ref.isLoop)return",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop) {return",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\n} else if (ref.isLoop) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop) {return false;\n} else if (ref.isLoop)return false",
        "} else if(block.isLoop) {return false;if (ref == null) {return false;\nif (ref == null) {return false;\n} else if (ref.isLoop)return false;\nif (ref.isLoop) {return false;\n} else if (ref.isLoop) {return false;\n} else if (ref.isLoop) {return"
      ],
      "function range": "421,5-438,5"
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n  <extra_id_0>\n    errorReporter.warning(\n        SUSPICIOUS_COMMENT_WARNING,\n        sourceName,\n        comment.getLineno(), \"\", 0);\n  }\n}",
      "output": [
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4f1a\u62a5\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4f1a\u51fa\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\ufffd",
        "//\u8fd9\u91cc\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u4e0d\u80fd\u4e3a\u7a7a\ufffd"
      ],
      "function range": "251,3-258,3"
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType != null) {\n    <extra_id_0>\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.getInstanceType());\n    } else {\n      ensureTyped(t, n);\n    }\n  } else {\n    report(t, n, NOT_A_CONSTRUCTOR);\n    ensureTyped(t, n);\n  }\n}",
      "output": [
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.get",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n.getLastChild(), constructor.getFirstChild(), constructor.getLastChild(), constructor.get",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n.getLastChild(), constructor.getLastChild(), constructor.getFirstChild(), constructor.get",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getFirstChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());\nn, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(),",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(),",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getLastChild(), constructor.getFirstChild(), constructor.getLastChild(), constructor",
        "// visitParameterList(t, n, fnType);else { // buggy line:visitParameterList(t, n, constructor.getFirstChild(), constructor.getLastChild());n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(), constructor.getLastChild(),n, constructor.getFirstChild(), constructor.getLastChild(), constructor.getFirstChild(), constructor"
      ],
      "function range": "1656,3-1671,3"
    },
    "Closure_126_/src/com/google/javascript/jscomp/MinimizeExitPoints.java_141-145": {
      "loc": "141-145",
      "input": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    <extra_id_0>\n  }\n  if (n.isLabel()) {\n    Node labelBlock = n.getLastChild();\n    tryMinimizeExits(labelBlock, exitType, labelName);\n  }\n  if (!n.isBlock() || n.getLastChild() == null) {\n    return;\n  }\n  for (Node c : n.children()) {\n    if (c.isIf()) {\n      Node ifTree = c;\n      Node trueBlock, falseBlock;\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      tryMinimizeIfBlockExits(trueBlock, falseBlock,\n          ifTree, exitType, labelName);\n      trueBlock = ifTree.getFirstChild().getNext();\n      falseBlock = trueBlock.getNext();\n      if (falseBlock != null) {\n        tryMinimizeIfBlockExits(falseBlock, trueBlock,\n            ifTree, exitType, labelName);\n      }\n    }\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n  for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n    tryMinimizeExits(c, exitType, labelName);\n    if (c == n.getLastChild()) {\n      break;\n    }\n  }\n}",
      "output": [
        "// buggy line:if (n.isBlock()) {exitType, labelName);\nif (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.is",
        "// buggy line:if (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.is",
        "// buggy line:if (n.isIf()) {exitType, labelName);\nif (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.is",
        "// buggy line:if (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);if (n.isTry()) {exitType, labelName);\nif (n.isTry",
        "// buggy line:if (n.isBlock()) {exitType, labelName);\nif (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);if (n.isTry()) {exitType, labelName);\nif (n.isTry",
        "// buggy line:if (n.isBlock()) {exitType, labelName);\nif (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\n}if (n",
        "// buggy line:if (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\n}if (n",
        "// buggy line:if (n.isBlock()) {exitType, labelName);\nif (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);if (n.isTry()) {exitType, labelName);\nif (n.isBlock",
        "// buggy line:if (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.get",
        "// buggy line:if (n.isBlock()) {exitType, labelName);\nif (n.isIf()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);\nif (n.isTry()) {exitType, labelName);if (n.isTry()) {exitType, labelName);\nif (n.isIf"
      ],
      "function range": "106,3-201,3"
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n<extra_id_0>\n  if (!NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n  if (first.isName() &&\n      \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
      "output": [
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\nn.putBooleanProp(Node.DIRECT_CALL",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\nn.putBooleanProp(Node.DIRECT_E",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\n}",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\nif(first.isName() &&\n     ",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\n }",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\n}",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\nn.putBooleanProp(Node.FREE_CALL",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\nif(first.isName() &&\n      \"",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\n }",
        "if(first.isCall()) {if(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_CALL, true);\nif(first.isName() &&\n      \"eval\".equals(first.getString()))n.putBooleanProp(Node.DIRECT_EVAL, true);\nif(first.isName()) {\n   "
      ],
      "function range": "158,5-177,5"
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n    <extra_id_0>\n        name.aliasingGets > 0) {\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n    if ((name.type == Name.Type.OBJECTLIT ||\n         name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
      "output": [
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||== Name.Type.FUNCTION",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLITif (name.type == Name",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.FUNCTION)if (name.type == Name",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.FUNCTION)if (name.type ==",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.FUNCTION) {if (name.type ==",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLITif (name.type ==",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.FUNCTION) {name.removeRef(ref",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.FUNCTION) {if (name.type",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.FUNCTION)if (name.scope.is",
        "name.type == Name.Type.FUNCTION) { if(name.type==Name.Type.OBJECTLIT ||if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||name.type == Name.Type.FUNCTION) {if (name.type == Name.Type.OBJECTLIT ||== Name.Type.OBJECT"
      ],
      "function range": "161,3-197,3"
    },
    "Closure_132_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_782-783": {
      "loc": "782-783",
      "input": "private Node tryMinimizeIf(Node n) {\n  Node parent = n.getParent();\n  Node cond = n.getFirstChild();\n  if (NodeUtil.isLiteralValue(cond, true)) {\n    return n;\n  }\n  Node thenBranch = cond.getNext();\n  Node elseBranch = thenBranch.getNext();\n  if (elseBranch == null) {\n    if (isFoldableExpressBlock(thenBranch)) {\n      Node expr = getBlockExpression(thenBranch);\n      if (!late && isPropertyAssignmentInExpression(expr)) {\n        return n;\n      }\n      if (cond.isNot()) {\n        if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                OR_PRECEDENCE)) {\n          return n;\n        }\n        Node or = IR.or(\n            cond.removeFirstChild(),\n            expr.removeFirstChild()).srcref(n);\n        Node newExpr = NodeUtil.newExpr(or);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n        return newExpr;\n      }\n      if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n          isLowerPrecedenceInExpression(expr.getFirstChild(),\n              AND_PRECEDENCE)) {\n        return n;\n      }\n      n.removeChild(cond);\n      Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);\n      Node newExpr = NodeUtil.newExpr(and);\n      parent.replaceChild(n, newExpr);\n      reportCodeChange();\n      return newExpr;\n    } else {\n      if (NodeUtil.isStatementBlock(thenBranch) &&\n          thenBranch.hasOneChild()) {\n        Node innerIf = thenBranch.getFirstChild();\n        if (innerIf.isIf()) {\n          Node innerCond = innerIf.getFirstChild();\n          Node innerThenBranch = innerCond.getNext();\n          Node innerElseBranch = innerThenBranch.getNext();\n          if (innerElseBranch == null &&\n               !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                 isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n            n.detachChildren();\n            n.addChildToBack(\n                IR.and(\n                    cond,\n                    innerCond.detachFromParent())\n                    .srcref(cond));\n            n.addChildrenToBack(innerThenBranch.detachFromParent());\n            reportCodeChange();\n            return n;\n          }\n        }\n      }\n    }\n    return n;\n  }\n  tryRemoveRepeatedStatements(n);\n  if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n    n.replaceChild(cond, cond.removeFirstChild());\n    n.removeChild(thenBranch);\n    n.addChildToBack(thenBranch);\n    reportCodeChange();\n    return n;\n  }\n  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n    Node thenExpr = getBlockReturnExpression(thenBranch);\n    Node elseExpr = getBlockReturnExpression(elseBranch);\n    n.removeChild(cond);\n    thenExpr.detachFromParent();\n    elseExpr.detachFromParent();\n    Node returnNode = IR.returnNode(\n                          IR.hook(cond, thenExpr, elseExpr)\n                              .srcref(n));\n    parent.replaceChild(n, returnNode);\n    reportCodeChange();\n    return returnNode;\n  }\n  boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n  boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n    Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n    Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n    if (thenOp.getType() == elseOp.getType()) {\n      if (NodeUtil.isAssignmentOp(thenOp)) {\n        Node lhs = thenOp.getFirstChild();\n        if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n// buggy line:            !mayEffectMutableState(lhs)) {\n            <extra_id_0>\n          n.removeChild(cond);\n          Node assignName = thenOp.removeFirstChild();\n          Node thenExpr = thenOp.removeFirstChild();\n          Node elseExpr = elseOp.getLastChild();\n          elseOp.removeChild(elseExpr);\n          Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n          Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                            .srcref(thenOp);\n          Node expr = NodeUtil.newExpr(assign);\n          parent.replaceChild(n, expr);\n          reportCodeChange();\n          return expr;\n        }\n      }\n    }\n    n.removeChild(cond);\n    thenOp.detachFromParent();\n    elseOp.detachFromParent();\n    Node expr = IR.exprResult(\n        IR.hook(cond, thenOp, elseOp).srcref(n));\n    parent.replaceChild(n, expr);\n    reportCodeChange();\n    return expr;\n  }\n  boolean thenBranchIsVar = isVarBlock(thenBranch);\n  boolean elseBranchIsVar = isVarBlock(elseBranch);\n  if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n      getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n    Node var = getBlockVar(thenBranch);\n    Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n    Node name1 = var.getFirstChild();\n    Node maybeName2 = elseAssign.getFirstChild();\n    if (name1.hasChildren()\n        && maybeName2.isName()\n        && name1.getString().equals(maybeName2.getString())) {\n      Node thenExpr = name1.removeChildren();\n      Node elseExpr = elseAssign.getLastChild().detachFromParent();\n      cond.detachFromParent();\n      Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                          .srcref(n);\n      var.detachFromParent();\n      name1.addChildrenToBack(hookNode);\n      parent.replaceChild(n, var);\n      reportCodeChange();\n      return var;\n    }\n  } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n      getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n    Node var = getBlockVar(elseBranch);\n    Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n    Node maybeName1 = thenAssign.getFirstChild();\n    Node name2 = var.getFirstChild();\n    if (name2.hasChildren()\n        && maybeName1.isName()\n        && maybeName1.getString().equals(name2.getString())) {\n      Node thenExpr = thenAssign.getLastChild().detachFromParent();\n      Node elseExpr = name2.removeChildren();\n      cond.detachFromParent();\n      Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                          .srcref(n);\n      var.detachFromParent();\n      name2.addChildrenToBack(hookNode);\n      parent.replaceChild(n, var);\n      reportCodeChange();\n      return var;\n    }\n  }\n  return n;\n}",
      "output": [
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIs",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIsVar && elseBranchIsVarif (thenBranchIs",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIsVar && elseBranchIsVar )if (thenBranch",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVar )if (thenBranch",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIsVar && elseBranchIsVar) {if (",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar) {if (then",
        "if (NodeUtil.isAssignmentOp(elseOp)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVar) {if (then",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIsVar && elseBranchIsVarif (thenBranch.",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIsVar && elseBranchIsVar) {Node",
        "// buggy line:           !mayEffectMutableState(lhs)) {if (thenBranchIsVar && elseBranchIsVar &&if (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVarif (thenBranchIsVar && elseBranchIsVar )if (thenBranchIsVar && elseBranchIsVar) {) {"
      ],
      "function range": "636,3-868,3"
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  <extra_id_0>\n}",
      "output": [
        "// buggy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de",
        "// bugy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\ufffd",
        "// buggy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32",
        "// bugy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\ufffd",
        "// bugy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32",
        "// buggy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c",
        "// buggy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a",
        "// bugy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\ufffd",
        "// bugy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\ufffd",
        "// bugy line: \u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\ufffd"
      ],
      "function range": "2399,3-2402,3"
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n      <extra_id_0>\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(this, that);\n  }\n  throw new IllegalStateException();\n}",
      "output": [
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, that);",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);}return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null,",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, that);",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);}return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);\n",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null,}",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);return new TypePair(this, that);",
        "//if (that.testForEquality(this)) {return new TypePair(null, that);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null, null);return new TypePair(null, null);\nreturn new TypePair(null, null);return new TypePair(null,}"
      ],
      "function range": "696,3-715,3"
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1466": {
      "loc": "1451-1466",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  <extra_id_0>\n}",
      "output": [
        "else {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (",
        "else {if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (",
        "else {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent",
        "//if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent",
        "else {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (n",
        "else {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)(n.",
        "//if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (n",
        "else {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)(n",
        "else {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME){",
        "else {if (parent.getType() == Token.NAME) {if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)if (parent.getType() == Token.NAME)(n"
      ],
      "function range": "1443,5-1466,5"
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  <extra_id_0>\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces =\n      ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n    resolvedInterfaces.add(resolvedIface);\n    changed |= (resolvedIface != iface);\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n    }\n  }\n  return super.resolveInternal(t, scope);\n}",
      "output": [
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: ",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line:",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t,scope); // buggy line:",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(t,// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t,scope); // buggy line: ",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);if (typeOfThis!=",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);if (typeOfThis!= null",
        "// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);// buggy line: typeOfThis.resolve(t, scope);(FunctionType)(Function"
      ],
      "function range": "861,3-892,3"
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n  <extra_id_0>\n    }\n  }\n  for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}",
      "output": [
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);if (c.getType() == Token.CALL){\n    findCalledFunctions(c, changed);if (c.getType() == Token.NAME){\n    findCalledFunctions(c,",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL)// buggy line:if (c.getType() == Token.NAME)// buggy line:      changed.add(c.getString());// bugg",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL)// buggy line:if (c.getType() == Token.NAME)// buggy line:      changed.add(c.getString());if (c",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL){\n    findCalledFunctions(c, changed);if (c.getType() == Token.NAME){\n    findCalledFunctions(c, changed);if (c",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL){\n    findCalledFunctions(c, changed);if (c.getType() == Token.NAME){\n    findCalledFunctions(c, changed);\n}",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL)// buggy line:if (c.getType() == Token.NAME)// buggy line:      changed.add(c.getString()); //if (",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL)// buggy line:if (c.getType() == Token.NAME)// buggy line:      changed.add(c.getString()); //// b",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL)// buggy line:if (c.getType() == Token.NAME)// buggy line:      changed.add(c.getString()); //if",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL){\n    findCalledFunctions(c, changed);if (c.getType() == Token.NAME){\n    findCalledFunctions(c, changed);\n} else",
        "// buggy line:for (Node c = node.getFirstChild();c!= null; c =c.getNext()) {\n    findCalledFunctions(c, changed);\nif (c.getType() == Token.CALL)// buggy line:if (c.getType() == Token.NAME)// buggy line:      changed.add(c.getString()); ////"
      ],
      "function range": "773,3-787,3"
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  <extra_id_0>\n    return;\n  }\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode())\n            .recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
      "output": [
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())if (scope!=",
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())if (scope!= ownerScope",
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= owner",
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && owner",
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())if (scope!= ownerScope &&",
        "//if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())if (",
        "//if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope",
        "//if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal()){",
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&&& ownerScope.isLocal()) {(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope &&",
        "if (t.inGlobalScope()) {if (n.isGetProp() && n.isUnscopedQualifiedName() &&(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())(scope!= ownerScope && ownerScope.isLocal())if (scope"
      ],
      "function range": "1987,5-2038,5"
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n        <extra_id_0>\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) { b += 256; }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];\n                buf[pos++] = encodeTable[x & MASK_6BITS];\n                currentLinePos += 4;\n                if (lineLength > 0 && lineLength <= currentLinePos) {\n                    System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                    pos += lineSeparator.length;\n                    currentLinePos = 0;\n                }\n            }\n        }\n    }\n}",
      "output": [
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy(lineSeparator",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.array",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0,",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);pos += lineSeparator.length",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);pos += lineSeparator.",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);= 0;",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy(lineSeparator, 0, buf, pos,pos += lineSeparator.length;=",
        "//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);{ //System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos,//System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);//System.arraycopy(lineSeparator, 0, buf, pos,pos += lineSeparator.length;if"
      ],
      "function range": "414,5-473,5"
    },
    "Codec_3_/src/java/org/apache/commons/codec/language/DoubleMetaphone.java_455-456": {
      "loc": "455-456",
      "input": "private int handleG(String value, \n                    DoubleMetaphoneResult result, \n                    int index, \n                    boolean slavoGermanic) {\n    if (charAt(value, index + 1) == 'H') {\n        index = handleGH(value, result, index);\n    } else if (charAt(value, index + 1) == 'N') {\n        if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) {\n            result.append(\"KN\", \"N\");\n        } else if (!contains(value, index + 2, 2, \"EY\") && \n                   charAt(value, index + 1) != 'Y' && !slavoGermanic) {\n            result.append(\"N\", \"KN\");\n        } else {\n            result.append(\"KN\");\n        }\n        index = index + 2;\n    } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n        result.append(\"KL\", \"L\");\n        index += 2;\n    } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n        result.append('K', 'J');\n        index += 2;\n    } else if ((contains(value, index + 1, 2, \"ER\") || \n                charAt(value, index + 1) == 'Y') &&\n               !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n               !contains(value, index - 1, 1, \"E\", \"I\") && \n               !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n        result.append('K', 'J');\n        index += 2;\n    } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n               contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n        if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n            result.append('K');\n// buggy line:        } else if (contains(value, index + 1, 4, \"IER\")) {\n        <extra_id_0>\n            result.append('J');\n        } else {\n            result.append('J', 'K');\n        }\n        index += 2;\n    } else if (charAt(value, index + 1) == 'G') {\n        index += 2;\n        result.append('K');\n    } else {\n        index++;\n        result.append('K');\n    }\n    return index;\n}",
      "output": [
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:} else if (contains(value,{ // buggy line:} else if (contains(value,{ // buggy line:result.append",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value,",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:} else if (contains(value",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,{ // buggy line:} else if (contains(value",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:result.append('K');",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:} else if (contains(value,{ // buggy line:} else if (contains(value,{ // buggy line:} else if",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,{ // buggy line:} else if (contains(value,{ // buggy line:}",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:} else if (contains(value,{ // buggy line:} else if (contains(value,{ // buggy line:if (contains",
        "// buggy line:if (charAt(value, index + 1)if (contains(value, index + 1,if (contains(value, index + 1,if (contains(value, index + 1,{ // buggy line:if (contains(value, index + 1,{ // buggy line:} else if (contains(value,{ // buggy line:if"
      ],
      "function range": "418,5-469,5"
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "public Base64() {\n// buggy line:    this(false);\n    <extra_id_0>\n}",
      "output": [
        "}  public class",
        "}  public partial class",
        " public class Base64 {",
        "}  public abstract class",
        "}  class Base64 {",
        "} public static string",
        "}  public partial struct",
        "}  public struct",
        "}  public static string",
        "} public static explicit operator"
      ],
      "function range": "224,5-226,5"
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:   ",
        "// buggy line:    return",
        "// return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "// return StringUtils.newStringUtf8(StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "//buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "// return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "// return StringUtils.newStringUtf8(StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "// return StringUtils.newStringUtf8(StringUtils.newStringUtf8(encodeBase64(binaryData, false)));",
        "//buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData,false));"
      ],
      "function range": "669,5-671,5"
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    <extra_id_0>\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n            len +\n            \") than the specified maxium size of \" +\n            maxResultSize);\n    }\n    Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);\n    return b64.encode(binaryData);\n}",
      "output": [
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than themaxResultSize +maxResultSize);",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n           ) than themaxResultSize +\n           ) than the",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than themaxResultSize +maxResultSize);\n",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n           + maxResultSize);+ maxResultSize);\n",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n           + maxResultSize);+ maxResultSize);}",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than themaxResultSize +\n            \") than the",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n           + maxResultSize);+ maxResultSize); }",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than themaxResultSize +maxResultSize +\n",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n           + maxResultSize);+ maxResultSize);\n   ",
        "// buggy line:if (binaryData.length > maxResultSize) {if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n            \") than+ maxResultSize);if (binaryData.length > maxResultSize) {throw new IllegalArgumentException(\"Input array toomaxResultSize +\n           + maxResultSize);+ maxResultSize);//"
      ],
      "function range": "822,5-837,5"
    },
    "Codec_10_/src/java/org/apache/commons/codec/language/Caverphone.java_76-77": {
      "loc": "76-77",
      "input": "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    <extra_id_0>\n    txt = txt.replaceAll(\"cq\", \"2q\");\n    txt = txt.replaceAll(\"ci\", \"si\");\n    txt = txt.replaceAll(\"ce\", \"se\");\n    txt = txt.replaceAll(\"cy\", \"sy\");\n    txt = txt.replaceAll(\"tch\", \"2ch\");\n    txt = txt.replaceAll(\"c\", \"k\");\n    txt = txt.replaceAll(\"q\", \"k\");\n    txt = txt.replaceAll(\"x\", \"k\");\n    txt = txt.replaceAll(\"v\", \"f\");\n    txt = txt.replaceAll(\"dg\", \"2g\");\n    txt = txt.replaceAll(\"tio\", \"sio\");\n    txt = txt.replaceAll(\"tia\", \"sia\");\n    txt = txt.replaceAll(\"d\", \"t\");\n    txt = txt.replaceAll(\"ph\", \"fh\");\n    txt = txt.replaceAll(\"b\", \"p\");\n    txt = txt.replaceAll(\"sh\", \"s2\");\n    txt = txt.replaceAll(\"z\", \"s\");\n    txt = txt.replaceAll(\"^[aeiou]\", \"A\");\n    txt = txt.replaceAll(\"[aeiou]\", \"3\");\n    txt = txt.replaceAll(\"j\", \"y\");        \n    txt = txt.replaceAll(\"^y3\", \"Y3\");     \n    txt = txt.replaceAll(\"^y\", \"A\");       \n    txt = txt.replaceAll(\"y\", \"3\");        \n    txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n    txt = txt.replaceAll(\"gh\", \"22\");\n    txt = txt.replaceAll(\"g\", \"k\");\n    txt = txt.replaceAll(\"s+\", \"S\");\n    txt = txt.replaceAll(\"t+\", \"T\");\n    txt = txt.replaceAll(\"p+\", \"P\");\n    txt = txt.replaceAll(\"k+\", \"K\");\n    txt = txt.replaceAll(\"f+\", \"F\");\n    txt = txt.replaceAll(\"m+\", \"M\");\n    txt = txt.replaceAll(\"n+\", \"N\");\n    txt = txt.replaceAll(\"w3\", \"W3\");\n    txt = txt.replaceAll(\"wh3\", \"Wh3\");\n    txt = txt.replaceAll(\"w$\", \"3\");       \n    txt = txt.replaceAll(\"w\", \"2\");\n    txt = txt.replaceAll(\"^h\", \"A\");\n    txt = txt.replaceAll(\"h\", \"2\");\n    txt = txt.replaceAll(\"r3\", \"R3\");\n    txt = txt.replaceAll(\"r$\", \"3\");       \n    txt = txt.replaceAll(\"r\", \"2\");\n    txt = txt.replaceAll(\"l3\", \"L3\");\n    txt = txt.replaceAll(\"l$\", \"3\");       \n    txt = txt.replaceAll(\"l\", \"2\");\n    txt = txt.replaceAll(\"2\", \"\");\n    txt = txt.replaceAll(\"3$\", \"A\");       \n    txt = txt.replaceAll(\"3\", \"\");\n    txt = txt + \"111111\" + \"1111\";        \n    return txt.substring(0, 10);          \n}",
      "output": [
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",== txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",=txt = txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aei",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"^[aeiou]",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",== txt.replaceAll(\"[aeiou",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\", \"3\");= txt.replaceAll(\"[aei",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\", \"3\");= txt.replaceAll(\"^[ae",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",=txt = txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"^[ae",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",=txt = txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"z\", \"",
        "//    txt = txt.replaceAll(\"^cq\", \"2c\");txt = txt.replaceAll(\"^[aeiou]\",= txt.replaceAll(\"[aeiou]\",=txt = txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"[aeiou]\",= txt.replaceAll(\"z\","
      ],
      "function range": "50,5-142,5"
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:    return",
        "// buggy line:   ",
        "// return new String(bytes, Charsets.ISO_8859_1);",
        "// bugy line:    return",
        "// return new String(bytes, Charsets.UTF_8);",
        "//buggy line:    return newString(bytes, Charsets.ISO_8859_1);",
        "//buggy line:    return newString(bytes);",
        "//buggy line:    return newString(bytes, Charsets.UTF_8);",
        "//buggy line:    return newString(bytes, Charsets.ISO_8859_1);",
        "//buggy line:    return newString(bytes, Charset.ISO_8859_1);"
      ],
      "function range": "338,5-340,5"
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    <extra_id_0>\n}",
      "output": [
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}return cs1.equals(cs2);",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);if(cs1.equals(cs2)) {",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);if(cs2.equals(cs2)) {",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}return cs2.equals(cs2);",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}return cs2.equals(cs1);",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}if(cs1.equals(cs2))",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);if(cs2.equals(cs1)) {",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}return cs1.equals(cs2); }",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}if(cs2.equals(cs2))",
        "//return CharSequenceUtils.regionMatches(cs1, false, 0,cs1.length(), cs2, 0, Math.max(cs1.length(), cs2.length()));return cs1.equals(cs2);if(cs1.equals(cs2)) {return cs1.equals(cs2);return cs1.equals(cs2);}if(cs1.equals(cs2));"
      ],
      "function range": "71,5-82,5"
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "\n// buggy line:private Object readResolve() {\n<extra_id_0>\n    calculateHashCode(keys);\n    return this;\n}",
      "output": [
        "\n    calculateHashCode(keys);\n    calculateHashCode(keys);",
        "\n    calculateHashCode(keys);\n    calculateHashCode(keys);\n   ",
        "\n    calculateHashCode(keys);\n    calculateHashCode(keys.length);",
        "Object [] keys = readResolve();",
        "Object[] keys = readResolve();",
        "Object[] keys = readResolve(keys);",
        "Object[] keys = this.keys;",
        "Object[] keys = readResolve(null);",
        "if (keys!= null)",
        "\n    calculateHashCode(keys);\n    calculateHashCode(values);"
      ],
      "function range": "277,5-280,5"
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n                ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n        <extra_id_0>\n        }\n        crc.update(buffer, start, read);\n        return read;\n    }\n    throw new ArrayIndexOutOfBoundsException();\n}",
      "output": [
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start,",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start,crc.update(buffer, start,",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start,crc.update(buffer, start, length",
        "} else {if (crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start, length);crc.update(buffer, start,crc.update(buffer, start,"
      ],
      "function range": "191,5-246,5"
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    <extra_id_0>\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    if (currEntry.isGNULongNameEntry()) {\n        StringBuffer longName = new StringBuffer();\n        byte[] buf = new byte[SMALL_BUFFER_SIZE];\n        int length = 0;\n        while ((length = read(buf)) >= 0) {\n            longName.append(new String(buf, 0, length));\n        }\n        getNextEntry();\n        if (currEntry == null) {\n            return null;\n        }\n        if (longName.length() > 0\n            && longName.charAt(longName.length() - 1) == 0) {\n            longName.deleteCharAt(longName.length() - 1);\n        }\n        currEntry.setName(longName.toString());\n    }\n    if (currEntry.isPaxHeader()){ \n        paxHeaders();\n    }\n    if (currEntry.isGNUSparse()){ \n        readGNUSparse();\n    }\n    entrySize = currEntry.getSize();\n    return currEntry;\n}",
      "output": [
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(currEntry); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out.println(",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(currEntry.getSize());//System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(currEntry.getSize());//System.out.println(currEntry); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(currEntry); //System.out.println(currEntry); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out.println(",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(currEntry.getSize());//System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.getSize());",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(currEntry); //System.out.println(currEntry); //System.out.println(currEntry); //System.out.println(currEntry.getSize());",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(currEntry.",
        "//System.out.println(currEntry); //System.out.println(headerBuf); //System.out.println(currEntry.getSize()); //System.out.println(headerBuf); //System.out.println(headerBuf);//System.out.println(currEntry); //System.out.println(currEntry); //System.out.println(currEntry.getSize()); //System.out.println(currEntry);"
      ],
      "function range": "172,5-238,5"
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-73": {
      "loc": "65-73",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i] != 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n    <extra_id_0>\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer;\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    } else {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, end-1, trailer));\n    }\n    trailer = buffer[end-1];\n    if (trailer == 0 || trailer == ' '){\n        end--;\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}",
      "output": [
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (allNUL) { // buggyline",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggyline",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (buffer[start]",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (allNUL)",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:line:// buggy line:// bugg",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:line:// bugg",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:line:// buggy line:// buggy line:// bugg",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:line:// buggy line:// buggy line:// buggy line:// bugg",
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (allNUL) { // buggy// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line://"
      ],
      "function range": "56,5-112,5"
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        int expectedLength = (hasUncompressedSize ? DWORD : 0)\n            + (hasCompressedSize ? DWORD : 0)\n            + (hasRelativeHeaderOffset ? DWORD : 0)\n            + (hasDiskStart ? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length != expectedLength) {\n        <extra_id_0>\n            throw new ZipException(\"central directory zip64 extended\"\n                                   + \" information extra field's length\"\n                                   + \" doesn't match central directory\"\n                                   + \" data.  Expected length \"\n                                   + expectedLength + \" but is \"\n                                   + rawCentralDirectoryData.length);\n        }\n        int offset = 0;\n        if (hasUncompressedSize) {\n            size = new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasCompressedSize) {\n            compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                     offset);\n            offset += DWORD;\n        }\n        if (hasRelativeHeaderOffset) {\n            relativeHeaderOffset =\n                new ZipEightByteInteger(rawCentralDirectoryData, offset);\n            offset += DWORD;\n        }\n        if (hasDiskStart) {\n            diskStart = new ZipLong(rawCentralDirectoryData, offset);\n            offset += WORD;\n        }\n    }\n}",
      "output": [
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,if (hasUncompressedSize",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset += DWORD;",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByte",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset +=if (has",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset;\n            offset +=",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset);\n            offset +=",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset += DWORD;\n",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset;offset += WORD",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset;if (has",
        "System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData); System.out.println(rawCentralDirectoryData);= new ZipEightByteInteger(rawCentralDirectoryData,= new ZipEightByteInteger(rawCentralDirectoryData,offset);offset += WORD"
      ],
      "function range": "249,5-287,5"
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        <extra_id_0>\n    }\n    if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n        throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n    }\n    return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n}",
      "output": [
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, propsByte, (int) dictSize);(int) dictSize);",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, propsByte, (int)(int) dictSize);\n   ",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, props",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, propsByte, (int) dictSize);in, -1,",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, propsByte, (int) dictSize);(int) dictSize;",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, props",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte,(",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1,",
        "propsByte = coder.properties[i];return new LZMAInputStream(in, -1, propsByte,in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int) dictSize);in, -1, propsByte, (int)(int) dictSize);in, -1, propsByte, (int)(int) dictSize);(int"
      ],
      "function range": "106,9-118,9"
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-137": {
      "loc": "133-137",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    <extra_id_0>\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}",
      "output": [
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte'0')+(currentByte - '",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte'7')+(currentByte - '",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte'0')+(currentByte -",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte -'0')+(currentByte -",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte'7')+(currentByte -",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte -'0')+(currentByte",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte(currentByte - '0')+(currentByte - '0')+(currentByte== '0'){",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte(currentByte - '0')+(currentByte - '0')+(currentByte(currentByte - '",
        "if (trailer == 0) {if (buffer[start] == '== '0'){throw new IllegalArgumentException(\n                    exceptionMessage(buffer,length, start, currentByte));= (result << 3) +(currentByte - '0')+(currentByte - '0')+(currentByte'0')+(currentByte - '0')+(currentByte'0')+(currentByte'"
      ],
      "function range": "102,5-150,5"
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_135-138": {
      "loc": "135-138",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        }\n        <extra_id_0>\n        if (currentByte < '0' || currentByte > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, currentByte));\n        }\n        result = (result << 3) + (currentByte - '0'); \n    }\n    return result;\n}",
      "output": [
        "else { // buggy line:if (buffer[start] == 0){ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:",
        "else { // buggy line:if (trailer == 0){ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// b",
        "else { // buggy line:if (buffer[start] =={ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// b",
        "else { // buggy line:if (buffer[start] == '{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line://",
        "else { // buggy line:if (trailer == 0){ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (",
        "else { // buggy line:if (trailer == 0){ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (trailer == 0) {",
        "else { // buggy line:if (buffer[start] =={ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (",
        "else { // buggy line:if (trailer == 0){ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line://",
        "else { // buggy line:if (buffer[start] == '{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if",
        "else { // buggy line:if (buffer[start] =={ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line://"
      ],
      "function range": "101,5-148,5"
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "@Override\npublic boolean isDirectory() {\n    if (file != null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    <extra_id_0>\n        return true;\n    }\n    return false;\n}",
      "output": [
        "//if (getName().endsWith(\".\")) {return true;\n   }",
        "//if (getName().endsWith(\".\")) {return true;\n   return false;\n}",
        "//if (getName().endsWith(\".\")) {return true;\n    }}",
        "//if (getName().endsWith(\".\")) {return true;\n    }return false;}",
        "//if (getName().endsWith(\".\")) {return true;\n   return false;}",
        "//if (getName().endsWith(\".\")) {return true;\n   return}",
        "//if (getName().endsWith(\".\")) {return true;\n   }return false;}",
        "//if (getName().endsWith(\".\")) { ////return false;}",
        "//if (getName().endsWith(\".\")) {return true;\n   return false;}}",
        "//}"
      ],
      "function range": "849,5-864,5"
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n    <extra_id_0>\n        throw new IllegalArgumentException(\"X5455 timestamps must fit in a signed 32 bit integer: \" + l);\n    }\n    return new ZipLong(l);\n}",
      "output": [
        "//return new ZipLong(TWO_TO_32); }",
        "//return new ZipLong(TWO_TO_32);}",
        "//return new ZipLong(TWO_TO_32);}",
        "//// buggy line:   return new ZipLong(TWO_TO_32);",
        "//return new ZipLong(TWO_TO_32);return new ZipLong(l);}",
        "//return new ZipLong(l); }",
        "//// buggy line:   return new ZipLong(l);",
        "//}",
        "//return new ZipLong(l);}",
        "//// buggy line:   return new ZipLong(TWO_TO_32);}"
      ],
      "function range": "528,5-534,5"
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    <extra_id_0>\n        lineCounter++;\n    }\n    lastChar = current;\n    return lastChar;\n}",
      "output": [
        "//",
        "//System.out.println(lineCounter); //System.out.println(lastChar);",
        "//System.out.println(lineCounter);",
        "//System.out.println(lineCounter);//System.out.println(lastChar);",
        "//System.err.println(lineCounter); //System.err.println(lastChar);",
        "//System.out.println(lineCounter); //System.err.println(lastChar);",
        "//System.out.println(lineCounter);//System.out.println(lastChar);//",
        "//System.out.println(lineCounter);//System.err.println(lastChar);",
        "//System.err.println(lineCounter);//System.err.println(lastChar);",
        "//System.out.println(lineCounter); //System.out.println(current);"
      ],
      "function range": "55,5-63,5"
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n    <extra_id_0>\n}",
      "output": [
        "}  public Map<String,Integer> getHeaderMap(){return this.headerMap;}",
        "// buggy line:    return",
        "}  public Map<String,Integer> getHeaderMap(){return this.headerMap;",
        "}  public Map<String,Integer> getHeaderMap(){return",
        "}",
        "// buggy line:   ",
        "}  public Map<String, Integer>",
        "}  public Map<String,Integer> getHeaderMap(){return this.headerMap; }",
        "}  public Map<String,Integer> getHeaderMap(){",
        "}  public Map<String,Integer> getHeaderMap(){return this.headerMap;};"
      ],
      "function range": "287,5-289,5"
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                <extra_id_0>\n                if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n                    throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                            \"\\\" in \" + Arrays.toString(headerRecord));\n                }\n                hdrMap.put(header, Integer.valueOf(i));\n            }\n        }\n    }\n    return hdrMap;\n}",
      "output": [
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord[i] = headerRecord[i];headerRecord",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders()) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length == 0) {headerRecord.length == 0) {headerRecord.length == 0) {headerRecord.length == 0) {headerRecord.length == 0) {",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord[i] = headerRecord[i];if (",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord.length > 0) {headerRecord[i];",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord.length > 0) {headerRecord[i]",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders()) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length == 0) {headerRecord.length == 0) {headerRecord.length == 0) {headerRecord[i] = headerRecord[i];headerRecord[i];",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord[i] = headerRecord[i];if",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord[i] = headerRecord[i];} else",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord.length > 0) {headerRecord.length >",
        "// buggy line:if (this.format.getIgnoreEmptyHeaders())) {if (this.format.getIgnoreEmptyHeaders())) {headerRecord = this.nextRecord();if (headerRecord!= null) {headerRecord.length > 0) {headerRecord.length > 0) {headerRecord[i] = headerRecord[i];headerRecord[i] = headerRecord[i];//"
      ],
      "function range": "359,5-394,5"
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            <extra_id_0>\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "output": [
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (!quote) {= true;",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);\n",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);== delimChar) {= true;",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c == delimChar) {=",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);(c <= SP) {= true;",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c <= SP)= true;",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c <= SP) {= true",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos); //",
        "// buggy line:           { // buggy line:           c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c == delimChar) {{"
      ],
      "function range": "1001,5-1106,5"
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1192": {
      "loc": "1189-1192",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            <extra_id_0>\n                quote = true;\n            } else {\n                while (pos < end) {\n                    c = value.charAt(pos);\n                    if (c == LF || c == CR || c == quoteChar || c == delimChar) {\n                        quote = true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos = end - 1;\n                    c = value.charAt(pos);\n                    if (c <= SP) {\n                        quote = true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n        break;\n    default:\n        throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos < end) {\n        final char c = value.charAt(pos);\n        if (c == quoteChar) {\n            out.append(value, start, pos + 1);\n            start = pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "output": [
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);== delimChar) {= true;",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (!quote) {= true;",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);\n",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c == delimChar) {=",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);(c <= SP) {= true;",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c == delimChar) {= true;",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c <= SP) {= true",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c == delimChar)= true",
        "// buggy line:c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);c = value.charAt(pos);if (c == delimChar){"
      ],
      "function range": "1151,5-1256,5"
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  <extra_id_0>\n  t.write(writer, fieldValue);\n}",
      "output": [
        "//",
        "//// buggy line:",
        "//}",
        "// public void",
        "//;",
        "// buggy line:}",
        "// @",
        "//.",
        "// buggy line:// buggy line:}",
        "//// buggy line:}"
      ],
      "function range": "118,7-125,7"
    },
    "Gson_13_/gson/src/main/java/com/google/gson/stream/JsonReader.java_731-732": {
      "loc": "731-732",
      "input": "private int peekNumber() throws IOException {\n  char[] buffer = this.buffer;\n  int p = pos;\n  int l = limit;\n  long value = 0; \n  boolean negative = false;\n  boolean fitsInLong = true;\n  int last = NUMBER_CHAR_NONE;\n  int i = 0;\n  charactersOfNumber:\n  for (; true; i++) {\n    if (p + i == l) {\n      if (i == buffer.length) {\n        return PEEKED_NONE;\n      }\n      if (!fillBuffer(i + 1)) {\n        break;\n      }\n      p = pos;\n      l = limit;\n    }\n    char c = buffer[p + i];\n    switch (c) {\n    case '-':\n      if (last == NUMBER_CHAR_NONE) {\n        negative = true;\n        last = NUMBER_CHAR_SIGN;\n        continue;\n      } else if (last == NUMBER_CHAR_EXP_E) {\n        last = NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n      return PEEKED_NONE;\n    case '+':\n      if (last == NUMBER_CHAR_EXP_E) {\n        last = NUMBER_CHAR_EXP_SIGN;\n        continue;\n      }\n      return PEEKED_NONE;\n    case 'e':\n    case 'E':\n      if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n        last = NUMBER_CHAR_EXP_E;\n        continue;\n      }\n      return PEEKED_NONE;\n    case '.':\n      if (last == NUMBER_CHAR_DIGIT) {\n        last = NUMBER_CHAR_DECIMAL;\n        continue;\n      }\n      return PEEKED_NONE;\n    default:\n      if (c < '0' || c > '9') {\n        if (!isLiteral(c)) {\n          break charactersOfNumber;\n        }\n        return PEEKED_NONE;\n      }\n      if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n        value = -(c - '0');\n        last = NUMBER_CHAR_DIGIT;\n      } else if (last == NUMBER_CHAR_DIGIT) {\n        if (value == 0) {\n          return PEEKED_NONE; \n        }\n        long newValue = value * 10 - (c - '0');\n        fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n            || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n        value = newValue;\n      } else if (last == NUMBER_CHAR_DECIMAL) {\n        last = NUMBER_CHAR_FRACTION_DIGIT;\n      } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n        last = NUMBER_CHAR_EXP_DIGIT;\n      }\n    }\n  }\n// buggy line:  if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {\n  <extra_id_0>\n    peekedLong = negative ? value : -value;\n    pos += i;\n    return peeked = PEEKED_LONG;\n  } else if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n      || last == NUMBER_CHAR_EXP_DIGIT) {\n    peekedNumberLength = i;\n    return peeked = PEEKED_NUMBER;\n  } else {\n    return PEEKED_NONE;\n  }\n}",
      "output": [
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last == NUMBER_CHAR_EXP_E)last = NUMBER_CHAR_EXP_E;",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last == NUMBER_CHAR_EXP_E)== NUMBER_CHAR_EXP_E) {",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last == NUMBER_CHAR_EXP_E)== NUMBER_CHAR_EXP_SIGN) {",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last ==NUMBER_CHAR_EXP_E) {NUMBER_CHAR_EXP_E;",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last == NUMBER_CHAR_EXP_E)== NUMBER_CHAR_EXP_E)",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E)",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last == NUMBER_CHAR_EXP_E)== NUMBER_CHAR_EXP_SIGN)",
        "if (value!= Long.MIN_VALUE) {if (last == NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_E;else if (last == NUMBER_CHAR_EXP_SIGN)== NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_SIGN;else if (last ==NUMBER_CHAR_EXP_E) {last = NUMBER_CHAR_EXP_"
      ],
      "function range": "641,3-742,3"
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  <extra_id_0>\n    throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n  }\n  beforeValue();\n  out.append(Double.toString(value));\n  return this;\n}",
      "output": [
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(Double.toString",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(Double.",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))}",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)));}",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value))) {}",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))return this;",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(\";\");",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(\");\");",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(\"\\n",
        "//if (Double.isNaN(value)) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value))) {out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(Double.NaN(value)))out.append(Double.toString(value));"
      ],
      "function range": "493,3-501,3"
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek() != JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n  <extra_id_0>\n  }\n  Date date = deserializeToDate(in.nextString());\n  if (dateType == Date.class) {\n    return date;\n  } else if (dateType == Timestamp.class) {\n    return new Timestamp(date.getTime());\n  } else if (dateType == java.sql.Date.class) {\n    return new java.sql.Date(date.getTime());\n  } else {\n    throw new AssertionError();\n  }\n}",
      "output": [
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldvalue\"); // bugg",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\");",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldbe a string value\");",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); //",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\");\n",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string\");",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldbe a string\");",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string",
        "// buggy line:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldmust be a string value\");if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shoulda string value\"); // buggyline:if (in.peek()!= JsonToken.NULL)throw new JsonParseException(\"The date shouldvalue\");\n  }"
      ],
      "function range": "97,3-113,3"
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        <extra_id_0>\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}",
      "output": [
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE)return -1;\n}",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n}if (l > Integer.MAX_VALUE) {return -1;",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n}if (l > Integer.MAX_VALUE)return -1;\n",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE)return -1;\nreturn",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE)return -1;\nif",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE)return -1;\n{",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;}",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n}if (l > Integer.MAX_VALUE)return -1;",
        "// buggy line:if (len == 0) {= NumberInput.parseInt(str);if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE)return -1;\n="
      ],
      "function range": "185,5-205,5"
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n    <extra_id_0>\n        if (c > '9' || c < '0') {\n            return -1;\n        }\n    }\n    if (len == 10) {\n        long l = NumberInput.parseLong(str);\n        if (l > Integer.MAX_VALUE) {\n            return -1;\n        }\n    }\n    return NumberInput.parseInt(str);\n}",
      "output": [
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:= str.charAt(i);",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggyline:= str.charAt(i",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:if (c > '9' ||",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:if (c > '9'",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:= str.charAt(i)",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggyline:if (c > '9'",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:// buggyline:",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:// buggy line:{",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:(c > '9' ||",
        "// buggy line:if (len == 0) {if (l > Integer.MAX_VALUE) {return -1;\nif (l > Integer.MAX_VALUE) {return -1;\n} // buggy line:= str.charAt(i); // buggy line:= str.charAt(i); // buggy line:// buggy line:if"
      ],
      "function range": "185,5-206,5"
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray != null)  return _resultArray;\n    if (_resultString != null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    <extra_id_0>\n    return contentsAsArray();\n}",
      "output": [
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();return _currentSegment.getTextBuffer();",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.get",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();_currentSegment.getTextBuffer();",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();return _currentSegment.getTextBuffer();",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();return _currentSegment.getTextBuffer(); }",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();return _currentSegment.getTextBuffer();return",
        "if(_currentSegment!= null) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();if(_hasSegments) return _currentSegment.getTextBuffer();_currentSegment.getTextBuffer();"
      ],
      "function range": "298,5-310,5"
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\",\n    <extra_id_0>\n            this);\n}",
      "output": [
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object,",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object); //writeEmbeddedObject",
        "object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object); //writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object);//writeEmbeddedObject(object,"
      ],
      "function range": "1328,5-1332,5"
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        <extra_id_0>\n            if (codes[i] != 0) {\n                break;\n            }\n        } else if (!Character.isJavaIdentifierPart(c)) {\n            break;\n        }\n        ++_inputPtr;\n        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;\n        outBuf[outPtr++] = c;\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    {\n        TextBuffer tb = _textBuffer;\n        char[] buf = tb.getTextBuffer();\n        int start = tb.getTextOffset();\n        int len = tb.size();\n        return _symbols.findSymbol(buf, start, len, hash);\n    }\n}",
      "output": [
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;= _textBuffer.finishCurrentSegment(); outPtr = 0;if (",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >=",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;= _textBuffer.finishCurrentSegment(); outPtr = 0;if",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;= _textBuffer.finishCurrentSegment(); outPtr = 0;_text",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;= _textBuffer.finishCurrentSegment(); outPtr = 0;=",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;= _textBuffer.finishCurrentSegment(); outPtr = 0;}",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;if (codes[i",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;if (out",
        "if (!Character.isJavaIdentifierStart(c)) {if (outPtr >= outBuf.length) {= _textBuffer.finishCurrentSegment(); outPtr = 0;if (outPtr >= outBuf.length) {_textBuffer.finishCurrentSegment(); outPtr = 0;_textBuffer.finishCurrentSegment(); outPtr = 0;= _textBuffer.finishCurrentSegment(); outPtr = 0;= _"
      ],
      "function range": "1948,5-1990,5"
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null)\n    <extra_id_0>\n            && (_ignorableProperties == null);\n}",
      "output": [
        "&& (_keyTypeDeserializer == null) &&",
        "&& (_keyDeserializer == null) &&",
        "&& (_typeDeserializer == null) &&",
        "&& (_propertyTypeDeserializer == null) &&",
        "&& (_propertyDeserializer == null) &&",
        "&& (_valueSerializer == null) &&",
        "&& (_valueClassDeserializer == null) &&",
        "&& (_properties == null) &&",
        "&& (_valueTypeSerializer == null) &&",
        "&& (_keyTypeDeserializer == null) //"
      ],
      "function range": "298,5-305,5"
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous != null) && previous.equals(ann);\n    <extra_id_0>\n}",
      "output": [
        "//_annotations.put(ann.annotationType(),ann);",
        "//_annotations.put(ann.annotationType(),ann);}",
        "//_annotations.put(ann.annotationType(), ann);}",
        "//_annotations.put(ann.annotationType(), ann);",
        "//_annotations.put(ann.annotationType(), ann);return false;",
        "//_annotations.put(ann.annotationType(),ann);return false;",
        "//_annotations.put(ann.annotationType(),ann);return",
        "//_annotations.put(ann.annotationType(), ann);return",
        "//return _annotations.containsKey(ann.annotationType());",
        "//_annotations.put(ann.annotationType(),ann);return true;"
      ],
      "function range": "107,5-113,5"
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                <extra_id_0>\n    case NON_FINAL:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n        return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());\n    default:\n        return (t.getRawClass() == Object.class);\n    }\n}",
      "output": [
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)return (t.getRawClass",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass());\nreturn (t.getRawClass() == Object.class)return (t.getRawClass",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.getRawClass()",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArray()) {",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)return (t.isArrayType())",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass());\nreturn (t.getRawClass() == Object.class)return (t.isArrayType())",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType())",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)return (t.isConcrete()",
        "// buggy line:                ||!TreeNode.class.isAssignableFrom(t.getRawClass()));return (t.getRawClass() == Object.class)(t.isArrayType()) {\n            t= t.getContentType();\nreturn!TreeNode.class.isAssignableFrom(t.getRawClass());\nreturn (t.getRawClass() == Object.class)return (t.isConcrete()"
      ],
      "function range": "167,9-193,9"
    },
    "JacksonDatabind_27_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java_794-795": {
      "loc": "794-795",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            <extra_id_0>\n                ;\n            } else {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken(); \n                    Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue; \n                    }\n                    while (t == JsonToken.FIELD_NAME) {\n                        p.nextToken(); \n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    }\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        throw ctxt.mappingException(\"Can not create polymorphic instances with unwrapped values\");\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n            }\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n    try {\n        return ext.complete(p, ctxt, buffer, creator);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; \n    }\n}",
      "output": [
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy// buggy line:            if (ext.handlePropertyValue(p,",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p, ctxt, propName,",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (_beanProperties.find(propName)) { //",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p, ctxt,{",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,{ // b",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (buffer.readIdProperty(propName)) {",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (buffer.readIdProperty(propName)) { //",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (_beanProperties.find(propName)) {",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           { // buggy line:            if{ // b",
        "// buggy line:            return ext.complete(p, ctxt,{ // buggy line:           if (ext.handlePropertyValue(p, ctxt,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p,_beanProperties.find(propName)) { // buggy line:           if (ext.handlePropertyValue(p, ctxt,_"
      ],
      "function range": "773,5-857,5"
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg != null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                <extra_id_0>\n            name = \"\";\n        } else {\n            return null;\n        }\n    }\n    return PropertyName.construct(name);\n}",
      "output": [
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy line:// buggy line: buggy",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line:",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy line:// buggy line:",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: b",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy line:// buggy line: b",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy line:// buggy line: buggy// buggy line: buggy line: buggy// buggy",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy//",
        "// buggy line: buggy line:if (_hasAnnotation(a,{ // buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy// buggy line: buggy// buggy line: buggy line:// buggy line: buggy}"
      ],
      "function range": "730,5-755,5"
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            <extra_id_0>\n        } else {\n             visitor.expectNumberFormat(typeHint);\n        }\n    }\n}",
      "output": [
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);if (_isFloat)visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint,visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, Json",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);if (_isFloat)visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint,",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, Json",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint,visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint,",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitIntFormat(visitor, typeHint,",
        "visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);{visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);visitFloatFormat(visitor, typeHint, Json"
      ],
      "function range": "73,5-87,5"
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,\n    <extra_id_0>\n            _valueHandler, _typeHandler, _asStatic);\n}",
      "output": [
        "_superInterfaces,",
        "_fields,",
        "_interfaces,",
        "_types,",
        "_nameHandler,",
        "_parameters,",
        "_classHandler,",
        "_superMethods,",
        "_superClasses,",
        "_class,"
      ],
      "function range": "119,5-137,5"
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            <extra_id_0>\n                TimeZone tz = format.getTimeZone();\n                final String pattern = format.hasPattern()\n                                ? format.getPattern()\n                                : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n                final Locale loc = format.hasLocale()\n                                ? format.getLocale()\n                                : serializers.getLocale();\n                SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n                if (tz == null) {\n                    tz = serializers.getTimeZone();\n                }\n                df.setTimeZone(tz);\n                return withFormat(Boolean.FALSE, df);\n            }\n        }\n    }\n    return this;\n}",
      "output": [
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat(((Annotated)",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().getFormat((Annotated)property",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)(property",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotation)property",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated).get",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat(((Annotated)(",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated) property",
        "//= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());= serializers.getAnnotationIntrospector().findFormat((Annotated)Property"
      ],
      "function range": "49,5-81,5"
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    <extra_id_0>\n    return sb;\n}",
      "output": [
        "//",
        "sb = _super.getGenericSignature(sb);",
        "sb = _referencedType.getGenericSignature(sb);",
        "sb.append('>');",
        "sb = _type.getGenericSignature(sb);",
        "sb = _referencedType.getGenericSignature(sb);sb.append('>');",
        "sb = _referencedType.getGenericSignature(sb);\n// buggy line:",
        "sb = _type.getGenericSignature(sb);sb.append('>');",
        "sb = _super.getGenericSignature(sb);\n// buggy line:",
        "sb = _referencedType.getGenericSignature(sb);// buggy line:"
      ],
      "function range": "150,5-158,5"
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders != null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n    <extra_id_0>\n            true));\n}",
      "output": [
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset, length));",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset, length));",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,",
        "offset, length,return _detectBindAndReadValues(_parserFactory.createParser(src),offset, length);",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset, length),",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,length);",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,length));",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),offset, length));",
        "offset, length,return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset,offset, length));return _detectBindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset, length));}"
      ],
      "function range": "1435,5-1443,5"
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            <extra_id_0>\n            if (found) {\n                _propsInOrder[_findFromOrdered(prop)] = null;\n                continue;\n            }\n        }\n        props.add(prop);\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry '\"+propToRm.getName()+\"' found, can't remove\");\n    }\n    init(props);\n}",
      "output": [
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)] =",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(prop",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]=",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)] ==",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_hashArea[i+1] == null)",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_hashArea.length) {_hashArea",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]!=",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)].",
        "// buggy line:if (!_propsInOrder[_findFromOrdered(propToRm)] == null)_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_propsInOrder[_findFromOrdered(propToRm)]_propsInOrder[_findFromOrdered(propToRm)] = null;if (!_hashArea.length)_hashArea."
      ],
      "function range": "426,5-453,5"
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    <extra_id_0>\n        return StringKD.forType(raw);\n    } else if (raw == UUID.class) {\n        kind = TYPE_UUID;\n    } else if (raw == Integer.class) {\n        kind = TYPE_INT;\n    } else if (raw == Long.class) {\n        kind = TYPE_LONG;\n    } else if (raw == Date.class) {\n        kind = TYPE_DATE;\n    } else if (raw == Calendar.class) {\n        kind = TYPE_CALENDAR;\n    } else if (raw == Boolean.class) {\n        kind = TYPE_BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = TYPE_BYTE;\n    } else if (raw == Character.class) {\n        kind = TYPE_CHAR;\n    } else if (raw == Short.class) {\n        kind = TYPE_SHORT;\n    } else if (raw == Float.class) {\n        kind = TYPE_FLOAT;\n    } else if (raw == Double.class) {\n        kind = TYPE_DOUBLE;\n    } else if (raw == URI.class) {\n        kind = TYPE_URI;\n    } else if (raw == URL.class) {\n        kind = TYPE_URL;\n    } else if (raw == Class.class) {\n        kind = TYPE_CLASS;\n    } else if (raw == Locale.class) {\n        FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n        return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n    } else if (raw == Currency.class) {\n        FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);\n        return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);\n    } else {\n        return null;\n    }\n    return new StdKeyDeserializer(kind, raw);\n}",
      "output": [
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw== Date.class) {",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw === TYPE_DATE;",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw ==== Date.class)",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw == Date.class)=",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if== Date.class) {=",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw == Date.class){",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw== Date.class)",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw == Date.class)==",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if== Date.class) {==",
        "//return new StdKeyDeserializer(TYPE_STRING, raw);if (raw ==== String.class) {= TYPE_STRING;else if (raw ==== String.class) {= TYPE_STRING;else if (raw== String.class) {= TYPE_STRING;else if (raw == Date.class)= TYPE_DATE;else if (raw == Date.class)else"
      ],
      "function range": "70,5-116,5"
    },
    "JacksonDatabind_76_/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java_583-604": {
      "loc": "583-604",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,\n\t\tDeserializationContext ctxt)\n    throws IOException, JsonProcessingException\n{\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy line:            if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n// buggy line:                t = p.nextToken();\n// buggy line:                Object bean;\n// buggy line:                try {\n// buggy line:                    bean = creator.build(ctxt, buffer);\n// buggy line:                } catch (Exception e) {\n// buggy line:                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n// buggy line:                    continue;\n// buggy line:                }\n// buggy line:                while (t == JsonToken.FIELD_NAME) {\n// buggy line:                    p.nextToken();\n// buggy line:                    tokens.copyCurrentStructure(p);\n// buggy line:                    t = p.nextToken();\n// buggy line:                }\n// buggy line:                tokens.writeEndObject();\n// buggy line:                if (bean.getClass() != _beanType.getRawClass()) {\n// buggy line:                    ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n// buggy line:                    return null;\n// buggy line:                }\n// buggy line:                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n// buggy line:            }\n            <extra_id_0>\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n            continue;\n        }\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        tokens.writeFieldName(propName);\n        tokens.copyCurrentStructure(p);\n        if (_anySetter != null) {\n            buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n        }\n    }\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        return wrapInstantiationProblem(e, ctxt);\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
      "output": [
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readId",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName))if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName))if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.writeId",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {continue;if (buffer",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {continue;if (buffer.readIdProperty(propName)) {if (buffer",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {continue;if (_",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {continue;if (buffer.readIdProperty(propName)) {if (_",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {continue;}if",
        "if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {if (buffer.readIdProperty(propName)) {continue;if("
      ],
      "function range": "565,5-637,5"
    },
    "JacksonDatabind_82_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java_495-496": {
      "loc": "495-496",
      "input": "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals != null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        <extra_id_0>\n        for (String propName : ignored) {\n            builder.addIgnorable(propName);\n        }\n    } else {\n        ignored = Collections.emptySet();\n    }\n    AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n    AnnotatedMember anySetterField = null;\n    if (anySetterMethod != null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n    }\n    else {\n    \tanySetterField = beanDesc.findAnySetterField();\n    \tif(anySetterField != null) {\n    \t\tbuilder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n    \t}\n    }\n    if (anySetterMethod == null && anySetterField == null) {\n        Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n        if (ignored2 != null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n            && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n    List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n            beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop = null;\n        if (propDef.hasSetter()) {\n            JavaType propertyType = propDef.getSetter().getParameterType(0);\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            JavaType propertyType = propDef.getField().getType();\n            prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters && propDef.hasGetter()) {\n            AnnotatedMethod getter = propDef.getGetter();\n            Class<?> rawPropertyType = getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType)\n                    || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (hasCreatorProps && propDef.hasConstructorParameter()) {\n            final String name = propDef.getName();\n            CreatorProperty cprop = null;\n            if (creatorProps != null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {\n                        cprop = (CreatorProperty) cp;\n                        break;\n                    }\n                }\n            }\n            if (cprop == null) {\n                List<String> n = new ArrayList<>();\n                for (SettableBeanProperty cp : creatorProps) {\n                    n.add(cp.getName());\n                }\n                ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n                        \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n                        name, n);\n                continue;\n            }\n            if (prop != null) {\n                cprop.setFallbackSetter(prop);\n            }\n            prop = cprop;\n            builder.addCreatorProperty(cprop);\n            continue;\n        }\n        if (prop != null) {\n            Class<?>[] views = propDef.findViews();\n            if (views == null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views = NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "output": [
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {(propDefs.isEmpty()) {",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty())",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {(propDefs.isEmpty()) { //",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {} else if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {} else if (propDefs.isEmpty",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.contains(propDef",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs!= null) {",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {} else {if (propDefs.",
        "if (ignored!= null) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {if (propDefs.isEmpty()) {(propDefs.isEmpty()) { if"
      ],
      "function range": "472,5-615,5"
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {\n        <extra_id_0>\n                String name = cls.getSimpleName();\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        }\n        return;\n    } while (false);\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
      "output": [
        "// buggy line:{ // buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy",
        "// buggy line:// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyline",
        "// buggy line:// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy//",
        "// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyline",
        "// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy//",
        "// buggy line:// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { //// buggy",
        "// buggy line:// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy//",
        "// buggy line:// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyline",
        "// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { //// buggy",
        "// buggy line:// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { // buggyif (full.startsWith(PREFIX_STRING)) { // buggy// buggy line:if (full.startsWith(PREFIX_STRING)) { //// buggy"
      ],
      "function range": "67,5-99,5"
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1 != candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName != null) || (injectId != null);\n    if (!useProps && (paramDef != null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        <extra_id_0>\n        useProps = (paramName != null) && paramDef.couldSerialize();\n    }\n    if (useProps) {\n        SettableBeanProperty[] properties = new SettableBeanProperty[] {\n                constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId)\n        };\n        creators.addPropertyCreator(candidate.creator(), true, properties);\n        return;\n    }\n    _handleSingleArgumentCreator(creators, candidate.creator(), true, true);\n    if (paramDef != null) {\n        ((POJOPropertyBuilder) paramDef).removeConstructors();\n    }\n}",
      "output": [
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOPropertyBuilder) paramDef).addConstructor",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOPropertyBuilder) paramDef).removeConstructor",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOPropertyBuilder) paramDef).removeConstructors",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder)(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOProperty",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOPropertyBuilder) paramDef).removeProperties",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder)(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null)(paramName!= null",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOPropertyBuilder) paramDef).addConstructors",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder)(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!=",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null) {(POJOPropertyBuilder) paramDef).removeMethods",
        "paramDef = candidate.propertyDef(0);_handleSingleArgumentCreator(creators, candidate.creator(), true, true);if (paramName!= null) {(paramName!= null)(paramDef!= null) {(POJOPropertyBuilder)(POJOPropertyBuilder) paramDef).addConstructor(creators, candidate.creator(), true, true);if (paramName!= null)(paramDef!= null"
      ],
      "function range": "701,5-752,5"
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        <extra_id_0>\n    }\n}",
      "output": [
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);////_value.serialize(gen, ctxt);//_value.serialize(gen",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);_value.serialize(gen, ctxt);",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen);//_value.serialize(gen, ctxt);",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen,//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen);",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen,",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen,",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);////_value.serialize(gen, ctxt);_value.serialize(gen,",
        "//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);////_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen, ctxt);//_value.serialize(gen"
      ],
      "function range": "104,5-116,5"
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                <extra_id_0>\n            }\n        }\n    }\n    Object bean = creator.build(ctxt, buffer);\n    for (int i = 0; i < len; ++i) {\n        SettableBeanProperty prop = _properties[i].getProperty();\n        if (prop.getCreatorIndex() < 0) {\n            prop.set(bean, values[i]);\n        }\n    }\n    return bean;\n}",
      "output": [
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\nif (prop.getCreatorIndex() < 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(prop, values[i]);",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(prop, values[i]);\n",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\nif (prop.getCreatorIndex() < 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\nif (typeProp.",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(typeProp, typeId);}",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\nif (prop.getCreatorIndex() < 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\nif (typeProp!=",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(typeProp, typeId); //",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(prop,} else if (",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(typeProp, typeId);if",
        "buffer.assignParameter(prop, values[i]);for (int i = 0;< len; ++i) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex()< 0) {= _properties[i].getTypeProperty();\n            if (typeProp.getCreatorIndex(){ // buggy line:buffer.assignParameter(prop,} else {"
      ],
      "function range": "255,5-311,5"
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    <extra_id_0>\n    JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n    if (format == null) {\n        return this;\n    }\n    JsonFormat.Shape shape = format.getShape();\n    if (shape.isNumeric()) {\n        return withFormat(Boolean.TRUE, null);\n    }\n    if (format.hasPattern()) {\n        final Locale loc = format.hasLocale()\n                        ? format.getLocale()\n                        : serializers.getLocale();\n        SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n        TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n                : serializers.getTimeZone();\n        df.setTimeZone(tz);\n        return withFormat(Boolean.FALSE, df);\n    }\n    final boolean hasLocale = format.hasLocale();\n    final boolean hasTZ = format.hasTimeZone();\n    final boolean asString = (shape == JsonFormat.Shape.STRING);\n    if (!hasLocale && !hasTZ && !asString) {\n        return this;\n    }\n    DateFormat df0 = serializers.getConfig().getDateFormat();\n    if (df0 instanceof StdDateFormat) {\n        StdDateFormat std = (StdDateFormat) df0;\n        if (format.hasLocale()) {\n            std = std.withLocale(format.getLocale());\n        }\n        if (format.hasTimeZone()) {\n            std = std.withTimeZone(format.getTimeZone());\n        }\n        return withFormat(Boolean.FALSE, std);\n    }\n    if (!(df0 instanceof SimpleDateFormat)) {\n        serializers.reportBadDefinition(handledType(), String.format(\n\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",\ndf0.getClass().getName()));\n    }\n    SimpleDateFormat df = (SimpleDateFormat) df0;\n    if (hasLocale) {\n        df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n    } else {\n        df = (SimpleDateFormat) df.clone();\n    }\n    TimeZone newTz = format.getTimeZone();\n    boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n    if (changeTZ) {\n        df.setTimeZone(newTz);\n    }\n    return withFormat(Boolean.FALSE, df);\n}",
      "output": [
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING)if (shape == JsonFormat.Shape.STRING) {if (asString) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING)if (shape ==",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {if (shape",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING){",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {(",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING)if (shape",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING)if (shape == JsonFormat.Shape.STRING) {if (asString) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.DATE",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {{",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING)if (shape == JsonFormat.Shape.STRING) {if (asString) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.OBJECT",
        "// buggy line:if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {if (shape == JsonFormat.Shape.STRING) {return withFormat(Boolean.FALSE, null);return withFormat(Boolean.FALSE, null);if (shape == JsonFormat.Shape.STRING) {if (as"
      ],
      "function range": "61,5-136,5"
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    <extra_id_0>\n                }\n                deser = ctxt.findContextualValueDeserializer(actual, _property);\n            }\n        } else {\n            if ((_baseType != null)\n                    && _baseType.getClass() == type.getClass()) {\n                if (!type.hasGenericTypes()) {\n                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());\n                }\n            }\n            deser = ctxt.findContextualValueDeserializer(type, _property);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}",
      "output": [
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_des",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId,_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);null)",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId,_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);{",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId,_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId,_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);=",
        "} else {_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);_deserializers.put(typeId, deser);;"
      ],
      "function range": "146,5-199,5"
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    <extra_id_0>\n}",
      "output": [
        "return",
        "_rootNamespaceLookup = src._rootNamespaceLookup; return",
        "_nameLookup = src._nameLookup; return",
        "_rootName = src._rootName; return",
        "return src ;",
        "_rootNamespaceLookup = src._rootNamespaceLookup; return this;",
        "_rootNamespaceLookup = src._rootNamespaceLookup; return src;",
        "// buggy line:    return",
        "_rootNamespace = src._rootNamespace; return",
        "_rootNameLookup.add(src._rootNameLookup); return"
      ],
      "function range": "55,5-60,5"
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        <extra_id_0>\n    }\n}",
      "output": [
        "// buggy line:        body().appendChild(new TextNode(\"\",\"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);// buggy line:body().appendChild(node);",
        "// buggy line:        body().appendChild(new TextNode(\"\", \"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);// buggy line:body().appendChild(node);",
        "// buggy line:        body().appendChild(new TextNode(\"\",\"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);// buggy line:body().appendChild(new Text",
        "// buggy line:        body().appendChild(new TextNode(\"\", \"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if(!node.isBlank())\n                toMove.add(node);if(!node.isBlank())\n                toMove.add(node);// buggy line:body().appendChild(",
        "// buggy line:        body().appendChild(new TextNode(\"\", \"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);// buggy line:body().appendChild(new Text",
        "// buggy line:        body().appendChild(new TextNode(\"\",\"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(",
        "// buggy line:        body().appendChild(new TextNode(\"\", \"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(",
        "// buggy line:        body().appendChild(new TextNode(\"\",\"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if(!node.isBlank())\n                toMove.add",
        "// buggy line:        body().appendChild(new TextNode(\"\", \"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if(!node.isBlank())\n                toMove.add(node);if(!node.isBlank())\n                toMove.add(node);if(!node.isBlank())\n                toMove",
        "// buggy line:        body().appendChild(new TextNode(\"\",\"\"));for(Node node: element.childNodes) {if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);if (!node.isBlank())\n                toMove.add(node);// buggy line:body().appendChild(new"
      ],
      "function range": "113,5-128,5"
    },
    "Jsoup_15_/src/main/java/org/jsoup/parser/TreeBuilderState.java_283-284": {
      "loc": "283-284",
      "input": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n            <extra_id_0>\n                return tb.process(t, InHead);\n            } else if (name.equals(\"body\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    return false; \n                } else {\n                    tb.framesetOk(false);\n                    Element body = stack.get(1);\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!body.hasAttr(attribute.getKey()))\n                            body.attributes().put(attribute);\n                    }\n                }\n            } else if (name.equals(\"frameset\")) {\n                tb.error(this);\n                LinkedList<Element> stack = tb.getStack();\n                if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                    return false; \n                } else if (!tb.framesetOk()) {\n                    return false; \n                } else {\n                    Element second = stack.get(1);\n                    if (second.parent() != null)\n                        second.remove();\n                    while (stack.size() > 1)\n                        stack.removeLast();\n                    tb.insert(startTag);\n                    tb.transition(InFrameset);\n                }\n            } else if (StringUtil.in(name,\n                    \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                    \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                    \"p\", \"section\", \"summary\", \"ul\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                if (StringUtil.in(tb.currentElement().nodeName(), \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                    tb.error(this);\n                    tb.pop();\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, \"pre\", \"listing\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"form\")) {\n                if (tb.getFormElement() != null) {\n                    tb.error(this);\n                    return false;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                Element form = tb.insert(startTag);\n                tb.setFormElement(form);\n            } else if (name.equals(\"li\")) {\n                tb.framesetOk(false);\n                LinkedList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (el.nodeName().equals(\"li\")) {\n                        tb.process(new Token.EndTag(\"li\"));\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                tb.framesetOk(false);\n                LinkedList<Element> stack = tb.getStack();\n                for (int i = stack.size() - 1; i > 0; i--) {\n                    Element el = stack.get(i);\n                    if (StringUtil.in(el.nodeName(), \"dd\", \"dt\")) {\n                        tb.process(new Token.EndTag(el.nodeName()));\n                        break;\n                    }\n                    if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), \"address\", \"div\", \"p\"))\n                        break;\n                }\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n            } else if (name.equals(\"plaintext\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.PLAINTEXT); \n            } else if (name.equals(\"button\")) {\n                if (tb.inButtonScope(\"button\")) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"button\"));\n                    tb.process(startTag);\n                } else {\n                    tb.reconstructFormattingElements();\n                    tb.insert(startTag);\n                    tb.framesetOk(false);\n                }\n            } else if (name.equals(\"a\")) {\n                if (tb.getActiveFormattingElement(\"a\") != null) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"a\"));\n                    Element remainingA = tb.getFromStack(\"a\");\n                    if (remainingA != null) {\n                        tb.removeFromActiveFormattingElements(remainingA);\n                        tb.removeFromStack(remainingA);\n                    }\n                }\n                tb.reconstructFormattingElements();\n                Element a = tb.insert(startTag);\n                tb.pushActiveFormattingElements(a);\n            } else if (StringUtil.in(name,\n                    \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (name.equals(\"nobr\")) {\n                tb.reconstructFormattingElements();\n                if (tb.inScope(\"nobr\")) {\n                    tb.error(this);\n                    tb.process(new Token.EndTag(\"nobr\"));\n                    tb.reconstructFormattingElements();\n                }\n                Element el = tb.insert(startTag);\n                tb.pushActiveFormattingElements(el);\n            } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.insertMarkerToFormattingElements();\n                tb.framesetOk(false);\n            } else if (name.equals(\"table\")) {\n                if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                tb.transition(InTable);\n            } else if (StringUtil.in(name, \"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\")) {\n                tb.reconstructFormattingElements();\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"input\")) {\n                tb.reconstructFormattingElements();\n                Element el = tb.insertEmpty(startTag);\n                if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                    tb.framesetOk(false);\n            } else if (StringUtil.in(name, \"param\", \"source\", \"track\")) {\n                tb.insertEmpty(startTag);\n            } else if (name.equals(\"hr\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.insertEmpty(startTag);\n                tb.framesetOk(false);\n            } else if (name.equals(\"image\")) {\n                startTag.name(\"img\");\n                return tb.process(startTag);\n            } else if (name.equals(\"isindex\")) {\n                tb.error(this);\n                if (tb.getFormElement() != null)\n                    return false;\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n                tb.process(new Token.StartTag(\"form\"));\n                if (startTag.attributes.hasKey(\"action\")) {\n                    Element form = tb.getFormElement();\n                    form.attr(\"action\", startTag.attributes.get(\"action\"));\n                }\n                tb.process(new Token.StartTag(\"hr\"));\n                tb.process(new Token.StartTag(\"label\"));\n                String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                        startTag.attributes.get(\"prompt\") :\n                        \"This is a searchable index. Enter search keywords: \";\n                tb.process(new Token.Character(prompt));\n                Attributes inputAttribs = new Attributes();\n                for (Attribute attr : startTag.attributes) {\n                    if (!StringUtil.in(attr.getKey(), \"name\", \"action\", \"prompt\"))\n                        inputAttribs.put(attr);\n                }\n                inputAttribs.put(\"name\", \"isindex\");\n                tb.process(new Token.StartTag(\"input\", inputAttribs));\n                tb.process(new Token.EndTag(\"label\"));\n                tb.process(new Token.StartTag(\"hr\"));\n                tb.process(new Token.EndTag(\"form\"));\n            } else if (name.equals(\"textarea\")) {\n                tb.insert(startTag);\n                tb.tokeniser.transition(TokeniserState.Rcdata);\n                tb.markInsertionMode();\n                tb.framesetOk(false);\n                tb.transition(Text);\n            } else if (name.equals(\"xmp\")) {\n                if (tb.inButtonScope(\"p\")) {\n                    tb.process(new Token.EndTag(\"p\"));\n                }\n                tb.reconstructFormattingElements();\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"iframe\")) {\n                tb.framesetOk(false);\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"noembed\")) {\n                handleRawtext(startTag, tb);\n            } else if (name.equals(\"select\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.framesetOk(false);\n                TreeBuilderState state = tb.state();\n                if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                    tb.transition(InSelectInTable);\n                else\n                    tb.transition(InSelect);\n            } else if (StringUtil.in(\"optgroup\", \"option\")) {\n                if (tb.currentElement().nodeName().equals(\"option\"))\n                    tb.process(new Token.EndTag(\"option\"));\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            } else if (StringUtil.in(\"rp\", \"rt\")) {\n                if (tb.inScope(\"ruby\")) {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                        tb.error(this);\n                        tb.popStackToBefore(\"ruby\"); \n                    }\n                    tb.insert(startTag);\n                }\n            } else if (name.equals(\"math\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n            } else if (name.equals(\"svg\")) {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n                tb.tokeniser.acknowledgeSelfClosingFlag();\n            } else if (StringUtil.in(name,\n                    \"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {\n                tb.error(this);\n                return false;\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(startTag);\n            }\n            break;\n        case EndTag:\n            Token.EndTag endTag = t.asEndTag();\n            name = endTag.name();\n            if (name.equals(\"body\")) {\n                if (!tb.inScope(\"body\")) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.transition(AfterBody);\n                }\n            } else if (name.equals(\"html\")) {\n                boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                if (notIgnored)\n                    return tb.process(endTag);\n            } else if (StringUtil.in(name,\n                    \"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                    \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                    \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"form\")) {\n                Element currentForm = tb.getFormElement();\n                tb.setFormElement(null);\n                if (currentForm == null || !tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.removeFromStack(currentForm);\n                }\n            } else if (name.equals(\"p\")) {\n                if (!tb.inButtonScope(name)) {\n                    tb.error(this);\n                    tb.process(new Token.StartTag(name)); \n                    return tb.process(endTag);\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (name.equals(\"li\")) {\n                if (!tb.inListItemScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.in(name, \"dd\", \"dt\")) {\n                if (!tb.inScope(name)) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                }\n            } else if (StringUtil.in(name, \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\")) {\n                if (!tb.inScope(new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"})) {\n                    tb.error(this);\n                    return false;\n                } else {\n                    tb.generateImpliedEndTags(name);\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\");\n                }\n            } else if (name.equals(\"sarcasm\")) {\n                return anyOtherEndTag(t, tb);\n            } else if (StringUtil.in(name,\n                    \"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\")) {\n                OUTER:\n                for (int i = 0; i < 8; i++) {\n                    Element formatEl = tb.getActiveFormattingElement(name);\n                    if (formatEl == null)\n                        return anyOtherEndTag(t, tb);\n                    else if (!tb.onStack(formatEl)) {\n                        tb.error(this);\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        return true;\n                    } else if (!tb.inScope(formatEl.nodeName())) {\n                        tb.error(this);\n                        return false;\n                    } else if (tb.currentElement() != formatEl)\n                        tb.error(this);\n                    Element furthestBlock = null;\n                    Element commonAncestor = null;\n                    boolean seenFormattingElement = false;\n                    LinkedList<Element> stack = tb.getStack();\n                    for (int si = 0; si < stack.size(); si++) {\n                        Element el = stack.get(si);\n                        if (el == formatEl) {\n                            commonAncestor = stack.get(si - 1);\n                            seenFormattingElement = true;\n                        } else if (seenFormattingElement && tb.isSpecial(el)) {\n                            furthestBlock = el;\n                            break;\n                        }\n                    }\n                    if (furthestBlock == null) {\n                        tb.popStackToClose(formatEl.nodeName());\n                        tb.removeFromActiveFormattingElements(formatEl);\n                        return true;\n                    }\n                    Element node = furthestBlock;\n                    Element lastNode = furthestBlock;\n                    INNER:\n                    for (int j = 0; j < 3; j++) {\n                        if (tb.onStack(node))\n                            node = tb.aboveOnStack(node);\n                        if (!tb.isInActiveFormattingElements(node)) { \n                            tb.removeFromStack(node);\n                            continue INNER;\n                        } else if (node == formatEl)\n                            break INNER;\n                        Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                        tb.replaceActiveFormattingElement(node, replacement);\n                        tb.replaceOnStack(node, replacement);\n                        node = replacement;\n                        if (lastNode == furthestBlock) {\n                        }\n                        if (lastNode.parent() != null)\n                            lastNode.remove();\n                        node.appendChild(lastNode);\n                        lastNode = node;\n                    }\n                    if (StringUtil.in(commonAncestor.nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                        if (lastNode.parent() != null)\n                            lastNode.remove();\n                        tb.insertInFosterParent(lastNode);\n                    } else {\n                        if (lastNode.parent() != null)\n                            lastNode.remove();\n                        commonAncestor.appendChild(lastNode);\n                    }\n                    Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n                    Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);\n                    for (Node childNode : childNodes) {\n                        adopter.appendChild(childNode); \n                    }\n                    furthestBlock.appendChild(adopter);\n                    tb.removeFromActiveFormattingElements(formatEl);\n                    tb.removeFromStack(formatEl);\n                    tb.insertOnStackAfter(furthestBlock, adopter);\n                }\n            } else if (StringUtil.in(name, \"applet\", \"marquee\", \"object\")) {\n                if (!tb.inScope(\"name\")) {\n                    if (!tb.inScope(name)) {\n                        tb.error(this);\n                        return false;\n                    }\n                    tb.generateImpliedEndTags();\n                    if (!tb.currentElement().nodeName().equals(name))\n                        tb.error(this);\n                    tb.popStackToClose(name);\n                    tb.clearFormattingElementsToLastMarker();\n                }\n            } else if (name.equals(\"br\")) {\n                tb.error(this);\n                tb.process(new Token.StartTag(\"br\"));\n                return false;\n            } else {\n                return anyOtherEndTag(t, tb);\n            }\n            break;\n        case EOF:\n            break;\n    }\n    return true;\n}",
      "output": [
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null) {",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {",
        "if (tb.inButtonScope(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null)",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null)if",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null)tb",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if",
        "if (name.equals(\"head\")) { tb.process(new Token.StartTag(\"head\"));if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null) {if (tb.currentElement().nodeName()!= null)if (tb.currentElement().nodeName()!= null){"
      ],
      "function range": "246,9-761,9"
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n        <extra_id_0>\n        return;\n    }\n    if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n        char c = r.consume();\n        switch (c) {\n            case '\\t':\n            case '\\n':\n            case '\\f':\n            case ' ':\n                t.transition(BeforeAttributeName);\n                break;\n            case '/':\n                t.transition(SelfClosingStartTag);\n                break;\n            case '>':\n                t.emitTagPending();\n                t.transition(Data);\n                break;\n            default:\n                t.dataBuffer.append(c);\n                anythingElse(t, r);\n                break;\n        }\n    } else {\n        anythingElse(t, r);\n    }\n}",
      "output": [
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken()) {",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;\nif (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(BeforeAttributeName);\n                break;",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(BeforeAttributeName);\n                break;\nif (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(SelfClosingEndTag);\n                break;",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(BeforeAttributeName);\n                break;\nif (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(SelfClosingStartTag);\n                break;",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken())",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(BeforeAttributeName);\n               break;",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken()",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(BeforeAttributeName);\n                break;\nif (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(SelfClosingStartTag);\n               break",
        "anythingElse(t, r);if (t.isAppropriateStartTagToken() &&!r.isEmpty()) {if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(AfterAttributeName);\n                break;if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {t.transition(BeforeAttributeName);\n               break;\n"
      ],
      "function range": "553,9-586,9"
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar != input[offset])\n            while(++offset < length && startChar != input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        <extra_id_0>\n            for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n            if (i == last) \n                return offset - pos;\n        }\n    }\n    return -1;\n}",
      "output": [
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(1)",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) ==seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) ==seq.charAt(0",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) ==seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(1",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) ==seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(0)seq.charAt(0",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(0)seq.charAt(0) ==seq.charAt(0",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(0)seq.charAt(0) ==seq.charAt(0",
        "if (seq.charAt(i) == seq.charAt(last))seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(0)seq.charAt(0) == seq.charAt(1)seq.charAt(0) == seq.charAt(1)seq.charAt(0) ==seq.charAt(0"
      ],
      "function range": "82,5-98,5"
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    <extra_id_0>\n}",
      "output": [
        "}",
        "// buggy line:",
        "}  public static String",
        "}  public String",
        "}  public class",
        "// bugy line:",
        "//buggy line:",
        "}  public void",
        " public String",
        "// buggy line:   "
      ],
      "function range": "1098,5-1102,5"
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    <extra_id_0>\n    attr(\"name\", name);\n    attr(\"publicId\", publicId);\n    attr(\"systemId\", systemId);\n}",
      "output": [
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId);",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId); Validate.notEmpty(baseUri);",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId); Validate.notEmpty(systemId);",
        "Validate.notEmpty(systemId); Validate.notEmpty(publicId); Validate.notEmpty(systemId);",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId); return this;",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId);Validate.notEmpty(baseUri);",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId); validate.notEmpty(baseUri);",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId); Validate.notEmpty(baseUri); return this;",
        "Validate.notEmpty(publicId); Validate.notEmpty(systemId); //",
        "validate.notEmpty(publicId); Validate.notEmpty(systemId); validate.notEmpty(baseUri);"
      ],
      "function range": "19,5-26,5"
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    <extra_id_0>\n}",
      "output": [
        "//return}",
        "//return false;}",
        "//return// buggy line://}",
        "//}",
        "//return// buggy line:////return////",
        "//return false;// buggy line://////////////////////////",
        "//return false;// buggy line://////////////////////",
        "//return false;// buggy line:////////////////////",
        "//return// buggy line://////////////////////",
        "//return false;// buggy line:////////////////////////"
      ],
      "function range": "1167,5-1176,5"
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search))\n        <extra_id_0>\n            return i;\n    }\n    return null;\n}",
      "output": [
        "continue;}",
        "//}",
        "continue;return null; }",
        "//return null; }",
        "continue;return null;}",
        "//return null;}",
        "continue;return null; //}",
        "continue;return -1;}",
        "continue;return -1; }",
        "continue;return null;}"
      ],
      "function range": "568,5-578,5"
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {\n        <extra_id_0>\n            transition(HtmlTreeBuilderState.InCell);\n            break;\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n            break;\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n            break;\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n            break;\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n            break; \n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n            break;\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; \n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n            break;\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n            break; \n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n            break; \n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n            break; \n        }\n    }\n}",
      "output": [
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0)",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0)if (stack.size() > 0) {if (stack.size() > 0) {",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 1)",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0)if (stack.size() > 0) {if (stack.size() > 1) {",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0)if (stack.size() > 0) {if (stack.size() > 0){",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 1) {",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() >{",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0)if (stack.size() > 0) {if (stack.size() > 0)if",
        "if (\"th\".equals(name) || \"th\".equals(name) &&!last)if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0) {if (stack.size() > 0)if (stack.size() > 0) {if (stack.size() > 1){"
      ],
      "function range": "382,5-429,5"
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        <extra_id_0>\n                    break;\n                case '<':\n                    if (!inAttribute)\n                        accum.append(\"&lt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '>':\n                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '\"':\n                    if (inAttribute)\n                        accum.append(\"&quot;\");\n                    else\n                        accum.append(c);\n                    break;\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            final String c = new String(Character.toChars(codePoint));\n            if (encoder.canEncode(c)) \n                accum.append(c);\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}",
      "output": [
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');// buggy line:                       accum.append(\"&#x\").append(Integer.to",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)if (encoder.canEncode(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(c);",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');accum.append(\"&#x\").append(Integer.toHexString(codePoint))).append",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \nelse if (encoder.canEncode(",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append('&').append",
        "if (encoder.canEncode(c)) \n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&').append"
      ],
      "function range": "79,5-154,5"
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n                    <extra_id_0>\n                        accum.append(\"&lt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '>':\n                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    else\n                        accum.append(c);\n                    break;\n                case '\"':\n                    if (inAttribute)\n                        accum.append(\"&quot;\");\n                    else\n                        accum.append(c);\n                    break;\n                default:\n                    if (canEncode(coreCharset, c, encoder))\n                        accum.append(c);\n                    else if (map.containsKey(c))\n                        accum.append('&').append(map.get(c)).append(';');\n                    else\n                        accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n            }\n        } else {\n            final String c = new String(Character.toChars(codePoint));\n            if (encoder.canEncode(c)) \n                accum.append(c);\n            else\n                accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n        }\n    }\n}",
      "output": [
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');accum.append(\"&#x",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)if (encoder.canEncode(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\naccum.append(\"&#",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)if (encoder.canEncode(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \naccum.append(c);",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)if (encoder.canEncode(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \naccum.append('&').append",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');accum.append(c);",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)if (encoder.canEncode(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \nelse if (map.containsKey(c)) \naccum.append(\"&#x\").",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');accum.append(\"&\").",
        "if (escapeMode!= EscapeMode.xhtml)if (codePoint < Character.MAX_SUPPLEMENTARY_CODE_POINT)accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');else if (map.containsKey(c)) \naccum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\naccum.append(\"&"
      ],
      "function range": "79,5-155,5"
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    <extra_id_0>\n}",
      "output": [
        "//",
        "}",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\ufffd",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\uff0c\ufffd",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56defalse",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u5b57\ufffd",
        "// \u5982\u679c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\uff0c\ufffd"
      ],
      "function range": "296,5-301,5"
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            <extra_id_0>\n    }\n}",
      "output": [
        "//if(key.equalsIgnoreCase(key)){if(attrKey.equalsIgnoreCase(key))attributes.remove(attrKey); }",
        "//if(key.equalsIgnoreCase(key)){if(key.equalsIgnoreCase(attrKey))attributes.remove(attrKey); }",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);}",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:           attributes.remove(attrKey); }",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(attrKey))attributes.remove(attrKey); }",
        "//if(!attributes.containsKey(key)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:           attributes.remove(key); }",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey); }",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);}",
        "//if(key.equalsIgnoreCase(attrKey)){if(attrKey.equalsIgnoreCase(key))\n// buggy line:           attributes.remove(attrKey);"
      ],
      "function range": "118,5-127,5"
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n    <extra_id_0>\n    final int len = classAttr.length();\n    final int wantLen = className.length();\n    if (len == 0 || len < wantLen) {\n        return false;\n    }\n    if (len == wantLen) {\n        return className.equalsIgnoreCase(classAttr);\n    }\n    boolean inClass = false;\n    int start = 0;\n    for (int i = 0; i < len; i++) {\n        if (Character.isWhitespace(classAttr.charAt(i))) {\n            if (inClass) {\n                if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {\n                    return true;\n                }\n                inClass = false;\n            }\n        } else {\n            if (!inClass) {\n                inClass = true;\n                start = i;\n            }\n        }\n    }\n    if (inClass && len - start == wantLen) {\n        return classAttr.regionMatches(true, start, className, 0, wantLen);\n    }\n    return false;\n}",
      "output": [
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen))classAttr.regionMatches(true",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen)) {classAttr.regionMatches(",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen))if (inClass) {",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen)) {inClass = false;",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen)) {if (inClass) {",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen))classAttr.regionMatches(false",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen)) {if (inClass &&",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen);if (inClass) {inClass",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen)) {if (inClass)",
        "// buggy line:classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start, className, 0, wantLen);classAttr.regionMatches(true, start,classAttr.regionMatches(true,classAttr.regionMatches(true,classAttr.regionMatches(true, start, className, 0, wantLen))if (inClass &&{"
      ],
      "function range": "1091,5-1132,5"
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-472": {
      "loc": "468-472",
      "input": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n    <extra_id_0>\n    final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;\n    for (int pos = bottom; pos >= top; pos--) {\n        final String elName = stack.get(pos).nodeName();\n        if (inSorted(elName, targetNames))\n            return true;\n        if (inSorted(elName, baseTypes))\n            return false;\n        if (extraTypes != null && inSorted(elName, extraTypes))\n            return false;\n    }\n    return false;\n}",
      "output": [
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > Max",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() >",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth) {= stack.size() -",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;return false;",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth) {= stack.size() -1",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth) {return false;return false;",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth) {return false;if (stack",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth) {= stack.size() - 1",
        "// buggy line:if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)return false;if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size() > MaxScopeSearchDepth)if (stack.size()return"
      ],
      "function range": "466,5-486,5"
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n        <extra_id_0>\n            accum.append(\"=\\\"\");\n            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);\n            accum.append('\"');\n        }\n    }\n}",
      "output": [
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append('=\"');\n            accum.append(val);\n            accum.append('\"');\n            accum.append('\"');\n           accum.",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append(\"\\\"\");\n           accum.append('\\\"');\n            accum.append('\\\"');\n            accum.append('\\\"');\n            accum.",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append('\"');\n            accum.append(\"\\\"\");\n           accum.append('\\\"');\n            accum.append('\\\"');\n            accum.",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append('=\"');\n            accum.append('\"');\n            accum.append('\"');\n            accum.append('\"');\n           accum.",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append(\"\\\"\");\n           accum.append('\\\"');\n            accum.append(\"\\\"\");\n            accum.append('\\\"');\n            accum.",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append('=\"');\n            accum.append(val);\n            accum.append('\"');\n            accum.append('\"');\n            accum.append('",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append(\"\\\"\");\n           accum.append('\\\"');\n            accum.append('\\\"');\n            accum.append(\"\\\"\");\n            accum.",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append(\"\\\"\");\n           accum.append('\\\"');\n            accum.append('\\\"');\n            accum.append(\"\\\"\");\n           acc",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append('=\"');\n            accum.append('\"');\n            accum.append('\"');\n            accum.append('\"');\n            accum.append('",
        "accum.append('=\"');\n            accum.append(key);\n            accum.append('=\"');\n            accum.append(val);if (out.syntax() == Document.OutputSettings.Syntax.html\n)accum.append('=\"');\n           accum.append(\"\\\"\");\n           accum.append('\\\"');\n            accum.append('\\\"');\n            accum.append('\\\"');\n           acc"
      ],
      "function range": "310,5-326,5"
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n    <extra_id_0>\n    Element firstFound = null;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        if (next.nodeName().equals(elName)) {\n            firstFound = next;\n            break;\n        }\n    }\n    if (firstFound == null)\n        return; \n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element next = stack.get(pos);\n        stack.remove(pos);\n        if (next == firstFound)\n            break;\n    }\n}",
      "output": [
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == null)if (next ==",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == firstFound)== null)",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == firstFound)if (next ==",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == null)if (next == null)== null)if (next == null)== null)",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == null)if (next == null)if (next == null)== null)== null)",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == null)if (next == null)if (next == null)== null)if (next",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == firstFound)if (next",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == null)if (next == null",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == null)if (next == first",
        "//if (!elName.equals(elName)) return;(int pos = stack.size() -1;-1; pos >= 0; pos--)= stack.get(pos);\n        stack.remove(pos);\nif (next == null)if (next == null)if (next == firstFound)if (next == firstFound)if (next == null)== null)if"
      ],
      "function range": "116,5-136,5"
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    <extra_id_0>\n        Element el = doc.child(0);\n        decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));\n        decl.attributes().addAll(el.attributes());\n    }\n    return decl;\n}",
      "output": [
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(data.substring(",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));decl.attributes().addAll(el.attributes());= new XmlDeclaration(NodeUtils.parser",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(doc.tagName",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));decl.attributes().addAll(el.attributes());if(data.startsWith(\"!\"))",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(e.tagName",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.getTagName",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.nodeName",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(doc.child(",
        "//if (data.startsWith(\"!\")) {decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\"));= new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTagName(el.tagName"
      ],
      "function range": "74,5-84,5"
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "public String getValue() {\n// buggy line:    return val;\n    <extra_id_0>\n}",
      "output": [
        "}  public class",
        "// buggy line:    return",
        "}  public String",
        "}  public static String",
        "} public String getValue() {",
        "} // buggy line:   ",
        "} public String val;",
        "// bugy line:    return",
        "}  public class C",
        "} public String getValue();"
      ],
      "function range": "79,5-81,5"
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        <extra_id_0>\n    }\n    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);\n    if (r != 0) {\n        return r;\n    }\n    return p1.parent.compareChildNodePointers(p1, p2);\n}",
      "output": [
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1){",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);}if (depth2 == 1)",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);}if (depth2 == 1) {",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth2 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1){",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {return",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {{",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {=",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {(",
        "} else {if (depth2 == 1) {depth1 - 1, p2.parent, depth2);if (depth2 == 1) {depth1 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {depth2 - 1, p2.parent.compareChildNodePointers(p1, p2);if (depth2 == 1) {return"
      ],
      "function range": "642,5-675,5"
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n    <extra_id_0>\n            ? Boolean.TRUE : Boolean.FALSE;\n}",
      "output": [
        "==",
        "== Boolean.TRUE && args[2].computeValue(context) ==",
        "&& args[2].computeValue(context) instanceof",
        "!= null && args[2].computeValue(context) ==",
        "&& args[2].computeValue(context) ==",
        "!= null && args[2].computeValue(context)!=",
        "|| args[2].computeValue(context) ==",
        "!= null && args[0].computeValue(context) ==",
        "!= null && args[0].computeValue(context) instanceof",
        "!= null && args[1].computeValue(context) =="
      ],
      "function range": "41,5-44,5"
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                    .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            <extra_id_0>\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType = node.getNodeType();\n        switch (((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE :\n                return nodeType == Node.ELEMENT_NODE\n                        || nodeType == Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT :\n                return nodeType == Node.CDATA_SECTION_NODE\n                    || nodeType == Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT :\n                return nodeType == Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI :\n                return nodeType == Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI = ((ProcessingInstructionTest) test).getTarget();\n            String nodePI = ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "output": [
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE)node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE)node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {Node.",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.get",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE)node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {Node.",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {Node",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE)node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE)node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {return",
        "// buggy line:            return equalStrings(testPrefix,nodeNS);if (node.getNodeType() == Node.TEXT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.COMMENT_NODE) {node.getNodeType() == Node.CDATA_SECTION_NODE) {Node.COMMENT"
      ],
      "function range": "87,5-136,5"
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n    <extra_id_0>\n}",
      "output": [
        "// buggy line: return ValueUtils.getLength(getValue());",
        "buggy line: return ValueUtils.getLength(getValue()); }",
        "// buggy line: buggy line:",
        "} public int getLength() {",
        "buggy line: return ValueUtils.getLength(getValue());",
        "// buggy line:",
        "// buggy line: return ValueUtils.getLength(getValue().getBaseValue());",
        "// bugy line: buggy line:",
        "// buggy line: return ValueUtils.getLength(getValue());",
        "// buggy line: return ValueUtils.getLength(getKey());"
      ],
      "function range": "151,5-153,5"
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            <extra_id_0>\n        }\n    }\n}",
      "output": [
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed == 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));char[] c = Character.toChars(Character.",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed > 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));char[] c = Character.toChars(Character.",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed > 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));char[] c = Character.toChars(Character.codePointAt(input, pos));char[] c = Character.toChars(Character",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed == 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));out.write(c); pos+= c.",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed == 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));out.write(c);\n            pos+=",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed > 0) {char[] c =char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));char[] c = Character.",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed > 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));char[] c = Character.toChars(Character.codePointAt(input, pos));char[] c =char[] c =",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed == 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));out.write(c); pos+=char",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed > 0) {char[] c = Character.toChars(Character.codePointAt(input, pos));char[] c = Character.toChars(Character.codePointAt(input, pos));char[] c =char[] c = Character",
        "out.write(Character.toChars(Character.codePointAt(input, pos))); pos+= Character.charCount(Character.codePointAt(input, pos));if (consumed > 0) {char[] c =char[] c = Character.toChars(Character.codePointAt(input, pos));pos+= Character.charCount(Character.codePointAt(input, pos));char[] c =char"
      ],
      "function range": "75,5-98,5"
    },
    "Lang_16_/src/main/java/org/apache/commons/lang3/math/NumberUtils.java_458-459": {
      "loc": "458-459",
      "input": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n    <extra_id_0>\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            if (expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n                    && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) { \n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) { \n                }\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) { \n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) { \n                }\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) { \n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) { \n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) { \n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) { \n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
      "output": [
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos < str.length() -",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {if (expPos > -1) {(decPos > -1) {",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {if (decPos > -1)",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {if (expPos > -1)",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {if (expPos > -1) {",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1){",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {if (decPos > -1) {",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos < str.length()",
        "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {if (decPos > -1) {if (decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {(decPos > -1) {if (expPos > -1) {(decPos > -1)"
      ],
      "function range": "444,5-594,5"
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            <extra_id_0>\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n            cal1.getClass() == cal2.getClass());\n}",
      "output": [
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.YEAR",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.YEAR) &&",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH)== cal2.get(Calendar.MONTH)",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.YEAR) &&== cal2.get(Calendar.MONTH",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.YEAR) &&== cal2.get(Calendar.YEAR",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH)== cal2.get(Calendar.MONTH) &&==",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.YEAR) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH",
        "\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH) &&== cal2.get(Calendar.MONTH)=="
      ],
      "function range": "258,5-270,5"
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n    <extra_id_0>\n    c.setTime(date);\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}",
      "output": [
        "c.setTimeZone(mTimeZone);",
        "// buggy line:",
        "c.setTimeZone(mTimeZone); c.setTimeUnit(Calendar.DAY_OF_MONTH); c.setTimeInMillis(date.getTimeInMillis());",
        "c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone);",
        "c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone);",
        "c.setTimeZone(mTimeZone); c.setTimeUnit(Calendar.DAY_OF_MONTH);",
        "c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone);",
        "c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone);",
        "c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone);",
        "c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone); c.setTimeZone(mTimeZone);"
      ],
      "function range": "819,5-823,5"
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "\n// buggy line:static float toJavaVersionInt(String version) {\n<extra_id_0>\n    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n}",
      "output": [
        "//",
        "// return toVersionInt(version, JAVA_VERSION_TRIM_SIZE); //",
        "return toVersionInt(version, JAVA_VERSION_TRIM_SIZE);",
        "// return toVersionInt(version, JAVA_VERSION_TRIM_SIZE);",
        "return toVersionInt(version, JAVA_VERSION_TRIM_SIZE); //",
        "#define JAVA_VERSION_TRIM_SIZE 32 //",
        "// return toVersionInt(version); //",
        "// return toVersionInt(version, JAVA_VERSION_TRIM_SIZE);//",
        "#define JAVA_VERSION_TRIM_SIZE 128 //",
        "return toVersionInt(version, JAVA_VERSION_TRIM_SIZE); // bug:"
      ],
      "function range": "1672,5-1674,5"
    },
    "Lang_33_/src/main/java/org/apache/commons/lang3/ClassUtils.java_910-911": {
      "loc": "910-911",
      "input": "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        <extra_id_0>\n    }\n    return classes;\n}",
      "output": [
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(array",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(array",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(Arrays",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(array",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array)))return Arrays.asList(Arrays.asList(Arrays.asList(array)))",
        "//return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(array));return Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(Arrays.asList(array)))).toArray(Arrays.asList(Arrays.asList(Arrays.asList(array)))return Arrays.asList(Arrays.asList(Arrays.asList(Arrays."
      ],
      "function range": "902,5-913,5"
    },
    "Lang_39_/src/java/org/apache/commons/lang3/StringUtils.java_3676-3677": {
      "loc": "3676-3677",
      "input": "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        <extra_id_0>\n        if (greater > 0) {\n            increase += 3 * greater; \n        }\n    }\n    increase = Math.min(increase, text.length() / 5);\n    StringBuilder buf = new StringBuilder(text.length() + increase);\n    while (textIndex != -1) {\n        for (int i = start; i < textIndex; i++) {\n            buf.append(text.charAt(i));\n        }\n        buf.append(replacementList[replaceIndex]);\n        start = textIndex + searchList[replaceIndex].length();\n        textIndex = -1;\n        replaceIndex = -1;\n        tempIndex = -1;\n        for (int i = 0; i < searchLength; i++) {\n            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n                searchList[i].length() == 0 || replacementList[i] == null) \n            {\n                continue;\n            }\n            tempIndex = text.indexOf(searchList[i], start);\n            if (tempIndex == -1) {\n                noMoreMatchesForReplIndex[i] = true;\n            } else {\n                if (textIndex == -1 || tempIndex < textIndex) {\n                    textIndex = tempIndex;\n                    replaceIndex = i;\n                }\n            }\n        }\n    }\n    int textLength = text.length();\n    for (int i = start; i < textLength; i++) {\n        buf.append(text.charAt(i));\n    }\n    String result = buf.toString();\n    if (!repeat) {\n        return result;\n    }\n    return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);\n}",
      "output": [
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; ii++) { //System.out.println(searchList[i]); //System.",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]);(int i = 0; ii++) { //System.out.println(searchList[i]); //System.",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; i{ //System.out.println(searchList[i]); //System.out.",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; i< searchLength; i++) { //System.out.println(searchList[i",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; i0; i++) { //System.out.println(searchList[i]);",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; ii++) { //System.out.println(searchList[i].length()); //",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]);(int i = 0; ii++) { //System.out.println(searchList[i].length()); //",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; ii++) { //System.out.println(searchList[i].length());",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]);(int i = 0; ii++) { //System.out.println(searchList[i].length());",
        "//System.out.println(greater); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]); //System.out.println(replacementList[i]); //System.out.println(searchList[i]);(int i = 0; i0; i++) { //System.out.println(searchList[i].length"
      ],
      "function range": "3605,5-3731,5"
    },
    "Lang_40_/src/java/org/apache/commons/lang/StringUtils.java_1048-1049": {
      "loc": "1048-1049",
      "input": "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    <extra_id_0>\n}",
      "output": [
        "//",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\ufffd",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5b57\ufffd",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\ufffd",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\ufffd",
        "// \u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u5b57\u7b26\u4e32\u662f\u5426\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\u662f\u5b57\u7b26\u4e32\u662f\ufffd"
      ],
      "function range": "1044,5-1049,5"
    },
    "Lang_43_/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java_422-423": {
      "loc": "422-423",
      "input": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null ? null : appendTo.append(QUOTE);\n        <extra_id_0>\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                    QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[pos.getIndex()]) {\n        case QUOTE:\n            next(pos);\n            return appendTo == null ? null : appendTo.append(c, lastHold,\n                    pos.getIndex() - lastHold);\n        default:\n            next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
      "output": [
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null?null : appendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE))appendTo.append(c, lastHold",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null? nullappendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo.append(c, last",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null?null : appendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo.append(c, last",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null?null : appendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE))appendTo.append(c, lastHold, pos.get",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null? nullappendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {appendTo.append(c, lastHold, pos.",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null? nullappendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {appendTo.append(c, lastHold,\n                   ",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null?null : appendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE))appendTo.append(c, lastHold,\n                   ",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null? nullappendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {appendTo.append(c, lastHold,last",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null? nullappendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo.append(c,",
        "pos.setIndex(start);if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo == null?null : appendTo.append(c, lastHold,\n                   pos.getIndex() - lastHold);\nif (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {appendTo.append(c,"
      ],
      "function range": "417,5-444,5"
    },
    "Lang_51_/src/java/org/apache/commons/lang/BooleanUtils.java_682-683": {
      "loc": "682-683",
      "input": "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) == 's' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n            }\n// buggy line:        }\n        <extra_id_0>\n        case 4: {\n            char ch = str.charAt(0);\n            if (ch == 't') {\n                return \n                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n                    (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n                    (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n                    (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n            }\n        }\n    }\n    return false;\n}",
      "output": [
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'e') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'e') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s')",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'E') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'e') &&(str.charAt(3) =='s') &&(str.charAt(3) == 'S') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'e') &&(str.charAt(3) =='s') &&(str.charAt(4) =='s') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) =='s') &&(str.charAt(3) == 'E') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'E') &&(str.charAt(3) =='s') &&(str.charAt(3) == 'S') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s') &&",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'E') &&(str.charAt(3) =='s') &&(str.charAt(3) =='s')",
        "// buggy line:= str.charAt(0); if (str.charAt(0) =={(str.charAt(1) == 'r') &&(str.charAt(2) == 'u') &&(str.charAt(3) == 'e') &&(str.charAt(3) =='s') &&(str.charAt(3) == 'e') &&"
      ],
      "function range": "649,5-700,5"
    },
    "Lang_57_/src/java/org/apache/commons/lang/LocaleUtils.java_223-224": {
      "loc": "223-224",
      "input": "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:    return",
        "cAvailableLocaleSet.add(locale); cAvailableLocaleSet.remove(locale); return cAvailableLocaleSet.contains(locale);",
        "cAvailableLocaleSet.add(locale); cAvailableLocaleSet.remove(locale); return cAvailableLocaleSet.contains(Locale.getDefault());",
        "// buggy line:EQUIVALENCE return cAvailableLocaleSet.contains(locale);",
        "// buggy line:LICENSE return cAvailableLocaleSet.contains(locale);",
        "buggy line:    return cAvailableLocaleSet.contains(locale);",
        "cAvailableLocaleSet.add(locale); cAvailableLocaleSet.remove(locale); return cAvailableLocaleSet.isEmpty();",
        "buggy line:    return cAvailableLocaleSet.contains(Locale.getDefault());",
        "cAvailableLocaleSet.add(locale); cAvailableLocaleSet.remove(locale); return cAvailableLocaleSet.contains(Locale.getDefault()) ;",
        "cAvailableLocaleSet.add(locale); cAvailableLocaleSet.remove(locale); return cAvailableLocaleSet.contains(Locale.getDefault());"
      ],
      "function range": "222,5-224,5"
    },
    "Lang_58_/src/java/org/apache/commons/lang/math/NumberUtils.java_454-456": {
      "loc": "454-456",
      "input": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }   \n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            dec = str.substring(decPos + 1, expPos);\n        } else {\n            dec = str.substring(decPos + 1);\n        }\n        mant = str.substring(0, decPos);\n    } else {\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n        dec = null;\n    }\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length() - 1);\n        } else {\n            exp = null;\n        }\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        switch (lastChar) {\n            case 'l' :\n            case 'L' :\n                if (dec == null\n                    && exp == null\n// buggy line:                    && isDigits(numeric.substring(1))\n// buggy line:                    && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                    <extra_id_0>\n                    try {\n                        return createLong(numeric);\n                    } catch (NumberFormatException nfe) {\n                    }\n                    return createBigInteger(numeric);\n                }\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            case 'f' :\n            case 'F' :\n                try {\n                    Float f = NumberUtils.createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n            case 'd' :\n            case 'D' :\n                try {\n                    Double d = NumberUtils.createDouble(numeric);\n                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                }\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigInteger(str);\n        } else {\n            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n            }\n            return createBigDecimal(str);\n        }\n    }\n}",
      "output": [
        "// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:",
        "// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line",
        "// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line",
        "// buggy line:{ // buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "// buggy line:{ // buggy line:// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "// buggy line:{ // buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "// buggy line:{ // buggy line:{ // buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// bugg",
        "// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy"
      ],
      "function range": "397,5-545,5"
    },
    "Lang_59_/src/java/org/apache/commons/lang/text/StrBuilder.java_884-885": {
      "loc": "884-885",
      "input": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null ? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            <extra_id_0>\n        } else {\n            int padLen = width - strLen;\n            str.getChars(0, strLen, buffer, size);\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n        }\n        size += width;\n    }\n    return this;\n}",
      "output": [
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getName().equals(\"java.lang.",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().equals(\"java.lang.String\")",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.lang.",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") &&obj.getClass().getSimpleName().equals(\"java.lang.String\") && obj.getClass().getSimpleName().equals(\"java.lang.String\") && obj.getClass().getSimpleName().equals(\"java.",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getName().equals(\"java.lang.String\") || obj.getClass().getName().equals(\"java.lang.String\")",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().equals(\"java.lang.String\"",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") &&obj.getClass().getSimpleName().equals(\"java.lang.String\") && obj.getClass().getSimpleName().equals(\"java.lang.String\") && obj.getClass().equals(\"java.lang.String\")",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getName().equals(\"java.lang.String\") || obj.getClass().getName().equals(\"java.lang.String\"",
        "buffer[size + strLen] = padChar;if (obj!= null) {= obj.toString().length(); if (obj.getClass().getSimpleName().equals(\"java.lang.String\") ||obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().getSimpleName().equals(\"java.lang.String\") || obj.getClass().equals(\"java.lang.Object\")"
      ],
      "function range": "878,5-895,5"
    },
    "Lang_61_/src/java/org/apache/commons/lang/text/StrBuilder.java_1776-1777": {
      "loc": "1776-1777",
      "input": "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0 ? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    <extra_id_0>\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j) != thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}",
      "output": [
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[start",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[i",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(j)!= thisBuf[start",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {return -1;if (str.charAt(0)",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(j)!= thisBuf[i",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(strLen)!= thisBuf[",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(i)!= thisBuf[start",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(i)!= thisBuf[i",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[this",
        "//if (str.charAt(0)!= thisBuf[startIndex]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[startIndex+strLen]) {if (str.charAt(0)!= thisBuf[0"
      ],
      "function range": "1760,5-1787,5"
    },
    "Math_2_/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java_268-269": {
      "loc": "268-269",
      "input": "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:    return",
        "}  public double",
        "}  public static double",
        "// buggy line:   ",
        "// bugy line:    return",
        "}  public double getNumericalMean(){return",
        "}  public double getNumericalError(){return",
        "}  public double getNumberOfSuccesses(){return",
        "}  public double getNumericalVariance(){return",
        "}  public double getNumericalSum(){return"
      ],
      "function range": "267,5-269,5"
    },
    "Math_5_/src/main/java/org/apache/commons/math3/complex/Complex.java_305-306": {
      "loc": "305-306",
      "input": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        <extra_id_0>\n    }\n    if (isInfinite) {\n        return ZERO;\n    }\n    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n        double q = real / imaginary;\n        double scale = 1. / (real * q + imaginary);\n        return createComplex(scale * q, -scale);\n    } else {\n        double q = imaginary / real;\n        double scale = 1. / (imaginary * q + real);\n        return createComplex(scale, -scale * q);\n    }\n}",
      "output": [
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);\n",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale*q);",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);}",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);return createComplex",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);return",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);double",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);{",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);\n}",
        "//return createComplex(0.0, -0.0);double q = real/imaginary;double scale = 1./ (real*q+imaginary);\ndouble scale = 1./ (real*q+imaginary);return createComplex(scale, -scale);double scale = 1./ (real*q+imaginary);return createComplex(scale, -scale * q);}"
      ],
      "function range": "299,5-321,5"
    },
    "Math_9_/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java_87-88": {
      "loc": "87-88",
      "input": "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n    <extra_id_0>\n    return reverted;\n}",
      "output": [
        "//",
        "// buggy line:",
        "reverted.setDirection(direction); // buggy line:",
        "reverted.setPosition(zero.add(direction)); // buggy line:",
        "reverted.add(zero); // buggy line:",
        "reverted.setDirection(direction); //",
        "reverted.add(zero.add(direction)); // buggy line:",
        "reverted.setPosition(zero); // buggy line:",
        "reverted.setPosition(zero.add(direction)); //",
        "reverted.add(direction); // buggy line:"
      ],
      "function range": "86,5-89,5"
    },
    "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184": {
      "loc": "183-184",
      "input": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n    <extra_id_0>\n        FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n        getExponentTerm(vals);\n}",
      "output": [
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,*",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,*",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,*",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covariance",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)*",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5) ** FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,*",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath",
        "FastMath.pow(covarianceMatrixDeterminant, -0.5) *return FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant, -0.5)* FastMath.pow(covarianceMatrixDeterminant,* FastMath.pow(covarianceMatrixDeterminant,* FastMath"
      ],
      "function range": "177,5-186,5"
    },
    "Math_20_/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java_921-922": {
      "loc": "921-922",
      "input": "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return\n    <extra_id_0>\n        decode(x);\n}",
      "output": [
        "repair(x);\n // buggy line:   ",
        "repair(x);\n // buggy line:",
        "repair(x);\n// buggy line:   ",
        "repair(x);\n// buggy line:    return",
        "repair(x);\n\n // buggy line:",
        "repairAndDecode(x);\n // buggy line:   ",
        "repairAndDecode(x);\n // buggy line:",
        "repair(x);\n // buggy line:LDAP",
        "repair(x);\n // return decode(x);",
        "repairAndDecode(x);\n// buggy line:   "
      ],
      "function range": "920,9-923,9"
    },
    "Math_27_/src/main/java/org/apache/commons/math3/fraction/Fraction.java_597-598": {
      "loc": "597-598",
      "input": "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:    return",
        "// bugy line:    return",
        "}  public static double",
        "}  public class",
        "}  public partial class",
        "} public double multiply(double value){return",
        "}  public abstract class",
        "} private double multiply(double value){return",
        "} private static double",
        "// buggy line:    }"
      ],
      "function range": "596,5-598,5"
    },
    "Math_30_/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java_173-174": {
      "loc": "173-174",
      "input": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n    <extra_id_0>\n    final double EU = n1n2prod / 2.0;\n    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n    final double z = (Umin - EU) / FastMath.sqrt(VarU);\n    final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n    return 2 * standardNormal.cumulativeProbability(z);\n}",
      "output": [
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n1+n2*n2*n2*n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n2*n2*n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n1+n2*n2*n1+n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n2*n2*n2*n2*n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n1+n2*n2*n1+n2*n1+n2*n2*n2*n2*n2*n2*n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2+n2*n2*n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2+n2",
        "// n1n2prod = n1n2prod*n2;final doublen1n2prod*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n1+n2*n2*n1"
      ],
      "function range": "168,5-184,5"
    },
    "Math_32_/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java_136-137": {
      "loc": "136-137",
      "input": "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        <extra_id_0>\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            setSize(0);\n            setBarycenter(new Vector2D(0, 0));\n        }\n    } else if (v[0][0] == null) {\n        setSize(Double.POSITIVE_INFINITY);\n        setBarycenter(Vector2D.NaN);\n    } else {\n        double sum  = 0;\n        double sumX = 0;\n        double sumY = 0;\n        for (Vector2D[] loop : v) {\n            double x1 = loop[loop.length - 1].getX();\n            double y1 = loop[loop.length - 1].getY();\n            for (final Vector2D point : loop) {\n                final double x0 = x1;\n                final double y0 = y1;\n                x1 = point.getX();\n                y1 = point.getY();\n                final double factor = x0 * y1 - y0 * x1;\n                sum  += factor;\n                sumX += factor * (x0 + x1);\n                sumY += factor * (y0 + y1);\n            }\n        }\n        if (sum < 0) {\n            setSize(Double.POSITIVE_INFINITY);\n            setBarycenter(Vector2D.NaN);\n        } else {\n            setSize(sum / 2);\n            setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));\n        }\n    }\n}",
      "output": [
        "//????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
      ],
      "function range": "129,5-181,5"
    },
    "Math_33_/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java_338-339": {
      "loc": "338-339",
      "input": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        <extra_id_0>\n            columnsToDrop.add(i);\n        }\n    }\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n      int col = i + getArtificialVariableOffset();\n      if (getBasicRow(col) == null) {\n        columnsToDrop.add(col);\n      }\n    }\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n      int col = 0;\n      for (int j = 0; j < getWidth(); j++) {\n        if (!columnsToDrop.contains(j)) {\n          matrix[i - 1][col++] = tableau.getEntry(i, j);\n        }\n      }\n    }\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n      columnLabels.remove((int) columnsToDrop.get(i));\n    }\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
      "output": [
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0; this.numObjectiveFunctions",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjective",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions =this.numObjectiveFunctions",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions =this.numObjectiveFunctions =",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctionsthis.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions =",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctionsthis.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctionsthis.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0; this.numObjectiveFunctions0;",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctionsthis.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0; this.numObjectiveFunctions= 0",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctionsthis.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0; this.numObjectiveFunctions++;",
        "//this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0;this.numObjectiveFunctionsthis.numObjectiveFunctions = 0;this.numObjectiveFunctions = 0; this.numObjectiveFunctions="
      ],
      "function range": "327,5-367,5"
    },
    "Math_34_/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java_209-210": {
      "loc": "209-210",
      "input": "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n    <extra_id_0>\n}",
      "output": [
        "}  public class",
        "}  public class ChromosomeIterator",
        "// buggy line:    return",
        "}  public class ChromosomeCollection",
        "}  @ Override public",
        "}  public class ChromosomeIterator{",
        "}  public String",
        "}  public class ChromosomeCollection{",
        "}  public class ChromosomeIterator {",
        "}  public class C"
      ],
      "function range": "208,5-210,5"
    },
    "Math_41_/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java_520-521": {
      "loc": "520-521",
      "input": "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            <extra_id_0>\n                sumWts += weights[i];\n            }\n            if (isBiasCorrected) {\n                var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n            } else {\n                var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n            }\n        }\n    }\n    return var;\n}",
      "output": [
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {var = (accum - (accum2/ (sumWts - 1.0));",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {var = (accum - (accum2/ sumWts)) / (sumWts",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {= (accum - (accum2 */ (sumWts - 1.0));",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ sumWts)) / (sumWts} else {var = (accum - (accum2/ sumWts)) / (sumWts",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {var = (accum - (accum2/ (sumWts - 1.0))",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {= (accum - (accum2/ (sumWts - 1.0));}",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {= (accum - (accum2 */ (sumWts - 1.0));} else {= (accum - (accum2/ (sumWts - 1.0));}",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {= (accum - (accum2/ sumWts)) / (sumWts}",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ sumWts)) / (sumWts} else {= (accum - (accum2/ (sumWts - 1.0));}",
        "if (isBiasCorrected) {if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));if (isBiasCorrected) {var = (accum - (accum2/ (sumWts - 1.0));} else {var = (accum - (accum2/ sumWts)) / (sumWts -"
      ],
      "function range": "501,5-532,5"
    },
    "Math_48_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_189-190": {
      "loc": "189-190",
      "input": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n                <extra_id_0>\n            default:\n                throw new MathInternalError();\n            }\n        }\n        x1 = x;\n        f1 = fx;\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                 atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n    }\n}",
      "output": [
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0) <(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0) <(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x1;",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0) <(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {(inverted) {",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {if (inverted) {",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;}",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0) <{return x0;if (FastMath",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x1;}",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0; }",
        "case AVERAGE_FALSI:if (FastMath.abs(x1 - x0)if (FastMath.abs(x1 - x0) <{return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;if (FastMath.abs(x1 - x0)(inverted) {return x0;return"
      ],
      "function range": "129,5-251,5"
    },
    "Math_50_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_187-191": {
      "loc": "187-191",
      "input": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                }\n                <extra_id_0>\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n        x1 = x;\n        f1 = fx;\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                if (inverted) {\n                    return x1;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (!inverted) {\n                    return x1;\n                }\n                break;\n            case BELOW_SIDE:\n                if (f1 <= 0) {\n                    return x1;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (f1 >= 0) {\n                    return x1;\n                }\n                break;\n            default:\n                throw new MathInternalError();\n            }\n        }\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                 atol)) {\n            switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 <= 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 >= 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n    }\n}",
      "output": [
        "else { // buggy line:if (FastMath.abs(x1 - x0) <(inverted) { // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <(inverted) { // buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// b",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <(inverted) { // buggy line:// buggy line:// buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <{ // buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line://",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if (",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line://",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <{ // buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:if",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <(inverted) { // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy",
        "else { // buggy line:if (FastMath.abs(x1 - x0) <{ // buggy line:{ // buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:// buggy line:="
      ],
      "function range": "128,5-253,5"
    },
    "Math_53_/src/main/java/org/apache/commons/math/complex/Complex.java_153-154": {
      "loc": "153-154",
      "input": "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n    <extra_id_0>\n        imaginary + rhs.getImaginary());\n}",
      "output": [
        "imaginary + rhs.getImaginary(),",
        "imaginary + rhs.getImaginary()); //return createComplex(real+rhs.getReal(),",
        "//",
        "imaginary + rhs.getImaginary());\n //return createComplex(real+rhs.getReal(),",
        "imaginary + rhs.getImaginary(), real +",
        "real2 + rhs.getReal2(),",
        "imaginary + rhs.getImaginary()); //return createComplex(real +",
        "imaginary + rhs.getImaginary(), real,",
        "imaginary + rhs.getImaginary()), createComplex(real +",
        "imaginary + rhs.getImaginary(), //"
      ],
      "function range": "150,5-155,5"
    },
    "Math_56_/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java_237-244": {
      "loc": "237-244",
      "input": "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    <extra_id_0>\n    return indices;\n}",
      "output": [
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggyline:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggyline:",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx;++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // bugg",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:// buggy line:++idx;",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:// buggy line:++idx; // buggy line:++idx;",
        "//int[] indices = new int[dimension];for (int i = 0;i<last; i++) {++idx;++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // b",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggyline:++idx; // buggy line:++idx; // buggy line:++idx; // buggyline",
        "//int[] indices = new int[dimension];for (int i = 0;i<last; i++) {++idx;++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; //",
        "//int[] indices = new int[dimension];for (int i = 0;< last; i++) {++idx; // buggy line:++idx; // buggy line:++idx; // buggy line:++idx; // buggyline:++idx; // buggy line:++idx; // buggy line:++idx; // buggy//"
      ],
      "function range": "216,5-246,5"
    },
    "Math_57_/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java_175-176": {
      "loc": "175-176",
      "input": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n        <extra_id_0>\n        for (int i = 0; i < pointSet.size(); i++) {\n            final T p = pointSet.get(i);\n            final Cluster<T> nearest = getNearestCluster(resultSet, p);\n            final double d = p.distanceFrom(nearest.getCenter());\n            sum += d * d;\n            dx2[i] = sum;\n        }\n        final double r = random.nextDouble() * sum;\n        for (int i = 0 ; i < dx2.length; i++) {\n            if (dx2[i] >= r) {\n                final T p = pointSet.remove(i);\n                resultSet.add(new Cluster<T>(p));\n                break;\n            }\n        }\n    }\n    return resultSet;\n}",
      "output": [
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i] >=",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i] <",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());= 0; i < dx2.length",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i] >= r",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i] >= d",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i] >",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i] <=",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceTo(nearest",
        "//for (int i = 0;< dx2.length; i++) {Cluster<T> nearest =Cluster<T> nearest = getNearestCluster(resultSet, nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());double d = p.distanceFrom(nearest.getCenter());if (dx2[i]{"
      ],
      "function range": "161,5-198,5"
    },
    "Math_58_/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java_121-122": {
      "loc": "121-122",
      "input": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    <extra_id_0>\n}",
      "output": [
        "return guess;",
        "// buggy line:    return",
        "//buggy line:    return guess;",
        "// return fit(new Gaussian.Parametric(), guess);",
        "// bugy line:    return",
        "// buggy line: guess return",
        "// buggy line:",
        "// return guess;",
        "// return fit(new Gaussian.Parameteretric(), guess);",
        "//buggy line:    return guess;"
      ],
      "function range": "119,5-122,5"
    },
    "Math_59_/src/main/java/org/apache/commons/math/util/FastMath.java_3482-3483": {
      "loc": "3482-3483",
      "input": "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n    <extra_id_0>\n}",
      "output": [
        "//",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de1\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\ufffd",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\ufffd",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\uff0c\u5219\u8fd4\u56de0\ufffd",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u4e0d\u5b58\u5728",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u8fd9\u91cc\u4e0d\u5b58\u5728\ufffd",
        "// \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u5b58\u5728\uff0c\u8fd9\u91cc\u4e0d\u5b58\u5728"
      ],
      "function range": "3481,5-3483,5"
    },
    "Math_63_/src/main/java/org/apache/commons/math/util/MathUtils.java_417-418": {
      "loc": "417-418",
      "input": "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:   ",
        "//",
        "// buggy line:",
        "// buggy line:EQUIVALENCE",
        "// buggy line:    return",
        "//buggy line:    return Double.isNaN(x);",
        "// buggy line:SEE",
        "// buggy line:EQUIVALENT",
        "// Buggy line:   ",
        "// buggy line:EQUIVALENCE //"
      ],
      "function range": "416,5-418,5"
    },
    "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172": {
      "loc": "171-172",
      "input": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                <extra_id_0>\n            }\n        }\n    }\n    return new BlockRealMatrix(out);\n}",
      "output": [
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0,",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0,correlationMatrix.getEntry(0, 1);",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0",
        "}correlationMatrix.getEntry(0, 0);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 1);correlationMatrix.getEntry(0, 2);correlationMatrix.getEntry(0"
      ],
      "function range": "160,5-176,5"
    },
    "Math_70_/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java_72-73": {
      "loc": "72-73",
      "input": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n    <extra_id_0>\n}",
      "output": [
        "// return solve(min, max, initial);",
        "// return",
        "// return f.solve(min, max, initial);",
        "// return solve(f, min, max, initial);",
        "// throws MaxIterationsExceededException, FunctionEvaluationException;",
        "// return solve(min, max);",
        "//return solve(f, min, max, initial);",
        "// buggy line:    return",
        "//return solve(min, max, initial);",
        "// return f.solve(min,max,initial);"
      ],
      "function range": "70,5-73,5"
    },
    "Math_73_/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java_136-137": {
      "loc": "136-137",
      "input": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n<extra_id_0>\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}",
      "output": [
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yInitial = f.value(initial);if (Math.abs(yInitial)",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {return result;\n    }double yInitial = f.value(initial);if (Math.abs(yInitial",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yMin = f.value(min);if (Math.abs(yMin)",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yInitial = f.value(initial);\nif (Math.abs(yInitial",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yMin = f.value(min);\nif (Math.abs(yMin",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {return result;\n    }double yInitial = f.value(initial);\nif (Math.abs(y",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yMin = f.value(min);if (Math.abs(yMax)",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yInitial = f.value(initial);if (Math.abs(yMax)",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yMin = f.value(min);if (Math.abs(yInitial)",
        "else {double yMin = f.value(min);\nif (Math.abs(yMin) <= functionValueAccuracy) {0);\nreturn result;\n    }double yMax = f.value(max);if (Math.abs(yMax) <= functionValueAccuracy) {result;\n    }double yMin = f.value(min);\nif (Math.abs(yMax"
      ],
      "function range": "98,5-140,5"
    },
    "Math_75_/src/main/java/org/apache/commons/math/stat/Frequency.java_303-304": {
      "loc": "303-304",
      "input": "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:    return",
        "// bugy line:    return",
        "// return getCumPct((Comparable<?>) v).doubleValue();",
        "// return getCumPct((Comparable<?>) v);",
        "// buggy line: Deprecated return",
        "// return getCumPct((Comparable<?>) v).doubleValue(); //",
        "// buggy line: SEE return",
        "// return getCumPct((Comparable<?>) v).getDoubleValue();",
        "// return getCumPct(v.getClass());",
        "// return getCumPct(v.getClass()); // return"
      ],
      "function range": "301,5-304,5"
    },
    "Math_80_/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java_1135-1136": {
      "loc": "1135-1136",
      "input": "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        <extra_id_0>\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}",
      "output": [
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   return false;\n   ",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n    }return false;\n",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return false;\n   return false;\n   ",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return false;\n   return true;\n   ",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return false;\n    }return false;\n",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return false;\n    }return true;\n",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n    }return false;",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   return false;\n           ",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return false;\n    }return false;",
        "//if(1.5 * work[pingPong] < work[4*n-1+pingPong])if(1.5 * work[pingPong] < work[4*n-1+pingPong])return true;\n   if(1.5 * work[pingPong] < work[4*n-1+pingPong])return false;\n    }return true;"
      ],
      "function range": "1132,5-1147,5"
    },
    "Math_82_/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java_82-83": {
      "loc": "82-83",
      "input": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        <extra_id_0>\n            final double ratio = rhs / entry;\n            if (ratio < minRatio) {\n                minRatio = ratio;\n                minRatioPos = i; \n            }\n        }\n    }\n    return minRatioPos;\n}",
      "output": [
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ ////",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon){ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ // //",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ ////",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //=",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //}",
        "//if (MathUtils.compareTo(rhs, 0, epsilon)if (MathUtils.compareTo(entry, 0, epsilon) >={ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ //if (MathUtils.compareTo(entry, 0, epsilon){ //if (MathUtils.compareTo(rhs, 0, epsilon) >={ ////",
        "//if (MathUtils.compareTo(rhs, 0, epsilon) <if (MathUtils.compareTo(entry, 0, epsilon) <{ //if (MathUtils.compareTo(rhs, 0, epsilon) <{ //if (MathUtils.compareTo(entry, 0, epsilon){ //if (MathUtils.compareTo(rhs, 0, epsilon) <{ ////"
      ],
      "function range": "76,5-91,5"
    },
    "Math_85_/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java_198-199": {
      "loc": "198-199",
      "input": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    <extra_id_0>\n        throw new ConvergenceException(\n                  \"number of iterations={0}, maximum iterations={1}, \" +\n                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n                  numIterations, maximumIterations, initial,\n                  lowerBound, upperBound, a, b, fa, fb);\n    }\n    return new double[]{a, b};\n}",
      "output": [
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0,= Math.min(b + 1.0,= Math.max(a - 1.0,= Math.max(b - 1.0",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0,= Math.min(b + 1.0,= Math.max(a + 1.0,= Math.max(b - 1.0",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0,= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(a + 1.0",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0,= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(b - 1.0",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0,= Math.min(b + 1.0,= Math.max(a - 1.0,= Math.max(a + 1.0",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0, lowerBound);= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(b - 1",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0, lowerBound);= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(a +",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0, lowerBound);= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(a + 1",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0, lowerBound);= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(b +",
        "//throw new ConvergenceException(System.out.println(System.err.println(System.err.println(System.err.println(System.err.println(function)))));= function.value(a);= Math.max(a - 1.0, lowerBound);= Math.min(b - 1.0,= Math.max(a + 1.0,= Math.max(b -"
      ],
      "function range": "165,5-208,5"
    },
    "Math_91_/src/java/org/apache/commons/math/fraction/Fraction.java_259-261": {
      "loc": "259-261",
      "input": "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n    <extra_id_0>\n    return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n}",
      "output": [
        "//",
        "// buggy line:",
        "// bugy line:",
        "//buggy line:",
        "//buggy line:",
        "////",
        "//}",
        "// bug:",
        "// buggy line:}",
        "// bugy line:}"
      ],
      "function range": "258,5-262,5"
    },
    "Math_94_/src/java/org/apache/commons/math/util/MathUtils.java_412-413": {
      "loc": "412-413",
      "input": "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n    <extra_id_0>\n        return (Math.abs(u) + Math.abs(v));\n    }\n    if (u > 0) {\n        u = -u;\n    } \n    if (v > 0) {\n        v = -v;\n    } \n    int k = 0;\n    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n        u /= 2;\n        v /= 2;\n        k++; \n    }\n    if (k == 31) {\n        throw new ArithmeticException(\"overflow: gcd is 2^31\");\n    }\n    int t = ((u & 1) == 1) ? v : -(u / 2);\n    do {\n        while ((t & 1) == 0) { \n            t /= 2; \n        }\n        if (t > 0) {\n            u = -t;\n        } else {\n            v = t;\n        }\n        t = (v - u) / 2;\n    } while (t != 0);\n    return -u * (1 << k); \n}",
      "output": [
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0)",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {= (v - u)",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) {1) == 0) {1)",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) {1)",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {= -t;}",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) {1) == 0) {}",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) {1) == 0) {= -",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) {1) == 0) {= (",
        "//if ((u &1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {1) == 0) {= (v -)"
      ],
      "function range": "411,5-460,5"
    },
    "Math_96_/src/java/org/apache/commons/math/complex/Complex.java_258-259": {
      "loc": "258-259",
      "input": "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                <extra_id_0>\n            }\n        } catch (ClassCastException ex) {\n            ret = false;\n        }\n    }\n    return ret;\n}",
      "output": [
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;}",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other))ret = false;} else {",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other))ret = false;} else",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;}",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;ret =",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(this))ret = false;} else {",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(this))ret = false;} else",
        "}if (other.equals(this)) {if (other.equals(this)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;} else if (other.equals(this)) {ret = false;} else if (other.equals(other)) {ret = false;else {"
      ],
      "function range": "245,5-267,5"
    },
    "Math_101_/src/java/org/apache/commons/math/complex/ComplexFormat.java_377-378": {
      "loc": "377-378",
      "input": "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (\n    <extra_id_0>\n        source.substring(startIndex, endIndex).compareTo(\n        getImaginaryCharacter()) != 0) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), im.doubleValue() * sign);\n}",
      "output": [
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex)pos.setErrorIndex(startIndex);",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;return new Complex(re.doubleValue(), 0.0);pos.setErrorIndex(startIndex);",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;return new Complex(re.doubleValue(), 0.0);if (pos.getErrorIndex(startIndex",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex)pos.setErrorIndex(endIndex);",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(endIndex",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setIndex(initialIndex);",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex); return null;return new Complex(re.doubleValue(), 0.0);pos.setErrorIndex(startIndex);return",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;return new Complex(re.doubleValue(), 0.0);pos.setErrorIndex(startIndex); return",
        "pos.getErrorIndex(startIndex)!= endIndex ||if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;if (pos.getErrorIndex(startIndex)!= endIndex) {pos.setErrorIndex(startIndex);return null;return new Complex(re.doubleValue(), 0.0);pos.setErrorIndex(endIndex);"
      ],
      "function range": "320,5-389,5"
    },
    "Math_105_/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java_264-265": {
      "loc": "264-265",
      "input": "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n    <extra_id_0>\n}",
      "output": [
        "}  public class",
        "// buggy line:    return",
        "// bugy line:    return",
        "// buggy line:   ",
        "}",
        "// buggy line:    }",
        "}  public static double",
        "}  public abstract class",
        "}  public double",
        "}  public static class"
      ],
      "function range": "263,5-265,5"
    },
    "Mockito_1_/src/org/mockito/internal/invocation/InvocationMatcher.java_123-124": {
      "loc": "123-124",
      "input": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        <extra_id_0>\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n            }\n        }\n    }\n}",
      "output": [
        "//????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????",
        "//???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
      ],
      "function range": "120,5-150,5"
    },
    "Mockito_5_/src/org/mockito/internal/verification/VerificationOverTimeImpl.java_91-92": {
      "loc": "91-92",
      "input": "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n        <extra_id_0>\n            error = handleVerifyException(e);\n        }\n    }\n    if (error != null) {\n        throw error;\n    }\n}",
      "output": [
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {} else {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure)",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {} else",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {} else {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnSuccess)",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {{",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure)} else {",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnSuccess) {} else",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {}",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if",
        "// buggy line:if (returnOnSuccess) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {if (returnOnFailure) {} }"
      ],
      "function range": "75,5-99,5"
    },
    "Mockito_7_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_379-380": {
      "loc": "379-380",
      "input": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n    <extra_id_0>\n}",
      "output": [
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable.getReturnType()));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable.getType()));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable)) ;",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable.getType()));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable.getReturnType()));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable.getGenericReturnType()));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable.getActualType()));",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable).getType());",
        "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable))"
      ],
      "function range": "375,9-380,9"
    },
    "Mockito_8_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_79-80": {
      "loc": "79-80",
      "input": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n        <extra_id_0>\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
      "output": [
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {typeParameter.isAssignableFrom(Object",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class))typeParameter.isAssignableFrom(Object.",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) { //typeParameter.isAssignableFrom(",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {typeParameter.isAssignableFrom((Object",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isPrimitive())",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) { //typeParameter.isAssignableFrom((",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {typeParameter.isAssignableFrom(object",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class))typeParameter.isAssignableFrom((Object)",
        "// buggy line:= 0; i < typeParameters.length;= 0; i < typeParameters.length;if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {if (typeParameter.isAssignableFrom(Object.class)) {typeParameter.isAssignableFrom((Class"
      ],
      "function range": "66,5-84,5"
    },
    "Mockito_22_/src/org/mockito/internal/matchers/Equality.java_13-14": {
      "loc": "13-14",
      "input": "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n    <extra_id_0>\n        return o1 == null && o2 == null;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}",
      "output": [
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.equals(o2);",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o2.getClass().isAssignableFrom(o2.getClass())) {return o1.equals(o2);",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass()))return o1.equals(o2);",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o2.equals(o1);",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.equals(o2.",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass()))return o1.equals(o2.get",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o2.equals(o2);",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass()))return o1.equals(o2);\n",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass()))if(o1.equals(o2))",
        "//if (o1.equals(o2)) {return o1.equals(o2);} else if(o1.getClass().isAssignableFrom(o2.getClass())) {return o1.getClass().isAssignableFrom(o2.getClass());} else if(o1.getClass().isAssignableFrom(o2.getClass())) {o1.equals(o2);"
      ],
      "function range": "12,5-20,5"
    },
    "Mockito_24_/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java_76-77": {
      "loc": "76-77",
      "input": "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        <extra_id_0>\n    }\n    Class<?> returnType = invocation.getMethod().getReturnType();\n    return returnValueFor(returnType);\n}",
      "output": [
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturn} else if (methodsGuru.isEqualsToMethod(invocation.get",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturn} else if (methodsGuru.isCompareToMethod(invocation.get",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturn} else if (methodsGuru.isEqualsMethod(invocation.getMethod",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturn} else if (methodsGuru.isEquals(invocation.getMethod()",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturnreturnValueFor(returnType); //} else if (methodsGuru.isEquals",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturn} else if (methodsGuru.isEquals(invocation.getMethod())",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturnreturnValueFor(returnType);returnValueFor(returnType);returnValue",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturn} else if (methodsGuru.isEqualsToMethod(invocation.getMethod())) {returnreturnValueFor(returnType);returnValueFor(returnType);returnValue",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturnreturnValueFor(returnType); //returnValueFor(returnType); //",
        "//if (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyif (methodsGuru.isEqualsToMethod(invocation.getMethod())) { // buggyreturnreturnValueFor(returnType); //returnValueFor(returnType);return"
      ],
      "function range": "63,5-81,5"
    },
    "Mockito_27_/src/org/mockito/internal/util/MockUtil.java_64-66": {
      "loc": "64-66",
      "input": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    <extra_id_0>\n    ((Factory) mock).setCallback(0, newFilter);\n}",
      "output": [
        "//(Factory) mock).setCallback(0,(Factory) mock).setCallback(1, newFilter);",
        "//(Factory) mock).setCallback(0, oldMockHandler);",
        "//(Factory) mock).setCallback(0, newFilter);",
        "//(Factory) mock).setCallback(0,(Factory) mock).setCallback(0, newFilter);",
        "//(Factory) mock).setCallback(1, newFilter);",
        "//(Factory) mock).setCallback(0,(Factory) mock).setCallback(0, oldMockHandler);",
        "//(Factory) mock).setCallback(0,(Factory) mock).setCallback(0, newMockHandler);",
        "//(Factory) mock).setCallback(0, newMockHandler);",
        "//(Factory) mock).setCallback(0, oldMockHandler);\n}",
        "//(Factory) mock).setCallback(0, oldMockHandler);\n// buggy line:   "
      ],
      "function range": "62,5-67,5"
    },
    "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94": {
      "loc": "93-94",
      "input": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        <extra_id_0>\n    }\n}",
      "output": [
        "//",
        "// injectMockCandidate(awaitingInjectionClazz, mocks, fieldInstance); //",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)); //",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenInject(); //",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance));",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)); //",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)).thenInject();",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject()); //",
        "// injectMockCandidate(awaitingInjectionClazz,mockCandidateFilter.filterCandidate(mocks, field, fieldInstance))",
        "// injectMockCandidate(awaitingInjectionClazz, mocks, fieldInstance); //"
      ],
      "function range": "91,5-95,5"
    },
    "Mockito_29_/src/org/mockito/internal/matchers/Same.java_29-30": {
      "loc": "29-30",
      "input": "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    <extra_id_0>\n    appendQuoting(description);\n    description.appendText(\")\");\n}",
      "output": [
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting",
        "description.appendText(\"!=\");\n    appendQuoting(description);description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append",
        "description.appendText(\"!=\");\n    appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);description.appendText(\"!=\");appendQuoting(description);appendQuoting(description);appendQuoting(description);appendQuoting(description);append"
      ],
      "function range": "26,5-32,5"
    },
    "Mockito_34_/src/org/mockito/internal/invocation/InvocationMatcher.java_106-107": {
      "loc": "106-107",
      "input": "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n        <extra_id_0>\n            ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n        }\n        k++;\n    }\n}",
      "output": [
        "//}",
        "//",
        "//if(i.getArguments().length>k) i.getArguments()[k]=i.getArguments()[k];",
        "//if(i.getArguments().length>k) i.setArguments(k,i.getArguments()[k]);",
        "//if(i.getArguments().length>k) i.setArguments(i.getArguments()[k]);",
        "//if(i.getArguments().length>k) i.setArguments()[k]=i.getArguments()[k];",
        "//if(i.getArguments().length>k) i.getArguments()[k]=i.getArguments().get(k);",
        "//if(i.getArguments().length>k) i.getArguments()[k].captureFrom(i.getArguments()[k]);",
        "//if(i.getArguments().length>k) i.getArguments()[k]=i.getArguments().length;",
        "//if(i.getArguments().length>k) i.getArguments()[k]=i.getArguments()[k];}"
      ],
      "function range": "103,5-111,5"
    },
    "Mockito_38_/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java_48-49": {
      "loc": "48-49",
      "input": "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n    <extra_id_0>\n}",
      "output": [
        "// buggy line:   ",
        "// buggy line:    return",
        "// buggy line:",
        "// bugy line:   ",
        "// buggy line:NON-NLS-1$",
        "// buggy line:SEE",
        "// buggy line:EQUIVALENCE",
        "// buggy line:LICENSE",
        "// buggy line:EFFECT",
        "// buggy line:NON-NLS-1"
      ],
      "function range": "47,5-49,5"
    },
    "Time_4_/src/main/java/org/joda/time/Partial.java_464-465": {
      "loc": "464-465",
      "input": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        <extra_id_0>\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
      "output": [
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues,",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).set(this, index, newValues,",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).set(this, index, newValues, value",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index,newPartial",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this,index, newValues,",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index,return new Partial(this, newValues);return new Partial(this, newValues);",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);return new Partial(this, newValues);return new Partial(this",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).set(this, index,newPartial",
        "//System.arraycopy(iValues, 0, newValues, 0, i);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index, newValues, value);= getField(index).get(this, index,return new"
      ],
      "function range": "426,5-474,5"
    },
    "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139": {
      "loc": "138-139",
      "input": "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n            <extra_id_0>\n        case 0:\n            return 0L;\n        case 1:\n            return val1;\n    }\n    long total = val1 * val2;\n    if (total / val2 != val1) {\n      throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n    }\n    return total;\n}",
      "output": [
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( )",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ; }( ) ;( ) ;(",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ; }( ) ;( ) ;( )",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ; }( ) ;( ) ;( ) ;( ) ;( ) ;(",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ; }( ) ;( ) ;( ) ;(",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ; }( ) ;( ) ;( ) ;( ) ;( ) ;( )",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ; }( ) ;( ) ;( ) ;( )",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ; }(",
        "// buggy line:            return val1;if (total % val2!={throw new ArithmeticException(\"Multiplication overflows a+ val2);return total;return total;return total; }  public( ) {( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;( ) ;()"
      ],
      "function range": "135,5-149,5"
    },
    "Time_16_/src/main/java/org/joda/time/format/DateTimeFormatter.java_709-710": {
      "loc": "709-710",
      "input": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        <extra_id_0>\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
      "output": [
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iPivotYearinstant.setPivotYear(iPivot",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iPivotYear!= null)instant.setPivotYear",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear);instant.setPivotYear(iPivotYear); if (i",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear);if (iPivotYear!= null) {instant.setPivotYear(iPivotYear);instant.setPivotYear(iPivotYear);",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear);instant.setPivotYear(iPivotYear);instant.",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iPivotYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear);if (iPivotYear!= null) {instant.setPivotYear(iPivotYear);instant.setPivotYear(iPivotYear); if",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iDefaultYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setDefaultYear",
        "if (iOffsetParsed) {if (iLocale!= null) {instant.setLocale(iLocale);if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setPivotYear(iPivotYear); if (iPivotYear!= null)instant.setPivotYear(iPivotYear); if (iDefaultYear!= null)instant.setDefaultYear"
      ],
      "function range": "697,5-724,5"
    },
    "Time_19_/src/main/java/org/joda/time/DateTimeZone.java_900-901": {
      "loc": "900-901",
      "input": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal != offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n    <extra_id_0>\n        long prev = previousTransition(instantAdjusted);\n        if (prev < instantAdjusted) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            if (instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
      "output": [
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:// buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:// buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:// buggy line:} else if (offsetLocal{ // buggy line:if (offsetLocaloffsetLocal",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:if (offsetLocaloffset",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:if (offsetLocal >",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:if (offsetLocal <",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:if (offsetLocal > 0",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:if (offsetLocal < 0",
        "// buggy line:if (offsetLocal < 0){ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:} else if (offsetLocal{ // buggy line:{ // buggy line:} else if (offsetLocal{ // buggy line:if (instantLocaloffset"
      ],
      "function range": "880,5-911,5"
    }
  }
}