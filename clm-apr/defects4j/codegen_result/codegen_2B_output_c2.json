{
  "config": "CODEGEN_COMPLETE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "model": "codegen-2B-multi",
  "data": {
    "Chart_14_source/org/jfree/chart/plot/CategoryPlot.java_2166-2167": {
      "loc": "2166-2167",
      "input": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);",
      "output": [
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length-2; i>=0; i-=2) {\n    if (listeners[i]==MarkerChangeListener.class) {\n        // Lazily create the",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\n    if (listeners[i] == MarkerChangeListener.class) {\n        // Lazily create the event:",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\n        if (listeners[i] == MarkerChangeListener.class) {\n            // Lazily create the event:",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers.size() > 0) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers.size() > 0) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length-2; i>=0; i-=2) {\n    if (listeners[i]==MarkerChangeListener.class) {\n",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    public MarkerChangeListener[] getChangeListeners() {\n    return (MarkerChangeListener[]) this.listenerList.getListeners(\n            MarkerChangeListener.class);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = this.listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = this.listenerList.getListenerList();\n    MarkerChangeEvent e = null;\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\n        if (listeners[i] == MarkerChangeListener.class) {\n            if (e == null) {\n                e = new MarkerChangeEvent",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    protected void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length-2; i>=0; i-=2) {\n    if (listeners[i]==MarkerChangeListener.class) {\n        // Lazily create the",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers!= null) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers!= null) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    protected void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\n    if (listeners[i] == MarkerChangeListener.class) {\n        // Lazily create the event:",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers.size() > 0) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers.size() > 0) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\n        if (listeners[i] == MarkerChangeListener.class) {\n            //",
        "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n\t\tboolean notify) {\n    ArrayList markers;\n    if (layer == Layer.FOREGROUND) {\n        markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                index));\n    }\n    else {\n        markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                index));\n    }\n// buggy line:    boolean removed = markers.remove(marker);\n    boolean removed = markers.remove(marker);\n    if (removed && notify) {\n        fireChangeEvent();\n    }\n    return removed;\n    }\n\n    public void clearDomainMarkers(Layer layer) {\n    if (layer == null) {\n        throw new IllegalArgumentException(\"Null 'layer' argument.\");\n    }\n    if (layer == Layer.FOREGROUND) {\n        this.foregroundDomainMarkers.clear();\n    }\n    else {\n        this.backgroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void clearAllDomainMarkers() {\n    if (this.backgroundDomainMarkers.size() > 0) {\n        this.backgroundDomainMarkers.clear();\n    }\n    if (this.foregroundDomainMarkers.size() > 0) {\n        this.foregroundDomainMarkers.clear();\n    }\n    fireChangeEvent();\n    }\n\n    public void addChangeListener(MarkerChangeListener listener) {\n    this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n\n    public void removeChangeListener(MarkerChangeListener listener) {\n    this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n\n    private void fireChangeEvent() {\n    // Guaranteed to return a non-null array\n    Object[] listeners = listenerList.getListenerList();\n    // Process the listeners last to first, notifying\n    // those that are interested in this event\n    for (int i = listeners.length - 2; i >= 0; i -= 2) {\n    if (listeners[i] == MarkerChangeListener.class) {\n        //"
      ],
      "function range": "2155,5-2171,5"
    },
    "Closure_40_src/com/google/javascript/jscomp/NameAnalyzer.java_635-636": {
      "loc": "635-636",
      "input": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns != null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);",
      "output": [
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.prototypeNamespace, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(ns.name, true);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    NameInformation ns = createNameInformation(t, n, parent);\n    if (ns!= null) {\n      JsName name = getName(",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  }\n}\n\n  /**\n   * Records the assignment of a value to a global name.\n   *\n   * @param name Fully qualified name\n   * @param node The top node representing the name",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    NameInformation ns = createNameInformation(t, n, parent);\n    if (ns!= null) {\n      recordSet(ns.name,",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  }\n}\n\n  private void recordPrototypeSet(\n      String className, String prototypeProperty, Node n) {\n    JsName name = getName(className, true);\n    name.",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  }\n}\n\n  private void recordPrototypeSet(\n      String className, String prototypeProperty, Node n) {\n    JsName name = getName(className, true);\n    recordSet",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    NameInformation ns = createNameInformation(t, n, parent);\n    Preconditions.checkNotNull(ns);\n    if (ns.",
        "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    if (NodeUtil.isVarDeclaration(n)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      recordSet(ns.name, n);\n    } else if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns!= null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        recordSet(nameInfo.name, nameNode);\n      }\n    } else if (NodeUtil.isObjectLitKey(n, parent)) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      if (ns!= null) {\n        recordSet(ns.name, n);\n      }\n    }\n  }\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        recordSet(ns.name, nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns!= null && ns.onlyAffectsClassDef) {\n// buggy line:      JsName name = getName(ns.name, false);\n      JsName name = getName(nameNode.getString(), false);\n      if (name!= null) {\n        recordSet(name.name, nameNode);\n      }\n    }\n  } else if (n.isVar()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    recordSet("
      ],
      "function range": "595,5-642,5"
    },
    "Closure_46_src/com/google/javascript/rhino/jstype/RecordType.java_142-145": {
      "loc": "142-145",
      "input": "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }",
      "output": [
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getGreatestSubtype(that);\n// buggy line:  }\n// buggy line:  Record",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.getOwnPropertyNames().contains(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.getOwnPropertyNames().contains(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getGreatestSubtype(that);\n// buggy line",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getGreatestSubtype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType r",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.getOwnPropertyNames().contains(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.getOwnPropertyNames().contains(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getGreatestSubtype(that);\n  }\n  RecordType rt1 = (",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    if (!rt2.hasProperty(pname)) {\n      builder.addProperty(pname, rt1.getPropertyType(pname), null);\n    }\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getGreatestSubtype",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    if (!rt2.hasProperty(pname)) {\n      builder.addProperty(pname, rt1.getPropertyType(pname), null);\n    }\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getGreatestSubtype(that);\n  }\n  ",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (that.isRecordType()) {\n    RecordType rt1 = (RecordType) this;\n    RecordType rt2 = (RecordType) that;\n    RecordTypeBuilder builder =",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getGreatestSubtype(that);\n  }\n\n  RecordType rt1 = (RecordType) this;\n  RecordType r",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.hasProperty(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.hasProperty(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getGreatestSubtype(that);\n  }\n  RecordType thatRecord = (RecordType) that;\n  RecordTypeBuilder builder",
        "@Override\npublic JSType getLeastSupertype(JSType that) {\n// buggy line:  if (!that.isRecordType()) {\n// buggy line:    return super.getLeastSupertype(that);\n// buggy line:  }\n// buggy line:  RecordType rt1 = (RecordType) this;\n// buggy line:  RecordType rt2 = (RecordType) that;\n// buggy line:  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n// buggy line:  for (String pname : rt1.getOwnPropertyNames()) {\n// buggy line:    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n// buggy line:  }\n// buggy line:  for (String pname : rt2.getOwnPropertyNames()) {\n// buggy line:    if (!rt1.getOwnPropertyNames().contains(pname)) {\n// buggy line:      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n// buggy line:    }\n// buggy line:  }\n// buggy line:  return builder.build();\n  if (!that.isRecordType()) {\n    return super.getLeastSupertype(that);\n  }\n  RecordType rt1 = (RecordType) this;\n  RecordType rt2 = (RecordType) that;\n  RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n  for (String pname : rt1.getOwnPropertyNames()) {\n    builder.addProperty(pname, rt1.getPropertyType(pname), null);\n  }\n  for (String pname : rt2.getOwnPropertyNames()) {\n    if (!rt1.getOwnPropertyNames().contains(pname)) {\n      builder.addProperty(pname, rt2.getPropertyType(pname), null);\n    }\n  }\n  return builder.build();\n}\n\n@Override\npublic JSType getGreatestSubtype(JSType that) {\n  if (!that.isRecordType()) {\n    return super.getGreatestSubtype(that);\n  }\n\n  RecordType rt1 = ("
      ],
      "function range": "140,3-155,3"
    },
    "Closure_77_src/com/google/javascript/jscomp/CodeGenerator.java_967-967": {
      "loc": "967-967",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;",
      "output": [
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n        break;\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n        break;\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n        break;\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n        break;\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n        break;\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n      case '\\n': sb.append(\"\\\\n\"); break;\n// buggy line:      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\'': sb.append(singlequoteEscape); break;\n      case '\"': sb.append(doublequoteEscape); break;\n      case '\\\\': sb.append(backslashEscape); break;\n      default:\n        if (outputCharsetEncoder!= null) {\n          CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n          if (cb.hasArray()) {\n            sb.append(new String(cb.array(), cb.arrayOffset(), cb.length()));\n          } else {\n            sb.append(\"\\\\u\");\n            sb.append(Hex.encodeHex(cb.array(), cb.arrayOffset(), cb.length()));\n          }\n        } else {\n          sb.append(c);\n        }\n        break;\n    }\n  }\n  sb.append(quote);\n  return sb.toString();\n}\n\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file"
      ],
      "function range": "956,3-1025,3"
    },
    "Closure_119_src/com/google/javascript/jscomp/GlobalNamespace.java_366-366": {
      "loc": "366-366",
      "input": "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent != null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:",
      "output": [
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n// buggy line:          case Token.DEC:\n//",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n// buggy line:          case Token.DEC:\n          ",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n// buggy line:          case Token.DEC:\n        ",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n// buggy line          case Token.DEC:\n// buggy",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n// buggy line:          case Token.DEC:\n            ",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n//            type = getValueType(n.getFirst",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n//            type = Name.Type.OTHER;\n//",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n// buggy line          case Token.DEC:\n          default",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC: case Token.DEC:\n// buggy line:          case Token",
        "public void collect(JSModule module, Scope scope, Node n) {\n  Node parent = n.getParent();\n  String name;\n  boolean isSet = false;\n  Name.Type type = Name.Type.OTHER;\n  boolean isPropAssign = false;\n  switch (n.getType()) {\n    case Token.GETTER_DEF:\n    case Token.SETTER_DEF:\n    case Token.STRING_KEY:\n      name = null;\n      if (parent!= null && parent.isObjectLit()) {\n        name = getNameForObjLitKey(n);\n      }\n      if (name == null) {\n        return;\n      }\n      isSet = true;\n      switch (n.getType()) {\n        case Token.STRING_KEY:\n          type = getValueType(n.getFirstChild());\n          break;\n        case Token.GETTER_DEF:\n          type = Name.Type.GET;\n          break;\n        case Token.SETTER_DEF:\n          type = Name.Type.SET;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected:\" + n);\n      }\n      break;\n    case Token.NAME:\n      if (parent!= null) {\n        switch (parent.getType()) {\n          case Token.VAR:\n            isSet = true;\n            Node rvalue = n.getFirstChild();\n            type = rvalue == null? Name.Type.OTHER : getValueType(rvalue);\n            break;\n          case Token.ASSIGN:\n            if (parent.getFirstChild() == n) {\n              isSet = true;\n              type = getValueType(n.getNext());\n            }\n            break;\n          case Token.GETPROP:\n            return;\n          case Token.FUNCTION:\n            Node gramps = parent.getParent();\n            if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n              return;\n            }\n            isSet = true;\n            type = Name.Type.FUNCTION;\n            break;\n// buggy line:          case Token.INC:\n//      case Token.DEC:\n//          isSet"
      ],
      "function range": "306,5-430,5"
    },
    "Lang_10_src/main/java/org/apache/commons/lang3/time/FastDateParser.java_307-314": {
      "loc": "307-314",
      "input": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }",
      "output": [
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='&') {\n            regex.append(\"\\\\&\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='?') {\n            regex.append",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='?') {\n            regex.append(\"",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='\\\\') {\n            regex.append",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='?') {\n            regex.append",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='^') {\n            regex.append",
        "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n// buggy line:        if(Character.isWhitespace(c)) {\n// buggy line:            if(!wasWhite) {\n// buggy line:                wasWhite= true;\n// buggy line:                regex.append(\"\\\\s*+\");\n// buggy line:            }\n// buggy line:            continue;\n// buggy line:        }\n        wasWhite= false;\n        if(c=='\\\\') {\n            regex.append(\"\\\\\\\\\");\n        } else if(c=='^') {\n            regex.append(\"\\\\^\");\n        } else if(c=='$') {\n            regex.append(\"\\\\$\");\n        } else if(c=='.') {\n            regex.append(\"\\\\.\");\n        } else if(c=='*') {\n            regex.append(\"\\\\*\");\n        } else if(c=='+') {\n            regex.append(\"\\\\+\");\n        } else if(c=='?') {\n            regex.append(\"\\\\?\");\n        } else if(c=='[') {\n            regex.append(\"\\\\[\");\n        } else if(c==']') {\n            regex.append(\"\\\\]\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='{') {\n            regex.append(\"\\\\{\");\n        } else if(c=='}') {\n            regex.append(\"\\\\}\");\n        } else if(c=='|') {\n            regex.append(\"\\\\|\");\n        } else if(c=='(') {\n            regex.append(\"\\\\(\");\n        } else if(c==')') {\n            regex.append(\"\\\\)\");\n        } else if(c=='[' && unquote) {\n            regex"
      ],
      "function range": "303,5-343,5"
    },
    "Lang_38_src/java/org/apache/commons/lang3/time/FastDateFormat.java_872-872": {
      "loc": "872-872",
      "input": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();",
      "output": [
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algeb",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.alge",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.h",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks",
        "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n// buggy line:        calendar = (Calendar) calendar.clone();\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    return super.format(calendar, buf);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\nimport org.apache.hyracks.api."
      ],
      "function range": "870,5-876,5"
    },
    "Math_65_src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java_258-259": {
      "loc": "258-259",
      "input": "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];",
      "output": [
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEval",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IE",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateE",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregate",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTask",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScal",
        "public double getChiSquare() {\n    double chiSquare = 0;\n    for (int i = 0; i < rows; ++i) {\n        final double residual = residuals[i];\n// buggy line:        chiSquare += residual * residual / residualsWeights[i];\n        chiSquare += residual * residual / (residualsWeights[i] * residualsWeights[i]);\n    }\n    return chiSquare;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IS"
      ],
      "function range": "254,5-261,5"
    },
    "Math_79_src/main/java/org/apache/commons/math/util/MathUtils.java_1624-1625": {
      "loc": "1624-1625",
      "input": "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;",
      "output": [
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(long[] p1, long[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, int[] p2) {\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]) * (p1[i] - p2[i]);\n// }\n// return Math.sqrt(sum);\n// }\n\npublic static double distance(double[] p1, double[] p2, double[] p3) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length",
        "public static double distance(int[] p1, int[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(double[] p1, double[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(float[] p1, float[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += Math.pow(p1[i] - p2[i], 2);\n// }\n// return Math.sqrt(sum);\n        double sum = 0;\n        for (int i = 0; i < p1.length; i++) {\n            sum += Math.pow(p1[i] - p2[i], 2);\n        }\n        return Math.sqrt(sum);\n    }\n\n    public static double distance(long[] p1, long[] p2) {\n// buggy line:  int sum = 0;\n// for (int i = 0; i < p1.length; i++) {\n// sum += (p1[i] - p2[i]);\n// }\n// return Math.sq"
      ],
      "function range": "1623,5-1630,5"
    },
    "Math_98_src/java/org/apache/commons/math/linear/BigMatrixImpl.java_991-992": {
      "loc": "991-992",
      "input": "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length != this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];",
      "output": [
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double[] operate(double[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[][] preMultiply(BigDecimal[][] v) throws IllegalArgumentException {\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[][] getData() {\n    final BigDecimal[][] data = new BigDecimal[getRowDimension()][getColumnDimension()];\n    for (int i = 0; i < getRowDimension();",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[][] getData() {\n\n    final BigDecimal[][] data = new BigDecimal[getRowDimension()][getColumnDimension()];\n    for (int i = 0; i < getRowDimension();",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[][] preMultiply(BigDecimal[][] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"matrix has wrong",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigMatrix transpose() {\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigMatrix out = new BigMatrixImpl(nCols, nR",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[][] getData() {\n    final BigDecimal[][] data = new BigDecimal[getRowDimension()][getColumnDimension()];\n    for (int i = 0; i < data.length; ++",
        "public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getColumnDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n// buggy line:    final BigDecimal[] out = new BigDecimal[v.length];\n    final BigDecimal[] out = new BigDecimal[nCols];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {\n    if (v.length!= this.getRowDimension()) {\n        throw new IllegalArgumentException(\"vector has wrong length\");\n    }\n    final int nRows = this.getRowDimension();\n    final int nCols = this.getColumnDimension();\n    final BigDecimal[] out = new BigDecimal[nRows];\n    for (int row = 0; row < nRows; row++) {\n        BigDecimal sum = BigDecimal.ZERO;\n        for (int col = 0; col < nCols; col++) {\n            sum = sum.add(this.getEntry(row, col).multiply(v[col]));\n        }\n        out[row] = sum;\n    }\n    return out;\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public BigDecimal[][] getData() {\n\n    final BigDecimal[][] data = new BigDecimal[getRowDimension()][getColumnDimension()];\n    for (int i = 0; i < data.length; ++"
      ],
      "function range": "985,5-1000,5"
    },
    "Chart_1_/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java_1797-1798": {
      "loc": "1797-1798",
      "input": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset != null) {",
      "output": [
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANT",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANT",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Tests this renderer for equality with an arbitrary object.\n *\n * @param obj  the object (<code>null</code> permitted).\n *\n * @return A boolean.\n */\npublic boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof AbstractCategoryItemRenderer)) {\n        return false;\n    }\n    AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n    if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n            that.itemLabelGeneratorList)) {\n        return false;\n    }\n    if (!ObjectUtilities.",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Tests this renderer for equality with an arbitrary object.\n *\n * @param obj  the object (<code>null</code> permitted).\n *\n * @return A boolean.\n */\npublic boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof LineAndShapeRenderer)) {\n        return false;\n    }\n    LineAndShapeRenderer that = (LineAndShapeRenderer) obj;\n    if (this.baseLinesVisible!= that.baseLinesVisible) {\n        return false;\n    }\n    if (this.linesVisible!= that.linesVisible)",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getColumnKey(category));\n                item.setSeriesIndex(series);\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Tests this renderer for equality with an arbitrary object.\n *\n * @param obj  the object (<code>null</code> permitted).\n *\n * @return A boolean.\n */\npublic boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof AbstractCategoryItemRenderer)) {\n        return false;\n    }\n    AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n    if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n            that.itemLabelGeneratorList)) {\n        return false;\n    }\n    if (!ObjectUtilities.",
        "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n// buggy line:    if (dataset!= null) {\n    if (dataset!= null) {\n        int seriesCount = dataset.getRowCount();\n        int categoryCount = dataset.getColumnCount();\n        for (int series = 0; series < seriesCount; series++) {\n            for (int category = 0; category < categoryCount; category++) {\n                Paint paint = lookupSeriesPaint(series);\n                Stroke stroke = lookupSeriesStroke(series);\n                LegendItem item = new LegendItem(\n                    dataset.getRowKey(series).toString(),\n                    dataset.getColumnKey(category).toString(),\n                    null,\n                    null,\n                    paint,\n                    stroke\n                );\n                item.setDataset(dataset);\n                item.setSeriesKey(dataset.getRowKey(series));\n                item.setSeriesIndex(series);\n                item.setDataset(dataset);\n                item.setSeriesIndex(series);\n                item.setSeriesKey(dataset.getRowKey(series));\n                result.add(item);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Tests this renderer for equality with an arbitrary object.\n *\n * @param obj  the object (<code>null</code> permitted).\n *\n * @return A boolean.\n */\npublic boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof LineAndShapeRenderer)) {\n        return false;\n    }\n    LineAndShapeRenderer that = (LineAndShapeRenderer) obj;\n    if (this.baseLinesVisible!= that.baseLinesVisible) {\n        return false;\n    }\n    if (!ObjectUtilities.equal(this.seriesLinesV"
      ],
      "function range": "1790,5-1822,5"
    },
    "Chart_3_/source/org/jfree/data/time/TimeSeries.java_1057-1058": {
      "loc": "1057-1058",
      "input": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();",
      "output": [
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algeb",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, this.data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.al",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.al",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, this.data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, this.data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, this.data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.alge",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.h",
        "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n// buggy line:    copy.data = new java.util.ArrayList();\n    copy.data = new ArrayList<>(end - start);\n    for (int i = start; i < end; i++) {\n        copy.data.add(i, data.get(i));\n    }\n    return copy;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.fun"
      ],
      "function range": "1048,5-1072,5"
    },
    "Chart_6_/source/org/jfree/chart/util/ShapeList.java_111-112": {
      "loc": "111-112",
      "input": "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);",
      "output": [
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregate",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEval",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdent",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateE",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext",
        "public boolean equals(Object obj) {\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n// buggy line:    return super.equals(obj);\n    ShapeList other = (ShapeList) obj;\n    if (this.size()!= other.size()) {\n        return false;\n    }\n    for (int i = 0; i < this.size(); i++) {\n        if (!this.get(i).equals(other.get(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEval"
      ],
      "function range": "103,5-113,5"
    },
    "Chart_8_/source/org/jfree/data/time/Week.java_175-176": {
      "loc": "175-176",
      "input": "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
      "output": [
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        ParamChecks.nullNotPermitted(time, \"time\");\n        ParamChecks.nullNotPermitted(zone, \"zone\");\n        ParamChecks.nullNotPermitted(locale, \"locale\");\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n\n    /**\n     * Returns the last millisecond of the week.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the calendar instance passed",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        ParamChecks.nullNotPermitted(time, \"time\");\n        ParamChecks.nullNotPermitted(zone, \"zone\");\n        ParamChecks.nullNotPermitted(locale, \"locale\");\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    @Override\n    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n\n    /**\n     * Returns the last millisecond of the week.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year (never <code>null</code>).\n     */\n    public Year getYear() {\n        return new Year(this.year);\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    public long getFirstMillisecond() {\n        return this.firstMill",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n\n    /**\n     *",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year (never <code>null</code>).\n     */\n    public Year getYear() {\n        return new Year(this.year);\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    @Override\n    public long getFirstMillisecond() {\n        return",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    @Override\n    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n\n    ",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        ParamChecks.nullNotPermitted(time, \"time\");\n        ParamChecks.nullNotPermitted(zone, \"zone\");\n        ParamChecks.nullNotPermitted(locale, \"locale\");\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    @Override\n    public Date getFirstMillisecond() {\n        return new Date(this.firstMillisecond);\n    }\n\n    /**\n     * Returns the last millisecond of the week.  This will be\n     * determined relative to the time zone specified in the constructor, or\n",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year (never <code>null</code>).\n     */\n    public Year getYear() {\n        return new Year(this.year);\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    @Override\n    public Date getFirstMillisecond() {\n        return",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        ParamChecks.nullNotPermitted(time, \"time\");\n        ParamChecks.nullNotPermitted(zone, \"zone\");\n        ParamChecks.nullNotPermitted(locale, \"locale\");\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    public Date getFirstMillisecond() {\n        return new Date(this.firstMillisecond);\n    }\n\n    /**\n     * Returns the last millisecond of the week.  This will be\n     * determined relative to the time zone specified in the constructor, or\n     * in the",
        "public Week(Date time, TimeZone zone) {\n// buggy line:    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n        this(time, zone, Locale.getDefault());\n    }\n\n    /**\n     * Creates a new week.\n     *\n     * @param time  the time (<code>null</code> not permitted).\n     * @param zone  the time zone (<code>null</code> not permitted).\n     * @param locale  the locale (<code>null</code> not permitted).\n     */\n    public Week(Date time, TimeZone zone, Locale locale) {\n        if (time == null) {\n            throw new IllegalArgumentException(\"Null 'time' argument.\");\n        }\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        if (locale == null) {\n            throw new IllegalArgumentException(\"Null 'locale' argument.\");\n        }\n        Calendar calendar = Calendar.getInstance(zone, locale);\n        calendar.setTime(time);\n        this.week = calendar.get(Calendar.WEEK_OF_YEAR);\n        this.year = calendar.get(Calendar.YEAR);\n    }\n\n    /**\n     * Returns the year.\n     *\n     * @return The year.\n     */\n    public int getYear() {\n        return this.year;\n    }\n\n    /**\n     * Returns the week.\n     *\n     * @return The week.\n     */\n    public int getWeek() {\n        return this.week;\n    }\n\n    /**\n     * Returns the first millisecond of the week.  This will be determined\n     * relative to the time zone specified in the constructor, or in the\n     * calendar instance passed in the most recent call to the\n     * {@link #peg(Calendar)} method.\n     *\n     * @return The first millisecond of the week.\n     *\n     * @see #getLastMillisecond()\n     */\n    @Override\n    public Date getFirstMillisecond() {\n        return new Date(this.firstMillisecond);\n    "
      ],
      "function range": "173,5-176,5"
    },
    "Chart_9_/source/org/jfree/data/time/TimeSeries.java_944-945": {
      "loc": "944-945",
      "input": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {",
      "output": [
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, null, Double.NaN));\n        clone.data.add(new TimeSeriesDataItem(end, null, Double.NaN));\n    ",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, Double.NaN));\n        clone.data.add(new TimeSeriesDataItem(end, Double.NaN));\n    }\n    return",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, 0.0, Double.NaN));\n        clone.data.add(new TimeSeriesDataItem(end, 0.0, Double.Na",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        clone.data.add(new TimeSeriesDataItem(end.getFirstMillisecond(), \n                end.getLastMillisecond()));\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start.getFirstMillisecond",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        clone.data.add(new TimeSeriesDataItem(end.getFirstMillisecond(), \n                end.getLastMillisecond()));\n    }\n    if (emptyRange) {\n        clone.data.remove(clone.data.size() - 1);\n    }\n",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        clone.data.add(new TimeSeriesDataItem(end.getFirstMillisecond(), \n                end.getLastMillisecond()));\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start.getLastMillisecond",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, 0.0, Double.NaN));\n    }\n    return clone;\n}\n\n}\n<|java|>/*\n *",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, Double.NaN));\n        clone.data.add(new TimeSeriesDataItem(end, Double.NaN));\n    }\n    \n",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, null, Double.NaN));\n        clone.data.add(new TimeSeriesDataItem(end, null, Double.NaN));\n        ",
        "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  \n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             \n        endIndex = -(endIndex + 1); \n        endIndex = endIndex - 1;    \n    }\n// buggy line:    if (endIndex < 0) {\n// buggy line:        endIndex = this.data.size() - 1;\n// buggy line:    }\n    if (endIndex >= this.data.size()) {\n        endIndex = this.data.size() - 1;\n        emptyRange = true;\n    }\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item \n                = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem cloneItem \n                = (TimeSeriesDataItem) item.clone();\n            clone.data.add(cloneItem);\n        }\n    }\n    else {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        clone.data.add(new TimeSeriesDataItem(start, 0.0, Double.NaN));\n    }\n    return clone;\n}\n\n}\n<|java|>package com."
      ],
      "function range": "918,5-956,5"
    },
    "Chart_10_/source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java_65-66": {
      "loc": "65-66",
      "input": "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText",
      "output": [
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksData",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScal",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.ex",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracks",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport org.apache.hyr",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor extends AbstractAggregateFunctionDynamic",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport",
        "public String generateToolTipFragment(String toolTipText) {\n// buggy line:    return \" title=\\\"\" + toolTipText + \"\\\"\";\n        return \" title=\\\"\" + toolTipText + \"\\\"\";\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;"
      ],
      "function range": "64,5-67,5"
    },
    "Chart_11_/source/org/jfree/chart/util/ShapeUtilities.java_275-276": {
      "loc": "275-276",
      "input": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);",
      "output": [
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.druid",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.table.",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.runtime.",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.h",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.table.runtime",
        "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule()!= p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n// buggy line:    PathIterator iterator2 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    float[] coords1 = new float[6];\n    float[] coords2 = new float[6];\n    while (!iterator1.isDone()) {\n        iterator1.currentSegment(coords1);\n        iterator2.currentSegment(coords2);\n        if (coords1.length!= coords2.length) {\n            return false;\n        }\n        for (int i = 0; i < coords1.length; i++) {\n            if (coords1[i]!= coords2[i]) {\n                return false;\n            }\n        }\n        iterator1.next();\n        iterator2.next();\n    }\n    return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.table.plan"
      ],
      "function range": "264,5-296,5"
    },
    "Chart_12_/source/org/jfree/chart/plot/MultiplePiePlot.java_145-146": {
      "loc": "145-146",
      "input": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;",
      "output": [
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, boolean legend, PlotOrientation orientation) {\n    super(label, legend, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, boolean legend, PlotOrientation orientation) {\n    super(label, legend,",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation, String label) {\n    super(orientation, label);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation, String label) {\n    super(orientation, label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.datas",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation, String label) {\n    super(label, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation, String label) {\n    super(label, orientation);\n    this.dataset =",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, boolean legend, PlotOrientation orientation) {\n    super(label, legend, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation, String label) {\n    super(orientation, label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation, String label) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dat",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation,\n      Rectangle2D frame) {\n    super(label, orientation, frame);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation, String label) {\n    super(label, orientation);\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset =",
        "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset) {\n    super();\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, PlotOrientation orientation) {\n    super(orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label) {\n    super(label);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label) {\n    super(label);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n// buggy line:    this.dataset = dataset;\n    this.dataset = new PieDataset();\n    this.dataset.setUnderlyingDataset(dataset);\n  }\n\n  public MultiplePiePlot(PieDataset dataset, String label, PlotOrientation orientation) {\n    super(label, orientation);\n    this.dataset = dataset;\n  }\n\n  public MultiplePiePlot(CategoryDataset dataset, String label, PlotOrientation orientation,\n      boolean legend, boolean tooltips, boolean urls) {\n    super(label, orientation, legend, tooltips, urls);\n// buggy line:    this.dataset"
      ],
      "function range": "143,5-158,5"
    },
    "Chart_13_/source/org/jfree/chart/block/BorderArrangement.java_455-456": {
      "loc": "455-456",
      "input": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),",
      "output": [
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(0.0, constraint.getWidth()",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(constraint.getWidth() - w",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]), \n                new Range(0.0, constraint.getWidth",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(0.0,\n                constraint",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                        new Range(0.0, constraint.getWidth()",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(-w[2], constraint.getWidth()",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(0.0,\n                        constraint",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(0.0, (constraint.",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n            new Range(0.0, constraint.getWidth()",
        "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock!= null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock!= null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock!= null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock!= null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n// buggy line:                new Range(0.0, constraint.getWidth() - w[2]),\n                new Range(0.0, Math.max(con"
      ],
      "function range": "422,5-489,5"
    },
    "Chart_17_/source/org/jfree/data/time/TimeSeries.java_857-858": {
      "loc": "857-858",
      "input": "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);",
      "output": [
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n            clone.setValueAt(getValueAt(i), i, 24",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n\n    /**\n     *",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n}\n<|",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n\n}\n<",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n\n    private Object createCopy",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n\n    @Override\n    ",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n\n    public Object createCopy",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n    \n    /**\n",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n    \n    private Object",
        "public Object clone() throws CloneNotSupportedException {\n// buggy line:    Object clone = createCopy(0, getItemCount() - 1);\n        Object clone = createCopy(0, getItemCount());\n        for (int i = 0; i < getItemCount(); i++) {\n            clone.setValueAt(getValueAt(i), i, 0);\n            clone.setValueAt(getValueAt(i), i, 1);\n            clone.setValueAt(getValueAt(i), i, 2);\n            clone.setValueAt(getValueAt(i), i, 3);\n            clone.setValueAt(getValueAt(i), i, 4);\n            clone.setValueAt(getValueAt(i), i, 5);\n            clone.setValueAt(getValueAt(i), i, 6);\n            clone.setValueAt(getValueAt(i), i, 7);\n            clone.setValueAt(getValueAt(i), i, 8);\n            clone.setValueAt(getValueAt(i), i, 9);\n            clone.setValueAt(getValueAt(i), i, 10);\n            clone.setValueAt(getValueAt(i), i, 11);\n            clone.setValueAt(getValueAt(i), i, 12);\n            clone.setValueAt(getValueAt(i), i, 13);\n            clone.setValueAt(getValueAt(i), i, 14);\n            clone.setValueAt(getValueAt(i), i, 15);\n            clone.setValueAt(getValueAt(i), i, 16);\n            clone.setValueAt(getValueAt(i), i, 17);\n            clone.setValueAt(getValueAt(i), i, 18);\n            clone.setValueAt(getValueAt(i), i, 19);\n            clone.setValueAt(getValueAt(i), i, 20);\n            clone.setValueAt(getValueAt(i), i, 21);\n            clone.setValueAt(getValueAt(i), i, 22);\n            clone.setValueAt(getValueAt(i), i, 23);\n        }\n        return clone;\n    }\n    \n    public Object"
      ],
      "function range": "856,5-859,5"
    },
    "Chart_20_/source/org/jfree/chart/plot/ValueMarker.java_95-96": {
      "loc": "95-96",
      "input": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);",
      "output": [
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Tests this instance for equality with an arbitrary object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ValueMarker)) {\n            return false;\n        }\n        ValueMarker that = (ValueMarker) obj;\n        if (this.value!= that.value) {\n            return false;\n",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     */\n    public void setPaint(Paint paint) {\n        this.paint = paint;\n    }\n\n    /**\n     * Sets the stroke.\n     *\n     * @",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Returns the alpha.\n     *\n     * @return The alpha.\n     */\n    public float getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     ",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     */\n    public void setPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint.\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke.\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint.\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke.\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Returns the alpha.\n     *\n     * @return The alpha.\n     */\n    public float getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint.\n     */\n    public void setPaint(Paint paint) {\n        this.paint = paint;\n    }\n\n    /**\n     * Sets the stroke.\n     *\n     * @param stroke",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Returns the alpha.\n     *\n     * @return The alpha.\n     */\n    public float getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     */",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Tests this object for equality with an arbitrary object.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     */\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ValueMarker)) {\n            return false;\n        }\n        ValueMarker that = (ValueMarker) obj;\n        if (this.value!= that.value) {\n            return false;\n",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The outline paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The outline stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     */\n    public void setPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.paint",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Returns the alpha.\n     *\n     * @return The alpha.\n     */\n    public float getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> permitted).\n     */\n    ",
        "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n// buggy line:    super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n    }\n\n    /**\n     * Returns the value.\n     *\n     * @return The value.\n     */\n    public double getValue() {\n        return this.value;\n    }\n\n    /**\n     * Returns the paint.\n     *\n     * @return The paint (never <code>null</code>).\n     */\n    public Paint getPaint() {\n        return this.paint;\n    }\n\n    /**\n     * Returns the stroke.\n     *\n     * @return The stroke (never <code>null</code>).\n     */\n    public Stroke getStroke() {\n        return this.stroke;\n    }\n\n    /**\n     * Returns the outline paint.\n     *\n     * @return The paint (possibly <code>null</code>).\n     */\n    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n\n    /**\n     * Returns the outline stroke.\n     *\n     * @return The stroke (possibly <code>null</code>).\n     */\n    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n\n    /**\n     * Returns the alpha.\n     *\n     * @return The alpha.\n     */\n    public float getAlpha() {\n        return this.alpha;\n    }\n\n    /**\n     * Sets the value.\n     *\n     * @param value  the value.\n     */\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    /**\n     * Sets the paint.\n     *\n     * @param paint  the paint (<code>null</code> not permitted).\n     */\n"
      ],
      "function range": "93,5-97,5"
    },
    "Chart_24_/source/org/jfree/chart/renderer/GrayPaintScale.java_126-127": {
      "loc": "126-127",
      "input": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound ",
      "output": [
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.h",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algeb",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n\npublic class NumericAddDescriptor extends",
        "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n// buggy line:    int g = (int) ((value - this.lowerBound) / (this.upperBound \n// - this.lowerBound) * (this.gradient.length - 1));\n    int g = (int) ((value - this.lowerBound) / (this.upperBound - this.lowerBound) * (this.gradient.length - 1));\n    return this.gradient[g];\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.core"
      ],
      "function range": "123,5-129,5"
    },
    "Cli_4_/src/java/org/apache/commons/cli/Parser.java_298-299": {
      "loc": "298-299",
      "input": "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();",
      "output": [
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.h",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\n",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyr",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.hyr",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.h",
        "private void checkRequiredOptions()\n    throws MissingOptionException\n{\n    if (requiredOptions.size() > 0)\n    {\n        Iterator iter = requiredOptions.iterator();\n// buggy line:        StringBuffer buff = new StringBuffer();\n        while (iter.hasNext())\n        {\n            String option = (String)iter.next();\n            if (options.get(option) == null)\n            {\n                throw new MissingOptionException(option);\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime"
      ],
      "function range": "290,5-309,5"
    },
    "Cli_8_/src/java/org/apache/commons/cli/HelpFormatter.java_812-813": {
      "loc": "812-813",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);",
      "output": [
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\n",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.AqlSerializerDeserializerProvider",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;\n",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCache;\nimport org.apache.ignite.cache.CacheAtomicityMode;\nimport org.apache.ignite",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde.ADoubleSerial",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding = createPadding(nextLineTabStop);\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n// buggy line:        pos = findWrapPos(text, width, nextLineTabStop);\n        pos = findWrapPos(text, width, 0);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde.AInterval"
      ],
      "function range": "792,5-823,5"
    },
    "Cli_11_/src/java/org/apache/commons/cli/HelpFormatter.java_632-633": {
      "loc": "632-633",
      "input": "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt() != null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName() != null))",
      "output": [
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyr",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.Abstract",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.asterix",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.Vectorized",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag",
        "private static void appendOption(final StringBuffer buff, \n                                 final Option option, \n                                 final boolean required)\n{\n    if (!required)\n    {\n        buff.append(\"[\");\n    }\n    if (option.getOpt()!= null)\n    {\n        buff.append(\"-\").append(option.getOpt());\n    }\n    else\n    {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n// buggy line:    if (option.hasArg() && (option.getArgName()!= null))\n    if (option.hasArg() && option.getArgName()!= null)\n    {\n        buff.append(\" \").append(option.getArgName());\n    }\n    if (!required)\n    {\n        buff.append(\"]\");\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.al"
      ],
      "function range": "613,5-642,5"
    },
    "Cli_24_/src/java/org/apache/commons/cli/HelpFormatter.java_825-827": {
      "loc": "825-827",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");",
      "output": [
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNew",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return s",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(r",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return s",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos)));\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return s",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return s",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n// buggy line:                                        \"- no room for the description\");\n        return sb;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos)));\n        text = text.substring(pos);\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text));\n            return sb;\n        }\n"
      ],
      "function range": "809,5-852,5"
    },
    "Cli_25_/src/java/org/apache/commons/cli/HelpFormatter.java_825-826": {
      "loc": "825-826",
      "input": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;",
      "output": [
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\n",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions.records;",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed.dht;\n\nimport org",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.*",
        "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop >= width)\n    {\n// buggy line:        nextLineTabStop = width - 1;\n        nextLineTabStop = width - 2;\n    }\n    while (text.length() > 0)\n    {\n        pos = findWrapPos(text, width, nextLineTabStop);\n        if (pos == -1)\n        {\n            sb.append(rtrim(text)).append(defaultNewLine);\n            return sb;\n        }\n        else\n        {\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n            text = text.substring(pos);\n            nextLineTabStop = width - 1;\n        }\n    }\n    return sb;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions.records"
      ],
      "function range": "809,5-851,5"
    },
    "Cli_28_/src/java/org/apache/commons/cli/Parser.java_290-291": {
      "loc": "290-291",
      "input": "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;",
      "output": [
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\n",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescript",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde.",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\n",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.AqlSerializerDes",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache",
        "protected void processProperties(Properties properties)\n{\n    if (properties == null)\n    {\n        return;\n    }\n    for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n    {\n        String option = e.nextElement().toString();\n        if (!cmd.hasOption(option))\n        {\n            Option opt = getOptions().getOption(option);\n            String value = properties.getProperty(option);\n            if (opt.hasArg())\n            {\n                if (opt.getValues() == null || opt.getValues().length == 0)\n                {\n                    try\n                    {\n                        opt.addValueForProcessing(value);\n                    }\n                    catch (RuntimeException exp)\n                    {\n                    }\n                }\n            }\n            else if (!(\"yes\".equalsIgnoreCase(value)\n                    || \"true\".equalsIgnoreCase(value)\n                    || \"1\".equalsIgnoreCase(value)))\n            {\n// buggy line:                break;\n            }\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport"
      ],
      "function range": "252,5-296,5"
    },
    "Cli_32_/src/main/java/org/apache/commons/cli/HelpFormatter.java_937-942": {
      "loc": "937-942",
      "input": "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')\n            && (c != '\\n') && (c != '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')\n// buggy line:           && (c != '\\n') && (c != '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        ",
      "output": [
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    else\n    {\n        return -1;\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    else\n    {\n        return -1;\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\");",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    else\n    {\n        return -1;\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License,",
        "protected int findWrapPos(String text, int width, int startPos)\n{\n    int pos;\n    if (((pos = text.indexOf('\\n', startPos))!= -1 && pos <= width)\n            || ((pos = text.indexOf('\\t', startPos))!= -1 && pos <= width))\n    {\n        return pos + 1;\n    }\n    else if (startPos + width >= text.length())\n    {\n        return -1;\n    }\n    pos = startPos + width;\n    char c;\n    while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        --pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    pos = startPos + width;\n// buggy line:    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        ++pos;\n// buggy line:    }        while ((pos >= startPos) && ((c = text.charAt(pos))!='')\n// buggy line:           && (c!= '\\n') && (c!= '\\r'))\n// buggy line:    {\n// buggy line:        --pos;\n// buggy line:    }\n    while ((pos <= text.length()) && ((c = text.charAt(pos))!='')\n            && (c!= '\\n') && (c!= '\\r'))\n    {\n        ++pos;\n    }\n    if (pos > startPos)\n    {\n        return pos;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License"
      ],
      "function range": "902,5-943,5"
    },
    "Cli_40_/src/main/java/org/apache/commons/cli/TypeHandler.java_103-104": {
      "loc": "103-104",
      "input": "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;",
      "output": [
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software",
        "@SuppressWarnings(\"unchecked\") \npublic static <T> T createValue(final String str, final Class<T> clazz) throws ParseException\n{\n    if (PatternOptionBuilder.STRING_VALUE == clazz)\n    {\n        return (T) str;\n    }\n    else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n    {\n        return (T) createObject(str);\n    }\n    else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n    {\n        return (T) createNumber(str);\n    }\n    else if (PatternOptionBuilder.DATE_VALUE == clazz)\n    {\n        return (T) createDate(str);\n    }\n    else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n    {\n        return (T) createClass(str);\n    }\n    else if (PatternOptionBuilder.FILE_VALUE == clazz)\n    {\n        return (T) createFile(str);\n    }\n    else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n    {\n        return (T) openFile(str);\n    }\n    else if (PatternOptionBuilder.FILES_VALUE == clazz)\n    {\n        return (T) createFiles(str);\n    }\n    else if (PatternOptionBuilder.URL_VALUE == clazz)\n    {\n        return (T) createURL(str);\n    }\n    else\n    {\n// buggy line:        return null;\n        return (T) createObject(str);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,"
      ],
      "function range": "62,5-105,5"
    },
    "Closure_1_/src/com/google/javascript/jscomp/RemoveUnusedVars.java_379-380": {
      "loc": "379-380",
      "input": "private void removeUnreferencedFunctionArgs(Scope fnScope) {",
      "output": [
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refCollection = fnScope.getReferences(arg);\n      if (refCollection.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refs = fnScope.getReferences(arg);\n      if (refs.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refCollection = fnScope.getReferences(arg);\n      if (refCollection.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalar",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refCollection = fnScope.getReferences(arg);\n      if (refCollection.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\n",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refs = fnScope.getReferences(arg);\n      if (refs.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalar",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refs = fnScope.getReferences(arg);\n      if (refs.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\n",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refCollection = fnScope.getReferences(arg);\n      if (refCollection.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refCollection = fnScope.getReferences(arg);\n      if (refCollection.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refs = fnScope.getReferences(arg);\n      if (refs.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Iterator<Var> argIt = fnScope.getArguments().iterator();\n    while (argIt.hasNext()) {\n      Var arg = argIt.next();\n      ReferenceCollection refCollection = fnScope.getReferences(arg);\n      if (refCollection.isEmpty()) {\n        argIt.remove();\n      }\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEval"
      ],
      "function range": "369,3-406,3"
    },
    "Closure_5_/src/com/google/javascript/jscomp/InlineObjectLiterals.java_176-177": {
      "loc": "176-177",
      "input": "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }",
      "output": [
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ret = true;\n  return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ret = true;\n  return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ret = true;\n  return ret;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ret = true;\n  return ret;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ret = true;\n  return ret;\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ret = true;\n  return ret;\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file",
        "private boolean isInlinableObject(List<Reference> refs) {\n  boolean ret = false;\n  Set<String> validProperties = Sets.newHashSet();\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        validProperties.add(gramps.getString());\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      validProperties.add(parent.getString());\n    } else {\n      return false;\n    }\n  }\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      } else if (gramps.isName()) {\n        if (validProperties.contains(gramps.getString())) {\n          continue;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else if (parent.isName()) {\n      if (validProperties.contains(parent.getString())) {\n        continue;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You"
      ],
      "function range": "155,5-253,5"
    },
    "Closure_10_/src/com/google/javascript/jscomp/NodeUtil.java_1417-1418": {
      "loc": "1417-1418",
      "input": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
      "output": [
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeUndefined(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_UNDEFINED_PREDICATE);\n    } else {\n      return n.isUndefined();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeVoid(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_VOID_PREDICATE);\n    } else {\n      return n.isVoid();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static boolean may",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeUndefined(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_UNDEFINED_PREDICATE);\n    } else {\n      return n.isUndefined();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static boolean mayBeObjectLiteral(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_LITERAL_PREDICATE);\n    } else {\n      return n.isObjectLit();\n    }\n  ",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeVoid(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_VOID_PREDICATE);\n    } else {\n      return n.isVoid();\n    }\n  }\n\n  private static boolean may",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeUndefined(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_UNDEFINED_PREDICATE);\n    } else {\n      return n.isUndefined();\n    }\n  }\n\n  private static boolean mayBeVoid(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_VOID_PREDICATE);\n    } else {\n      return n.isVoid();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  ",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static boolean mayBeObjectLiteral(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECTLIT_PREDICATE);\n    } else {\n      return n.isObjectLit();\n    }\n  }\n\n",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeVoid(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_VOID_PREDICATE);\n    } else {\n      return n.isVoid();\n    }\n  }\n\n  private static boolean all",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeVoid(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_VOID_PREDICATE);\n    } else {\n      return n.isVoid();\n    }\n  }\n\n  private static boolean mayBeUndefined(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_UNDEFINED_PREDICATE);\n    } else {\n      return n.isUndefined();\n    }\n  }\n\n  private static boolean mayBeConstructor(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_CONSTRUCTOR_PREDICATE);\n    } else {\n      return n.isConstructor();\n    }\n  }",
        "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n// buggy line:    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    return allResultsMatch(n, new Predicate<Node>() {\n      @Override\n      public boolean apply(Node input) {\n        return input.isString();\n      }\n    });\n  } else {\n    return n.isString();\n  }\n}\n\n  private static boolean mayBeNumber(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NUMBER_PREDICATE);\n    } else {\n      return n.isNumber();\n    }\n  }\n\n  private static boolean mayBeBoolean(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_BOOLEAN_PREDICATE);\n    } else {\n      return n.isBoolean();\n    }\n  }\n\n  private static boolean mayBeNull(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_NULL_PREDICATE);\n    } else {\n      return n.isNull();\n    }\n  }\n\n  private static boolean mayBeFunction(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_FUNCTION_PREDICATE);\n    } else {\n      return n.isFunction();\n    }\n  }\n\n  private static boolean mayBeObject(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_OBJECT_PREDICATE);\n    } else {\n      return n.isObject();\n    }\n  }\n\n  private static boolean mayBeArray(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_ARRAY_PREDICATE);\n    } else {\n      return n.isArray();\n    }\n  }\n}\n<|java|"
      ],
      "function range": "1415,3-1421,3"
    },
    "Closure_11_/src/com/google/javascript/jscomp/TypeCheck.java_1314-1316": {
      "loc": "1314-1316",
      "input": "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType() != null && parent.isAssign()) {\n// buggy line:    return;",
      "output": [
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions.records;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCache;\nimport org.apache.ignite.cache",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.*;\nimport org.apache.ignite.cache.*;\nimport org.apache.ignite.configuration.*;",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), getJSType(objNode));\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumn",
        "private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else if (childType.isStruct()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"struct\");\n// buggy line:  } else if (n.getJSType()!= null && parent.isAssign()) {\n// buggy line:    return;\n  } else {\n    validator.expectCanAssignToPropertyOf(t, n, getJSType(n.getFirstChild()),\n        property.getString(), childType);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\n\nimport org.apache.asterix.formats.nontagged.Serializer"
      ],
      "function range": "1303,3-1321,3"
    },
    "Closure_15_/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java_102-103": {
      "loc": "102-103",
      "input": "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }",
      "output": [
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.h",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyr",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n\npublic class",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\n",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.",
        "@Override\npublic boolean apply(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n  for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n\npublic class N"
      ],
      "function range": "83,7-109,7"
    },
    "Closure_18_/src/com/google/javascript/jscomp/Compiler.java_1288-1289": {
      "loc": "1288-1289",
      "input": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {",
      "output": [
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n\n",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (n == null) {\n        continue;\n      }\n",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement()",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n    }\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement() &&!input.isExtern()) {\n        DependencyOptions depOptions",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n        if (hasErrors()) {\n          return null;\n        }\n      }\n    }\n    if (options.rewritePolyfills) {\n      rewritePolyfills();\n      if (",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n      if (options.dependencyOptions.needsManagement()) {\n        dependencyOptions = depOptions;\n      }\n    }\n    for (CompilerInput input : inputs) {\n      if (",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n      if (options.dependencyOptions.needsManagement()) {\n        dependencyOptions = depOptions;\n      }\n    }\n    for (CompilerInput input : inputs) {\n      Node n",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    hoistExterns(externsRoot);\n    boolean staleInputs = false;\n// buggy line:    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n    if (options.dependencyOptions.needsManagement() && options.closurePass) {\n      DependencyOptions depOptions = options.dependencyOptions;\n      staleInputs = processClosurePrimitives(depOptions);\n      if (hasErrors()) {\n        return null;\n      }\n      if (options.dependencyOptions.processCommonJSModules) {\n        rewriteCommonJsModules(depOptions);\n      }\n      if (options.dependencyOptions.needsManagement()) {\n        dependencyOptions = depOptions;\n      }\n    }\n    if (options.rewritePolyfills) {\n      rew"
      ],
      "function range": "1240,3-1362,3"
    },
    "Closure_20_/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java_220-221": {
      "loc": "220-221",
      "input": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value != null) {",
      "output": [
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = NodeUtil.newStringNode(value.getString());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = IR.string(\"'\" + value.getString() + \"'\");\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = NodeUtil.newStringNode(value.getString());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algeb",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = NodeUtil.newStringNode(value.getString());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyr",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = NodeUtil.newStringNode(value.getString());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = IR.string(\"'\" + value.getString() + \"'\");\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.alge",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = IR.string(\"'\" + value.getString() + \"'\");\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.h",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = IR.string(\"'\" + value.getString() + \"'\");\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = NodeUtil.newStringNode(value.getString());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks",
        "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget!= null && callTarget.isName() &&\n        callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n// buggy line:    if (value!= null) {\n    if (value!= null && value.isString()) {\n      Node replacement = NodeUtil.newStringNode(value.getString());\n      n.getParent().replaceChild(n, replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions."
      ],
      "function range": "208,3-230,3"
    },
    "Closure_31_/src/com/google/javascript/jscomp/Compiler.java_1285-1286": {
      "loc": "1285-1286",
      "input": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:        !options.skipAllPasses &&",
      "output": [
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isIdeMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        input.setCompiler(this);\n        Node n = input.getAstRoot(this);",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isolationMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        input.setCompiler(this);\n        Node n = input.getAstRoot(this);",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isIdeMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath!= null ||\n            options.nameReferenceReportPath!= null) {\n\n          // Annotate the",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isIdeMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath!= null ||\n            options.nameReferenceReportPath!= null) {\n\n          // Annotate the",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isolationMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        if (options.sourceMapOutputPath!= null ||\n            options.nameReferenceReportPath!= null) {\n\n          // Annotate the",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isIdeMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        input.setCompiler(this);\n      }\n    }\n  } finally {\n    ",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isIdeMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        if (options.dependencyOptions.needsManagement()) {\n          input.setCompiler(this",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isolationMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        if (options.dependencyOptions.needsManagement() &&\n           !input.getDependencies",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isIdeMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        input.setCompiler(this);\n      }\n    }\n\n    if (options.lower",
        "Node parseInputs() {\n  boolean devMode = options.devMode!= DevMode.OFF;\n  if (externsRoot!= null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot!= null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  if (options.tracer.isOn()) {\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n  Tracer tracer = newTracer(\"parseInputs\");\n  try {\n    for (CompilerInput input : externs) {\n      Node n = input.getAstRoot(this);\n      if (hasErrors()) {\n        return null;\n      }\n      externsRoot.addChildToBack(n);\n    }\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      processAMDAndCommonJSModules();\n    }\n    boolean staleInputs = false;\n    if (options.dependencyOptions.needsManagement() &&\n// buggy line:       !options.skipAllPasses &&\n       !dependencyOptions.isolationMode()) {\n      staleInputs = manageDependencies(options.dependencyOptions, true);\n    }\n    if (!staleInputs) {\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n        if (hasErrors()) {\n          return null;\n        }\n        jsRoot.addChildToBack(n);\n      }\n      for (CompilerInput input : inputs) {\n        input.setCompiler(this);\n      }\n    }\n\n    if (options.lower"
      ],
      "function range": "1236,3-1387,3"
    },
    "Closure_33_/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java_557-558": {
      "loc": "557-558",
      "input": "@Override\npublic void matchConstraint(ObjectType constraintObj) {",
      "output": [
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.alge",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraint() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.api.exceptions.",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregate",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.api.",
        "@Override\npublic void matchConstraint(ObjectType constraintObj) {\n    this.constraintObj = constraintObj;\n  }\n\n  @Override\n  public ObjectType getConstraintObj() {\n    return this.constraintObj;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlAvgAgg"
      ],
      "function range": "554,3-580,3"
    },
    "Closure_35_/src/com/google/javascript/jscomp/TypeInference.java_1121-1136": {
      "loc": "1121-1136",
      "input": "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj != null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType != null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }",
      "output": [
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}\n",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n  if (constraintObj == null ||!constraintObj.isRecordType()) {\n    return;\n  }\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n  }\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!objType.isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!objType.hasProperty(prop)) {\n        typeToInfer =\n            getNativeType(VOID_TYPE).getLeastSupertype(propType);\n      }\n      objType.defineInferredProperty(prop, typeToInfer, null);\n    }",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n  if (constraintObj == null ||!constraintObj.isRecordType()) {\n    return;\n  }\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n  }\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!objType.isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!objType.hasProperty(prop)) {\n        typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n      }\n      objType.defineInferredProperty(prop, typeToInfer, null);\n    }\n  ",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(\n              prop, typeToInfer, null);\n        }\n      }\n    }\n  ",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}\n\n",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(\n              prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n\n",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n  if (constraintObj == null ||!constraintObj.isRecordType()) {\n    return;\n  }\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType == null) {\n    return;\n  }\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!objType.isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!objType.hasProperty(prop)) {\n        typeToInfer =\n            getNativeType(VOID_TYPE).getLeastSupertype(propType);\n      }\n      objType.defineInferredProperty(\n          prop, typeToInfer, null);\n",
        "private void inferPropertyTypesToMatchConstraint(\n    JSType type, JSType constraint) {\n  if (type == null || constraint == null) {\n    return;\n  }\n  ObjectType constraintObj =\n      ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n// buggy line:  if (constraintObj!= null && constraintObj.isRecordType()) {\n// buggy line:    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n// buggy line:    if (objType!= null) {\n// buggy line:      for (String prop : constraintObj.getOwnPropertyNames()) {\n// buggy line:        JSType propType = constraintObj.getPropertyType(prop);\n// buggy line:        if (!objType.isPropertyTypeDeclared(prop)) {\n// buggy line:          JSType typeToInfer = propType;\n// buggy line:          if (!objType.hasProperty(prop)) {\n// buggy line:            typeToInfer =\n// buggy line:                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n// buggy line:          }\n// buggy line:          objType.defineInferredProperty(prop, typeToInfer, null);\n// buggy line:        }\n// buggy line:      }\n// buggy line:    }\n// buggy line:  }\n  if (constraintObj!= null && constraintObj.isRecordType()) {\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType!= null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer =\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n"
      ],
      "function range": "1113,3-1137,3"
    },
    "Closure_36_/src/com/google/javascript/jscomp/InlineVariables.java_575-576": {
      "loc": "575-576",
      "input": "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      || !isValidInitialization(initialization)\n      || !isValidReference(reference)) {\n    return false;\n  }\n  if (declaration != initialization &&\n      !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock() != initialization.getBasicBlock()\n      || declaration.getBasicBlock() != reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value != null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n// buggy line:    }",
      "output": [
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getNode().getType() == Token.VAR\n      || declaration.getNode().getType() == Token.LET\n      || declaration.getNode().getType() == Token.CONST;\n}",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidReference(Reference reference) {\n  return reference.getParent().isExprResult();\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isExprResult();\n}\n\nprivate static boolean isValid",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isVar()\n      || declaration.getParent().isLet()\n      || declaration.getParent().isConst();\n}\n\nprivate static boolean isValidInitialization(Reference initialization) {\n",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return (declaration.getParent().isVar()\n      || declaration.getParent().isLet()\n      || declaration.getParent().isConst());\n}\n\nprivate static boolean isValidInitialization(Reference initialization)",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isVar() || declaration.getParent().isLet()\n      || declaration.getParent().isConst();\n}\n\nprivate static boolean isValidInitialization(Reference initialization) {\n  return",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isVar()\n      || declaration.getParent().isLet()\n      || declaration.getParent().isConst()\n      || NodeUtil.isFunctionDeclaration(declaration.getParent",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isVar()\n      || declaration.getParent().isLet()\n      || declaration.getParent().isConst()\n      || declaration.getGrandparent().isExprResult();\n}\n",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidReference(Reference reference) {\n  return reference.getParent().isExprResult();\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  Node parent = declaration.getParent();\n  return parent.isVar() || parent.is",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isVar() || declaration.getParent().isLet()\n      || declaration.getParent().isConst();\n}\n\nprivate static boolean isValidInitialization(Reference initialization) {\n  Node",
        "private boolean canInline(\n    Reference declaration,\n    Reference initialization,\n    Reference reference) {\n  if (!isValidDeclaration(declaration)\n      ||!isValidInitialization(initialization)\n      ||!isValidReference(reference)) {\n    return false;\n  }\n  if (declaration!= initialization &&\n     !initialization.getGrandparent().isExprResult()) {\n    return false;\n  }\n  if (declaration.getBasicBlock()!= initialization.getBasicBlock()\n      || declaration.getBasicBlock()!= reference.getBasicBlock()) {\n    return false;\n  }\n  Node value = initialization.getAssignedValue();\n  Preconditions.checkState(value!= null);\n  if (value.isGetProp()\n      && reference.getParent().isCall()\n      && reference.getParent().getFirstChild() == reference.getNode()) {\n    return false;\n  }\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship!= null) {\n        return false;\n      }\n// buggy line:    } else if (!callNode.getFirstChild().isSuper()) {\n      if (!callNode.getFirstChild().isSuper()) {\n        return false;\n      }\n    } else if (reference.getParent().isNew()) {\n      FunctionType constructor = value.getJSType().toMaybeFunctionType();\n      JSDocInfo info = constructor.getJSDocInfo();\n      if (info == null ||!info.isConstructorOrInterface()) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isValidDeclaration(Reference declaration) {\n  return declaration.getParent().isVar()\n      || declaration.getParent().isLet()\n      || declaration.getParent().isConst()\n      || (declaration.getGrandparent().isBlock()\n          &&"
      ],
      "function range": "519,5-580,5"
    },
    "Closure_38_/src/com/google/javascript/jscomp/CodeConsumer.java_245-246": {
      "loc": "245-246",
      "input": "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {",
      "output": [
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'P') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'P') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'p')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'D') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'D') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'd')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'p') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'p') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'i') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'i') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'n')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'x') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'x') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'X')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'P') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'P') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'p') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'p') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'P') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'P') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'i')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'i') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'i') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'I') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'I') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'f')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'i') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'i') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'I') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'I') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'n')",
        "void addNumber(double x) {\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n// buggy line:  if (x < 0 && prev == '-') {\n  if (x < 0 && prev == '-') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '0') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '.') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == ',') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'E') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == 'e') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x == 0 && prev == '+') {\n    addChar('-');\n    x = -x;\n  } else if (x < 0 && prev =='')"
      ],
      "function range": "240,3-267,3"
    },
    "Closure_52_/src/com/google/javascript/jscomp/CodeGenerator.java_745-746": {
      "loc": "745-746",
      "input": "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;",
      "output": [
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.ISerializedAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.ISerializedAggregate",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyr",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.ISerializedAggregateEvalu",
        "static boolean isSimpleNumber(String s) {\n  int len = s.length();\n  for (int index = 0; index < len; index++) {\n    char c = s.charAt(index);\n    if (c < '0' || c > '9') {\n      return false;\n    }\n  }\n// buggy line:  return len > 0;\n  return true;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport"
      ],
      "function range": "737,3-746,3"
    },
    "Closure_55_/src/com/google/javascript/jscomp/FunctionRewriter.java_117-118": {
      "loc": "117-118",
      "input": "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);",
      "output": [
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyr",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\nimport org.apache",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org",
        "private static boolean isReduceableFunctionExpression(Node n) {\n// buggy line:  return NodeUtil.isFunctionExpression(n);\n    return NodeUtil.isFunctionDeclaration(n)\n        || NodeUtil.isGetterDef(n)\n        || NodeUtil.isSetterDef(n)\n        || NodeUtil.isFunctionExpression(n);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport"
      ],
      "function range": "116,3-118,3"
    },
    "Closure_57_/src/com/google/javascript/jscomp/ClosureCodingConvention.java_197-198": {
      "loc": "197-198",
      "input": "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee != null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target != null) {",
      "output": [
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.NAME) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.STRING) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.fun",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.NAME) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.STRING) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.NAME) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.STRING) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.NAME) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.Alge",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.STRING) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.Al",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.NAME) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org",
        "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee!= null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n// buggy line:        if (target!= null) {\n        if (target!= null && target.getType() == Token.NAME) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core"
      ],
      "function range": "188,3-204,3"
    },
    "Closure_59_/src/com/google/javascript/jscomp/Compiler.java_255-256": {
      "loc": "255-256",
      "input": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {",
      "output": [
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        CheckLevel.OFF);\n  }\n  ",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        CheckLevel.OFF);\n  }\n}",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GET_CSS_NAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GET_CSS_NAME,\n        CheckLevel.OFF);\n",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        CheckLevel.OFF);\n  }\n\n  ",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        CheckLevel.OFF);\n  }",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSS_NAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSS_NAME,\n        CheckLevel.OFF);\n  }",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  }\n  if (options.enables(DiagnosticGroups.ES5_STRICT)) {\n    options.setWarningLevel(\n        DiagnosticGroups.",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        CheckLevel.OFF);\n  }\n\n",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  }\n  if (options.enables(DiagnosticGroups.MISSING_PROPERTIES)) {\n    options.setWarningLevel(\n        Diagnostic",
        "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n          new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n          new PrintStreamErrorManager(createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = true;\n  } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n    options.checkTypes = false;\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n        DiagnosticGroup.forType(\n            RhinoErrorReporter.TYPE_PARSE_ERROR),\n        CheckLevel.OFF);\n  }\n// buggy line:  if (options.checkGlobalThisLevel.isOn()) {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       options.checkGlobalThisLevel);\n// } else {\n//   options.setWarningLevel(\n//       DiagnosticGroups.GLOBAL_THIS,\n//       CheckLevel.OFF);\n// }\n  if (options.checkGlobalThisLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        options.checkGlobalThisLevel);\n  } else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF);\n  }\n  if (options.checkMissingGetCssNameLevel.isOn()) {\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_GETCSSNAME,\n        options.checkMissingGetCssNameLevel);\n  }\n  if (options.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n    options.setWarningLevel(\n        DiagnosticG"
      ],
      "function range": "226,3-288,3"
    },
    "Closure_62_/src/com/google/javascript/jscomp/LightweightMessageFormatter.java_98-99": {
      "loc": "98-99",
      "input": "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null ? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName != null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt != null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {",
      "output": [
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n\n  /**\n   * Gets the source excerpt for a JSError object",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n\n  private SourceExcerptProvider getSource() {\n    if (source ==",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n    b.append('\\n');\n  }\n  return b.toString();\n}\n\n  /**\n   * Gets the",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n\n  /**\n   * Extracts the source code from a JSError",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n\n  /**\n   * Gets the source excerpt for a JSError.",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n    b.append('\\n');\n  }\n  return b.toString();\n}\n\n/**\n * Gets the source",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n    b.append('\\n');\n  }\n  return b.toString();\n}\n\n  /**\n   * Extracts",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n\n  private SourceExcerptProvider getSource() {\n    return source;\n",
        "private String format(JSError error, boolean warning) {\n  SourceExcerptProvider source = getSource();\n  String sourceExcerpt = source == null? null :\n      excerpt.get(\n          source, error.sourceName, error.lineNumber, excerptFormatter);\n  StringBuilder b = new StringBuilder();\n  if (error.sourceName!= null) {\n    b.append(error.sourceName);\n    if (error.lineNumber > 0) {\n      b.append(':');\n      b.append(error.lineNumber);\n    }\n    b.append(\": \");\n  }\n  b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));\n  b.append(\" - \");\n  b.append(error.description);\n  b.append('\\n');\n  if (sourceExcerpt!= null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n    if (excerpt.equals(LINE)\n// buggy line:        && 0 <= charno && charno < sourceExcerpt.length()) {\n        && 0 <= charno) {\n      for (int i = 0; i < error.getCharno(); i++) {\n        char c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n      char c = sourceExcerpt.charAt(error.getCharno());\n      b.append(c == '\\t'? c :'');\n      b.append(error.description);\n      for (int i = error.getCharno() + 1; i < sourceExcerpt.length(); i++) {\n        c = sourceExcerpt.charAt(i);\n        if (c == '\\t') {\n          b.append('\\t');\n        } else {\n          b.append(' ');\n        }\n      }\n    }\n  }\n  return b.toString();\n}\n\n  private SourceExcerptProvider getSource() {\n    if (source!="
      ],
      "function range": "66,3-111,3"
    },
    "Closure_65_/src/com/google/javascript/jscomp/CodeGenerator.java_1015-1016": {
      "loc": "1015-1016",
      "input": "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;",
      "output": [
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"&#################################################################################################################################",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder!= null) {\n        if (outputCharsetEncoder.canEncode(c)) {\n          sb.append(c);\n        } else {\n          // Unicode-escape the character.\n          appendHexJavaScriptRepresentation(sb, c);\n        }\n      } else {\n        sb.append(c);\n      }",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder.canEncode(c)) {\n        sb.append(c);\n      } else {\n        // convert to external encoding before hex conversion\n        try {\n          sb.append(URLEncoder.encode(String.valueOf(c), \"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n          ",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder!= null) {\n        CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n        if (cb.length() == 1) {\n          sb.append(backslashEscape);\n          sb.append(cb.array(), 0, cb.array().length);\n        } else {\n",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder.canEncode(c)) {\n        sb.append(c);\n      } else {\n        // convert to external encoding before hex conversion\n        try {\n          sb.append(URLEncoder.encode(String.valueOf((char) c), \"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder!= null) {\n        CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n        if (cb.hasArray()) {\n          sb.append(cb.array(), cb.arrayOffset(), cb.length());\n        } else {\n          // can't happen\n          throw new IllegalStateException",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder.canEncode(c)) {\n        sb.append(c);\n      } else {\n        // convert to external encoding before hex conversion\n        try {\n          sb.append(URLEncoder.encode(String.valueOf(c), \"UTF-8\"));\n        } catch (UnsupportedEncodingException ignored) {\n          ",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder!= null) {\n        CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n        if (cb.length() == 1) {\n          sb.append(backslashEscape);\n        }\n        sb.append(cb.toString());\n      } else {\n        sb.append(",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder!= null) {\n        CharBuffer cb = outputCharsetEncoder.encode(Character.toString(c));\n        if (cb.length() == 0) {\n          // character did not need encoding\n          sb.append(c);\n        } else {\n          // character needs encoding\n          for (int j = 0; j",
        "static String strEscape(String s, char quote,\n                        String doublequoteEscape,\n                        String singlequoteEscape,\n                        String backslashEscape,\n                        CharsetEncoder outputCharsetEncoder) {\n  StringBuilder sb = new StringBuilder(s.length() + 2);\n  sb.append(quote);\n  for (int i = 0; i < s.length(); i++) {\n    char c = s.charAt(i);\n    switch (c) {\n// buggy line:      case '\\0': sb.append(\"\\\\0\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;\n    case '\\f': sb.append(\"\\\\f\"); break;\n    case '\\n': sb.append(\"\\\\n\"); break;\n    case '\\r': sb.append(\"\\\\r\"); break;\n    case '\\t': sb.append(\"\\\\t\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\\"': sb.append(doublequoteEscape); break;\n    case '\\'': sb.append(singlequoteEscape); break;\n    case '>': sb.append(backslashEscape); sb.append(\"&gt;\"); break;\n    case '<': sb.append(backslashEscape); sb.append(\"&lt;\"); break;\n    case '&': sb.append(backslashEscape); sb.append(\"&amp;\"); break;\n    case '\\u2028': sb.append(backslashEscape); sb.append(\"\\\\u2028\"); break;\n    case '\\u2029': sb.append(backslashEscape); sb.append(\"\\\\u2029\"); break;\n    default:\n      if (outputCharsetEncoder.canEncode(c)) {\n        sb.append(c);\n      } else {\n        // convert to external encoding before hex conversion\n        try {\n          sb.append(URLEncoder.encode(String.valueOf((char) c), \"UTF-8\"));\n        } catch (UnsupportedEncodingException ignored) {"
      ],
      "function range": "1005,3-1075,3"
    },
    "Closure_67_/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java_318-319": {
      "loc": "318-319",
      "input": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {",
      "output": [
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateE",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEval",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.al",
        "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n      && n.getType() == Token.GETPROP\n// buggy line:      ) {\n      && n.getFirstChild().isQualifiedName()) {\n    Node recv = n.getFirstChild();\n    return recv.isQualifiedName()\n        && recv.getNext().isString()\n        && recv.getNext().getString().equals(\"prototype\");\n  }\n  return false;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport"
      ],
      "function range": "314,5-334,5"
    },
    "Closure_70_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1745-1746": {
      "loc": "1745-1746",
      "input": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);",
      "output": [
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean isConstant) {\n    Preconditions.checkArgument(",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean isConstant) {\n    String name = node.getQualified",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node source, JSType type, boolean inferred) {\n    defineSlot(node, source, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node source, JSType type, boolean inferred,\n      boolean isConstant) {\n    String name = node.getQualifiedName();\n    if (",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node source, JSType type, boolean inferred) {\n    defineSlot(node, source, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node source, JSType type, boolean inferred,\n      boolean isConstant) {\n    Preconditions.checkArgument(source == null || source.",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node source, JSType type, boolean inferred) {\n    defineSlot(node, source, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node source, JSType type, boolean inferred,\n      boolean isConstant) {\n    String name = node.getQualifiedName();\n    if (",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean inExterns) {\n    if (node.getJST",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean inExterns) {\n    Preconditions.checkArgument",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean declared) {\n    Preconditions.checkArgument(sourceName",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean isConstant) {\n    Preconditions.checkState(source",
        "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType!= null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters!= null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter!= null) {\n          defineSlot(astParameter, functionNode,\n// buggy line:              jsDocParameter.getJSType(), true);\n              null, true);\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n        }\n      }\n    } else {\n      for (Node astParameter : astParameters.children()) {\n        defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n      }\n    }\n  } else {\n    for (Node astParameter : astParameters.children()) {\n      defineSlot(astParameter, functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n  for (Node bodyChild = body.getFirstChild();\n       bodyChild!= null;\n       bodyChild = bodyChild.getNext()) {\n    if (bodyChild.isExprResult()) {\n      defineSlot(bodyChild.getFirstChild(), functionNode,\n// buggy line:              functionType.getReturnType(), true);\n              null, true);\n    }\n  }\n}\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred) {\n    defineSlot(node, sourceName, type, inferred, false);\n  }\n\n  private void defineSlot(Node node, Node sourceName, JSType type,\n      boolean inferred, boolean inExterns) {\n    if (node.getJSD"
      ],
      "function range": "1734,5-1753,5"
    },
    "Closure_71_/src/com/google/javascript/jscomp/CheckAccessControls.java_416-417": {
      "loc": "416-417",
      "input": "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType != null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&",
      "output": [
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.aster",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.runtime.rest.messages;\n\nimport org.apache.flink.runtime.rest.",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.streaming.api.operators;\n\nimport org.apache.flink.annotation.",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions.records;\n\nimport java.io.",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.IOException;",
        "private void checkPropertyVisibility(NodeTraversal t,\n    Node getprop, Node parent) {\n  ObjectType objectType =\n      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n  if (objectType!= null) {\n// buggy line:    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    boolean isOverride = t.inGlobalScope() &&!objectType.isFunctionPrototype();\n    if (isOverride) {\n      report(getprop, VISIBILITY_MISMATCH);\n    }\n    if (objectType.isConstructor() || objectType.isInterface()) {\n      FunctionType fn = objectType.toMaybeFunctionType();\n      if (fn!= null) {\n        JSDocInfo docInfo = fn.getJSDocInfo();\n        if (docInfo!= null && docInfo.getVisibility()!= Visibility.INHERITED) {\n          if (isOverride) {\n            report(getprop, VISIBILITY_MISMATCH);\n          }\n        }\n      }\n    }\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed.near;\n\nimport org.apache.ignite.cache."
      ],
      "function range": "407,3-500,3"
    },
    "Closure_82_/src/com/google/javascript/rhino/jstype/JSType.java_163-164": {
      "loc": "163-164",
      "input": "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();",
      "output": [
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ReferenceType}.\n     *\n     * @return {@code true} if this type is a {@link ReferenceType}.\n     */\n    public final boolean isReferenceType() {\n        return this == REFERENCE_TYPE;\n    }\n\n    /**\n     ",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NumberType}.\n     *\n     * @return {@code true} if this type is a {@link NumberType}.\n     */\n    public final boolean isNumberType() {\n        return this == NUMBER_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     *",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link RawType}.\n     *\n     * @return {@code true} if this type is a {@link RawType}.\n     */\n    public final boolean isRawType() {\n        return this == RAW_TYPE;\n    }\n\n    /**\n     * Returns",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ReferenceType}.\n     *\n     * @return {@code true} if this type is a {@link ReferenceType}.\n     */\n    public final boolean isReferenceType() {\n        return this == REFERENCE_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link WildcardType}.\n     *\n     * @return {@code true} if this type is a {@link WildcardType}.\n     */\n    public final boolean isWildcardType() {\n        return this == WILDCARD_TYPE;\n    }",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ParameterizedType}.\n     *\n     * @return {@code true} if this type is a {@link ParameterizedType}.\n     */\n    public final boolean isParameterizedType() {\n        return this == PARAMETERIZED_TYPE;",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link PackageType}.\n     *\n     * @return {@code true} if this type is a {@link PackageType}.\n     */\n    public final boolean isPackageType() {\n        return this == PACKAGE_TYPE;\n    }\n\n    /**\n     *",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ReferenceType}.\n     *\n     * @return {@code true} if this type is a {@link ReferenceType}.\n     */\n    public final boolean isReferenceType() {\n        return this == REFERENCE_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link VoidType}.\n     *\n     * @return {@code true} if this type is a {@link VoidType}.\n     */\n    public final boolean isVoidType() {\n        return this == VOID_TYPE;\n    }\n\n    /**\n",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link PrimitiveType}.\n     *\n     * @return {@code true} if this type is a {@link PrimitiveType}.\n     */\n    public final boolean isPrimitiveType() {\n        return this == PRIMITIVE_TYPE;\n    }\n\n",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ReferenceType}.\n     *\n     * @return {@code true} if this type is a {@link ReferenceType}.\n     */\n    public final boolean isReferenceType() {\n        return this == REFERENCE_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link VoidType}.\n     *\n     * @return {@code true} if this type is a {@link VoidType}.\n     */\n    public final boolean isVoidType() {\n        return this == VOID_TYPE;\n    }\n\n    @Override",
        "public final boolean isEmptyType() {\n// buggy line:  return isNoType() || isNoObjectType() || isNoResolvedType();\n        return isNoType() || isNoObjectType() || isNoResolvedType();\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoType}.\n     *\n     * @return {@code true} if this type is a {@link NoType}.\n     */\n    public final boolean isNoType() {\n        return this == NO_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoObjectType}.\n     *\n     * @return {@code true} if this type is a {@link NoObjectType}.\n     */\n    public final boolean isNoObjectType() {\n        return this == NO_OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NoResolvedType}.\n     *\n     * @return {@code true} if this type is a {@link NoResolvedType}.\n     */\n    public final boolean isNoResolvedType() {\n        return this == NO_RESOLVED_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link NullType}.\n     *\n     * @return {@code true} if this type is a {@link NullType}.\n     */\n    public final boolean isNullType() {\n        return this == NULL_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link ObjectType}.\n     *\n     * @return {@code true} if this type is a {@link ObjectType}.\n     */\n    public final boolean isObjectType() {\n        return this == OBJECT_TYPE;\n    }\n\n    /**\n     * Returns {@code true} if this type is a {@link PrimitiveType}.\n     *\n     * @return {@code true} if this type is a {@link PrimitiveType}.\n     */\n    public final boolean isPrimitiveType() {\n        return this == BOOLEAN_TYPE || this == BYTE"
      ],
      "function range": "162,3-164,3"
    },
    "Closure_83_/src/com/google/javascript/jscomp/CommandLineRunner.java_334-335": {
      "loc": "334-335",
      "input": "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);",
      "output": [
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.h",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\n",
        "@Override\npublic int parseArguments(Parameters params) throws CmdLineException {\n// buggy line:  String param = params.getParameter(0);\n    String param = params.getParameter(0);\n    if (param == null || param.length() == 0) {\n        throw new CmdLineException(owner, \"\");\n    }\n    return super.parseArguments(params);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org"
      ],
      "function range": "332,7-351,7"
    },
    "Closure_86_/src/com/google/javascript/jscomp/NodeUtil.java_2465-2466": {
      "loc": "2465-2466",
      "input": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;",
      "output": [
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if calls to this function have side effects.\n   *\n   ",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean callHasLocalResult(Node n) {\n    Preconditions.checkState",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @return Whether the call has a local result (i.e. a result",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @return Whether the call has a local result.\n   */\n  private",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean isToStringMethodCall(Node n) {\n    Preconditions.check",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @return Whether the call has a local result.\n   */\n  static",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!evaluatesToLocalValue(c, locals)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if calls to this function have side effects.\n   ",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean isToStringMethodCall(Node value) {\n    Node getProp = value",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean isToStringMethodCall(Node n) {\n    Node getProp = n",
        "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getType()) {\n    case Token.ASSIGN:\n      return NodeUtil.isImmutableValue(value.getLastChild())\n          || (locals.apply(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case Token.COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.AND:\n    case Token.OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n         && evaluatesToLocalValue(value.getLastChild(), locals);\n    case Token.INC:\n    case Token.DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case Token.THIS:\n      return locals.apply(value);\n    case Token.NAME:\n      return isImmutableValue(value) || locals.apply(value);\n    case Token.GETELEM:\n    case Token.GETPROP:\n      return locals.apply(value);\n    case Token.CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.apply(value);\n    case Token.NEW:\n// buggy line:      return true;\n    case Token.FUNCTION:\n    case Token.REGEXP:\n    case Token.ARRAYLIT:\n    case Token.OBJECTLIT:\n      break;\n    default:\n      return true;\n    }\n    for (Node c = value.getFirstChild(); c!= null; c = c.getNext()) {\n      if (!locals.apply(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @return Whether the call has a local result.\n   */\n  public"
      ],
      "function range": "2424,3-2489,3"
    },
    "Closure_92_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_789-790": {
      "loc": "789-790",
      "input": "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');",
      "output": [
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        firstNode.getParent().addChildAfter(varNode, firstNode);\n        replacementNode = varNode;\n      }\n    ",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n        firstNode.getParent().addChildAfter(var",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        firstNode.getParent().addChildAfter(varNode, firstNode);\n        replacementNode = new Node(Token.ASSIGN,",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        replacementNode.addChildToFront(varNode);\n        firstNode.getParent().addChildAfter(replacementNode, firstNode",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        firstNode.getParent().addChildAfter(varNode, firstNode);\n        replacementNode = new Node(Token.VAR,",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        firstNode.getParent().addChildAfter(\n            replacementNode, firstNode.getNext().getFirstChild());\n      }\n    }\n    if (candidateDefinition!= null) {\n      candidateDefinition.getParent().replaceChild(\n          candidateDefinition, replacementNode);\n    }\n",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        firstNode.getParent().addChildBefore(varNode, firstNode);\n        replacementNode = varNode;\n      }\n    ",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        Node varNode = new Node(Token.VAR, namespace.substring(0, indexOfDot));\n        varNode.copyInformationFrom(firstNode);\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n        varNode.addChildToFront(namespace.",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        firstNode.getParent().addChildAfter(\n            replacementNode, firstNode.getNext().getFirstChild());\n      }\n    }\n    if (candidateDefinition!= null) {\n      candidateDefinition.getParent().replaceChild(candidateDefinition,\n          replacementNode);\n    }",
        "void replace() {\n  if (firstNode == null) {\n    replacementNode = candidateDefinition;\n    return;\n  }\n  if (candidateDefinition!= null && explicitNode!= null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    replacementNode = createDeclarationNode();\n    if (firstModule == minimumModule) {\n      firstNode.getParent().addChildBefore(replacementNode, firstNode);\n    } else {\n// buggy line:      int indexOfDot = namespace.indexOf('.');\n// buggy line:      if (indexOfDot == -1) {\n      int indexOfDot = namespace.lastIndexOf('.');\n      if (indexOfDot == -1) {\n        firstNode.getParent().addChildAfter(replacementNode, firstNode);\n      } else {\n        firstNode.getParent().addChildAfter(\n            replacementNode, firstNode.getNext().getFirstChild());\n      }\n    }\n    if (candidateDefinition!= null) {\n      candidateDefinition.getParent().replaceChild(\n          candidateDefinition, replacementNode);\n    } else"
      ],
      "function range": "747,5-809,5"
    },
    "Closure_97_/src/com/google/javascript/jscomp/PeepholeFoldConstants.java_698-699": {
      "loc": "698-699",
      "input": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt != lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt != rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;",
      "output": [
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  ",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  ",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n\n    return newNumber;\n  }\n\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  ",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The AS",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n\n/**\n * Warn the user of a common error.\n */\nprivate void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n    String... arguments) {\n  compiler.report(t.",
        "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER) {\n    double result;\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    if (!(rval >= 0 && rval < 32)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int lvalInt = (int) lval;\n    if (lvalInt!= lval) {\n      error(FRACTIONAL_BITWISE_OPERAND, left);\n      return n;\n    }\n    int rvalInt = (int) rval;\n    if (rvalInt!= rval) {\n      error(FRACTIONAL_BITWISE_OPERAND, right);\n      return n;\n    }\n    switch (n.getType()) {\n      case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n      case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n      case Token.URSH:\n// buggy line:        result = lvalInt >>> rvalInt;\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}\n\n/**\n * Warn the user of a common error.\n */\nprivate void report(NodeTraversal t, Node n, DiagnosticType diagnosticType,\n    String... arguments) {\n  t.report(n, diagnostic"
      ],
      "function range": "652,3-713,3"
    },
    "Closure_104_/src/com/google/javascript/rhino/jstype/UnionType.java_291-292": {
      "loc": "291-292",
      "input": "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result != null) {",
      "output": [
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic boolean isEquivalentTo(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isEquivalentTo(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isEquivalentTo(this)) {\n        builder.addAlternate(",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic JSType getLeastSupertype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic JSType getLeastSupertype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.getLeastSupertype(that).isSubtype(this)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.getLeastSupertype(",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic JSType getLeastSupertype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.getLeastSupertype(that).isSubtype(this)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this))",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic boolean isEmptyType() {\n  for (JSType alternate : alternates) {\n    if (!alternate.isEmptyType()) {\n      return false;\n    }\n  }\n  return true;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseUnionType(this);\n}\n\n@Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n  return visitor.caseUnionType(this, that);\n}\n}\n<|",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic JSType getLeastSupertype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (this.isSubtype(otherAlternate)) {\n        builder.addAlternate",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseUnionType(this);\n}\n\n@Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n  return visitor.caseUnionType(this, that);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic JSType getLeastSupertype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    UnionType thatUnion = (UnionType) that;\n    for (JSType otherAlternate : thatUnion.alternates) {\n      if (otherAlternate.isSubtype(",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic boolean isEquivalentTo(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isEquivalentTo(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(other",
        "JSType meet(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  JSType result = builder.build();\n// buggy line:  if (result!= null) {\n  return result;\n}\n\n@Override\npublic boolean isSubtype(JSType that) {\n  UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n  for (JSType alternate : alternates) {\n    if (alternate.isSubtype(that)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  if (that instanceof UnionType) {\n    for (JSType otherAlternate : ((UnionType) that).alternates) {\n      if (otherAlternate.isSubtype(this)) {\n        builder.addAlternate(otherAlternate);\n      }\n    }\n  } else if (that.isSubtype(this)) {\n    builder.addAlternate(that);\n  }\n  return builder.build().isSubtype(this);\n}\n\n@Override\npublic boolean isEmptyType() {\n  for (JSType alternate : alternates) {\n    if (!alternate.isEmptyType()) {\n      return false;\n    }\n  }\n  return true;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseUnionType(this);\n}\n\n@Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n  return visitor.caseUnionType(this, that);\n}\n\n@Override <T"
      ],
      "function range": "273,3-298,3"
    },
    "Closure_109_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_1908-1909": {
      "loc": "1908-1909",
      "input": "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);",
      "output": [
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LEFT_CURLY, false);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n            int startCharno, boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LEFT_CURLY, false);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                            int startCharno, boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LC);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                            int startCharno, boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, false);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LEFT_CURLY, false);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                            int startCharno,\n                                            boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LEFT_CURLY, false);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno, int startCharno,\n            boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno());\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, stream.getCharno());\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno, int startCh",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno());\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, stream.getCharno());\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharn",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LC);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n            int startCharno, boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, false);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno());\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNode(JsDocToken token, int lineno, int startCharno) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, stream.getCharno());\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                ",
        "private Node parseContextTypeExpression(JsDocToken token) {\n// buggy line:        return parseTypeName(token);\n        return parseTypeName(token);\n    }\n\n    private Node parseTypeName(JsDocToken token) {\n        if (token!= JsDocToken.STRING) {\n            reportTypeSyntaxWarning(\"msg.jsdoc.typename\");\n        }\n        String name = stream.getString();\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno();\n        return newStringNode(charno, lineno, name);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @return The type expression found or null if none.\n     */\n    Node parseAndRecordTypeNode(JsDocToken token) {\n        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n                token == JsDocToken.LC);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param matchingLC Whether the type expression starts with a \"{\".\n     * @return The type expression found or null if none.\n     */\n    private Node parseAndRecordTypeNameNode(JsDocToken token, int lineno,\n                                            int startCharno, boolean matchingLC) {\n        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);\n    }\n\n    /**\n     * Looks for a type expression at the current token and if found,\n     * returns it. Note that this method consumes input.\n     *\n     * @param token The current token.\n     * @param lineno The line of the type expression.\n     * @param startCharno The starting character position of the type expression.\n     * @param"
      ],
      "function range": "1907,3-1909,3"
    },
    "Closure_111_/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java_54-55": {
      "loc": "54-55",
      "input": "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;",
      "output": [
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseTemplateType(TemplateType templateType) {\n    return templateType;\n  }\n\n  ",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseProxyObjectType() {\n    return getNativeType(JSTypeNative.PROXY_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseIntersectionType(IntersectionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseEnumElementType(EnumElementType type) {\n    return type;\n  }\n\n  @Override\n",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseProxyObjectType(ProxyObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseEnumElementType(EnumElementType type) {\n    return type;\n  }\n\n  @Override\n",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseProxyObjectType() {\n    return getNativeType(JSTypeNative.PROXY_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseTemplateType(TemplateType templateType) {\n    return getNativeType(JSTypeNative",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseTemplateType(TemplateType templateType) {\n    return templateType;\n  }\n}",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseTemplateType(TemplateType templateType) {\n    return templateType;\n  }\n\n  @Override\n  public JSType caseNamedType(NamedType type) {\n    return type;\n  }\n\n  @Override\n  public",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseProxyObjectType(ProxyObjectType type) {\n    return type;\n  }\n\n  ",
        "@Override\nprotected JSType caseTopType(JSType topType) {\n// buggy line:  return topType;\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseNoObjectType() {\n    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  }\n\n  @Override\n  public JSType caseNoType() {\n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  @Override\n  public JSType caseBooleanType() {\n    return getNativeType(JSTypeNative.BOOLEAN_TYPE);\n  }\n\n  @Override\n  public JSType caseFunctionType(FunctionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseNullType() {\n    return getNativeType(JSTypeNative.NULL_TYPE);\n  }\n\n  @Override\n  public JSType caseNumberType() {\n    return getNativeType(JSTypeNative.NUMBER_TYPE);\n  }\n\n  @Override\n  public JSType caseObjectType(ObjectType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseStringType() {\n    return getNativeType(JSTypeNative.STRING_TYPE);\n  }\n\n  @Override\n  public JSType caseVoidType() {\n    return getNativeType(JSTypeNative.VOID_TYPE);\n  }\n\n  @Override\n  public JSType caseUnionType(UnionType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseAllType() {\n    return getNativeType(JSTypeNative.ALL_TYPE);\n  }\n\n  @Override\n  public JSType caseUnknownType() {\n    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n  }\n\n  @Override\n  public JSType caseTemplatizedType(TemplatizedType type) {\n    return type;\n  }\n\n  @Override\n  public JSType caseTemplateType(TemplateType type) {\n    return type;\n  }\n\n  @Override"
      ],
      "function range": "52,9-55,9"
    },
    "Closure_113_/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java_329-330": {
      "loc": "329-330",
      "input": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          module != providedModule &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided != null) {",
      "output": [
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, null, t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(\n      Node",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, null, t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);\n    }\n  }\n\n  private boolean verifyLastArgumentIsString(NodeTravers",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    if (!n.isString()) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);\n    }\n  }\n}\n<|java|>/*\n",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n}\n<|java|>/*\n",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);\n    }\n  }\n}\n<|java|>package com",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String value = n.getString();\n    if (!value.isEmpty()) {\n      symbolTable.addReference(value, n);\n    }\n  }\n\n  /**\n   * @return Whether the node",
        "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null ||!provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n    } else {\n      JSModule providedModule = provided.explicitModule;\n      Preconditions.checkNotNull(providedModule);\n      JSModule module = t.getModule();\n      if (moduleGraph!= null &&\n          module!= providedModule &&\n         !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n      }\n    }\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n// buggy line:    if (provided!= null) {\n// buggy line:      provided.addProvide(left);\n// buggy line:    }\n  } else {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, arg.getString(), t.getSourceName()));\n  }\n}\n\n  private void maybeAddToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n\n  private void maybeAddStringNodeToSymbolTable(Node n) {\n    if (symbolTable == null) {\n      return;\n    }\n\n    String name = n.getString();\n    if (!name.isEmpty()) {\n      symbolTable.addReference(name, n);\n    }\n  }\n}\n<|java|>package com"
      ],
      "function range": "295,3-334,3"
    },
    "Closure_114_/src/com/google/javascript/jscomp/NameAnalyzer.java_578-579": {
      "loc": "578-579",
      "input": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {",
      "output": [
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(nameNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(nameNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(nameNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.alge",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(nameNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(nameNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.",
        "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns!= null) {\n    if (parent.isFor() &&!NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext()!= n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n// buggy line:    } else {\n// buggy line:      recordDepScope(nameNode, ns);\n// buggy line:    }\n    } else {\n      recordDepScope(nameNode, ns);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescript"
      ],
      "function range": "558,5-588,5"
    },
    "Closure_118_/src/com/google/javascript/jscomp/DisambiguateProperties.java_495-496": {
      "loc": "495-496",
      "input": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {",
      "output": [
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleString",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GETPROP:\n          handleGetProp(t, child);\n          break;\n        case Token.GETELEM:\n          handleGetElem(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGetProp(NodeTraversal t, Node getProp) {\n    for (Node child = getProp.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGetElem(NodeTraversal t, Node getElem) {\n    for (Node child = getElem.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n}\n<|",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GETPROP:\n          handleGetProp(t, child);\n          break;\n        case Token.GETELEM:\n          handleGetElem(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGetProp(NodeTraversal t, Node getProp) {\n    for (Node child = getProp.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GETPROP:\n          handleGetProp(t, child);\n          break;\n        case Token.GETELEM:\n          handleGetElem(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGetElem(NodeTraversal t, Node getElem) {\n    for (Node child = getE",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.OBJECTLIT:\n          handleObjectLit(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GETPROP:\n          handleGetProp(t, child);\n          break;\n        case Token.GETELEM:\n          handleGetElem(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGetElem(NodeTraversal t, Node getElem) {\n    for (Node child = getElem.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GETPROP:\n          handleGetProp(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGetProp(NodeTraversal t, Node getProp) {\n    for (Node child = getProp.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleString(NodeTraversal t, Node string) {\n    for (Node child = string.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      ",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.OBJECTLIT:\n          handleObjectLit(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          ",
        "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child!= null;\n      child = child.getNext()) {\n    switch (child.getType()) {\n      case Token.OBJECTLIT:\n        handleObjectLit(t, child);\n        break;\n      case Token.STRING:\n        handleString(t, child);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n  private void handleObjectLit(NodeTraversal t, Node objectLit) {\n    for (Node child = objectLit.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleGet(NodeTraversal t, Node get) {\n    for (Node child = get.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.SET:\n          handleSet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  private void handleSet(NodeTraversal t, Node set) {\n    for (Node child = set.getFirstChild();\n        child!= null;\n        child = child.getNext()) {\n      switch (child.getType()) {\n        case Token.GET:\n          handleGet(t, child);\n          break;\n        case Token.STRING:\n          handleString(t, child);\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  /**\n   *"
      ],
      "function range": "490,5-513,5"
    },
    "Closure_120_/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java_431-432": {
      "loc": "431-432",
      "input": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;",
      "output": [
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      return true;",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInFunction() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      return true;\n    ",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedAtLeastOnce() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      ",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInFunctionBody() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      return true;\n",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n//buggy line",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n      if (block",
        "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break;\n      return true;\n    }\n  }\n  return false;\n}\n\npublic boolean isAssignedOnceInFunction() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n  for (BasicBlock block = ref.getBasicBlock();\n       block!= null; block = block.getParent()) {\n    if (block.isFunction) {\n// buggy line:      break"
      ],
      "function range": "421,5-438,5"
    },
    "Closure_122_/src/com/google/javascript/jscomp/parsing/IRFactory.java_252-253": {
      "loc": "252-253",
      "input": "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {",
      "output": [
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n        if (comment.getValue().index",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n\n// buggy line:  if (comment",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n                if (comment.getValue().index",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n    if (comment.getValue().index",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n            if (comment.getValue().index",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n        // buggy line:  if (comment",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line: if (comment.get",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n        if (comment.getValue().cont",
        "private void handleBlockComment(Comment comment) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n// buggy line:  if (comment.getValue().indexOf(\"/* @\")!= -1 || comment.getValue().indexOf(\"\\n * @\")!= -1) {\n        if (comment.getValue().st"
      ],
      "function range": "251,3-258,3"
    },
    "Closure_125_/src/com/google/javascript/jscomp/TypeCheck.java_1661-1662": {
      "loc": "1661-1662",
      "input": "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType != null) {",
      "output": [
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitCall(NodeTraversal t, Node n, Node parent) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType.isFunctionType()) {\n    FunctionType functionType = childType.toMaybeFunctionType();\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type\n    if (functionType.isConstructor() &&\n       !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n            functionType.getReturnType().isVoidType())) {\n      report(t, n",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitCall(NodeTraversal t, Node n, Node parent) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType.isFunctionType()) {\n    FunctionType functionType = childType.toMaybeFunctionType();\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type\n    if (functionType.isConstructor() &&\n       !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType())) {\n      report(t, n",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitCall(NodeTraversal t, Node n, Node parent) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type\n    if (functionType.isConstructor() &&\n       !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n            functionType.getReturnType().isVoidType())) {\n      report(t, n,",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitCall(NodeTraversal t, Node n, Node parent) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type\n    if (functionType.isConstructor() &&\n       !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType())) {\n      report(t, n,",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitCall(NodeTraversal t, Node n, Node parent) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType.isFunctionType()) {\n    FunctionType fnType = childType.toMaybeFunctionType();\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type\n    if (fnType.isConstructor() &&\n       !fnType.isNativeObjectType() &&\n        (fnType.getReturnType().isUnknownType() || fnType.getReturnType().isVoidType())) {\n      report(t, n, CON",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  // obj.prop or obj.method()\n  // Lots of types can appear on the left, a call to a void function can\n  // never be on the left. getPropertyType will decide what is acceptable\n  // and what isn't.\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n}\n\n/**\n * Emit a warning if we can prove that a property cannot possibly be\n * defined on",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a CALL node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitCall(NodeTraversal t, Node n, Node parent) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType.isFunctionType()) {\n    FunctionType functionType = childType.toMaybeFunctionType();\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if (functionJSDocInfo!= null) {\n      isExtern = functionJSDocInfo.isExtern();\n    }\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  // obj.prop or obj.method()\n  // Lots of types can appear on the left, a call to a void function can\n  // never be on the left. getPropertyType will decide what is acceptable\n  // and what isn't.\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n}\n\n/**\n * Visits a GETELEM node.\n *\n * @param t The node",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  // obj.prop or obj.method()\n  // Lots of types can appear on the left, a call to a void function can\n  // never be on the left. getPropertyType will decide what is acceptable\n  // and what isn't.\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n}\n\n/**\n * Visits a NAME node.\n *\n * @param t The node traversal object",
        "private void visitNew(NodeTraversal t, Node n) {\n  Node constructor = n.getFirstChild();\n  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n    FunctionType fnType = type.toMaybeFunctionType();\n// buggy line:    if (fnType!= null) {\n    if (fnType!= null && fnType.hasInstanceType()) {\n      FunctionType ctorType = fnType.getInstanceType().getConstructor();\n      if (ctorType!= null && ctorType.isAbstract()) {\n        report(t, n, ABSTRACT_SUPER_METHOD_NOT_CALLABLE, type.toString());\n      }\n    }\n  }\n}\n\n/**\n * Visits a GETPROP node.\n *\n * @param t The node traversal object that supplies context, such as the\n * scope chain to use in name lookups as well as error reporting.\n * @param n The node being visited.\n * @param parent The parent of {@code n}.\n */\nprivate void visitGetProp(NodeTraversal t, Node n, Node parent) {\n  // obj.prop or obj.method()\n  // Lots of types can appear on the left, a call to a void function can\n  // never be on the left. getPropertyType will decide what is acceptable\n  // and what isn't.\n  Node property = n.getLastChild();\n  Node objNode = n.getFirstChild();\n  JSType childType = getJSType(objNode);\n\n  if (childType.isDict()) {\n    report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n  } else if (validator.expectNotNullOrUndefined(t, n, childType,\n      \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n    checkPropertyAccess(childType, property.getString(), t, n);\n  }\n}\n\n/**\n * Emit a warning if we can prove that a property cannot possibly be defined\n * on"
      ],
      "function range": "1656,3-1671,3"
    },
    "Closure_126_/src/com/google/javascript/jscomp/MinimizeExitPoints.java_141-145": {
      "loc": "141-145",
      "input": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock != null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }",
      "output": [
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody!= null) {\n      tryMinimizeExits(whileBody, exitType, labelName);\n    }\n    return;\n  ",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody.isBlock()) {\n      tryMinimizeExits(whileBody, exitType, labelName);\n    }\n    return;\n",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isFor()) {\n    ",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getFirstChild().getNext();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody!= null) {\n      tryMinimizeExits(whileBody, exitType, labelName);\n    }\n    return",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody.hasChildren()) {\n      tryMinimizeExits(whileBody, exitType, labelName);\n    }\n    return;\n",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody.getType() == Token.BLOCK) {\n      tryMinimizeExits(whileBody, exitType, labelName);\n    ",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isSwitch()) {\n    Node defaultCase = n.getLastChild();\n    tryMinimizeExits(defaultCase, exitType, labelName);\n    for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n      if (c.isDefaultCase()) {\n        continue;\n      }\n      tryMinimizeExits(c.getFirstChild(), exitType, labelName);\n    }\n    return;\n  }\n  if (n.isDo()) {\n    Node cond = n.getFirstChild();",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody.isBlock()) {\n      tryMinimizeExits(whileBody.getLastChild(), exitType, labelName);\n    }\n",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isWhile()) {\n    Node whileBody = n.getLastChild();\n    tryMinimizeExits(whileBody, exitType, labelName);\n    return;\n  }\n  if (n.isDo()) {\n    Node doBody = n.getFirstChild();\n    tryMinimizeExits(doBody, exitType, labelName);\n    Node whileBody = doBody.getNext();\n    if (whileBody.isBlock()) {\n      whileBody = whileBody.getLastChild();\n      tryMinimizeExits(whileBody, exitType",
        "void tryMinimizeExits(Node n, int exitType, String labelName) {\n  if (matchingExitNode(n, exitType, labelName)) {\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n  if (n.isIf()) {\n    Node ifBlock = n.getFirstChild().getNext();\n    tryMinimizeExits(ifBlock, exitType, labelName);\n    Node elseBlock = ifBlock.getNext();\n    if (elseBlock!= null) {\n      tryMinimizeExits(elseBlock, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isTry()) {\n    Node tryBlock = n.getFirstChild();\n    tryMinimizeExits(tryBlock, exitType, labelName);\n    Node allCatchNodes = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n      Preconditions.checkState(allCatchNodes.hasOneChild());\n      Node catchNode = allCatchNodes.getFirstChild();\n      Node catchCodeBlock = catchNode.getLastChild();\n      tryMinimizeExits(catchCodeBlock, exitType, labelName);\n    }\n// buggy line:    if (NodeUtil.hasFinally(n)) {\n// buggy line:      Node finallyBlock = n.getLastChild();\n// buggy line:      tryMinimizeExits(finallyBlock, exitType, labelName);\n// buggy line:    }\n    return;\n  }\n  if (n.isSwitch()) {\n    Node defaultCase = n.getLastChild();\n    tryMinimizeExits(defaultCase, exitType, labelName);\n    for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {\n      if (c.isDefaultCase()) {\n        continue;\n      }\n      tryMinimizeExits(c, exitType, labelName);\n    }\n    return;\n  }\n  if (n.isDo()) {\n    Node cond = n.getFirstChild();\n    Node body"
      ],
      "function range": "106,3-201,3"
    },
    "Closure_129_/src/com/google/javascript/jscomp/PrepareAst.java_166-167": {
      "loc": "166-167",
      "input": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();",
      "output": [
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSTypeRegistry.getType(info.getTypedefType()).toMaybeFunctionType();\n    if (methodType == null ||!methodType.isInterface()) {\n      continue;\n    }\n    String interfaceName = methodType.getInstanceType().getReferenceName();\n    if (interfaceName == null) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    compiler.reportChangeToEnclosingScope(n);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSTypeRegistry.getType(info.getTypedefType()).toMaybeFunctionType();\n    if (methodType == null ||!methodType.isInterface()) {\n      continue;\n    }\n    String interfaceName = methodType.getInstanceType().getReferenceName();\n    if (interfaceName == null) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    compiler.reportChangeToEnclosingScope(n);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSTypeRegistry.getType(info.getTypedefType()).toMaybeFunctionType();\n    if (methodType == null ||!methodType.isInterface()) {\n      continue;\n    }\n    String interfaceName = methodType.getInstanceType().getReferenceName();\n    if (interfaceName == null) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    compiler.reportChangeToEnclosingScope(n);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSTypeRegistry.getType(info.getTypedefType()).toMaybeFunctionType();\n    if (methodType == null ||!methodType.isInterface()) {\n      continue;\n    }\n    String interfaceName = methodType.getInstanceType().getReferenceName();\n    if (interfaceName == null) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    compiler.reportChangeToEnclosingScope(n);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.h",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSType.toMaybeFunctionType(c.getFirstChild().getJSType());\n    if (methodType == null\n        || methodType.isAbstract()\n        || methodType.isInterface()\n        || methodType.isConstructor()\n        || methodType.isEnumType()) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n    builder.recordConstructor();\n    c.setJSDocInfo(builder.build());\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\n",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSTypeRegistry.getType(info.getTypedefType()).toMaybeFunctionType();\n    if (methodType == null ||!methodType.isInterface()) {\n      continue;\n    }\n    String interfaceName = methodType.getInstanceType().getReferenceName();\n    if (interfaceName == null) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    compiler.reportChangeToEnclosingScope(n);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\n\nimport org",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSType.toMaybeFunctionType(c.getFirstChild().getJSType());\n    if (methodType == null\n        || methodType.isAbstract()\n        || methodType.isInterface()\n        || methodType.isConstructor()\n        || methodType.isEnumType()) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n    builder.recordConstructor();\n    c.setJSDocInfo(builder.build());\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSTypeRegistry.getType(info.getTypedefType()).toMaybeFunctionType();\n    if (methodType == null ||!methodType.isInterface()) {\n      continue;\n    }\n    String interfaceName = methodType.getInstanceType().getReferenceName();\n    if (interfaceName == null) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    compiler.reportChangeToEnclosingScope(n);\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.IOException;\n\nimport org",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSType.toMaybeFunctionType(c.getFirstChild().getJSType());\n    if (methodType == null\n        || methodType.isAbstract()\n        || methodType.isInterface()\n        || methodType.isConstructor()\n        || methodType.isEnumType()) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n    builder.recordConstructor();\n    c.setJSDocInfo(builder.build());\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.spi.security.authentication",
        "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node first = n.getFirstChild();\n  if (first == null) {\n    return;\n  }\n  for (Node c = first.getNext(); c!= null; c = c.getNext()) {\n    if (!c.isGetProp()) {\n      continue;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(c);\n    if (info == null ||!info.isConstructorOrInterface()) {\n      continue;\n    }\n    FunctionType methodType =\n        JSType.toMaybeFunctionType(c.getFirstChild().getJSType());\n    if (methodType == null\n        || methodType.isAbstract()\n        || methodType.isInterface()\n        || methodType.isConstructor()\n        || methodType.isEnumType()) {\n      continue;\n    }\n    n.putBooleanProp(Node.ANALYZED_DURING_GTI, true);\n    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n    builder.recordConstructor();\n    c.setJSDocInfo(builder.build());\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java"
      ],
      "function range": "158,5-177,5"
    },
    "Closure_130_/src/com/google/javascript/jscomp/CollapseProperties.java_172-173": {
      "loc": "172-173",
      "input": "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&",
      "output": [
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0) {\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets ==",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0) {\n// buggy line:    if (name.globalSets ==",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n    if (name.globalSets == 0 && name.local",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n    if (name.globalSets == 0 && name.local",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n    if (name.localSets == 0) {\n      ",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 1",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n    if (name.globalSets == 0) {\n      ",
        "private void inlineAliases(GlobalNamespace namespace) {\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n// buggy line:    if (name.globalSets == 1 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 1 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 0 && name.localSets == 0 &&\n// buggy line:    if (name.globalSets == 1"
      ],
      "function range": "161,3-197,3"
    },
    "Closure_133_/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java_2401-2402": {
      "loc": "2401-2402",
      "input": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;",
      "output": [
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;\nimport org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;\nimport org.apache.hadoop.hive.serde2.type",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;\nimport org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;\nimport org.apache.hadoop.hive.serde2.",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.io.HiveVarcharWritable;\nimport org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;\nimport org.apache.hadoop.hive.serde2",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.Type",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.BytesWrit",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.io.Text;",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;\nimport org.apache.hadoop.hive.ser",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.io.BytesWritable;\n\n/**\n * This",
        "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n// buggy line:  return result;\n  if (result == null) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;\nimport org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;\nimport org.apache.hadoop.io.BytesWritable;\n\n/**\n * Comp"
      ],
      "function range": "2399,3-2402,3"
    },
    "Closure_146_/src/com/google/javascript/rhino/jstype/JSType.java_706-707": {
      "loc": "706-707",
      "input": "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);",
      "output": [
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a TemplateTypeMap, or returns null if this is not a\n * TemplateTypeMap.\n */\npublic TemplateTypeMap toMaybeTemplateTypeMap() {\n  return this instanceof TemplateTypeMap? (TemplateTypeMap) this : null;\n}\n\n/**\n * Casts this to a UnionType, or returns null if this is not a UnionType.\n */\npublic UnionType toMaybeUnionType() {\n  return this instanceof UnionType? (UnionType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a UnionType, or returns null if this is not a UnionType.\n */\npublic UnionType toMaybeUnionType() {\n  return this instanceof UnionType? (UnionType) this : null;\n}\n\n/**\n * Casts this to a loose array type, or returns null if this is not a",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a TemplateTypeMapType, or returns null if this is not a\n * TemplateTypeMapType.\n */\npublic TemplateTypeMapType toMaybeTemplateTypeMapType() {\n  return this instanceof TemplateTypeMapType? (TemplateTypeMapType) this : null;\n}\n\n/**\n * Casts this",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a UnionType, or returns null if this is not a UnionType.\n */\npublic UnionType toMaybeUnionType() {\n  return this instanceof UnionType? (UnionType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a Function",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a NamespaceType, or returns null if this is not a NamespaceType.\n */\npublic NamespaceType toMaybeNamespaceType() {\n  return this instanceof NamespaceType? (NamespaceType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a UnionType, or returns null if this is not a UnionType.\n */\npublic UnionType toMaybeUnionType() {\n  return this instanceof UnionType? (UnionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or throws an exception if this is not a",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not an NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a UnionType, or returns null if this is not a UnionType.\n */\npublic UnionType toMaybeUnionType() {\n  return this instanceof UnionType? (UnionType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a Function",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a UnionType, or returns null if this is not a UnionType.\n */\npublic UnionType toMaybeUnionType() {\n  return this instanceof UnionType? (UnionType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or throws an exception if this is not a",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a NamespaceType, or returns null if this is not a NamespaceType.\n */\npublic NamespaceType toMaybeNamespaceType() {\n  return this instanceof NamespaceType? (NamespaceType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or throws an",
        "public TypePair getTypesUnderInequality(JSType that) {\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n  switch (this.testForEquality(that)) {\n    case TRUE:\n// buggy line:      return new TypePair(null, null);\n    case FALSE:\n      return new TypePair(null, null);\n    case UNKNOWN:\n      return new TypePair(null, null);\n    default:\n      return new TypePair(this, that);\n  }\n}\n\n/**\n * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n */\npublic ObjectType toMaybeObjectType() {\n  return this instanceof ObjectType? (ObjectType) this : null;\n}\n\n/**\n * Casts this to a FunctionType, or returns null if this is not a FunctionType.\n */\npublic FunctionType toMaybeFunctionType() {\n  return this instanceof FunctionType? (FunctionType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or returns null if this is not a\n * TemplateType.\n */\npublic TemplateType toMaybeTemplateType() {\n  return this instanceof TemplateType? (TemplateType) this : null;\n}\n\n/**\n * Casts this to a RecordType, or returns null if this is not a RecordType.\n */\npublic RecordType toMaybeRecordType() {\n  return this instanceof RecordType? (RecordType) this : null;\n}\n\n/**\n * Casts this to a NamedType, or returns null if this is not a NamedType.\n */\npublic NamedType toMaybeNamedType() {\n  return this instanceof NamedType? (NamedType) this : null;\n}\n\n/**\n * Casts this to a NamespaceType, or returns null if this is not a NamespaceType.\n */\npublic NamespaceType toMaybeNamespaceType() {\n  return this instanceof NamespaceType? (NamespaceType) this : null;\n}\n\n/**\n * Casts this to a TemplateType, or"
      ],
      "function range": "696,3-715,3"
    },
    "Closure_150_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1451-1466": {
      "loc": "1451-1466",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }",
      "output": [
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed  under the  License",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n// buggy line:  attachLiteralTypes(n);\n// buggy line:  switch (n.getType()) {\n// buggy line:    case Token.FUNCTION:\n// buggy line:      if (parent.getType() == Token.NAME) {\n// buggy line:        return;\n// buggy line:      }\n// buggy line:      defineDeclaredFunction(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.CATCH:\n// buggy line:      defineCatch(n, parent);\n// buggy line:      break;\n// buggy line:    case Token.VAR:\n// buggy line:      defineVar(n, parent);\n// buggy line:      break;\n// buggy line:  }\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the"
      ],
      "function range": "1443,5-1466,5"
    },
    "Closure_152_/src/com/google/javascript/rhino/jstype/FunctionType.java_871-872": {
      "loc": "871-872",
      "input": "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
      "output": [
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.alge",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algeb",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.al",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.alge",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IS",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.al",
        "@Override\nJSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = (ArrowType) safeResolve(call, t, scope);\n  prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n// buggy line:  typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n  return this;\n}\n\n@Override\npublic <T> T visit(Visitor<T> visitor) {\n  return visitor.caseFunctionType(this);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IE"
      ],
      "function range": "861,3-892,3"
    },
    "Closure_159_/src/com/google/javascript/jscomp/InlineFunctions.java_777-781": {
      "loc": "777-781",
      "input": "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());",
      "output": [
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggreg",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.eval",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.h",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.",
        "private void findCalledFunctions(\n    Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed!= null);\n// buggy line:  if (node.getType() == Token.CALL) {\n// buggy line:    Node child = node.getFirstChild();\n// buggy line:    if (child.getType() == Token.NAME) {\n// buggy line:      changed.add(child.getString());\n// buggy line:    }\n// buggy line:  }\n  if (node.getType() == Token.CALL) {\n    Node child = node.getFirstChild();\n    if (child.getType() == Token.NAME) {\n      changed.add(child.getString());\n    }\n  }\n  for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {\n    findCalledFunctions(c, changed);\n  }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.fun"
      ],
      "function range": "773,3-787,3"
    },
    "Closure_168_/src/com/google/javascript/jscomp/TypedScopeCreator.java_1996-1997": {
      "loc": "1996-1997",
      "input": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {",
      "output": [
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IA",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.alge",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAgg",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IS",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvalu",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n",
        "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope()) {\n    return;\n  }\n  if (n.isReturn() && n.getFirstChild()!= null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n// buggy line:  if (t.getScopeDepth() <= 2) {\n  if (t.getScopeDepth() <= 1) {\n    data.get(t.getScopeRoot()).recordNonEmptyFunction();\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopy"
      ],
      "function range": "1987,5-2038,5"
    },
    "Codec_2_/src/java/org/apache/commons/codec/binary/Base64.java_446-447": {
      "loc": "446-447",
      "input": "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {",
      "output": [
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n        if (lineLength > 0) {\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n//            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n//            pos += lineSeparator.length;\n//        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 12) &",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n        if (lineLength > 0) {\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n        eof = true;\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n//            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n//            pos += lineSeparator.length;\n//        }\n        eof = true;\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n//            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n//            pos += lineSeparator.length;\n//        }\n        eof = true;\n        return;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        modulus = (++modulus) % 3;\n        int b = in[inPos++];\n        if (b < 0) {\n            b += 256;\n        }\n        x = (x << 8) + b;\n        if (0 == modulus) {\n            buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n            buf[pos++] =",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n// buggy line:            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n// buggy line:            pos += lineSeparator.length;\n        eof = true;\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] =",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n//                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n//                pos += lineSeparator.length;\n//            }\n        eof = true;\n        return;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        modulus = (++modulus) % 3;\n        int b = in[inPos++];\n        if (b < 0) {\n            b += 256;\n        }\n        x = (x << 8) + b;\n        if (0 == modulus) {\n            buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n            buf[pos++] =",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n//                System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n//                pos += lineSeparator.length;\n//            }\n        eof = true;\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus) % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];\n                buf[pos++] = encodeTable",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n        if (lineLength > 0) {\n            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n            pos += lineSeparator.length;\n        }\n    } else {\n        for (int i = 0; i < inAvail; i++) {\n            if (buf == null || buf.length - pos < encodeSize) {\n                resizeBuf();\n            }\n            modulus = (++modulus % 3) == 0? 0 : 3 - modulus % 3;\n            int b = in[inPos++];\n            if (b < 0) {\n                b += 256;\n            }\n            x = (x << 8) + b;\n            if (0 == modulus) {\n                buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS",
        "void encode(byte[] in, int inPos, int inAvail) {\n    if (eof) {\n        return;\n    }\n    if (inAvail < 0) {\n        eof = true;\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        switch (modulus) {\n            case 1:\n                buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                    buf[pos++] = PAD;\n                }\n                break;\n            case 2:\n                buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                if (encodeTable == STANDARD_ENCODE_TABLE) {\n                    buf[pos++] = PAD;\n                }\n                break;\n        }\n// buggy line:        if (lineLength > 0) {\n// buggy line:            System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n// buggy line:            pos += lineSeparator.length;\n// buggy line:        }\n        eof = true;\n        return;\n    }\n    for (int i = 0; i < inAvail; i++) {\n        if (buf == null || buf.length - pos < encodeSize) {\n            resizeBuf();\n        }\n        modulus = (++modulus) % 3;\n        int b = in[inPos++];\n        if (b < 0) {\n            b += 256;\n        }\n        x = (x << 8) + b;\n        if (0 == modulus) {\n            buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS"
      ],
      "function range": "414,5-473,5"
    },
    "Codec_4_/src/java/org/apache/commons/codec/binary/Base64.java_225-226": {
      "loc": "225-226",
      "input": "public Base64() {\n// buggy line:    this(false);",
      "output": [
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    public boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    public int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     *\n     * @param b      byte[] array to extract the buffered data into.\n     * @param bPos   position in byte[] array to start extraction at.\n     * @param bAvail amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    public int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >= pos) {\n                buf = null;\n",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    public boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    public int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    public int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >=",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    public boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    public int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting\n     * at position bPos, up to a maximum of bAvail bytes. Returns how\n     * many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract\n     *            fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided\n     *         byte[] array.\n     */\n    public int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            ",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf!= null) {\n            int len = Math.min(avail(), bAvail);\n            if (buf!= b) {\n                System.arraycopy(buf, readPos, b, bPos, len);\n                readPos += len;\n                if (readPos >= pos) {\n                    buf = null;\n                ",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    public boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    public int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting\n     * at position bPos, up to a maximum of bAvail bytes. Returns how\n     * many bytes were actually extracted.\n     *\n     * @param b      byte[] array to extract the buffered data into.\n     * @param bPos   position in byte[] array to start extraction at.\n     * @param bAvail amount of bytes we're allowed to extract. We may extract\n     *               fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided\n     *         byte[] array.\n     */\n    public int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            readPos += len;\n            if (read",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >= pos)",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting\n     * at position bPos, up to a maximum of bAvail bytes. Returns how\n     * many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract\n     *            fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided\n     *         byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            readPos",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    public boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    public int avail() {\n        return buf!= null? pos - readPos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    public int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= null) {\n            System.arraycopy(buf, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >=",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    public boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    public int avail() {\n        return buf!= null? pos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail\n     * bytes. Returns how many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided byte[] array.\n     */\n    public int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, pos, b, bPos, len);\n            pos += len;\n            if (pos >= buf.length) {\n                buf = null;\n            ",
        "public Base64() {\n// buggy line:    this(false);\n        this(true);\n    }\n\n    public Base64(boolean urlSafe) {\n        this.urlSafe = urlSafe;\n    }\n\n    /**\n     * Returns true if this Base64 object has buffered data for reading.\n     *\n     * @return true if there is Base64 object still available for reading.\n     */\n    boolean hasData() {\n        return buf!= null;\n    }\n\n    /**\n     * Returns the amount of buffered data available for reading.\n     *\n     * @return The amount of buffered data available for reading.\n     */\n    int avail() {\n        return buf!= null? pos : 0;\n    }\n\n    /** Doubles our buffer. */\n    private void resizeBuf() {\n        if (buf == null) {\n            buf = new byte[8192];\n            pos = 0;\n        } else {\n            byte[] b = new byte[buf.length * 2];\n            System.arraycopy(buf, 0, b, 0, buf.length);\n            buf = b;\n        }\n    }\n\n    /**\n     * Extracts buffered data into the provided byte[] array, starting\n     * at position bPos, up to a maximum of bAvail bytes. Returns how\n     * many bytes were actually extracted.\n     *\n     * @param b\n     *            byte[] array to extract the buffered data into.\n     * @param bPos\n     *            position in byte[] array to start extraction at.\n     * @param bAvail\n     *            amount of bytes we're allowed to extract. We may extract\n     *            fewer (if fewer are available).\n     * @return The number of bytes successfully extracted into the provided\n     *         byte[] array.\n     */\n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buf == null) {\n            return -1;\n        }\n        int len = Math.min(avail(), bAvail);\n        if (buf!= b) {\n            System.arraycopy(buf, pos, b, bPos, len);\n            pos += len;\n            if (pos >= buf.length"
      ],
      "function range": "224,5-226,5"
    },
    "Codec_7_/src/java/org/apache/commons/codec/binary/Base64.java_670-671": {
      "loc": "670-671",
      "input": "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
      "output": [
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean url",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useHex) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useHex, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useHex) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, useHex, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean url",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, useUrlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe,",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(String base64String, boolean urlSafe) {\n        return decodeBase64(base64String.getBytes(), urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, useUrlSafe);\n    }\n\n    public static byte[] decodeBase64(",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useUrlSafe",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useHex) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useHex, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe, boolean useHex) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, useHex);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe,",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(String base64String, boolean urlSafe) {\n        return decodeBase64(base64String.getBytes(), urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[]",
        "public static String encodeBase64String(byte[] binaryData) {\n// buggy line:    return StringUtils.newStringUtf8(encodeBase64(binaryData, true));\n        return StringUtils.newStringUtf8(encodeBase64(binaryData));\n    }\n\n    public static byte[] decodeBase64(String base64String) {\n        return decodeBase64(base64String.getBytes());\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return decodeBase64(base64Data, 0, base64Data.length);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length) {\n        return decodeBase64(base64Data, offset, length, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe) {\n        return decodeBase64(base64Data, offset, length, urlSafe, useUrlSafe, true);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, boolean urlSafe) {\n        return decodeBase64(base64Data, 0, base64Data.length, urlSafe);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data, int offset, int length, boolean urlSafe, boolean useUrlSafe, boolean allowEmptyInput"
      ],
      "function range": "669,5-671,5"
    },
    "Codec_9_/src/java/org/apache/commons/codec/binary/Base64.java_827-828": {
      "loc": "827-828",
      "input": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
      "output": [
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\n",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe,",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n *            <b>Note: no padding is added.</b>\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static byte[] encodeBase64(",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n * @param maxResultSize\n *            The maximum number of bytes of result data to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static byte[] encodeBase64(byte[] binaryData, boolean isChunked,",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n *            <b>Note: no padding is added when using URL-safe encoding</b>\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static byte[] encodeBase64(final byte[] binaryData, final boolean isChunked, final boolean",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n * @param maxResultSize\n *            The maximum result size to accept.\n *\n * @return Base64-encoded data.\n *\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResult",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static byte[] encodeBase64(\n        byte[] binaryData,\n        boolean isChunked",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n *            <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>\n * @param maxResultSize\n *            The maximum result size to accept.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n * @",
        "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n    if (binaryData == null || binaryData.length == 0) {\n        return binaryData;\n    }\n// buggy line:    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);\n    if (len > maxResultSize) {\n        throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);\n    }\n    byte[] base64Data = new byte[(int) len];\n    bin2b64(binaryData, 0, base64Data, 0, binaryData.length);\n    if (isChunked) {\n        base64Data[base64Data.length - 2] = (byte) CHUNK_SEPARATOR;\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    } else if (!urlSafe) {\n        base64Data[base64Data.length - 1] = (byte) CHUNK_SEPARATOR;\n    }\n    return base64Data;\n}\n\n/**\n * Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.\n *\n * @param binaryData\n *            Array containing binary data to encode.\n * @param isChunked\n *            if {@code true} this encoder will chunk the base64 output into 76 character blocks\n * @param urlSafe\n *            if {@code true} this encoder will emit - and _ instead of the usual + and / characters.\n *            <b>Note: no padding is added.</b>\n * @param maxResultSize\n *            The maximum number of bytes the result is allowed to have.\n * @return Base64-encoded data.\n * @throws IllegalArgumentException\n *             Thrown when the input array needs an output array bigger than maxResultSize\n */\npublic static byte"
      ],
      "function range": "822,5-837,5"
    },
    "Codec_10_/src/java/org/apache/commons/codec/language/Caverphone.java_76-77": {
      "loc": "76-77",
      "input": "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");",
      "output": [
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt.replaceAll(\"^mb\", \"mb2\");\n    txt = txt",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    ",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy line:    ",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    ",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n\n    txt = txt",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    ",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    ",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    ",
        "public String caverphone(String txt) {\n    if( txt == null || txt.length() == 0 ) {\n        return \"1111111111\";\n    }\n    txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n    txt = txt.replaceAll(\"[^a-z]\", \"\");\n    txt = txt.replaceAll(\"e$\", \"\");             \n    txt = txt.replaceAll(\"^cough\", \"cou2f\");\n    txt = txt.replaceAll(\"^rough\", \"rou2f\");\n    txt = txt.replaceAll(\"^tough\", \"tou2f\");\n    txt = txt.replaceAll(\"^enough\", \"enou2f\");  \n    txt = txt.replaceAll(\"^trough\", \"trou2f\");  \n    txt = txt.replaceAll(\"^gn\", \"2n\");\n// buggy line:    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    txt = txt.replaceAll(\"^mb\", \"m2\");\n    \n    txt ="
      ],
      "function range": "50,5-142,5"
    },
    "Codec_17_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_339-340": {
      "loc": "339-340",
      "input": "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);",
      "output": [
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF32(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_32);\n    }\n\n    public static String newStringUTF32(final byte[] bytes, final int offset, final",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringASCII(final byte[] bytes) {\n        return new String(bytes, Charsets.US_ASCII);\n    }\n\n    public static String newStringASCII(final byte[] bytes, final int offset,",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUSASCII(final byte[] bytes) {\n        return new String(bytes, Charsets.US_ASCII);\n    }\n\n    public static String newStringUSASCII(final byte[] bytes, final int",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringGBK(final byte[] bytes) {\n        return new String(bytes, Charsets.GBK);\n    }\n\n    public static String newStringGBK(final byte[] bytes, final int offset, final int",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF32(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_32BE);\n    }\n\n    public static String newStringUTF32(final byte[] bytes, final int offset,",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringASCII(final byte[] bytes) {\n        return new String(bytes);\n    }\n\n    public static String newStringASCII(final byte[] bytes, final int offset, final int length) {\n        return new",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The AS",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringASCII(final byte[] bytes) {\n        return new String(bytes, Charset.forName(\"US-ASCII\"));\n    }\n\n    public static String newStringASCII(final byte[] bytes,",
        "public static String newStringIso8859_1(final byte[] bytes) {\n// buggy line:    return new String(bytes, Charsets.ISO_8859_1);\n        return new String(bytes, Charset.forName(\"ISO-8859-1\"));\n    }\n\n    public static String newStringIso8859_1(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.ISO_8859_1);\n    }\n\n    public static String newStringUTF8(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF8(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_8);\n    }\n\n    public static String newStringUTF16(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16BE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16BE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF16LE(final byte[] bytes, final int offset, final int length) {\n        return new String(bytes, offset, length, Charsets.UTF_16LE);\n    }\n\n    public static String newStringUTF32(final byte[] bytes) {\n        return new String(bytes, Charsets.UTF_32);\n    }\n\n    public static String newStringUTF32BE(final byte[] bytes) {\n        return"
      ],
      "function range": "338,5-340,5"
    },
    "Codec_18_/src/main/java/org/apache/commons/codec/binary/StringUtils.java_81-82": {
      "loc": "81-82",
      "input": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
      "output": [
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean startsWith(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    ",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static int hashCode(final CharSequence cs) {\n    if (cs == null) {\n        return 0;\n    }\n    if (cs instanceof String) {\n        ",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}\n\npublic static boolean isNotEmpty(final CharSequence",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean startsWithIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    ",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean startsWith(final CharSequence cs, final CharSequence prefix) {\n    if (cs == null || prefix == null) {\n        return false;\n    }\n    ",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static int hashCode(final CharSequence cs) {\n    if (cs == null) {\n        return 0;\n    }\n    return cs.hashCode();\n}\n\n",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static int hashCode(final CharSequence cs) {\n    if (cs == null) {\n        return 0;\n    }\n    int hash = cs.length();\n    for",
        "public static boolean equals(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.equals(cs2);\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (cs1.charAt(i)!= cs2.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsIgnoreCase(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n    if (cs1 == null || cs2 == null) {\n        return false;\n    }\n    if (cs1 instanceof String && cs2 instanceof String) {\n        return cs1.toString().equalsIgnoreCase(cs2.toString());\n    }\n// buggy line:    return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n    if (cs1.length()!= cs2.length()) {\n        return false;\n    }\n    for (int i = 0; i < cs1.length(); i++) {\n        if (Character.toLowerCase(cs1.charAt(i))!= Character.toLowerCase(cs2.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean startsWith(final CharSequence cs1, final CharSequence cs2) {\n    if (cs1 == cs2) {\n        return true;\n    }\n//"
      ],
      "function range": "71,5-82,5"
    },
    "Collections_26_/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java_277-278": {
      "loc": "277-278",
      "input": "\n// buggy line:private Object readResolve() {",
      "output": [
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    private static final long serialVersionUID = 1",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class MaxAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    private static final long serialVersionUID = 1L;",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class LocalSumAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    private static final long serialVersionUID = 1L",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlAvgAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    private static final long serialVersionUID =",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlSumAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    private static final long serialVersionUID = 1",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSql",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlSumAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    private static final long serialVersionUID =",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class LocalSql",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport org.apache.hyracks.data.std.primitive.UTF8StringPointable;\nimport org",
        "\n// buggy line:private Object readResolve() { return this; }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMin"
      ],
      "function range": "277,5-280,5"
    },
    "Compress_5_/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java_239-241": {
      "loc": "239-241",
      "input": "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n                ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;",
      "output": [
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n// buggy line:        }\n        if (read > 0) {\n            readBytesOfEntry += read;\n            crc.update(buffer, start, read);\n        }\n",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n        if (read > 0) {\n            readBytesOfEntry += read;\n            crc.update(buffer, start, read);\n        }\n        return read;\n    }",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n// buggy line:        }\n        if (read > 0) {\n            bytesReadFromStream += read;\n            readBytesOfEntry += read;\n            crc.update(buffer",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n// buggy line:        }\n        readBytesOfEntry += read;\n        crc.update(buffer, start, read);\n        return read;\n    }\n    return -1",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n// buggy line:        }\n        if (read > 0) {\n            readBytesOfEntry += read;\n            crc.update(buffer, start, read);\n            bytesRead",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n        if (read > 0) {\n            bytesReadFromStream += read;\n            readBytesOfEntry += read;\n            crc.update(buffer, start, read);\n        ",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n// buggy line:        }\n        if (read > 0) {\n            bytesReadFromStream += read;\n            crc.update(buffer, start, read);\n        }\n",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n        if (read > 0) {\n            readBytesOfEntry += read;\n            crc.update(buffer, start, read);\n            bytesReadFromStream += read;\n            ",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n        if (read > 0) {\n            bytesReadFromStream += read;\n            readBytesOfEntry += read;\n            crc.update(buffer, start, read);\n            ",
        "public int read(byte[] buffer, int start, int length) throws IOException {\n    if (closed) {\n        throw new IOException(\"The stream is closed\");\n    }\n    if (inf.finished() || current == null) {\n        return -1;\n    }\n    if (start <= buffer.length && length >= 0 && start >= 0\n        && buffer.length - start >= length) {\n        if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n            int csize = (int) current.getSize();\n            if (readBytesOfEntry >= csize) {\n                return -1;\n            }\n            if (offsetInBuffer >= lengthOfLastRead) {\n                offsetInBuffer = 0;\n                if ((lengthOfLastRead = in.read(buf)) == -1) {\n                    return -1;\n                }\n                count(lengthOfLastRead);\n                bytesReadFromStream += lengthOfLastRead;\n            }\n            int toRead = length > lengthOfLastRead\n               ? lengthOfLastRead - offsetInBuffer\n                : length;\n            if ((csize - readBytesOfEntry) < toRead) {\n                toRead = csize - readBytesOfEntry;\n            }\n            System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n            offsetInBuffer += toRead;\n            readBytesOfEntry += toRead;\n            crc.update(buffer, start, toRead);\n            return toRead;\n        }\n        if (inf.needsInput()) {\n            fill();\n            if (lengthOfLastRead > 0) {\n                bytesReadFromStream += lengthOfLastRead;\n            }\n        }\n        int read = 0;\n        try {\n            read = inf.inflate(buffer, start, length);\n        } catch (DataFormatException e) {\n            throw new ZipException(e.getMessage());\n        }\n// buggy line:        if (read == 0 && inf.finished()) {\n// buggy line:            return -1;\n// buggy line:        }\n        readBytesOfEntry += read;\n        crc.update(buffer, start, read);\n        return read;\n    } else {\n        return"
      ],
      "function range": "191,5-246,5"
    },
    "Compress_12_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java_198-199": {
      "loc": "198-199",
      "input": "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry != null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);",
      "output": [
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset >= entrySize) {\n      return -1;\n    }\n    return readBuf[entryOffset++] & 0xff;\n  }\n\n  @Override\n",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    if (numToRead > 0) {\n      System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n      entryOffset += numToRead;\n    }\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset >= entrySize) {\n      return -1;\n    }\n    return readBuf[entryOffset",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset < entrySize) {\n      return readBuf[entryOffset++] & 0xff;\n    }\n    hasHitEOF = true;\n    return -1",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset >= entrySize) {\n      return -1;\n    }\n    return readBuf[entryOffset++] & 0xFF;\n  }\n\n  @Override",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read(byte[] b) throws IOException {\n    return read(b, 0, b.length);\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset >= entrySize",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    if (numToRead > 0) {\n      System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n      entryOffset += numToRead;\n    }\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset < entrySize) {\n      return readBuf[entryOffset++] & 0xff;\n    }",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset >= entrySize) {\n      return -1;\n    }\n    return readBuf[entryOffset++] & 0xff;\n  }\n\n  private byte[]",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read(byte[] b) throws IOException {\n    return read(b, 0, b.length);\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    return readBuf[entryOffset",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    if (entryOffset >= entrySize) {\n      return -1;\n    }\n    return readBuf[entryOffset++] & 0xFF;\n  }\n\n  private byte",
        "public TarArchiveEntry getNextTarEntry() throws IOException {\n    if (hasHitEOF) {\n        return null;\n    }\n    if (currEntry!= null) {\n        long numToSkip = entrySize - entryOffset;\n        while (numToSkip > 0) {\n            long skipped = skip(numToSkip);\n            if (skipped <= 0) {\n                throw new RuntimeException(\"failed to skip current tar entry\");\n            }\n            numToSkip -= skipped;\n        }\n        readBuf = null;\n    }\n    byte[] headerBuf = getRecord();\n    if (hasHitEOF) {\n        currEntry = null;\n        return null;\n    }\n// buggy line:    currEntry = new TarArchiveEntry(headerBuf);\n    currEntry = new TarArchiveEntry(headerBuf);\n    entryOffset = 0;\n    entrySize = currEntry.getSize();\n    return currEntry;\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    int numToRead = Math.min(len, entrySize - entryOffset);\n    System.arraycopy(readBuf, entryOffset, b, off, numToRead);\n    entryOffset += numToRead;\n    return numToRead;\n  }\n\n  @Override\n  public int read() throws IOException {\n    if (hasHitEOF) {\n      return -1;\n    }\n    if (readBuf == null) {\n      readBuf = getRecord();\n    }\n    if (readBuf == null) {\n      hasHitEOF = true;\n      return -1;\n    }\n    return readBuf[entryOffset++] & 0xff;\n  }\n\n  @Override\n  public long skip(long n) throws IOException {\n    if (hasHitEOF"
      ],
      "function range": "172,5-238,5"
    },
    "Compress_14_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_65-73": {
      "loc": "65-73",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i] != 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {",
      "output": [
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.c",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.c",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n// buggy line:    boolean allNUL = true;\n// buggy line:    for (int i = start; i < end; i++){\n// buggy line:        if (buffer[i]!= 0){\n// buggy line:            allNUL = false;\n// buggy line:            break;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if (allNUL) {\n// buggy line:        return 0;\n// buggy line:    }\n    boolean allNUL = true;\n    for (int i = start; i < end; i++){\n        if (buffer[i]!= 0){\n            allNUL = false;\n            break;\n        }\n    }\n    if (allNUL) {\n        return 0;\n    }\n    for (int i = start; i < end; i++){\n        result = (result << 3) + (buffer[i] & 0xFF);\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.comm"
      ],
      "function range": "56,5-112,5"
    },
    "Compress_19_/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java_259-260": {
      "loc": "259-260",
      "input": "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData != null) {\n        int expectedLength = (hasUncompressedSize ? DWORD : 0)\n            + (hasCompressedSize ? DWORD : 0)\n            + (hasRelativeHeaderOffset ? DWORD : 0)\n            + (hasDiskStart ? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length != expectedLength) {",
      "output": [
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] & 0xFF);\n            rawCentralDirectoryData[10",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte)(rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte)(rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte)(rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte)(rawCentralDirectoryData[3] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[4] = (byte)(rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte)(rawCentralDirectoryData[5] & 0xFF);\n            rawCentralDirectoryData[6] = (byte)(rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte)(rawCentralDirectoryData[7] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[8] = (byte)(rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte)(rawCentralDirectoryData[9] & 0xFF);\n            rawCentralDirectoryData[10] = (byte)(rawCentralDirectoryData[",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n        }\n        if (hasDiskStart) {\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] &",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte)(rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte)(rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte)(rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte)(rawCentralDirectoryData[3] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[4] = (byte)(rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte)(rawCentralDirectoryData[5] & 0xFF);\n            rawCentralDirectoryData[6] = (byte)(rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte)(rawCentralDirectoryData[7] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[8] = (byte)(rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte)(rawCentralDirectoryData[9] & 0xFF);\n        }\n        if (hasDiskStart) {\n            rawCentralDirectoryData",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] & 0xFF);\n        }\n        if (has",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n        }\n        if (hasDiskStart) {\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] &",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] & 0xFF);\n            rawCentralDirectoryData[10] = (byte) (rawCentralDirectoryData[10] &",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] & 0xFF);\n            rawCentralDirectoryData[10] = (byte) (rawCentralDirectoryData[10] &",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[10",
        "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                        boolean hasCompressedSize,\n                                        boolean hasRelativeHeaderOffset,\n                                        boolean hasDiskStart)\n    throws ZipException {\n    if (rawCentralDirectoryData!= null) {\n        int expectedLength = (hasUncompressedSize? DWORD : 0)\n            + (hasCompressedSize? DWORD : 0)\n            + (hasRelativeHeaderOffset? DWORD : 0)\n            + (hasDiskStart? WORD : 0);\n// buggy line:        if (rawCentralDirectoryData.length!= expectedLength) {\n        if (rawCentralDirectoryData.length < expectedLength) {\n            throw new ZipException(\"Central directory data too short\");\n        }\n        if (rawCentralDirectoryData.length > expectedLength) {\n            throw new ZipException(\"Central directory data too long\");\n        }\n        if (hasUncompressedSize) {\n            rawCentralDirectoryData[0] = (byte) (rawCentralDirectoryData[0] & 0xFF);\n            rawCentralDirectoryData[1] = (byte) (rawCentralDirectoryData[1] & 0xFF);\n            rawCentralDirectoryData[2] = (byte) (rawCentralDirectoryData[2] & 0xFF);\n        }\n        if (hasCompressedSize) {\n            rawCentralDirectoryData[3] = (byte) (rawCentralDirectoryData[3] & 0xFF);\n            rawCentralDirectoryData[4] = (byte) (rawCentralDirectoryData[4] & 0xFF);\n            rawCentralDirectoryData[5] = (byte) (rawCentralDirectoryData[5] & 0xFF);\n        }\n        if (hasRelativeHeaderOffset) {\n            rawCentralDirectoryData[6] = (byte) (rawCentralDirectoryData[6] & 0xFF);\n            rawCentralDirectoryData[7] = (byte) (rawCentralDirectoryData[7] & 0xFF);\n            rawCentralDirectoryData[8] = (byte) (rawCentralDirectoryData[8] & 0xFF);\n            rawCentralDirectoryData[9] = (byte) (rawCentralDirectoryData[9] & 0xFF);\n        }\n        if (has"
      ],
      "function range": "249,5-287,5"
    },
    "Compress_23_/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java_112-113": {
      "loc": "112-113",
      "input": "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));",
      "output": [
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    if (coder.properties[15] == 0) {\n        coder.properties[15]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    if (coder.properties[15] == 0) {\n        coder.properties[15] = -1;\n    }\n    if (coder.properties[16] == 0) {\n        coder.properties[16]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    if (coder.properties[16] == 0) {\n        coder.properties[16]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n\n    if (coder.properties[15] == 0) {\n        coder.properties[15]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    if (propsByte == 0) {\n        propsByte = -1;\n    }\n",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n\n    if (coder.properties[3] == 0) {\n        coder.properties[3]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    if (coder.properties[15]!= 0) {\n        coder.properties[15]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    if (coder.properties[15] == 0) {\n        coder.properties[14]",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    coder.properties[15] = -1;\n    coder.properties[16] = -",
        "@Override\nInputStream decode(final InputStream in, final Coder coder,\n        byte[] password) throws IOException {\n    byte propsByte = coder.properties[0];\n    long dictSize = coder.properties[1];\n    for (int i = 1; i < 4; i++) {\n// buggy line:        dictSize |= (coder.properties[i + 1] << (8 * i));\n        dictSize |= (coder.properties[i + 1] & 0xFF) << (8 * i);\n    }\n    if (dictSize == 0) {\n        dictSize = -1;\n    }\n    if (coder.properties[4] == 0) {\n        coder.properties[4] = -1;\n    }\n    if (coder.properties[5] == 0) {\n        coder.properties[5] = -1;\n    }\n    if (coder.properties[6] == 0) {\n        coder.properties[6] = -1;\n    }\n    if (coder.properties[7] == 0) {\n        coder.properties[7] = -1;\n    }\n    if (coder.properties[8] == 0) {\n        coder.properties[8] = -1;\n    }\n    if (coder.properties[9] == 0) {\n        coder.properties[9] = -1;\n    }\n    if (coder.properties[10] == 0) {\n        coder.properties[10] = -1;\n    }\n    if (coder.properties[11] == 0) {\n        coder.properties[11] = -1;\n    }\n    if (coder.properties[12] == 0) {\n        coder.properties[12] = -1;\n    }\n    if (coder.properties[13] == 0) {\n        coder.properties[13] = -1;\n    }\n    if (coder.properties[14] == 0) {\n        coder.properties[14] = -1;\n    }\n    coder.properties[15] = 0;\n    coder.properties[16] = 0;"
      ],
      "function range": "106,9-118,9"
    },
    "Compress_27_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_133-137": {
      "loc": "133-137",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }",
      "output": [
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end) {\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n// buggy line:    if (start == end) {\n// buggy line:        throw new IllegalArgumentException(\n// buggy line:                exceptionMessage(buffer, offset, length, start, trailer));\n// buggy line:    }\n    if (start == end){\n        throw new IllegalArgumentException(\n                exceptionMessage(buffer, offset, length, start, trailer));\n    }\n    for (int i = start; i < end; i++){\n        if (buffer[i] < '0' || buffer[i] > '7'){\n            throw new IllegalArgumentException(\n                    exceptionMessage(buffer, offset, length, start, trailer));\n        }\n        result = (result << 3) + (buffer[i] - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed"
      ],
      "function range": "102,5-150,5"
    },
    "Compress_31_/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java_135-138": {
      "loc": "135-138",
      "input": "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] == ' '){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer == ' ')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        }",
      "output": [
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result *= 8;\n        result += currentByte - '0';\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result *= 8;\n        result += currentByte - '0';\n    }\n    return result;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage",
        "public static long parseOctal(final byte[] buffer, final int offset, final int length) {\n    long    result = 0;\n    int     end = offset + length;\n    int     start = offset;\n    if (length < 2){\n        throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n    }\n    if (buffer[start] == 0) {\n        return 0L;\n    }\n    while (start < end){\n        if (buffer[start] ==''){\n            start++;\n        } else {\n            break;\n        }\n    }\n    byte trailer = buffer[end - 1];\n    while (start < end && (trailer == 0 || trailer =='')) {\n        end--;\n        trailer = buffer[end - 1];\n    }\n    for ( ;start < end; start++) {\n        final byte currentByte = buffer[start];\n// buggy line:        if (currentByte == 0) {\n// buggy line:            break;\n// buggy line:        } else if (currentByte < '0' || currentByte > '7') {\n        if (currentByte < '0' || currentByte > '7') {\n            break;\n        }\n        result = (result << 3) + (currentByte - '0');\n    }\n    return result;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache"
      ],
      "function range": "101,5-148,5"
    },
    "Compress_38_/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java_859-860": {
      "loc": "859-860",
      "input": "@Override\npublic boolean isDirectory() {\n    if (file != null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {",
      "output": [
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic long lastModified() {\n    if (file!= null) {\n        return file.lastModified();",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isRemovable() {\n    if (file!= null) {\n        return file.isRemovable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWriteable() {\n    if (file!= null) {\n        return file.isWriteable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic long lastModified() {\n    if (file!= null) {\n        return file.lastModified();",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isRemovable() {\n    if (file!= null) {\n        return file.isRemovable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWriteable() {\n    if (file!= null) {\n        return file.isWriteable();",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isExecutable() {\n    if (file!= null) {\n        return file.isExecutable();",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isSymbolicLink() {\n    if (file!= null) {\n        return file.isSy",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (!getName().endsWith(\"/\")) {\n    if (!getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().startsWith(\".\")) {\n    if (getName().startsWith(\".\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().startsWith(\".\")) {\n    if (getName().startsWith(\".\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().startsWith(\".\")) {\n    if (getName().startsWith(\".\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic long lastModified() {\n    if (file!= null) {\n        return",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean setReadable(boolean readable) {\n    if (file!= null) {\n        return file.",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean setExecutable(boolean executable, boolean ownerOnly) {\n    if (file!= null) {\n",
        "@Override\npublic boolean isDirectory() {\n    if (file!= null) {\n        return file.isDirectory();\n    }\n    if (linkFlag == LF_DIR) {\n        return true;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n}\n\n@Override\npublic boolean isFile() {\n    if (file!= null) {\n        return file.isFile();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isHidden() {\n    if (file!= null) {\n        return file.isHidden();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isReadable() {\n    if (file!= null) {\n        return file.isReadable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean isWritable() {\n    if (file!= null) {\n        return file.isWritable();\n    }\n    if (linkFlag == LF_DIR) {\n        return false;\n    }\n// buggy line:    if (getName().endsWith(\"/\")) {\n    if (getName().endsWith(\"/\")) {\n        return false;\n    }\n    return true;\n}\n\n@Override\npublic boolean setReadable(boolean readable, boolean ownerOnly) {\n    if (file!= null) {\n"
      ],
      "function range": "849,5-864,5"
    },
    "Compress_46_/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java_529-531": {
      "loc": "529-531",
      "input": "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {",
      "output": [
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCache;\nimport org.apache.ignite.cache.CacheAtomicityMode;\nimport org.apache.ignite.cache.CacheMode;\nimport org.apache.ignite.configuration.CacheConfiguration;\nimport org.apache.ignite.configuration.IgniteConfiguration;\nimport org.apache.ignite.configuration.NearCacheConfiguration;\nimport org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\nimport org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\nimport",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * Compute IF(expr1, expr2, expr3) for 3 input column expressions.\n * The first is always a boolean (",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n\n/**\n * Compute IF(expr1, expr2, expr3) for 3 input column expressions.\n * The first is always a boolean (LongColumnVector).\n * The second is a string (BytesColumnVector).\n * The third is",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n\n/**\n * Compute IF(expr1, expr2, expr3) for 3 input column expressions.\n * The first is always a boolean (LongColumnVector).\n * The second is a string",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * Compute IF(expr1, expr2, expr3) for 3 input column expressions",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimal",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n\n/**\n * Compute IF(expr1, expr2, expr3) for 3 input column expressions.\n * The first is always a boolean (LongColumnVector).\n * The second and third are",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.io.HiveDecimalWritable;\nimport org.apache.h",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2.objectinspector.prim",
        "private static ZipLong unixTimeToZipLong(long l) {\n// buggy line:    final long TWO_TO_32 = 0x100000000L;\n// buggy line:    if (l >= TWO_TO_32) {\n        final long TWO_TO_32 = 0x80000000L;\n        if (l >= TWO_TO_32) {\n            return new ZipLong(TWO_TO_32 - 1);\n        } else {\n            return new ZipLong(l);\n        }\n// buggy line:    }\n// buggy line:    return new ZipLong(l);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * Compute IF(expr1"
      ],
      "function range": "528,5-534,5"
    },
    "Csv_1_/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java_58-59": {
      "loc": "58-59",
      "input": "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {",
      "output": [
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work",
        "@Override\npublic int read() throws IOException {\n    int current = super.read();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int read(byte[] b, int off, int len) throws IOException {\n    int current = super.read(b, off, len);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic long skip(long n) throws IOException {\n    long current = super.skip(n);\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic int available() throws IOException {\n    int current = super.available();\n// buggy line:    if (current == '\\n') {\n    if (current == '\\r') {\n        int next = super.read();\n        if (next!= '\\n') {\n            super.unread(next);\n        }\n    }\n    return current;\n}\n\n@Override\npublic void close() throws IOException {\n    super.close();\n}\n\n@Override\npublic synchronized void mark(int readlimit) {\n    super.mark(readlimit);\n}\n\n@Override\npublic synchronized void reset() throws IOException {\n    super.reset();\n}\n\n@Override\npublic boolean markSupported() {\n    return super.markSupported();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with this\n * work"
      ],
      "function range": "55,5-63,5"
    },
    "Csv_4_/src/main/java/org/apache/commons/csv/CSVParser.java_288-289": {
      "loc": "288-289",
      "input": "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);",
      "output": [
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algeb",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.H",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyr",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.",
        "public Map<String, Integer> getHeaderMap() {\n// buggy line:    return new LinkedHashMap<String, Integer>(this.headerMap);\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>(this.headerMap.size());\n        map.putAll(this.headerMap);\n        return map;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\nimport org.apache.hyracks.api.ex"
      ],
      "function range": "287,5-289,5"
    },
    "Csv_11_/src/main/java/org/apache/commons/csv/CSVParser.java_384-385": {
      "loc": "384-385",
      "input": "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader != null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord != null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord != null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();",
      "output": [
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.flink.",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.trim().isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.trim().isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.trim().isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.trim().isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.process",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.aster",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.sdk",
        "private Map<String, Integer> initializeHeader() throws IOException {\n    Map<String, Integer> hdrMap = null;\n    final String[] formatHeader = this.format.getHeader();\n    if (formatHeader!= null) {\n        hdrMap = new LinkedHashMap<String, Integer>();\n        String[] headerRecord = null;\n        if (formatHeader.length == 0) {\n            final CSVRecord nextRecord = this.nextRecord();\n            if (nextRecord!= null) {\n                headerRecord = nextRecord.values();\n            }\n        } else {\n            if (this.format.getSkipHeaderRecord()) {\n                this.nextRecord();\n            }\n            headerRecord = formatHeader;\n        }\n        if (headerRecord!= null) {\n            for (int i = 0; i < headerRecord.length; i++) {\n                final String header = headerRecord[i];\n                final boolean containsHeader = hdrMap.containsKey(header);\n// buggy line:                final boolean emptyHeader = header.trim().isEmpty();\n                final boolean emptyHeader = header.isEmpty();\n                if (!containsHeader &&!emptyHeader) {\n                    hdrMap.put(header, i);\n                }\n            }\n        }\n    }\n    return hdrMap;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam.runners."
      ],
      "function range": "359,5-394,5"
    },
    "Csv_14_/src/main/java/org/apache/commons/csv/CSVFormat.java_1039-1040": {
      "loc": "1039-1040",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
      "output": [
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < '",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c < '",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c > 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c > '",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' || c < 'A' || c > 'Z' || c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' || c < 'A' || c > 'Z' || c < '",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z') {\n                quote = true;\n            }\n        }\n        break;\n    }\n    if (quote) {\n        out.append(delimChar);\n        out.append(quoteChar",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z') {\n                quote = true;\n            }\n        }\n        break;\n    }\n    if (quote) {\n        out.append(quoteChar);\n    }\n    out.append(",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z') {\n                quote = true;\n            }\n        }\n        break;\n    }\n    if (quote) {\n        if (newRecord) {\n            out.append(quoteChar);\n",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z') {\n                quote = true;\n            }\n        }\n        break;\n    }\n    if (quote) {\n        if (newRecord) {\n            out.append(delimChar);",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z')) {\n                ",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NUMERIC:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c < 'a' || c > 'z')) {\n            if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' || c > '"
      ],
      "function range": "1001,5-1106,5"
    },
    "Csv_15_/src/main/java/org/apache/commons/csv/CSVFormat.java_1189-1192": {
      "loc": "1189-1192",
      "input": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote = !(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {",
      "output": [
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D ||",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c <",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n// buggy line:                quote = true;\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 ||",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B || c > 0x2D ||",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            quote = true;\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B &&",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B || c > 0x2F ||",
        "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,\n        final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote = false;\n    int start = offset;\n    int pos = offset;\n    final int end = offset + len;\n    final char delimChar = getDelimiter();\n    final char quoteChar = getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy = getQuoteMode();\n    if (quoteModePolicy == null) {\n        quoteModePolicy = QuoteMode.MINIMAL;\n    }\n    switch (quoteModePolicy) {\n    case ALL:\n    case ALL_NON_NULL:\n        quote = true;\n        break;\n    case NON_NUMERIC:\n        quote =!(object instanceof Number);\n        break;\n    case NONE:\n        printAndEscape(value, offset, len, out);\n        return;\n    case MINIMAL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n// buggy line:            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n// buggy line:                quote = true;\n// buggy line:            } else if (c <= COMMENT) {\n// buggy line:                quote = true;\n            if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                quote = true;\n            } else if (c <= COMMENT) {\n                quote = true;\n            }\n        }\n        break;\n    case MINIMAL_NON_NULL:\n        if (len <= 0) {\n            if (newRecord) {\n                quote = true;\n            }\n        } else {\n            char c = value.charAt(pos);\n            if (newRecord && (c < 0x20 || c >"
      ],
      "function range": "1151,5-1256,5"
    },
    "Gson_10_/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java_122-124": {
      "loc": "122-124",
      "input": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());",
      "output": [
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.al",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IA",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algeb",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IS",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IC",
        "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) \n@Override void write(JsonWriter writer, Object value)\n    throws IOException, IllegalAccessException {\n  Object fieldValue = field.get(value);\n// buggy line:  TypeAdapter t =\n// buggy line:    new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n  TypeAdapterRuntimeTypeWrapper t = new TypeAdapterRuntimeTypeWrapper(\n      context, typeAdapter, field.getType());\n  t.write(writer, fieldValue);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IE"
      ],
      "function range": "118,7-125,7"
    },
    "Gson_15_/gson/src/main/java/com/google/gson/stream/JsonWriter.java_495-496": {
      "loc": "495-496",
      "input": "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {",
      "output": [
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  writeDeferredName();\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  writeDeferredName();\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter value(Object value",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter value(Json",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  indent();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  indent();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  indent();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  unindent();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  indent();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray()",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter valueNull() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter value(Object value",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(Object value",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter valueNull() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter value(Json",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  writeDeferredName();\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  writeDeferredName();\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  writeDeferredName();\n  generator.writeField",
        "public JsonWriter value(double value) throws IOException {\n  writeDeferredName();\n// buggy line:  if (Double.isNaN(value) || Double.isInfinite(value)) {\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    generator.writeString(Double.toString(value));\n  } else {\n    generator.writeNumber(value);\n  }\n  return this;\n}\n\n  public JsonWriter value(long value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(Number value) throws IOException {\n  writeDeferredName();\n  generator.writeNumber(value);\n  return this;\n}\n\n  public JsonWriter value(String value) throws IOException {\n  writeDeferredName();\n  generator.writeString(value);\n  return this;\n}\n\n  public JsonWriter nullValue() throws IOException {\n  writeDeferredName();\n  generator.writeNull();\n  return this;\n}\n\n  public JsonWriter value(boolean value) throws IOException {\n  writeDeferredName();\n  generator.writeBoolean(value);\n  return this;\n}\n\n  public JsonWriter object() throws IOException {\n  writeDeferredName();\n  generator.writeStartObject();\n  return this;\n}\n\n  public JsonWriter object(String name) throws IOException {\n  writeDeferredName();\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter endObject() throws IOException {\n  generator.writeEndObject();\n  return this;\n}\n\n  public JsonWriter array() throws IOException {\n  writeDeferredName();\n  generator.writeStartArray();\n  return this;\n}\n\n  public JsonWriter endArray() throws IOException {\n  generator.writeEndArray();\n  return this;\n}\n\n  public JsonWriter name(String name) throws IOException {\n  generator.writeFieldName(name);\n  return this;\n}\n\n  public JsonWriter flush() throws IO"
      ],
      "function range": "493,3-501,3"
    },
    "Gson_17_/gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java_99-101": {
      "loc": "99-101",
      "input": "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek() != JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");",
      "output": [
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParse",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek()!= JsonToken.STRING) {\n// fixed line:    throw new JsonParseException(\"The date should be a string value\");\n// fixed line:  if (in.peek",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonPar",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n\n// buggy line:    throw new JsonPar",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonPar",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonPar",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonPar",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:  }\n// buggy line:",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n\n// buggy line:  if (in.pe",
        "@Override\npublic Date read(JsonReader in) throws IOException {\n// buggy line:  if (in.peek()!= JsonToken.STRING) {\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:    throw new JsonParseException(\"The date should be a string value\");\n// buggy line:  }\n\n// buggy line"
      ],
      "function range": "97,3-113,3"
    },
    "JacksonCore_5_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-194": {
      "loc": "193-194",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);",
      "output": [
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                return i;\n            default:\n                return -1;\n        }\n    }\n    return -1;\n}\n}\n<|java|",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                return i;\n            default:\n                return -1;\n        }\n    }\n    return -1;\n}\n\n}\n<|java",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                break;\n            default:\n                return -1;\n        }\n    }\n    return i;\n}\n}\n<|java|>/*",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                return i;\n            default:\n                return -1;\n        }\n    }\n    return -1;\n}\n\n\n}\n<|java",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                break;\n            default:\n                return -1;\n        }\n    }\n    return i;\n}\n}\n<|java|>package",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                break;\n            default:\n                return -1;\n        }\n    }\n    return i;\n}\n}\n<|java|>/**",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'H':\n",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'g':\n",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i++);\n        char c = str.charAt(i);\n        switch (c) {\n            case '0':\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n            case '9':\n            case 'A':\n            case 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n            case 'F':\n            case 'G':\n            case 'H':\n            case 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n            case 'P':\n            case 'Q':\n            case 'R':\n            case 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n            case 'Z':\n            case '_':\n            case 'a':\n            case 'b':\n            case 'c':\n            case 'd':\n            case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n            case 'l':\n            case'm':\n            case 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n            case's':\n            case 't':\n            case 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n            case 'z':\n                break;\n            default:\n                return -1;\n        }\n    }\n    return i;\n}\n}\n<|java|>//"
      ],
      "function range": "185,5-205,5"
    },
    "JacksonCore_6_/src/main/java/com/fasterxml/jackson/core/JsonPointer.java_193-195": {
      "loc": "193-195",
      "input": "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);",
      "output": [
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunction",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScal",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.dataflow.data.nontagged.serde.",
        "private final static int _parseIndex(String str) {\n    final int len = str.length();\n    if (len == 0 || len > 10) {\n        return -1;\n    }\n// buggy line:    for (int i = 0; i < len; ++i) {\n// buggy line:        char c = str.charAt(i);\n// buggy line:        if (c < '0' || c > '9') {\n// buggy line:            return -1;\n// buggy line:        }\n// buggy line:    }\n    char c = str.charAt(0);\n    if (c < '0' || c > '9') {\n        return -1;\n    }\n    for (int i = 1; i < len; ++i) {\n        c = str.charAt(i);\n        if (c < '0' || c > '9') {\n            return -1;\n        }\n    }\n    return Integer.parseInt(str);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.AqlSerializerDeserializerProvider;\nimport org.apache.asterix.om.base.ABoolean"
      ],
      "function range": "185,5-206,5"
    },
    "JacksonCore_8_/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java_307-308": {
      "loc": "307-308",
      "input": "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray != null)  return _resultArray;\n    if (_resultString != null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;",
      "output": [
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >=",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int end)\n    {\n",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end, int",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end, char",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int len, char",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public String getText()\n    {\n        if (_inputStart",
        "public char[] getTextBuffer()\n{\n    if (_inputStart >= 0) return _inputBuffer;\n    if (_resultArray!= null)  return _resultArray;\n    if (_resultString!= null) {\n        return (_resultArray = _resultString.toCharArray());\n    }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n    return null;\n}\n\n    public char[] getTextBuffer(int start, int len)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer()\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public char[] getTextBuffer(int start, int end)\n    {\n        if (_inputStart >= 0) return _inputBuffer;\n        if (_resultArray!= null)  return _resultArray;\n        if (_resultString!= null) {\n            return (_resultArray = _resultString.toCharArray());\n        }\n// buggy line:    if (!_hasSegments)  return _currentSegment;\n        return null;\n    }\n\n    public int getTextOffset()\n    {\n        return _input"
      ],
      "function range": "298,5-310,5"
    },
    "JacksonCore_20_/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java_1330-1331": {
      "loc": "1330-1331",
      "input": "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\",",
      "output": [
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).toByteArray());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).toByteArray());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).toByteArray());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).toByteArray());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else if (object instanceof Class<?>) {\n            writeString(((Class<?>) object).getName());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName(), this);\n        }\n    }\n}\n<|java|>",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else if (object instanceof Class<?>) {\n            writeString(((Class<?>) object).getName());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>/*\n",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else if (object instanceof Class<?>) {\n            writeString(((Class<?>) object).getName());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>package com",
        "public void writeEmbeddedObject(Object object) throws IOException {\n// buggy line:    throw new JsonGenerationException(\"No native support for writing embedded objects\", this);\n        if (object == null) {\n            writeNull();\n        } else if (object instanceof String) {\n            writeString((String) object);\n        } else if (object instanceof Integer) {\n            writeNumber(((Integer) object).intValue());\n        } else if (object instanceof Long) {\n            writeNumber(((Long) object).longValue());\n        } else if (object instanceof Double) {\n            writeNumber(((Double) object).doubleValue());\n        } else if (object instanceof Float) {\n            writeNumber(((Float) object).floatValue());\n        } else if (object instanceof Short) {\n            writeNumber(((Short) object).shortValue());\n        } else if (object instanceof Byte) {\n            writeNumber(((Byte) object).byteValue());\n        } else if (object instanceof Character) {\n            writeString(String.valueOf(((Character) object).charValue()));\n        } else if (object instanceof Boolean) {\n            writeBoolean(((Boolean) object).booleanValue());\n        } else if (object instanceof byte[]) {\n            writeBinary((byte[]) object);\n        } else if (object instanceof BigInteger) {\n            writeNumber(((BigInteger) object).longValue());\n        } else if (object instanceof BigDecimal) {\n            writeNumber(((BigDecimal) object).doubleValue());\n        } else if (object instanceof Date) {\n            writeNumber(((Date) object).getTime());\n        } else if (object instanceof UUID) {\n            writeString(object.toString());\n        } else if (object instanceof Enum<?>) {\n            writeString(object.toString());\n        } else if (object instanceof Class<?>) {\n            writeString(((Class<?>) object).getName());\n        } else {\n            throw new JsonGenerationException(\"No native support for writing embedded objects of type \" + object.getClass().getName());\n        }\n    }\n}\n<|java|>package org"
      ],
      "function range": "1328,5-1332,5"
    },
    "JacksonCore_25_/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java_1963-1964": {
      "loc": "1963-1964",
      "input": "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {",
      "output": [
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n\nprivate String _handleOddName3(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n        if (i <= maxCode) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n\nprivate String _handleOddName3(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\n",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ign",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.cache",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions.records;\n",
        "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n{\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n    char[] outBuf = _textBuffer.getCurrentSegment();\n    int outPtr = _textBuffer.getCurrentSegmentSize();\n    final int maxCode = codes.length;\n    while (true) {\n        if (_inputPtr >= _inputEnd) {\n            if (!_loadMore()) { \n                break;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        int i = (int) c;\n// buggy line:        if (i <= maxCode) {\n        if (i <= maxCode && codes[i]!= 0) {\n            codes[i] = hash;\n            outBuf[outPtr++] = c;\n        }\n        ++_inputPtr;\n        if (outPtr == outBuf.length) {\n            _textBuffer.setCurrentLength(outPtr);\n            return _textBuffer.getTextBuffer();\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return _textBuffer.getTextBuffer();\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed.dht;\n\nimport org."
      ],
      "function range": "1948,5-1990,5"
    },
    "JacksonDatabind_12_/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java_303-304": {
      "loc": "303-304",
      "input": "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null)",
      "output": [
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeTypedFromArray(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserializeFromObject(JsonParser jp,",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, intoValue, typeDeserializer);\n    }\n\n    /*\n    /**********************************************************\n    ",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeTypedFromArray(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeTypedFromObject(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserial",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser j",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue, typeDeserializer);\n    }\n\n    /*\n    /**********************************************************\n    /* Helper methods",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, intoValue, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeTypedFromArray(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, Deserial",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, intoValue, typeDeserializer);\n    }\n}\n<|java|>/*\n *",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue, typeDeserializer);\n    }\n\n    /*\n    /**********************************************************\n    /* Extended API\n",
        "@Override\npublic boolean isCachable() {\n// buggy line:    return (_valueTypeDeserializer == null) || _valueTypeDeserializer.isCachable();\n        return _valueTypeDeserializer!= null && _valueTypeDeserializer.isCachable();\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException\n    {\n        JsonDeserializer<?> deser = _valueTypeDeserializer;\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(_valueType, property);\n        }\n        return deser;\n    }\n\n    /*\n    /**********************************************************\n    /* JsonDeserializer implementation\n    /**********************************************************\n     */\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, typeDeserializer);\n    }\n\n    @Override\n    public Object deserialize(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserialize(jp, ctxt, intoValue);\n    }\n\n    @Override\n    public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt,\n            Object intoValue, TypeDeserializer typeDeserializer)\n        throws IOException, JsonProcessingException\n    {\n        return _valueTypeDeserializer.deserializeWithType(jp, ctxt, intoValue, typeDeserializer);\n    }\n}\n<|java|>package com."
      ],
      "function range": "298,5-305,5"
    },
    "JacksonDatabind_16_/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java_112-113": {
      "loc": "112-113",
      "input": "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous != null) && previous.equals(ann);",
      "output": [
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations == null) {\n      return new Annotation[0];\n    }\n    return _annotations.values().toArray(new Annotation[_annotations.size()]);\n  }\n\n  @Override\n  public final <T extends Annotation> T[] toArray(T[] a) {\n    if (_annotations == null) {\n      return a;\n    }\n    return _annotations.",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations == null) {\n      return new Annotation[0];\n    }\n    return _annotations.values().toArray(new Annotation[_annotations.size()]);\n  }\n\n  @Override\n  public final <T extends Annotation> T[] toArray(T[] array) {\n    if (_annotations == null) {\n      return array;\n    }\n    return _annotations.",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final void clear() {\n    if (_annotations!= null) {\n      _annotations.clear();\n    }\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations!= null) {\n      return _annotations.values().toArray(new Annotation[_annotations.size()]);\n    }\n    return new Annotation[0];\n  }\n\n  @Override\n  public final <T extends Annotation",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations == null) {\n      return new Annotation[0];\n    }\n    return _annotations.values().toArray(new Annotation[_annotations.size()]);\n  }\n\n  @Override\n  public final <A extends Annotation> A[] toArray(A[] a) {\n    if (_annotations == null) {\n      return a;\n    }\n    return _annotations.",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final void clear() {\n    if (_annotations!= null) {\n      _annotations.clear();\n    }\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations == null) {\n      return new Annotation[0];\n    }\n    return _annotations.values().toArray(new Annotation[_annotations.size()]);\n  }\n\n  @Override\n  public final <T extends Annotation",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations == null) {\n      return new Annotation[0];\n    }\n    return _annotations.values().toArray(new Annotation[_annotations.size()]);\n  }\n\n  @Override\n  public final <T extends Annotation> T[] toArray(T[] arr) {\n    if (_annotations == null) {\n      return arr;\n    }\n    return _annotations.",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations == null) {\n      return new Annotation[0];\n    }\n    return _annotations.values().toArray(new Annotation[_annotations.size()]);\n  }\n\n  @Override\n  public final <T extends Annotation> T[] toArray(T[] a) {\n    if (_annotations == null) {\n      if (a.length > 0) {\n        a[",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final void clear() {\n    if (_annotations!= null) {\n      _annotations.clear();\n    }\n  }\n\n  @Override\n  public final boolean isEmpty() {\n    return _annotations == null || _annotations.isEmpty();\n  }\n\n  @Override\n  public final int size() {\n    return _annotations == null? 0 : _annotations.size();\n  }\n\n  @Override\n  public final boolean contains(",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          _annotations.remove(entry.getKey());\n          changed = true;\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final void clear() {\n    if (_annotations!= null) {\n      _annotations.clear();\n    }\n  }\n\n  @Override\n  public final Annotation[] toArray() {\n    if (_annotations!= null) {\n      return _annotations.values().toArray(new Annotation[_annotations.size()]);\n    }\n    return new Annotation[0];\n  }\n\n  @Override\n  public final <T> T[]",
        "protected final boolean _add(Annotation ann) {\n    if (_annotations == null) {\n        _annotations = new HashMap<Class<? extends Annotation>,Annotation>();\n    }\n    Annotation previous = _annotations.put(ann.annotationType(), ann);\n// buggy line:    return (previous!= null) && previous.equals(ann);\n    return previous == null || previous.equals(ann);\n  }\n\n  @Override\n  public final boolean addAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= add(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean remove(Annotation ann) {\n    if (_annotations!= null) {\n      return _annotations.remove(ann.annotationType())!= null;\n    }\n    return false;\n  }\n\n  @Override\n  public final boolean removeAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    for (Annotation ann : anns) {\n      changed |= remove(ann);\n    }\n    return changed;\n  }\n\n  @Override\n  public final boolean retainAll(Collection<? extends Annotation> anns) {\n    boolean changed = false;\n    if (_annotations!= null) {\n      for (Map.Entry<Class<? extends Annotation>,Annotation> entry : _annotations.entrySet()) {\n        if (!anns.contains(entry.getValue())) {\n          changed = true;\n          _annotations.remove(entry.getKey());\n        }\n      }\n    }\n    return changed;\n  }\n\n  @Override\n  public final void clear() {\n    if (_annotations!= null) {\n      _annotations.clear();\n    }\n  }\n\n  @Override\n  public final boolean isEmpty() {\n    return _annotations == null || _annotations.isEmpty();\n  }\n\n  @Override\n  public final int size() {\n    return _annotations == null? 0 : _annotations.size();\n  }\n\n  @Override\n  public final boolean contains("
      ],
      "function range": "107,5-113,5"
    },
    "JacksonDatabind_17_/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java_180-181": {
      "loc": "180-181",
      "input": "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));",
      "output": [
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                ",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    default:\n        return false;\n    }\n}\n",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    default:\n        return true;\n    }\n}\n",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                || TreeNode.class.isAssignableFrom(t.getRawClass());\n    case NON_CONCRETE_AND_OBJECTS_AND_NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_NON_CONCRETE_AND_ARRAYS",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    default:\n        return false;\n    }\n}\n\n",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    default:\n        return true;\n    }\n}\n\n",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case CONCRETE_AND_OBJECTS:\n",
        "public boolean useForType(JavaType t)\n{\n    switch (_appliesFor) {\n    case NON_CONCRETE_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_ARRAYS_AND_OBJECTS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        while (t.isArrayType()) {\n            t = t.getContentType();\n        }\n    case OBJECT_AND_NON_CONCRETE_AND_OBJECTS_AND_ARRAYS:\n        return (t.getRawClass() == Object.class)\n                || (!t.isConcrete()\n// buggy line:                || TreeNode.class.isAssignableFrom(t.getRawClass()));\n                );\n    case OBJECT_AND_OBJECTS_AND_"
      ],
      "function range": "167,9-193,9"
    },
    "JacksonDatabind_27_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java_794-795": {
      "loc": "794-795",
      "input": "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
      "output": [
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getNumberValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n            tokens.writeBoolean(true);\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_FALSE) {\n            tokens.writeBoolean(",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getIntValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n            tokens.writeNumber(p.getDoubleValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n            t",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                t = p.nextToken();\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getIntValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n            tokens.writeNumber(p.getDoubleValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getIntValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n            tokens.writeNumber(p.getFloatValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n            t",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getIntValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n            tokens.writeBoolean(true);\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_FALSE) {\n            tokens.writeBoolean(",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                t = p.nextToken();\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getIntValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n            tokens.writeNumber(p.getFloatValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                t = p.nextToken();\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getNumberValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n            tokens.writeBoolean(true);\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_FALSE) {\n",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                t = p.nextToken();\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getIntValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n            tokens.writeBoolean(true);\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_FALSE) {\n",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                t = p.nextToken();\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getBigIntegerValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n            tokens.writeNumber(p.getDecimalValue());\n            t = p.nextToken();\n        } else if (t == Json",
        "@SuppressWarnings(\"resource\")\nprotected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    TokenBuffer tokens = new TokenBuffer(p);\n    tokens.writeStartObject();\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); \n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp!= null) {\n// buggy line:            if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {\n            if (ext.handlePropertyValue(p, ctxt, propName, creatorProp, buffer)) {\n                continue;\n            }\n        }\n        tokens.writeFieldName(propName);\n        t = p.nextToken();\n        if (t == JsonToken.START_ARRAY) {\n            tokens.writeStartArray();\n            t = p.nextToken();\n        } else if (t == JsonToken.START_OBJECT) {\n            tokens.writeStartObject();\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_STRING) {\n            tokens.writeString(p.getText());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_INT) {\n            tokens.writeNumber(p.getBigIntegerValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n            tokens.writeNumber(p.getDecimalValue());\n            t = p.nextToken();\n        } else if (t == JsonToken.VALUE_TRUE) {\n"
      ],
      "function range": "773,5-857,5"
    },
    "JacksonDatabind_33_/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java_748-749": {
      "loc": "748-749",
      "input": "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg != null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann != null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {",
      "output": [
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a, JsonSetter.class);\n    if (js!= null) {\n        name = js.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a, JsonSetter.class);\n",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember am)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(am, JsonGetter",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a, JsonSetter.class);\n    if (js!= null) {\n        name = js.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember am)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(am, JsonSetter.class);\n",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a, JsonSetter.class);\n    if (js!= null) {\n        name = js.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember m)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(m, JsonSetter.class);\n",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name!= null) {\n        return new PropertyName(name);\n    }\n    return null;\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedClass ac)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(ac, JsonGetter",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a, JsonSetter.class);\n    if (js!= null) {\n        name = js.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a,",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember a)\n{\n    String name = null;\n    JsonGetter jg = _findAn",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember am)\n{\n    String name = null;\n    JsonGetter jg = _findAn",
        "@Override\npublic PropertyName findNameForSerialization(Annotated a)\n{\n    String name = null;\n    JsonGetter jg = _findAnnotation(a, JsonGetter.class);\n    if (jg!= null) {\n        name = jg.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonSerialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(Annotated a)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(a, JsonSetter.class);\n    if (js!= null) {\n        name = js.value();\n    } else {\n        JsonProperty pann = _findAnnotation(a, JsonProperty.class);\n        if (pann!= null) {\n            name = pann.value();\n        } else if (_hasAnnotation(a, JsonDeserialize.class)\n                || _hasAnnotation(a, JsonView.class)\n// buggy line:                || _hasAnnotation(a, JsonRawValue.class)) {\n                || _hasAnnotation(a, JsonRawValue.class)) {\n            name = \"value\";\n        }\n    }\n    if (name == null) {\n        name = a.getName();\n    }\n    return new PropertyName(name);\n}\n\n@Override\npublic PropertyName findNameForDeserialization(AnnotatedMember am)\n{\n    String name = null;\n    JsonSetter js = _findAnnotation(am,"
      ],
      "function range": "730,5-755,5"
    },
    "JacksonDatabind_34_/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java_81-82": {
      "loc": "81-82",
      "input": "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
      "output": [
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INT);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        }",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Number.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.NUMBER);\n        } else if (",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Number.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.NUMBER);\n        } else {\n",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Number.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.NUMBER);\n        }\n    }",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INT);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INT);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Number.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.NUMBER);\n        } else if (h ==",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INT);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Number.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.NUMBER);\n        }\n    }\n}",
        "@Override\npublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n{\n    if (_isInt) {\n        visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n    } else {\n        Class<?> h = handledType();\n        if (h == BigDecimal.class) {\n// buggy line:            visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == BigInteger.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);\n        } else if (h == Byte.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BYTE);\n        } else if (h == Short.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.SHORT);\n        } else if (h == Integer.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.INTEGER);\n        } else if (h == Long.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.LONG);\n        } else if (h == Float.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.FLOAT);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else if (h == BigDecimal.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);\n        } else if (h == Double.class) {\n            visitNumberFormat(visitor, typeHint, JsonParser.NumberType.DOUBLE);\n        } else {"
      ],
      "function range": "73,5-87,5"
    },
    "JacksonDatabind_37_/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java_135-136": {
      "loc": "135-136",
      "input": "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
      "output": [
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _componentType);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _componentType);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _componentType);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _componentType);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, Class<?> componentType)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, componentType);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, componentType);\n}\n\n",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, Annotation[] annotations)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, annotations);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, annotations);\n}\n\n@Override\n",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, TypeVariable<?>[] typeParameters)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeParameters);\n}",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, TypeVariable<?>[] typeVariables)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeVariables, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, TypeVariable<?>[] typeVariables)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeVariables);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeVariables",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, Type[] typeArguments)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeArguments);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeArguments);\n}",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _componentType);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _componentType);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _componentType);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Type[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _componentType);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _componentType);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Type[] superInterfaces, Class<?> componentType)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, componentType);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, componentType);\n}\n\n@Override\nprotected",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _typeParameters);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, Type[] typeArguments)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeArguments, _typeParameters);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, typeArg",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Class<?>[] superInterfaces, Annotation[] annotations)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, annotations);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, annotations);\n}\n\n}\n",
        "@Override\nprotected JavaType _narrow(Class<?> subclass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, _superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, superClass, _superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Type[] superInterfaces)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, _annotations);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, _annotations);\n}\n\n@Override\nprotected JavaType _narrow(Class<?> subclass, TypeBindings bindings, Class<?> superClass, Type[] superInterfaces, Annotation[] annotations)\n{\n    if (_class == subclass) {\n        return this;\n    }\n// buggy line:    return new SimpleType(subclass, bindings, superClass, superInterfaces, annotations);\n    return new SimpleType(subclass, bindings, superClass, superInterfaces, annotations);\n}\n\n@Override\nprotected JavaType _"
      ],
      "function range": "119,5-137,5"
    },
    "JacksonDatabind_45_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_63-64": {
      "loc": "63-64",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property != null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format != null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {",
      "output": [
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDesc",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.aster",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n    if (property!= null) {\n        JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n        if (format!= null) {\n            JsonFormat.Shape shape = format.getShape();\n            if (shape.isNumeric()) {\n                return withFormat(Boolean.TRUE, null);\n            }\n// buggy line:            if (format.getShape() == JsonFormat.Shape.STRING) {\n            if (shape == JsonFormat.Shape.STRING) {\n                return withFormat(Boolean.FALSE, null);\n            }\n        }\n    }\n    return super.createContextual(serializers, property);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache."
      ],
      "function range": "49,5-81,5"
    },
    "JacksonDatabind_46_/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java_156-157": {
      "loc": "156-157",
      "input": "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');",
      "output": [
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algeb",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.alge",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.h",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\nimport org.apache.hyracks.api.",
        "@Override\npublic StringBuilder getGenericSignature(StringBuilder sb)\n{\n    _classSignature(_class, sb, false);\n    sb.append('<');\n    sb = _referencedType.getGenericSignature(sb);\n// buggy line:    sb.append(';');\n    sb.append('>');\n    return sb;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks"
      ],
      "function range": "150,5-158,5"
    },
    "JacksonDatabind_57_/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java_1441-1442": {
      "loc": "1441-1442",
      "input": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders != null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), ",
      "output": [
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> read",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(File src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndRead",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(URL src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndRead",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(String src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndRead",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src), src);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src), src);\n}\n\npublic <T> MappingIterator<T> readValues(InputSource src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAnd",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\n\npublic <T> MappingIterator<T> read",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\n/**\n * @since 2.1\n */\n",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic MappingIterator<JsonNode> readValues",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\n/**\n * @since 2.2\n */\n",
        "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, offset, length), src, offset, length);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), \n                                              src, offset, length), src, offset, length);\n}\n\npublic <T> MappingIterator<T> readValues(InputStream src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> readValues(Reader src)\n    throws IOException, JsonProcessingException\n{\n    if (_dataFormatReaders!= null) {\n        return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n    }\n// buggy line:    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n//                                                         src, 0, -1), src, 0, -1);\n    return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), \n                                              src, 0, -1), src, 0, -1);\n}\n\npublic <T> MappingIterator<T> _"
      ],
      "function range": "1435,5-1443,5"
    },
    "JacksonDatabind_70_/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java_440-441": {
      "loc": "440-441",
      "input": "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());",
      "output": [
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[i] = prop;\n    }\n    _size = props.size();\n}\n\nprivate String getPropertyName(SettableBeanProperty prop)\n",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[prop.getIndex()] = prop;\n    }\n    _size = props.size();\n}\n\nprivate String getPropertyName(SettableBean",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[i] = prop;\n    }\n    _size = props.size();\n}\n\nprivate String getPropertyName(SettableBeanProperty propToR",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[i] = prop;\n    }\n    _size = props.size();\n}\n\nprivate String getPropertyName(SettableBeanProperty prop) {",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[prop.getIndex()] = prop;\n    }\n    _size = props.size();\n    if (_size == 0) {\n        _hashArea =",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[prop.getIndex()] = prop;\n    }\n    _size = props.size();\n}\n\n}\n<|java|>/*\n *",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[prop.getIndex()] = prop;\n    }\n    _size = props.size();\n}\n}\n<|java|>/*\n * Copyright",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[i] = prop;\n    }\n    _size = props.size();\n}\n\n}\n<|java|>/*\n * Licensed to the Apache",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[i] = prop;\n    }\n    _size = props.size();\n}\n\n}\n<|java|>/*\n * Copyright (c)",
        "public void remove(SettableBeanProperty propToRm)\n{\n    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n    String key = getPropertyName(propToRm);\n    boolean found = false;\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        if (!found) {\n// buggy line:            found = key.equals(prop.getName());\n            if (key.equals(prop.getName())) {\n                found = true;\n            }\n        }\n        if (found) {\n            props.add(prop);\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == propToRm) {\n            props.remove(i);\n            break;\n        }\n    }\n    for (int i = 1, end = _hashArea.length; i < end; i += 2) {\n        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];\n        if (prop == null) {\n            continue;\n        }\n        for (int j = 0, end2 = props.size(); j < end2; j++) {\n            SettableBeanProperty prop2 = props.get(j);\n            if (prop == prop2) {\n                props.remove(j);\n                break;\n            }\n        }\n    }\n    for (int i = 0, end = props.size(); i < end; i++) {\n        SettableBeanProperty prop = props.get(i);\n        if (prop == null) {\n            continue;\n        }\n        _hashArea[prop.getIndex()] = prop;\n    }\n    _size = props.size();\n}\n}\n<|java|>/*\n * Licensed"
      ],
      "function range": "426,5-453,5"
    },
    "JacksonDatabind_71_/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java_75-76": {
      "loc": "75-76",
      "input": "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {",
      "output": [
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIG_INTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIG_DECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INET_ADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4_ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6_ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INET_SOCKET_ADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == File.class) {\n        kind = FILE;\n    ",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INTEGER;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIG_INTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIG_DECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INET_ADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4_ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6_ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INET_SOCKET_ADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == File.class) {\n        kind = FILE;",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INTEGER;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIGINTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIGDECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INETADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INETSOCKETADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == File.class) {\n        kind = FILE;\n    } else if (raw ==",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIG_INTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIG_DECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INET_ADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4_ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6_ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INET_SOCKET_ADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == Pattern.class) {\n        kind = PATTERN;\n",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INTEGER;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIG_INTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIG_DECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INET_ADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4_ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6_ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INET_SOCKET_ADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == Pattern.class) {\n        kind = PATTERN",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIGINTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIGDECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INETADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INETSOCKETADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == Pattern.class) {\n        kind = PATTERN;\n    } else if (raw ==",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIGINTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIGDECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INETADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INETSOCKETADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == File.class) {\n        kind = FILE;\n    } else if (raw == File",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIGINTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIGDECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INETADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INETSOCKETADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == File.class) {\n        kind = FILE;\n    } else if (raw == FileInput",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIGINTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIGDECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INETADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INETSOCKETADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == File.class) {\n        kind = FILE;\n    } else if (raw == Class.",
        "public static StdKeyDeserializer forType(Class<?> raw)\n{\n    int kind;\n// buggy line:    if (raw == String.class || raw == Object.class) {\n    if (raw == String.class || raw == Object.class) {\n        kind = STRING;\n    } else if (raw == Boolean.class) {\n        kind = BOOLEAN;\n    } else if (raw == Byte.class) {\n        kind = BYTE;\n    } else if (raw == Character.class) {\n        kind = CHAR;\n    } else if (raw == Short.class) {\n        kind = SHORT;\n    } else if (raw == Integer.class) {\n        kind = INT;\n    } else if (raw == Long.class) {\n        kind = LONG;\n    } else if (raw == Float.class) {\n        kind = FLOAT;\n    } else if (raw == Double.class) {\n        kind = DOUBLE;\n    } else if (raw == BigInteger.class) {\n        kind = BIGINTEGER;\n    } else if (raw == BigDecimal.class) {\n        kind = BIGDECIMAL;\n    } else if (raw == Date.class) {\n        kind = DATE;\n    } else if (raw == Calendar.class) {\n        kind = CALENDAR;\n    } else if (raw == UUID.class) {\n        kind = UUID;\n    } else if (raw == InetAddress.class) {\n        kind = INETADDRESS;\n    } else if (raw == Inet4Address.class) {\n        kind = INET4ADDRESS;\n    } else if (raw == Inet6Address.class) {\n        kind = INET6ADDRESS;\n    } else if (raw == InetSocketAddress.class) {\n        kind = INETSOCKETADDRESS;\n    } else if (raw == URI.class) {\n        kind = URI;\n    } else if (raw == URL.class) {\n        kind = URL;\n    } else if (raw == Pattern.class) {\n        kind = PATTERN;\n    } else if (raw == File"
      ],
      "function range": "70,5-116,5"
    },
    "JacksonDatabind_82_/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java_495-496": {
      "loc": "495-496",
      "input": "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete = !beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n            ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps != null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n            .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals != null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();",
      "output": [
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.setIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.setIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.setIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.setIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.addIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.addIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.setIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.addIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.addIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to",
        "protected void addBeanProps(DeserializationContext ctxt,\n        BeanDescription beanDesc, BeanDeserializerBuilder builder)\n    throws JsonMappingException\n{\n    final boolean isConcrete =!beanDesc.getType().isAbstract();\n    final SettableBeanProperty[] creatorProps = isConcrete\n           ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n            : null;\n    final boolean hasCreatorProps = (creatorProps!= null);\n    JsonIgnoreProperties.Value ignorals = ctxt.getConfig()\n           .getDefaultPropertyIgnorals(beanDesc.getBeanClass(),\n                    beanDesc.getClassInfo());\n    Set<String> ignored;\n    if (ignorals!= null) {\n        boolean ignoreAny = ignorals.getIgnoreUnknown();\n        builder.setIgnoreUnknownProperties(ignoreAny);\n// buggy line:        ignored = ignorals.getIgnored();\n        ignored = new HashSet<String>();\n    } else {\n        ignored = null;\n    }\n    if (hasCreatorProps) {\n        if (ignored == null) {\n            ignored = new HashSet<String>();\n        }\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.isExplicitlyIncluded()) {\n                ignored.add(prop.getName());\n            }\n        }\n    }\n    if (ignored!= null) {\n        builder.setIgnorableProperties(ignored);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in"
      ],
      "function range": "472,5-615,5"
    },
    "JacksonDatabind_93_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java_83-85": {
      "loc": "83-85",
      "input": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {",
      "output": [
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING + SUFFIX_STRING)) {\n",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING)) {\n            break",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING + SUFFIX_STRING)) {\n            break",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING\n                + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_",
        "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n{\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n// buggy line:        if (full.startsWith(PREFIX_STRING)) {\n// buggy line:            for (Class<?> cls = raw; cls!= Object.class; cls = cls.getSuperclass()) {\n// buggy line:                full = cls.getName();\n// buggy line:                if (full.startsWith(PREFIX_STRING)) {\n// buggy line:                    break main_check;\n// buggy line:                }\n// buggy line:            }\n// buggy line:        }\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfgIllegalClassNames.contains(full + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING + SUFFIX_STRING)) {\n            break;\n        }\n        if (_cfg"
      ],
      "function range": "67,5-99,5"
    },
    "JacksonDatabind_96_/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java_735-736": {
      "loc": "735-736",
      "input": "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1 != candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName != null) || (injectId != null);\n    if (!useProps && (paramDef != null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);",
      "output": [
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps) {\n        paramName = candidate.",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (candidate.propertyDef(0",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null)",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (paramDef!= null);\n    if (!useProps) {\n        paramName = candidate.findImpl",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    if ((paramName!= null) || (injectId!= null)) {\n        if (",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (paramDef!= null);\n    if (!useProps && (paramDef!= null)) {\n        param",
        "protected void _addExplicitAnyCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    if (1!= candidate.paramCount()) {\n        int oneNotInjected = candidate.findOnlyParamWithoutInjection();\n        if (oneNotInjected >= 0) {\n            if (candidate.paramName(oneNotInjected) == null) {\n                _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n                return;\n            }\n        }\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n        return;\n    }\n    AnnotatedParameter param = candidate.parameter(0);\n    JacksonInject.Value injectId = candidate.injection(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (injectId!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy line:        paramName = candidate.findImplicitParamName(0);\n        if (paramName!= null) {\n            useProps = true;\n        }\n    }\n    if (useProps) {\n        _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate);\n    } else {\n        _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);\n    }\n}\n\n    protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,\n        BeanDescription beanDesc, CreatorCollector creators,\n        CreatorCandidate candidate)\n    throws JsonMappingException\n{\n    AnnotatedParameter param = candidate.parameter(0);\n    PropertyName paramName = candidate.explicitParamName(0);\n    BeanPropertyDefinition paramDef = candidate.propertyDef(0);\n    boolean useProps = (paramName!= null) || (paramDef!= null);\n    if (!useProps && (paramDef!= null)) {\n// buggy"
      ],
      "function range": "701,5-752,5"
    },
    "JacksonDatabind_97_/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java_114-115": {
      "loc": "114-115",
      "input": "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);",
      "output": [
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        _value.serialize(gen, ctxt);\n    }\n}\n\n",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        gen",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        _value.serialize(gen, ctxt);\n    }\n}\n}",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        gen.writeObject(_value);\n    }\n}\n\n@Override\npublic",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        gen.writeObject(_value);\n    }\n}\n}\n<|",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    Class<?> type) throws IOException\n{\n    if (_value == null) {\n        gen.writeNull();\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serializeWithType(gen, ctxt, type);\n    } else {\n        gen.writeObject(_value);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, Class<?> type) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        ",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        _value.serialize(gen, ctxt);\n    }\n}\n\n\n",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        gen.writeObject(_value);\n    }\n}\n\n}\n<",
        "@Override\npublic final void serialize(JsonGenerator gen, SerializerProvider ctxt) throws IOException\n{\n    if (_value == null) {\n        ctxt.defaultSerializeNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n    } else {\n// buggy line:        gen.writeObject(_value);\n        _value.serialize(gen, ctxt);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer) throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        _value.serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    }\n}\n\n@Override\npublic final void serializeWithType(JsonGenerator gen, SerializerProvider ctxt,\n    TypeSerializer typeSer, JsonToken t)\n    throws IOException\n{\n    if (_value == null) {\n        typeSer.writeTypePrefixForNull(gen);\n        gen.writeNull();\n        typeSer.writeTypeSuffixForNull(gen);\n    } else if (_value instanceof JsonSerializable) {\n        typeSer.writeTypePrefixForSerialization(_value, gen);\n        ((JsonSerializable) _value).serialize(gen, ctxt);\n        typeSer.writeTypeSuffixForSerialization(_value, gen);\n    } else {\n        _value.serialize(gen, ctxt);\n    }\n}\n\n    "
      ],
      "function range": "104,5-116,5"
    },
    "JacksonDatabind_98_/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java_298-299": {
      "loc": "298-299",
      "input": "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);",
      "output": [
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId) throws IOException\n    {\n",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId)\n        throws IOException\n",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId)\n        throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId) throws IOException\n    {",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Helper methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId) throws IOException\n    {",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Helper methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId)\n        throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal methods\n    /**********************************************************\n     */\n\n    private Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId) throws IOException\n    {\n",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal methods\n    /**********************************************************\n     */\n\n    private Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId)\n        throws IOException\n",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(_beanType, values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId) throws IOException",
        "public Object complete(JsonParser p, DeserializationContext ctxt,\n        PropertyValueBuffer buffer, PropertyBasedCreator creator)\n    throws IOException\n{\n    final int len = _properties.length;\n    Object[] values = new Object[len];\n    for (int i = 0; i < len; ++i) {\n        String typeId = _typeIds[i];\n        final ExtTypedProperty extProp = _properties[i];\n        if (typeId == null) {\n            if (_tokens[i] == null) {\n                continue;\n            }\n            if (!extProp.hasDefaultType()) {\n                ctxt.reportInputMismatch(_beanType,\n                        \"Missing external type id property '%s'\",\n                        extProp.getTypePropertyName());\n            } else {\n                typeId = extProp.getDefaultTypeId();\n            }\n        } else if (_tokens[i] == null) {\n            SettableBeanProperty prop = extProp.getProperty();\n            ctxt.reportInputMismatch(_beanType,\n                    \"Missing property '%s' for external type id '%s'\",\n                    prop.getName(), _properties[i].getTypePropertyName());\n        }\n        values[i] = _deserialize(p, ctxt, i, typeId);\n        final SettableBeanProperty prop = extProp.getProperty();\n        if (prop.getCreatorIndex() >= 0) {\n            buffer.assignParameter(prop, values[i]);\n            SettableBeanProperty typeProp = extProp.getTypeProperty();\n            if ((typeProp!= null) && (typeProp.getCreatorIndex() >= 0)) {\n// buggy line:                buffer.assignParameter(typeProp, typeId);\n                buffer.assignParameter(typeProp, values[i]);\n            }\n        }\n    }\n    return creator.create(_beanType, values);\n}\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected Object _deserialize(JsonParser p, DeserializationContext ctxt,\n            int index, String typeId)\n        th"
      ],
      "function range": "255,5-311,5"
    },
    "JacksonDatabind_102_/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java_67-70": {
      "loc": "67-70",
      "input": "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }",
      "output": [
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializerProvider deserializers,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> getContextualValueDeserializer",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> getContextualValueDeserializer(",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> getContextualValueDeserializer(Des",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n    BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> getContextualValueDeserializer(Deserialization",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n    BeanProperty property) throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializerProvider provider",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializerProvider deserializers,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(Deserializer",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializerProvider deserializers,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n\n@Override\npublic JsonDeserializer<?> getContextualValueDeserializer",
        "@Override\npublic JsonSerializer<?> createContextual(SerializerProvider serializers,\n        BeanProperty property) throws JsonMappingException\n{\n// buggy line:    if (property == null) {\n// buggy line:        return this;\n// buggy line:    }\n    if (property == null) {\n        return this;\n    }\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(property);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    Class<?> type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonSerializer<?> getContextualValueSerializer(SerializerProvider provider,\n    JavaType type)\n    throws JsonMappingException\n{\n    JsonSerializer<?> ser = _serializers.serializerFor(type);\n    if (ser!= null) {\n        return ser;\n    }\n    return this;\n}\n\n@Override\npublic JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n    BeanProperty property)\n    throws JsonMappingException\n{\n    if (property == null) {\n        return this;\n    }\n    JsonDeserializer<?> deser = _deserializers.deserializerFor(property);\n    if (deser!= null) {\n        return deser;\n    }\n    return this;\n}\n\n\n@Override\npublic JsonDeserializer<?> getContextualValueDeserializer("
      ],
      "function range": "61,5-136,5"
    },
    "JacksonDatabind_107_/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java_165-166": {
      "loc": "165-166",
      "input": "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;",
      "output": [
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException\n{\n    JsonDeserializer<?> deser = _findDeserializer(ctxt, property.getType());\n    if (deser!= null) {\n        return deser;\n    }\n    // [databind#######################################################################################################################################################################",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, this);\n            _deserializers.put(cls, deser);\n        }\n        return deser;\n    ",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, _property);\n            _deserializers.put(cls, deser);\n        }\n        return deser;\n",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, this);\n            if (deser!= null) {\n                _deserializers.put(cls, deser);\n",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = ctxt.findContextualValueDeserializer(cls, this);",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                deser = ctxt.findContextualValueDeserializer(cls, _property",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, this);\n            if (deser == null) {\n                deser = _findDefaultImplDeserializer(ctxt);",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, this);\n            if (deser == null) {\n                deser = ctxt.findTypedValueDeserializer(",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, _property);\n            if (deser == null) {\n                deser = ctxt.findContextualValueDeserializer",
        "protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,\n        String typeId) throws IOException\n{\n    JsonDeserializer<Object> deser = _deserializers.get(typeId);\n    if (deser == null) {\n        JavaType type = _idResolver.typeFromId(ctxt, typeId);\n        if (type == null) {\n            deser = _findDefaultImplDeserializer(ctxt);\n            if (deser == null) {\n                JavaType actual = _handleUnknownTypeId(ctxt, typeId);\n                if (actual == null) { \n// buggy line:                    return null;\n                    deser = _findDefaultImplDeserializer(ctxt);\n                } else {\n                    deser = _findDeserializer(ctxt, actual);\n                }\n            }\n        } else {\n            deser = _findDeserializer(ctxt, type);\n        }\n        _deserializers.put(typeId, deser);\n    }\n    return deser;\n}\n\n    protected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId)\n        throws IOException\n    {\n        return null;\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, JavaType type)\n        throws IOException\n    {\n        return _findDeserializer(ctxt, type.getRawClass());\n    }\n\n    protected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, Class<?> cls)\n        throws IOException\n    {\n        JsonDeserializer<Object> deser = _deserializers.get(cls);\n        if (deser == null) {\n            deser = ctxt.findContextualValueDeserializer(cls, this);\n            if (deser == null) {\n                deser = ctxt.findJsonDeserializer(cl"
      ],
      "function range": "146,5-199,5"
    },
    "JacksonXml_5_/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java_59-60": {
      "loc": "59-60",
      "input": "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;",
      "output": [
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePref",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePref",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    ",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceUriLookup = src._namespaceU",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n  ",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _rootNameLookup = src._rootNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLook",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n  }\n}\n<|java|>/*\n *",
        "protected XmlSerializerProvider(XmlSerializerProvider src) {\n    super(src);\n// buggy line:    _rootNameLookup = src._rootNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _namespaceNameLookup = src._namespaceNameLookup;\n    _namespacePrefixLookup = src._namespacePrefixLookup;\n    _namespaceUriLookup = src._namespaceUriLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n    _elementNameLookup = src._elementNameLookup;\n    _attributeNameLookup = src._attributeNameLookup;\n//"
      ],
      "function range": "55,5-60,5"
    },
    "Jsoup_1_/src/main/java/org/jsoup/nodes/Document.java_125-127": {
      "loc": "125-127",
      "input": "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);",
      "output": [
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * This",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\n\n/**\n * Compute IF(expr1, expr2, expr3) for 3 input column expressions.\n * The first is always a boolean (LongColumnVector).",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.ColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCache;\nimport org.apache.ignite.cache.CacheAtomicityMode;\nimport org.apache.ignite.cache.CacheMode;\nimport org.apache.ignite.configuration.CacheConfiguration;\nimport org.apache.ignite.configuration.IgniteConfiguration;\nimport org.apache.ignite.configuration.NearCacheConfiguration;\nimport org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\nimport org.apache.ignite.spi.discovery.",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.hadoop.hive.serde2",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\nimport org.apache.",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * Comp",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * Compute IF(expr1, expr2, expr",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatchCtx;",
        "private void normalise(Element element) {\n    List<Node> toMove = new ArrayList<Node>();\n    for (Node node: element.childNodes) {\n        if (node instanceof TextNode) {\n            TextNode tn = (TextNode) node;\n            if (!tn.isBlank())\n                toMove.add(tn);\n        }\n    }\n    for (Node node: toMove) {\n        element.removeChild(node);\n// buggy line:        body().appendChild(new TextNode(\" \", \"\"));\n// buggy line:        body().appendChild(node);\n        body().appendChild(node);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport java.util.Arrays;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;\nimport org.apache.hadoop.hive.ql.metadata.HiveException;\n\n/**\n * Vector"
      ],
      "function range": "113,5-128,5"
    },
    "Jsoup_15_/src/main/java/org/jsoup/parser/TreeBuilderState.java_283-284": {
      "loc": "283-284",
      "input": "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
      "output": [
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n// buggy line:            } else if (name.equals(\"noscript\")) {\n// buggy line:            } else if (name.equals(\"script\")) {\n// buggy line:            } else if (name.equals(\"style\")) {\n// buggy line:            } else if (name.equals(\"textarea\")) {\n// buggy line:            } else if (name.equals(\"xmp\")) {\n// buggy line:            } else if (name.equals(\"iframe\")) {\n// buggy line:            } else if (name.equals(\"noembed\")) {\n// buggy line:            } else if (name.equals(\"noframes",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name) || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    Element html = tb.getStack().getFirst();\n                    for (Attribute attribute : startTag.getAttributes()) {\n                        if (!html.hasAttr(attribute.getKey()))\n                            html.att",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name) || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    return false;\n                } else if (\"head\".equals(name)) {\n                    if (!tb.inScope(\"body\")) {\n                        tb.error(this);\n                        return false;\n                    }",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name) || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    return false;\n                } else if (\"head\".equals(name)) {\n                    if (!tb.inHead()) {\n                        tb.error(this);\n                        return false;\n                    } else {",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name)\n                        || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    return false;\n                } else if (\"head\".equals(name)) {\n                    if (!tb.inHead()) {\n                        tb.error(this);\n                        return false;\n                    }",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name) || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    return false;\n                } else if (\"head\".equals(name)) {\n                    if (!tb.inButtonScope(\"p\")) {\n                        tb.error(this);\n                        return false;\n                    ",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else if (name.equals(\"head\")) {\n                tb.error(this);\n                return false;\n            } else if (",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name) || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    return false;\n                } else if (\"head\".equals(name)) {\n                    if (!tb.inHead()) {\n                        tb.error(this);\n                        return false;\n                    } else if",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n            } else {\n                return tb.process(t, InBody);\n            }\n            break;\n        case EndTag:\n            Token",
        "boolean process(Token t, TreeBuilder tb) {\n    switch (t.type) {\n        case Character: {\n            Token.Character c = t.asCharacter();\n            if (c.getData().equals(nullString)) {\n                tb.error(this);\n                return false;\n            } else if (isWhitespace(c)) {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n            } else {\n                tb.reconstructFormattingElements();\n                tb.insert(c);\n                tb.framesetOk(false);\n            }\n            break;\n        }\n        case Comment: {\n            tb.insert(t.asComment());\n            break;\n        }\n        case Doctype: {\n            tb.error(this);\n            return false;\n        }\n        case StartTag:\n            Token.StartTag startTag = t.asStartTag();\n            String name = startTag.name();\n            if (name.equals(\"html\")) {\n                tb.error(this);\n                Element html = tb.getStack().getFirst();\n                for (Attribute attribute : startTag.getAttributes()) {\n                    if (!html.hasAttr(attribute.getKey()))\n                        html.attributes().put(attribute);\n                }\n// buggy line:            } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {\n                else if (\"base\".equals(name) || \"basefont\".equals(name) || \"bgsound\".equals(name) || \"command\".equals(name) || \"link\".equals(name) || \"meta\".equals(name) || \"noframes\".equals(name) || \"style\".equals(name) || \"title\".equals(name)) {\n                    tb.error(this);\n                    return false;\n                } else if (\"head\".equals(name)) {\n                    if (!tb.inHead()) {\n                        tb.error(this);\n                        return false;\n                    }\n                "
      ],
      "function range": "246,9-761,9"
    },
    "Jsoup_24_/src/main/java/org/jsoup/parser/TokeniserState.java_558-559": {
      "loc": "558-559",
      "input": "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();",
      "output": [
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDIT",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANT",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Rcdata);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANT",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(BogusComment);\n    } else if (r.matches('&')) {\n        t.advance();\n        t.transition(Reference);\n    } else if (r.matchesAny('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(BogusComment);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(BogusComment);\n    }\n}\n\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#####################################################################################################",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('###############################################################################################################################################################################################################################################################################################################################",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(TagOpen);\n    } else if (r.matches('=')) {\n        t.error(this);\n        t.advance();\n        t.transition(AttributeName);\n    } else if (r.matches('\"')) {\n        t.error(this);\n        t.advance();\n        t.transition(AttributeValue);\n    } else if (r.matches('\\'')) {\n        t.error(this);\n        t.advance();\n        t.transition(AttributeValue);\n    } else if (r.matches('&')) {\n        t.error(this);\n        t.advance();\n        t.transition(Entity);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Error);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Error);\n    }\n}\n\nToken.TagOpen = function() {\n    Token.call(",
        "void read(Tokeniser t, CharacterReader r) {\n    if (r.matchesLetter()) {\n        String name = r.consumeLetterSequence();\n        t.tagPending.appendTagName(name.toLowerCase());\n        t.dataBuffer.append(name);\n// buggy line:        r.advance();\n    } else if (r.matches('>')) {\n        t.emitTagPending();\n        t.transition(Data);\n    } else if (r.matchesAny('\\t', '\\n', '\\r', '\\f','', '\\u00A0')) {\n        t.transition(Data);\n    } else if (r.matches('/')) {\n        t.transition(CommentStart);\n    } else if (r.matches('/', '>')) {\n        t.error(this);\n        t.advance();\n        t.transition(Data);\n    } else if (r.matches('<')) {\n        t.error(this);\n        t.advance();\n        t.transition(TagOpen);\n    } else if (r.matches('=')) {\n        t.error(this);\n        t.advance();\n        t.transition(AttributeName);\n    } else if (r.matches('\"')) {\n        t.error(this);\n        t.advance();\n        t.transition(AttributeValue);\n    } else if (r.matches('\\'')) {\n        t.error(this);\n        t.advance();\n        t.transition(AttributeValue);\n    } else if (r.matches('&')) {\n        t.error(this);\n        t.advance();\n        t.transition(Entity);\n    } else if (r.matches('\\u0000')) {\n        t.error(this);\n        t.advance();\n        t.transition(Error);\n    } else {\n        t.error(this);\n        t.advance();\n        t.transition(Error);\n    }\n}\n\n\n}\n<|java|>/*\n * Licensed to the"
      ],
      "function range": "553,9-586,9"
    },
    "Jsoup_34_/src/main/java/org/jsoup/parser/CharacterReader.java_91-92": {
      "loc": "91-92",
      "input": "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar != input[offset])\n            while(++offset < length && startChar != input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {",
      "output": [
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamic",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalar",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.Abstract",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDesc",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\n",
        "int nextIndexOf(CharSequence seq) {\n    char startChar = seq.charAt(0);\n    for (int offset = pos; offset < length; offset++) {\n        if (startChar!= input[offset])\n            while(++offset < length && startChar!= input[offset]);\n        int i = offset + 1;\n        int last = i + seq.length()-1;\n// buggy line:        if (offset < length) {\n        while (i < last) {\n            if (input[i]!= seq.charAt(i - offset))\n                while(++i < last && input[i]!= seq.charAt(i - offset));\n            if (input[i] == seq.charAt(i - offset))\n                i++;\n            else\n                break;\n        }\n        if (i == last)\n            return offset;\n    }\n    return -1;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.functions.IFunctionTypeInferer;\n"
      ],
      "function range": "82,5-98,5"
    },
    "Jsoup_37_/src/main/java/org/jsoup/nodes/Element.java_1101-1102": {
      "loc": "1101-1102",
      "input": "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();",
      "output": [
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache",
        "public String html() {\n    StringBuilder accum = new StringBuilder();\n    html(accum);\n// buggy line:    return accum.toString().trim();\n    return accum.toString();\n  }\n\n  public void html(StringBuilder accum) {\n    html(accum, 0);\n  }\n\n  public void html(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).html(accum, level + 1);\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder accum = new StringBuilder();\n    toString(accum);\n    return accum.toString();\n  }\n\n  public void toString(StringBuilder accum) {\n    toString(accum, 0);\n  }\n\n  public void toString(StringBuilder accum, int level) {\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(toString());\n    for (int i = 0; i < level; i++) {\n      accum.append(\"  \");\n    }\n    accum.append(\"\\n\");\n    for (int i = 0; i < children.size(); i++) {\n      children.get(i).toString(accum, level + 1);\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www"
      ],
      "function range": "1098,5-1102,5"
    },
    "Jsoup_40_/src/main/java/org/jsoup/nodes/DocumentType.java_22-23": {
      "loc": "22-23",
      "input": "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);",
      "output": [
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + (name!= null? name.hashCode() : 0);\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n            \"name='\" + name + '\\'' +\n            \", publicId='\" + publicId +",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + (name!= null? name.hashCode() : 0);\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n        \"name='\" + name + '\\'' +\n        \", publicId='\" + publicId +",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = name!= null? name.hashCode() : 0;\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n            \"name='\" + name + '\\'' +\n            \", publicId='\" + publicId + '\\'' +\n            \", systemId='\" + systemId + '\\'' +\n            '}';\n  }\n",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + (name!= null? name.hashCode() : 0);\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n      \"name='\" + name + '\\'' +\n      \", publicId='\" + publicId +",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n    if (baseUri!= null?!baseUri.equals(that.baseUri) : that.baseUri!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = name!= null? name.hashCode() : 0;\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    result = 31 * result + (baseUri!= null? baseUri.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n            \"name='\" + name + '\\'' +\n            \", publicId='\" + publicId + '\\'' +\n            \", systemId='\" + systemId + '\\'' +\n            \", baseUri='\" + baseUri + '\\'' +\n            '}';",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = name!= null? name.hashCode() : 0;\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n        \"name='\" + name + '\\'' +\n        \", publicId='\" + publicId + '\\'' +\n        \", systemId='\" + systemId + '\\'' +\n        '}';\n  }\n",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n    if (baseUri!= null?!baseUri.equals(that.baseUri) : that.baseUri!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = name!= null? name.hashCode() : 0;\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    result = 31 * result + (baseUri!= null? baseUri.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n        \"name='\" + name + '\\'' +\n        \", publicId='\" + publicId + '\\'' +\n        \", systemId='\" + systemId + '\\'' +\n        \", baseUri='\" + baseUri + '\\'' +\n        '}';",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = name!= null? name.hashCode() : 0;\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n      \"name='\" + name + '\\'' +\n      \", publicId='\" + publicId + '\\'' +\n      \", systemId='\" + systemId + '\\'' +\n      '}';\n  }\n",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = name!= null? name.hashCode() : 0;\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n            \"name='\" + name + '\\'' +\n            \", publicId='\" + publicId + '\\'' +\n            \", systemId='\" + systemId + '\\'' +\n            '}';\n  }\n\n",
        "public DocumentType(String name, String publicId, String systemId, String baseUri) {\n    super(baseUri);\n// buggy line:    Validate.notEmpty(name);\n    this.name = name;\n    this.publicId = publicId;\n    this.systemId = systemId;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public String getPublicId() {\n    return publicId;\n  }\n\n  public void setPublicId(String publicId) {\n    this.publicId = publicId;\n  }\n\n  public String getSystemId() {\n    return systemId;\n  }\n\n  public void setSystemId(String systemId) {\n    this.systemId = systemId;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n\n    DocumentType that = (DocumentType) o;\n\n    if (name!= null?!name.equals(that.name) : that.name!= null) return false;\n    if (publicId!= null?!publicId.equals(that.publicId) : that.publicId!= null) return false;\n    if (systemId!= null?!systemId.equals(that.systemId) : that.systemId!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + (name!= null? name.hashCode() : 0);\n    result = 31 * result + (publicId!= null? publicId.hashCode() : 0);\n    result = 31 * result + (systemId!= null? systemId.hashCode() : 0);\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"DocumentType{\" +\n           \"name='\" + name + '\\'' +\n           \", publicId='\" + publicId +"
      ],
      "function range": "19,5-26,5"
    },
    "Jsoup_41_/src/main/java/org/jsoup/nodes/Element.java_1175-1176": {
      "loc": "1175-1176",
      "input": "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;",
      "output": [
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdent",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateE",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.Function",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.serializable.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractSerializableAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.al",
        "@Override\npublic boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n    if (!super.equals(o)) return false;\n    Element element = (Element) o;\n// buggy line:    return this == o;\n    return name.equals(element.name);\n  }\n\n  @Override\n  public int hashCode() {\n    int result = super.hashCode();\n    result = 31 * result + name.hashCode();\n    return result;\n  }\n\n  @Override\n  public String toString() {\n    return \"Element{\" +\n            \"name='\" + name + '\\'' +\n            '}';\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyr"
      ],
      "function range": "1167,5-1176,5"
    },
    "Jsoup_43_/src/main/java/org/jsoup/nodes/Element.java_574-575": {
      "loc": "574-575",
      "input": "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search))",
      "output": [
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.h",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvalu",
        "private static <E extends Element> Integer indexInList(Element search, List<E> elements) {\n    Validate.notNull(search);\n    Validate.notNull(elements);\n    for (int i = 0; i < elements.size(); i++) {\n        E element = elements.get(i);\n// buggy line:        if (element.equals(search)) {\n        if (element.equals(search)) {\n            return i;\n        }\n    }\n    return null;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks"
      ],
      "function range": "568,5-578,5"
    },
    "Jsoup_45_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_394-395": {
      "loc": "394-395",
      "input": "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
      "output": [
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"thead\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableHeader);\n        } else if (\"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableFooter);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (last) {\n            transition",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"col\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumn);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n        }",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (last) {\n            transition(HtmlTreeBuilderState.InBody);\n        }",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"thead\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableHeader);\n        } else if (\"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableFooter);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"col\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumn);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name))",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.In",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"frame\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrame);\n        } else if (\"form\".equals(name)) {\n            transition(HtmlTreeBuilderState.In",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"thead\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableHeader);\n        } else if (\"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableFooter);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else {\n            transition(HtmlTree",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"thead\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableHeader);\n        } else if (\"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableFooter);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else {\n            if (contextElement!= null",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (last) {\n            transition(HtmlTreeBuilderState.AfterBody);\n        }",
        "void resetInsertionMode() {\n    boolean last = false;\n    for (int pos = stack.size() -1; pos >= 0; pos--) {\n        Element node = stack.get(pos);\n        if (pos == 0) {\n            last = true;\n            node = contextElement;\n        }\n        String name = node.nodeName();\n        if (\"select\".equals(name)) {\n            transition(HtmlTreeBuilderState.InSelect);\n            break; \n// buggy line:        } else if ((\"td\".equals(name) || \"td\".equals(name) &&!last)) {\n// buggy line:        } else if ((\"th\".equals(name) || \"th\".equals(name) &&!last)) {\n        } else if (\"tr\".equals(name)) {\n            transition(HtmlTreeBuilderState.InRow);\n        } else if (\"tbody\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableBody);\n        } else if (\"thead\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableHeader);\n        } else if (\"tfoot\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTableFooter);\n        } else if (\"caption\".equals(name)) {\n            transition(HtmlTreeBuilderState.InCaption);\n        } else if (\"colgroup\".equals(name)) {\n            transition(HtmlTreeBuilderState.InColumnGroup);\n        } else if (\"table\".equals(name)) {\n            transition(HtmlTreeBuilderState.InTable);\n        } else if (\"head\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"body\".equals(name)) {\n            transition(HtmlTreeBuilderState.InBody);\n        } else if (\"frameset\".equals(name)) {\n            transition(HtmlTreeBuilderState.InFrameset);\n        } else if (\"html\".equals(name)) {\n            transition(HtmlTreeBuilderState.BeforeHead);\n        } else if (\"html\".equals(node."
      ],
      "function range": "382,5-429,5"
    },
    "Jsoup_46_/src/main/java/org/jsoup/nodes/Entities.java_118-119": {
      "loc": "118-119",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);",
      "output": [
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        accum.append(\"&#############################################################################################################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        continue;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&##################################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&##################################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        accum.append(\" \");\n                    break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&#########################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        accum.append(' ');\n                    break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&#########################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        continue;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:\n                    accum.append(c);\n                    break;\n            }\n        } else {\n",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        accum.append(\" \");\n                    break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:\n                    accum.append(c);\n                    break;",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:\n                    accum.append(c);\n                    break;\n            }\n        } else {\n",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        accum.append(\" \");\n                    break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:\n                    accum.append(c);\n            }\n",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n// buggy line:                        accum.append(c);\n                        accum.append(' ');\n                    break;\n                case '<':\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:\n                    accum.append(c);\n                    break;"
      ],
      "function range": "79,5-154,5"
    },
    "Jsoup_47_/src/main/java/org/jsoup/nodes/Entities.java_122-123": {
      "loc": "122-123",
      "input": "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode != EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)",
      "output": [
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n// buggy line:                    accum.append(\"&lt;\");\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n// buggy line:                    if (!inAttribute)\n// buggy line:                    accum.append(\"&gt;\");\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&#######################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&############",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute) {\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&######################",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n// buggy line:                    accum.append(\"&lt;\");\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n                        accum.append(\"&lt;\");\n                    break;\n                case '>':\n// buggy line:                    if (!inAttribute)\n                        accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&apos;\");\n                    break;\n                default:",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute) accum.append(\"&lt;\");\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n// buggy line:                    if (!inAttribute) accum.append(\"&gt;\");\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n// buggy line:                    accum.append(\"&lt;\");\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    accum.append(\"&########",
        "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                   boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) {\n    boolean lastWasWhite = false;\n    boolean reachedNonWhite = false;\n    final EscapeMode escapeMode = out.escapeMode();\n    final CharsetEncoder encoder = out.encoder();\n    final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());\n    final Map<Character, String> map = escapeMode.getMap();\n    final int length = string.length();\n    int codePoint;\n    for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) {\n        codePoint = string.codePointAt(offset);\n        if (normaliseWhite) {\n            if (StringUtil.isWhitespace(codePoint)) {\n                if ((stripLeadingWhite &&!reachedNonWhite) || lastWasWhite)\n                    continue;\n                accum.append(' ');\n                lastWasWhite = true;\n                continue;\n            } else {\n                lastWasWhite = false;\n                reachedNonWhite = true;\n            }\n        }\n        if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            final char c = (char) codePoint;\n            switch (c) {\n                case '&':\n                    accum.append(\"&amp;\");\n                    break;\n                case 0xA0:\n                    if (escapeMode!= EscapeMode.xhtml)\n                        accum.append(\"&nbsp;\");\n                    else\n                        accum.append(\"&#xa0;\");\n                    break;\n                case '<':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&lt;\");\n                    break;\n                case '>':\n// buggy line:                    if (!inAttribute)\n                    accum.append(\"&gt;\");\n                    break;\n                case '\"':\n                    accum.append(\"&quot;\");\n                    break;\n                default:\n                    accum.append(c);\n                    break;\n            }\n        } else {\n            "
      ],
      "function range": "79,5-155,5"
    },
    "Jsoup_51_/src/main/java/org/jsoup/parser/CharacterReader.java_300-301": {
      "loc": "300-301",
      "input": "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "output": [
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackslash() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\\');\n    return c == '\\\\';\n}\n\nbool Matcher::matchesQuestionMark() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '?');\n    return c == '?';\n}\n\nbool Matcher::matchesAsterisk()",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackspace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\b');\n    return c == '\\b';\n}\n\nbool Matcher::matchesFormFeed() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\f');\n    return c == '\\f';\n}\n\nbool Matcher::matchesLine",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackspace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\b');\n    return c == '\\b';\n}\n\nbool Matcher::matchesFormFeed() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\f');\n    return c == '\\f';\n}\n\nbool Matcher::matchesVert",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackslash() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\\');\n    return c == '\\\\';\n}\n\nbool Matcher::matchesQuestionMark() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '?');\n    return c == '?';\n}\n\nbool Matcher::matchesPlus() {\n",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackslash() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\\');\n    return c == '\\\\';\n}\n\nbool Matcher::matchesQuote() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\"');\n    return c == '\\\"';\n}\n\nbool Matcher::matchesDoubleQuote() {\n",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackslash() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\\');\n    return c == '\\\\';\n}\n\nbool Matcher::matchesQuote() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\"');\n    return c == '\\\"';\n}\n\nbool Matcher::matchesEscape() {\n",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackspace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\b');\n    return c == '\\b';\n}\n\nbool Matcher::matchesFormFeed() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\f');\n    return c == '\\f';\n}\n\nbool Matcher::matchesCar",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackslash() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\\');\n    return c == '\\\\';\n}\n\nbool Matcher::matchesQuestionMark() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '?');\n    return c == '?';\n}\n\nbool Matcher::matchesApostrophe()",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackslash() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\\\');\n    return c == '\\\\';\n}\n\nbool Matcher::matchesQuestionMark() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '?');\n    return c == '?';\n}\n\nbool Matcher::matchesExclamationMark()",
        "boolean matchesLetter() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n}\n\nbool Matcher::matchesDigit() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c >= '0' && c <= '9');\n    return (c >= '0' && c <= '9');\n}\n\nbool Matcher::matchesSpace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c =='');\n    return c =='';\n}\n\nbool Matcher::matchesNewline() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\n');\n    return c == '\\n';\n}\n\nbool Matcher::matchesCarriageReturn() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\r');\n    return c == '\\r';\n}\n\nbool Matcher::matchesTab() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\t');\n    return c == '\\t';\n}\n\nbool Matcher::matchesBackspace() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\b');\n    return c == '\\b';\n}\n\nbool Matcher::matchesFormFeed() {\n    if (isEmpty())\n        return false;\n    char c = input[pos];\n// buggy line:    return (c == '\\f');\n    return c == '\\f';\n}\n\nbool Matcher::matchesNew"
      ],
      "function range": "296,5-301,5"
    },
    "Jsoup_57_/src/main/java/org/jsoup/nodes/Attributes.java_125-126": {
      "loc": "125-126",
      "input": "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);",
      "output": [
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algeb",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyr",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyr",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.",
        "public void removeIgnoreCase(String key) {\n    Validate.notEmpty(key);\n    if (attributes == null)\n        return;\n    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {\n        String attrKey = it.next();\n        if (attrKey.equalsIgnoreCase(key))\n// buggy line:            attributes.remove(attrKey);\n            it.remove();\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache"
      ],
      "function range": "118,5-127,5"
    },
    "Jsoup_61_/src/main/java/org/jsoup/nodes/Element.java_1092-1093": {
      "loc": "1092-1093",
      "input": "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");",
      "output": [
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer tokenizer = new StringTokenizer(classAttr, \" \");\n        while (tokenizer.hasMoreTokens()) {\n            if (className.equals(tokenizer.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IA",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer tokenizer = new StringTokenizer(classAttr, \" \");\n        while (tokenizer.hasMoreTokens()) {\n            if (className.equals(tokenizer.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.alge",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer tokenizer = new StringTokenizer(classAttr, \" \");\n        while (tokenizer.hasMoreTokens()) {\n            if (className.equals(tokenizer.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAgg",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer st = new StringTokenizer(classAttr, \" \");\n        while (st.hasMoreTokens()) {\n            if (className.equals(st.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScal",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer tokenizer = new StringTokenizer(classAttr, \" \");\n        while (tokenizer.hasMoreTokens()) {\n            if (className.equals(tokenizer.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer tokenizer = new StringTokenizer(classAttr, \" \");\n        while (tokenizer.hasMoreTokens()) {\n            if (className.equals(tokenizer.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer st = new StringTokenizer(classAttr, \" \");\n        while (st.hasMoreTokens()) {\n            if (className.equals(st.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarE",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer st = new StringTokenizer(classAttr, \" \");\n        while (st.hasMoreTokens()) {\n            if (className.equals(st.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalar",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer st = new StringTokenizer(classAttr, \" \");\n        while (st.hasMoreTokens()) {\n            if (className.equals(st.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyE",
        "public boolean hasClass(String className) {\n// buggy line:    final String classAttr = attributes.get(\"class\");\n        final String classAttr = attributes.get(\"class\");\n        if (classAttr == null) {\n            return false;\n        }\n        final StringTokenizer tokenizer = new StringTokenizer(classAttr, \" \");\n        while (tokenizer.hasMoreTokens()) {\n            if (className.equals(tokenizer.nextToken())) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopy"
      ],
      "function range": "1091,5-1132,5"
    },
    "Jsoup_68_/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java_468-472": {
      "loc": "468-472",
      "input": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }",
      "output": [
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames) || stack.get(i).equals(baseTypes) ||",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return",
        "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {\n// buggy line:    int bottom = stack.size() -1;\n// buggy line:    if (bottom > MaxScopeSearchDepth) {\n// buggy line:        bottom = MaxScopeSearchDepth;\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(baseTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(extraTypes)) {\n// buggy line:            return true;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    for (int i = 0; i < bottom; i++) {\n// buggy line:        if (stack.get(i).equals(targetNames) ||\n// buggy line:                stack.get(i).equ"
      ],
      "function range": "466,5-486,5"
    },
    "Jsoup_75_/src/main/java/org/jsoup/nodes/Attributes.java_319-321": {
      "loc": "319-321",
      "input": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {",
      "output": [
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.xml\n// buggy line:            && (val == null || val.equals(key) && Attribute",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html)) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n        if (!(out.syntax() == Document.",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n        accum.append(\"=\\\"\").append(val).",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n        accum.append(' ').append(val);",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n        accum.append('=').append(val);",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n        ",
        "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {\n    final int sz = size;\n    for (int i = 0; i < sz; i++) {\n        final String key = keys[i];\n        final String val = vals[i];\n        accum.append(' ').append(key);\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {\n// buggy line:        if (!(out.syntax() == Document.OutputSettings.Syntax.html\n// buggy line:            && (val == null || val.equals(key)))) {\n//"
      ],
      "function range": "310,5-326,5"
    },
    "Jsoup_77_/src/main/java/org/jsoup/parser/XmlTreeBuilder.java_117-118": {
      "loc": "117-118",
      "input": "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();",
      "output": [
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    ",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    ",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n\n// buggy line:    String elName = endTag.get",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n\n// buggy line",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n        String elName",
        "private void popStackToClose(Token.EndTag endTag) {\n// buggy line:    String elName = endTag.name();\n// buggy line:    String elName = endTag.getName();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n// buggy line:    String elName = endTag.getName().toLowerCase();\n// buggy line:    String elName = endTag.getName().toUpperCase();\n        String elName = endTag.getName();\n        if"
      ],
      "function range": "116,5-136,5"
    },
    "Jsoup_86_/src/main/java/org/jsoup/nodes/Comment.java_78-79": {
      "loc": "78-79",
      "input": "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {",
      "output": [
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node node : doc.childNodes()) {\n      if (node instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) node;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node n : doc.childNodes()) {\n      if (n instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) n;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node node : doc.childNodes()) {\n      if (node instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) node;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEval",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node node : doc.childNodes()) {\n      if (node instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) node;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node n : doc.childNodes()) {\n      if (n instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) n;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEval",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node n : doc.childNodes()) {\n      if (n instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) n;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node node : doc.childNodes()) {\n      if (node instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) node;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node node : doc.childNodes()) {\n      if (node instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) node;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node node : doc.childNodes()) {\n      if (node instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) node;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvalu",
        "public XmlDeclaration asXmlDeclaration() {\n    String data = getData();\n    Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser());\n    XmlDeclaration decl = null;\n// buggy line:    if (doc.childNodeSize() > 0) {\n    for (Node n : doc.childNodes()) {\n      if (n instanceof XmlDeclaration) {\n        decl = (XmlDeclaration) n;\n        break;\n      }\n    }\n    return decl;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n"
      ],
      "function range": "74,5-84,5"
    },
    "Jsoup_88_/src/main/java/org/jsoup/nodes/Attribute.java_80-81": {
      "loc": "80-81",
      "input": "public String getValue() {\n// buggy line:    return val;",
      "output": [
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksData",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n/**\n",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\n\npublic",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport org.apache.hyracks.data.std.",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {\n\n    ",
        "public String getValue() {\n// buggy line:    return val;\n        return val;\n    }\n\n    public void setValue(String val) {\n        this.val = val;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlAvg"
      ],
      "function range": "79,5-81,5"
    },
    "JxPath_5_/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java_665-668": {
      "loc": "665-668",
      "input": "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0 ? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0 ? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1 != null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");",
      "output": [
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CON",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDIT",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANT",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CON",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CON",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANT",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANT",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDIT",
        "private int compareNodePointers(\n    NodePointer p1,\n    int depth1,\n    NodePointer p2,\n    int depth2) \n{\n    if (depth1 < depth2) {\n        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);\n        return r == 0? -1 : r;\n    }\n    if (depth1 > depth2) {\n        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);\n        return r == 0? 1 : r;\n    }\n    if (p1 == null && p2 == null) {\n        return 0;\n    }\n    if (p1!= null && p1.equals(p2)) {\n        return 0;\n    }\n    if (depth1 == 1) {\n// buggy line:        throw new JXPathException(\n// buggy line:                \"Cannot compare pointers that do not belong to the same tree: '\"\n// buggy line:                        + p1 + \"' and '\" + p2 + \"'\");\n        throw new JXPathException(\n            \"Cannot compare pointers that do not belong to the same tree: '\"\n            + p1 + \"' and '\" + p2 + \"'\");\n    }\n    throw new JXPathException(\n        \"Cannot compare pointers that do not belong to the same tree: '\"\n        + p1 + \"' and '\" + p2 + \"'\");\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES"
      ],
      "function range": "642,5-675,5"
    },
    "JxPath_10_/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java_42-43": {
      "loc": "42-43",
      "input": "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) ",
      "output": [
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalar",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.ex",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\n\npublic class",
        "public final Object computeValue(EvalContext context) {\n// buggy line:    return compute(args[0].computeValue(context), args[1].computeValue(context)) \n        return compute(args[0].computeValue(context), args[1].computeValue(context));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class N"
      ],
      "function range": "41,5-44,5"
    },
    "JxPath_12_/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java_108-109": {
      "loc": "108-109",
      "input": "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() != Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                    .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);",
      "output": [
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest piTest = (ProcessingInstructionTest) test;\n        String target =",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest piTest = (ProcessingInstructionTest) test;\n        String target =",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        if (nodeTypeTest.getNodeType()!= nodeType) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        return true;\n    }",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        int nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest piTest = (ProcessingInstructionTest) test;\n        String target =",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        if (nodeTypeTest.getNodeType()!= nodeType) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest pi",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof DocTypeTest) {\n        if (",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest piTest = (ProcessingInstructionTest) test;\n        String piTarget",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        if (nodeTypeTest.getNodeType()!= nodeType) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest piTest = (ProcessingInstructionTest) test;\n        String piTarget",
        "public static boolean testNode(Node node, NodeTest test) {\n    if (test == null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest = (NodeNameTest) test;\n        QName testName = nodeNameTest.getNodeName();\n        String namespaceURI = nodeNameTest.getNamespaceURI();\n        boolean wildcard = nodeNameTest.isWildcard();\n        String testPrefix = testName.getPrefix();\n        if (wildcard && testPrefix == null) {\n            return true;\n        }\n        if (wildcard\n            || testName.getName()\n                   .equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS = DOMNodePointer.getNamespaceURI(node);\n// buggy line:            return equalStrings(namespaceURI, nodeNS);\n            return equalStrings(nodeNS, namespaceURI);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        if (node.getNodeType()!= Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeTypeTest nodeTypeTest = (NodeTypeTest) test;\n        short nodeType = node.getNodeType();\n        return nodeType == nodeTypeTest.getNodeType();\n    }\n    if (test instanceof CommentTest) {\n        if (node.getNodeType()!= Node.COMMENT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof TextTest) {\n        if (node.getNodeType()!= Node.TEXT_NODE) {\n            return false;\n        }\n        return true;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType()!= Node.PROCESSING_INSTRUCTION_NODE) {\n            return false;\n        }\n        ProcessingInstructionTest piTest = (ProcessingInstructionTest) test;\n        return equalStr"
      ],
      "function range": "87,5-136,5"
    },
    "JxPath_21_/src/java/org/apache/commons/jxpath/ri/model/beans/PropertyPointer.java_152-153": {
      "loc": "152-153",
      "input": "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());",
      "output": [
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getInputStream() {\n        return ValueUtils.getInputStream(getBaseValue());\n    }\n\n    @Override\n    public Reader getReader() {\n        return ValueUtils",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getInputStream() {\n        return ValueUtils.getInputStream(getBaseValue());\n    }\n\n    @Override\n    public Reader getReader() {\n        return ValueUtils",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getInputStream() {\n        return ValueUtils.getInputStream(getBaseValue());\n    }\n\n    @Override\n    public Object getObject() {\n        return ValueUtils",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getInputStream() {\n        return ValueUtils.getInputStream(getBaseValue());\n    }\n\n    @Override\n    public Object getObject() {\n        return ValueUtils",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getAsciiStream() {\n        return ValueUtils.getAsciiStream(getBaseValue());\n    }\n\n    @Override\n    public InputStream getBinaryStream() {\n        return ValueUtils.getBinaryStream(getBaseValue());\n    }\n\n    @Override\n    public Reader getCharacterStream()",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getBinaryStream() {\n        return ValueUtils.getBinaryStream(getBaseValue());\n    }\n\n    @Override\n    public Object getObject() {\n        return Value",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getBinaryStream() {\n        return ValueUtils.getBinaryStream(getBaseValue());\n    }\n\n    @Override\n    public Object getObject() {\n        return get",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getInputStream() {\n        return ValueUtils.getInputStream(getBaseValue());\n    }\n\n    @Override\n    public Object getObject() {\n        return getBaseValue",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getBinaryStream() {\n        return ValueUtils.getBinaryStream(getBaseValue());\n    }\n\n    @Override\n    public Object getObject() {\n        return Value",
        "public int getLength() {\n// buggy line:    return ValueUtils.getLength(getBaseValue());\n        return ValueUtils.getLength(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBytes() {\n        return ValueUtils.getBytes(getBaseValue());\n    }\n\n    @Override\n    public String getString() {\n        return ValueUtils.getString(getBaseValue());\n    }\n\n    @Override\n    public boolean getBoolean() {\n        return ValueUtils.getBoolean(getBaseValue());\n    }\n\n    @Override\n    public byte getByte() {\n        return ValueUtils.getByte(getBaseValue());\n    }\n\n    @Override\n    public short getShort() {\n        return ValueUtils.getShort(getBaseValue());\n    }\n\n    @Override\n    public int getInt() {\n        return ValueUtils.getInt(getBaseValue());\n    }\n\n    @Override\n    public long getLong() {\n        return ValueUtils.getLong(getBaseValue());\n    }\n\n    @Override\n    public float getFloat() {\n        return ValueUtils.getFloat(getBaseValue());\n    }\n\n    @Override\n    public double getDouble() {\n        return ValueUtils.getDouble(getBaseValue());\n    }\n\n    @Override\n    public BigDecimal getBigDecimal() {\n        return ValueUtils.getBigDecimal(getBaseValue());\n    }\n\n    @Override\n    public BigInteger getBigInteger() {\n        return ValueUtils.getBigInteger(getBaseValue());\n    }\n\n    @Override\n    public Date getDate() {\n        return ValueUtils.getDate(getBaseValue());\n    }\n\n    @Override\n    public Time getTime() {\n        return ValueUtils.getTime(getBaseValue());\n    }\n\n    @Override\n    public Timestamp getTimestamp() {\n        return ValueUtils.getTimestamp(getBaseValue());\n    }\n\n    @Override\n    public InputStream getInputStream() {\n        return ValueUtils.getInputStream(getBaseValue());\n    }\n\n    @Override\n    public byte[] getBinary() {\n        return Value"
      ],
      "function range": "151,5-153,5"
    },
    "Lang_6_/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java_95-96": {
      "loc": "95-96",
      "input": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));",
      "output": [
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.fun",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.LongColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.VectorExpression",
        "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char[] c = Character.toChars(Character.codePointAt(input, pos));\n            out.write(c);\n            pos+= c.length;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n// buggy line:            pos += Character.charCount(Character.codePointAt(input, pos));\n            pos+= Character.charCount(Character.codePointAt(input, pos));\n        }\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evalu"
      ],
      "function range": "75,5-98,5"
    },
    "Lang_16_/src/main/java/org/apache/commons/lang3/math/NumberUtils.java_458-459": {
      "loc": "458-459",
      "input": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
      "output": [
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") ||",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") ||",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.st",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-\")) {\n// buggy line:    if (str",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n// buggy line:    if (str.startsWith(\"0x\") ||",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n    if (str.startsWith(\"0x\") || str.starts",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        if (str.startsWith(\"0x\") || str.starts",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n    if (str.startsWith(\"0x\")) {\n        str =",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n    if (str.startsWith(\"0x\")) {\n        return create",
        "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n// buggy line:    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n    if (str.startsWith(\"0x\")) {\n        return Long"
      ],
      "function range": "444,5-594,5"
    },
    "Lang_21_/src/main/java/org/apache/commons/lang3/time/DateUtils.java_265-266": {
      "loc": "265-266",
      "input": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
      "output": [
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_MONTH) == cal2.get(Calendar.WEEK_OF_MONTH) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&\n            cal1.get(Calendar.DATE) == cal2.get(Calendar.DATE) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_MONTH) == cal2.get(Calendar.WEEK_OF_MONTH) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_YEAR) == cal2.get(Calendar.DAY_OF_WEEK_IN_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_MONTH) == cal2.get(Calendar.WEEK_OF_MONTH) &&\n            cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.MONTH) == cal2.get(Calendar.MONTH) &&\n            cal1.get(Calendar.DAY_OF_MONTH) == cal2.get(Calendar.DAY_OF_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_YEAR) == cal2.get(Calendar.WEEK_OF_YEAR) &&\n            cal1.get(Calendar.WEEK_OF_MONTH) == cal2.get(Calendar.WEEK_OF_MONTH) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_YEAR) == cal2.get(Calendar.DAY_OF_WEEK_IN_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.DST_OFFSET) == cal2.get(Calendar.DST_OFFSET) &&\n            cal1.get(Calendar.",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_YEAR) == cal2.get(Calendar.DAY_OF_WEEK_IN_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            ",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_YEAR) == cal2.get(Calendar.DAY_OF_WEEK_IN_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.DST_OFFSET) == cal2.get(Calendar.DST_OFFSET));\n  }\n}\n<|java|",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_YEAR) == cal2.get(Calendar.DAY_OF_WEEK_IN_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET));\n  }",
        "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n    return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n            cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n            cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n// buggy line:            cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n            cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n            cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n            cal1.get(Calendar.DAY_OF_WEEK) == cal2.get(Calendar.DAY_OF_WEEK) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_MONTH) == cal2.get(Calendar.DAY_OF_WEEK_IN_MONTH) &&\n            cal1.get(Calendar.DAY_OF_WEEK_IN_YEAR) == cal2.get(Calendar.DAY_OF_WEEK_IN_YEAR) &&\n            cal1.get(Calendar.AM_PM) == cal2.get(Calendar.AM_PM) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET) &&\n            cal1.get(Calendar.ZONE_OFFSET) == cal2.get(Calendar.ZONE_OFFSET));\n}\n"
      ],
      "function range": "258,5-270,5"
    },
    "Lang_26_/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java_820-821": {
      "loc": "820-821",
      "input": "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);",
      "output": [
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar();",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n\n// buggy line:    Calendar c = new GregorianCalendar",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n\n// buggy line:    Calendar c = new GregorianCalendar",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone, Locale.getDefault());\n// buggy line:    Calendar c = new GregorianCalendar();",
        "public String format(Date date) {\n// buggy line:    Calendar c = new GregorianCalendar(mTimeZone);\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));\n// buggy line:    return c.getTime().toString();\n"
      ],
      "function range": "819,5-823,5"
    },
    "Lang_29_/src/main/java/org/apache/commons/lang3/SystemUtils.java_1672-1673": {
      "loc": "1672-1673",
      "input": "\n// buggy line:static float toJavaVersionInt(String version) {",
      "output": [
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n//   if (version == null) {\n//     return 0;\n//   }\n//   if (version.equals(\"1.0\")) {\n//     return 0;\n//   }\n//   if (version.equals(\"1.1\")) {\n//     return 1;\n//   }\n//   if (version.equals(\"1.2\")) {\n//     return 2;\n//   }\n//   if (version.equals(\"1.3\")) {\n//     return 3;\n//   }\n//   if (version.equals(\"1.4\")) {\n//     return 4;\n//   }\n//   if (version.equals(\"1.5\")) {\n//     return 5;\n//   }\n//   if (version.equals(\"1.6\")) {\n//     return 6;\n//   }\n//   if (version.equals(\"1.7\")) {\n//     return 7;\n//   }\n//   if (version.equals(\"1.8\")) {\n//     return 8;\n//   }\n//   if (version.equals(\"1.9\")) {\n//     return 9;\n//   }\n//   if (version.equals(\"1.10\")) {\n//     return 10;\n//   }\n//   if (version.equals(\"1.11\")) {\n//     return 11;\n//   }\n//   if (version.equals(\"1.12\")) {\n//     return 12;\n//   }\n//   if (version.equals(\"1.13\")) {\n//     return 13;\n//   }\n//   if (version.equals(\"1.14\")) {\n//     return 14;\n//   }\n//   if (version.equals(\"1.15\")) {\n//     return 15;\n//   }\n//   if (version.equals(\"1.16\")) {\n//     return 16;\n//   }\n//   if (version.equals(\"1.17\")) {\n//     return 17;\n//   }\n//   if (version.equals(\"1.18\")) {\n//     return 18;\n//   }\n",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n//   if (version == null) {\n//     return 0;\n//   }\n//   if (version.equals(\"1.0\")) {\n//     return 1;\n//   }\n//   if (version.equals(\"1.1\")) {\n//     return 2;\n//   }\n//   if (version.equals(\"1.2\")) {\n//     return 3;\n//   }\n//   if (version.equals(\"1.3\")) {\n//     return 4;\n//   }\n//   if (version.equals(\"1.4\")) {\n//     return 5;\n//   }\n//   if (version.equals(\"1.5\")) {\n//     return 6;\n//   }\n//   if (version.equals(\"1.6\")) {\n//     return 7;\n//   }\n//   if (version.equals(\"1.7\")) {\n//     return 8;\n//   }\n//   if (version.equals(\"1.8\")) {\n//     return 9;\n//   }\n//   if (version.equals(\"1.9\")) {\n//     return 10;\n//   }\n//   if (version.equals(\"1.10\")) {\n//     return 11;\n//   }\n//   if (version.equals(\"1.11\")) {\n//     return 12;\n//   }\n//   if (version.equals(\"1.12\")) {\n//     return 13;\n//   }\n//   if (version.equals(\"1.13\")) {\n//     return 14;\n//   }\n//   if (version.equals(\"1.14\")) {\n//     return 15;\n//   }\n//   if (version.equals(\"1.15\")) {\n//     return 16;\n//   }\n//   if (version.equals(\"1.16\")) {\n//     return 17;\n//   }\n//   if (version.equals(\"1.17\")) {\n//     return 18;\n//   }\n//   if (version.equals(\"1.18\")) {\n//     return 19;\n//   }\n",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n//   if (version == null) {\n//     return 0;\n//   }\n//   if (version.equals(\"1.0\")) {\n//     return 1;\n//   } else if (version.equals(\"1.1\")) {\n//     return 2;\n//   } else if (version.equals(\"1.2\")) {\n//     return 3;\n//   } else if (version.equals(\"1.3\")) {\n//     return 4;\n//   } else if (version.equals(\"1.4\")) {\n//     return 5;\n//   } else if (version.equals(\"1.5\")) {\n//     return 6;\n//   } else if (version.equals(\"1.6\")) {\n//     return 7;\n//   } else if (version.equals(\"1.7\")) {\n//     return 8;\n//   } else if (version.equals(\"1.8\")) {\n//     return 9;\n//   } else if (version.equals(\"1.9\")) {\n//     return 10;\n//   } else if (version.equals(\"1.10\")) {\n//     return 11;\n//   } else if (version.equals(\"1.11\")) {\n//     return 12;\n//   } else if (version.equals(\"1.12\")) {\n//     return 13;\n//   } else if (version.equals(\"1.13\")) {\n//     return 14;\n//   } else if (version.equals(\"1.14\")) {\n//     return 15;\n//   } else if (version.equals(\"1.15\")) {\n//     return 16;\n//   } else if (version.equals(\"1.16\")) {\n//     return 17;\n//   } else if (version.equals(\"1.17\")) {\n//     return 18;\n//   } else if (version.equals(\"1.18\")) {\n//     return 19;\n//   } else if (version.equals(\"1.19\")) {\n//     return 20;\n//   } else if (version.equals(\"1.20\")) {\n",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n\n// buggy line:static float toJavaVersionInt(String version)",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line: static float toJavaVersionInt(String version) {",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version)\n",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) throws",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionFloat(String version) {",
        "\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersionInt(String version) {\n// buggy line:static float toJavaVersion(String version) {\n"
      ],
      "function range": "1672,5-1674,5"
    },
    "Lang_33_/src/main/java/org/apache/commons/lang3/ClassUtils.java_910-911": {
      "loc": "910-911",
      "input": "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();",
      "output": [
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyr",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.al",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n\npublic class NumericAddDescriptor extends AbstractScal",
        "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n// buggy line:        classes[i] = array[i].getClass();\n        classes[i] = array[i].getClass();\n    }\n    return classes;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n\npublic class NumericAddDescriptor extends AbstractSc"
      ],
      "function range": "902,5-913,5"
    },
    "Lang_39_/src/java/org/apache/commons/lang3/StringUtils.java_3676-3677": {
      "loc": "3676-3677",
      "input": "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength != replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();",
      "output": [
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        if (searchList[i] == null || searchList[i].length() == 0) {\n            continue;\n",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        int greater = replacementLength - searchLength;\n        if (noMoreMatchesForReplIndex[i]) {\n            ",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        if (searchList[i] == null || searchList[i].length() == 0 || noMoreMatchesForRepl",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        int greater = replacementLength - searchLength;\n        if (noMoreMatchesForReplIndex[i] || searchList",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        if (noMoreMatchesForReplIndex[i]) {\n            continue;\n        }\n        if (searchList",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        int greater = replacementLength - searchLength;\n        if (noMoreMatchesForReplIndex[i] && greater >=",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        int greater = replacementLength - searchLength;\n        if (noMoreMatchesForReplIndex[i] && searchList",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        int greater = replacementLength - searchLength;\n        if (noMoreMatchesForReplIndex[i] && greater <=",
        "private static String replaceEach(String text, String[] searchList, String[] replacementList, \n                                  boolean repeat, int timeToLive) \n{\n    if (text == null || text.length() == 0 || searchList == null || \n        searchList.length == 0 || replacementList == null || replacementList.length == 0) \n    {\n        return text;\n    }\n    if (timeToLive < 0) {\n        throw new IllegalStateException(\"TimeToLive of \" + timeToLive + \" is less than 0: \" + text);\n    }\n    int searchLength = searchList.length;\n    int replacementLength = replacementList.length;\n    if (searchLength!= replacementLength) {\n        throw new IllegalArgumentException(\"Search and Replace array lengths don't match: \"\n            + searchLength\n            + \" vs \"\n            + replacementLength);\n    }\n    boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];\n    int textIndex = -1;\n    int replaceIndex = -1;\n    int tempIndex = -1;\n    for (int i = 0; i < searchLength; i++) {\n        if (noMoreMatchesForReplIndex[i] || searchList[i] == null || \n            searchList[i].length() == 0 || replacementList[i] == null) \n        {\n            continue;\n        }\n        tempIndex = text.indexOf(searchList[i]);\n        if (tempIndex == -1) {\n            noMoreMatchesForReplIndex[i] = true;\n        } else {\n            if (textIndex == -1 || tempIndex < textIndex) {\n                textIndex = tempIndex;\n                replaceIndex = i;\n            }\n        }\n    }\n    if (textIndex == -1) {\n        return text;\n    }\n    int start = 0;\n    int increase = 0;\n    for (int i = 0; i < searchList.length; i++) {\n// buggy line:        int greater = replacementList[i].length() - searchList[i].length();\n        int greater = replacementLength - searchLength;\n        if (noMoreMatchesForReplIndex[i] && greater <"
      ],
      "function range": "3605,5-3731,5"
    },
    "Lang_40_/src/java/org/apache/commons/lang/StringUtils.java_1048-1049": {
      "loc": "1048-1049",
      "input": "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());",
      "output": [
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algeb",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.alge",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.alge",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.al",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.h",
        "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n// buggy line:    return contains(str.toUpperCase(), searchStr.toUpperCase());\n    return str.toUpperCase().contains(searchStr.toUpperCase());\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks"
      ],
      "function range": "1044,5-1049,5"
    },
    "Lang_43_/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java_422-423": {
      "loc": "422-423",
      "input": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null ? null : appendTo.append(QUOTE);",
      "output": [
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n *",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n",
        "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n// buggy line:        return appendTo == null? null : appendTo.append(QUOTE);\n        if (appendTo!= null) {\n            appendTo.append(QUOTE);\n        }\n        pos.setIndex(start + 1);\n    } else {\n        for (int i = start; i < c.length; i++) {\n            switch (c[i]) {\n            case QUOTE:\n                if (escapingOn) {\n                    if (appendTo!= null) {\n                        appendTo.append(QUOTE);\n                    }\n                    pos.setIndex(i + 1);\n                    return appendTo;\n                } else {\n                    if (appendTo == null) {\n                        appendTo = new StringBuffer();\n                    }\n                    appendTo.append(QUOTE);\n                }\n                break;\n            default:\n                if (appendTo!= null) {\n                    appendTo.append(c[i]);\n                }\n                break;\n            }\n        }\n        pos.setIndex(c.length);\n    }\n    return appendTo;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n"
      ],
      "function range": "417,5-444,5"
    },
    "Lang_51_/src/java/org/apache/commons/lang/BooleanUtils.java_682-683": {
      "loc": "682-683",
      "input": "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) == 's' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) == 's');\n            }\n// buggy line:        }",
      "output": [
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n            }\n            if (ch == 'f') {\n                return \n                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n                    (str.charAt(2) == 'l' || str.charAt(2) == 'L');\n            }\n            if (ch",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n//            if (ch == 'T') {\n//                return \n//                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n//                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n//            }\n            if (ch == 'f') {\n                return \n                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n                    (str.charAt(2) == 'l' || str.charAt(2) == 'L');\n            }",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't' || ch == 'T') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n            }\n            if (ch == 'f') {\n                return \n                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n                    (str.charAt(2) == 'l' || str.charAt(2) == 'L');\n            ",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n            }\n            if (ch == 'f') {\n                return \n                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n                    (str.charAt(2) == 'l' || str.charAt(2) == 'F');\n            }\n            if (ch",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n//            if (ch == 'T') {\n//                return \n//                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n//                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n//            }\n//            if (ch == 'f') {\n//                return \n//                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n//                    (str.charAt(2) == 'l' || str.charAt(2) == 'L",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n//            if (ch == 'T') {\n//                return \n//                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n//                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n//            }\n            if (ch == 'f') {\n                return \n                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n                    (str.charAt(2) == 'l' || str.charAt(2) == 'F');\n            }",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't' || ch == 'T') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n            if (ch == 'T') {\n                return \n                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n            }\n            if (ch == 'f') {\n                return \n                    (str.charAt(1) == 'a' || str.charAt(1) == 'A') &&\n                    (str.charAt(2) == 'l' || str.charAt(2) == 'F');\n            ",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 't') {\n//                return \n//                    (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n//                    (str.charAt(2) == 'u' || str.charAt(2) == 'U');\n//            }\n//            if (ch == 'T') {\n//                return \n//                    (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n//                    (str.charAt(2) == 'U' || str.charAt(2) == 'u');\n//            }\n            break;\n        }\n        case 4: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            char ch2 = str.charAt(2);\n            char ch3 = str.charAt(3);\n            if (ch",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 'n') {\n//                return \n//                    (str.charAt(1) == 'o' || str.charAt(1) == 'O') &&\n//                    (str.charAt(2) == 'n' || str.charAt(2) == 'N');\n//            }\n//            if (ch == 'N') {\n//                return \n//                    (str.charAt(1) == 'O' || str.charAt(1) == 'o') &&\n//                    (str.charAt(2) == 'N' || str.charAt(2) == 'n');\n//            }\n            return false;\n        }\n        case 4: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            char ch2 = str.charAt(2);\n            char ch3 = str.charAt(3);\n            if (",
        "public static boolean toBoolean(String str) {\n    if (str == \"true\") {\n        return true;\n    }\n    if (str == null) {\n        return false;\n    }\n    switch (str.length()) {\n        case 2: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            return \n                (ch0 == 'o' || ch0 == 'O') &&\n                (ch1 == 'n' || ch1 == 'N');\n        }\n        case 3: {\n            char ch = str.charAt(0);\n            if (ch == 'y') {\n                return \n                    (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n                    (str.charAt(2) =='s' || str.charAt(2) == 'S');\n            }\n            if (ch == 'Y') {\n                return \n                    (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                    (str.charAt(2) == 'S' || str.charAt(2) =='s');\n            }\n// buggy line:        }\n//            if (ch == 'n') {\n//                return \n//                    (str.charAt(1) == 'o' || str.charAt(1) == 'O') &&\n//                    (str.charAt(2) == 'n' || str.charAt(2) == 'N');\n//            }\n//            if (ch == 'N') {\n//                return \n//                    (str.charAt(1) == 'O' || str.charAt(1) == 'o') &&\n//                    (str.charAt(2) == 'N' || str.charAt(2) == 'n');\n//            }\n            break;\n        }\n        case 4: {\n            char ch0 = str.charAt(0);\n            char ch1 = str.charAt(1);\n            char ch2 = str.charAt(2);\n            char ch3 = str.charAt(3);\n            if (ch"
      ],
      "function range": "649,5-700,5"
    },
    "Lang_57_/src/java/org/apache/commons/lang/LocaleUtils.java_223-224": {
      "loc": "223-224",
      "input": "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);",
      "output": [
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarE",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\n\npublic class Global",
        "public static boolean isAvailableLocale(Locale locale) {\n// buggy line:    return cAvailableLocaleSet.contains(locale);\n        return cAvailableLocaleSet.contains(new Locale(locale.getLanguage(), locale.getCountry(), locale.getVariant()));\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class Numeric"
      ],
      "function range": "222,5-224,5"
    },
    "Lang_59_/src/java/org/apache/commons/lang/text/StrBuilder.java_884-885": {
      "loc": "884-885",
      "input": "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null ? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);",
      "output": [
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an object.\n   *\n   * @param obj the object to append\n   * @return this\n   */\n  public StrBuilder append(Object obj) {\n    if (obj == null)",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string builder.\n   *\n   * @param str the string builder to append\n   * @return this\n   */\n  public StrBuilder append(StringBuilder str) {\n    if (str",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an array of characters.\n   *\n   * @param chr the characters to append\n   * @return this\n   */\n  public StrBuilder append(char[] chr) {\n    if",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an object.\n   *\n   * @param obj an object\n   * @return this\n   */\n  public StrBuilder append(Object obj) {\n    if (obj == null) {\n",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends another string builder.\n   *\n   * @param str the string builder to append\n   * @return this\n   */\n  public StrBuilder append(StrBuilder str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.size();\n    ensureCapacity(size + strLen);\n    System.arraycopy(str.buffer, 0, buffer, size, strLen);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an object.\n   *\n   * @param obj the object to append\n   * @return this\n   */\n  public StrBuilder append(Object obj) {\n    if (obj",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an array of characters.\n   *\n   * @param chars the characters to append\n   * @return this\n   */\n  public StrBuilder append(char chars[]) {\n    if (ch",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an array of characters.\n   *\n   * @param chars the characters to append\n   * @return this\n   */\n  public StrBuilder append(char[] chars) {\n    if (ch",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an object.\n   *\n   * @param obj the object to append\n   * @return this\n   */\n  public StrBuilder append(Object obj) {\n    return append(obj == null",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an array of chars.\n   *\n   * @param chars the chars to append\n   * @return this\n   */\n  public StrBuilder append(char[] chars) {\n    if (ch",
        "public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n    if (width > 0) {\n        ensureCapacity(size + width);\n        String str = (obj == null? getNullText() : obj.toString());\n        int strLen = str.length();\n        if (strLen >= width) {\n// buggy line:            str.getChars(0, strLen, buffer, size);\n            str.getChars(0, strLen, buffer, size);\n        } else {\n            int padLen = width - strLen;\n            for (int i = 0; i < padLen; i++) {\n                buffer[size + strLen + i] = padChar;\n            }\n            str.getChars(0, strLen, buffer, size + padLen);\n        }\n        size += width;\n        return this;\n    } else {\n        return append(obj);\n    }\n  }\n\n  /**\n   * Appends a string.\n   *\n   * @param str the string to append\n   * @return this\n   */\n  public StrBuilder append(String str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends a string buffer.\n   *\n   * @param str the string buffer to append\n   * @return this\n   */\n  public StrBuilder append(StringBuffer str) {\n    if (str == null) {\n      str = getNullText();\n    }\n    int strLen = str.length();\n    ensureCapacity(size + strLen);\n    str.getChars(0, strLen, buffer, size);\n    size += strLen;\n    return this;\n  }\n\n  /**\n   * Appends an array of chars.\n   *\n   * @param chars the chars to append\n   * @return this\n   */\n  public StrBuilder append(char chars[]) {\n    if (ch"
      ],
      "function range": "878,5-895,5"
    },
    "Lang_61_/src/java/org/apache/commons/lang/text/StrBuilder.java_1776-1777": {
      "loc": "1776-1777",
      "input": "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0 ? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;",
      "output": [
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the char to search for.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex the index to finish the search at.\n *",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the string to search for.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex the index to finish the search at.\n *",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the string to find.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex   the index to finish the search at.\n *",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   ch          the char to search for.\n * @param   beginIndex  the index to start the search from.\n * @param   endIndex  the index to finish the search at.",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the char to search for.\n * @param   beginIndex   the index to start the search from.\n * @param   endIndex   the index to finish the search at.",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   ch          the character to search for.\n * @param   beginIndex  the index to start the search from.\n * @param   endIndex  the index to finish the search at.",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the string to search for.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex   the index to finish the search at.\n",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the char to find.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex the index to finish the search at.\n * @",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the string to find.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex the index to finish the search at.\n * @",
        "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n// buggy line:    int len = thisBuf.length - strLen;\n    int len = size - strLen;\n    outer:\n    for (int i = startIndex; i < len; i++) {\n        for (int j = 0; j < strLen; j++) {\n            if (thisBuf[i + j]!= str.charAt(j)) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}\n\n/**\n * Returns the index within this buffer of the first occurrence of the\n * specified character, starting the search at the specified\n * <code>beginIndex</code> and finishing at <code>endIndex</code>.\n * If no such character occurs in this buffer within the specified bounds,\n * <code>-1</code> is returned.\n * <p>\n * There is no restriction on the value of <code>beginIndex</code> and\n * <code>endIndex</code>. If <code>beginIndex</code> is negative,\n * it has the same effect as if it were zero. If <code>endIndex</code> is\n * greater than <code>length()</code>, it has the same effect as if it were\n * <code>length()</code>. If the <code>beginIndex</code> is greater than\n * the <code>endIndex</code>, <code>-1</code> is returned.\n *\n * @param   str     the char to search for.\n * @param   beginIndex the index to start the search from.\n * @param   endIndex one more than the index to finish the search at"
      ],
      "function range": "1760,5-1787,5"
    },
    "Math_2_/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java_268-269": {
      "loc": "268-269",
      "input": "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
      "output": [
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSecondMoment() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getProduct() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getHarmonicMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMedian() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMode() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getProduct() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfLogs() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumLogarithm() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSecondMoment() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumOfSquares() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }",
        "public double getNumericalMean() {\n// buggy line:    return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n        return (double) getSampleSize() / (double) getPopulationSize();\n    }\n\n    @Override\n    public double getNumericalVariance() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getNumericalStandardDeviation() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getGeometricMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getArithmeticMean() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSum() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMin() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getMax() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getRange() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumLogarithm() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }\n\n    @Override\n    public double getSumSquared() {\n        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n    }"
      ],
      "function range": "267,5-269,5"
    },
    "Math_5_/src/main/java/org/apache/commons/math3/complex/Complex.java_305-306": {
      "loc": "305-306",
      "input": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;",
      "output": [
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cos(imaginary), Math.sin(real) * Math.sin(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cos(imaginary), -Math.sin(real) * Math.sin(imaginary));\n}\n\npublic Complex tan() {\n    if",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return 0.0;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cos(imaginary), Math.sin(real) * Math.sin(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cos(imaginary), -Math.sin(real) * Math.sin(imaginary));\n}\n\npublic Complex tan() {\n    ",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cosh(imaginary), -Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex tan()",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return 0.0;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cosh(imaginary), -Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex tan",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), -Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cosh(imaginary), -Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex tan",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return 0.0;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), -Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cosh(imaginary), -Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex sinh() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sinh(real) * Math.cosh(imaginary), -Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), -Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex cos() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.cos(real) * Math.cosh(imaginary), Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex tan()",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cosh(imaginary), -Math.cos(real) * Math.sinh(imaginary));\n}\n\npublic Complex sinh() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sinh(real) * Math.cosh(imaginary), Math.sin(real) * Math.sinh(imaginary));\n}\n\npublic Complex",
        "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n    if (real == 0.0 && imaginary == 0.0) {\n// buggy line:        return NaN;\n        return NaN;\n    }\n    return new Complex(1.0 / real, -1.0 / imaginary);\n}\n\npublic Complex conjugate() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(real, -imaginary);\n}\n\npublic Complex exp() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary), Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex expm1() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.exp(real) * Math.cos(imaginary) - 1.0, Math.exp(real) * Math.sin(imaginary));\n}\n\npublic Complex log() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log(real), imaginary);\n}\n\npublic Complex log10() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log10(real), imaginary);\n}\n\npublic Complex log1p() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.log1p(real), imaginary);\n}\n\npublic Complex sin() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sin(real) * Math.cos(imaginary), Math.sin(real) * Math.sin(imaginary));\n}\n\npublic Complex sinh() {\n    if (isNaN) {\n        return NaN;\n    }\n    return new Complex(Math.sinh(real) * Math.cos(imaginary), Math.sinh(real) * Math.sin(imaginary));\n}\n\npublic Complex tan() {\n"
      ],
      "function range": "299,5-321,5"
    },
    "Math_9_/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java_87-88": {
      "loc": "87-88",
      "input": "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));",
      "output": [
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate().negate().negate().ne",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n\n",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, direction);\n// buggy line:    final Line reverted = new Line(zero, direction.negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().negate().negate().negate().negate().negate().negate().negate().negate());\n// buggy line:    final Line reverted = new Line(zero, direction.negate().negate().negate().negate().",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction).negate());\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate().negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate().negate().negate().negate().negate().negate()));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction.negate().negate().negate().negate().negate().negate().negate().negate().negate().negate().",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));",
        "public Line revert() {\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n// buggy line:    final Line reverted = new Line(zero, zero.subtract(direction));\n\n        final Line reverted = new Line(zero, zero.subtract(direction));\n        return reverted;"
      ],
      "function range": "86,5-89,5"
    },
    "Math_11_/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java_183-184": {
      "loc": "183-184",
      "input": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
      "output": [
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inher",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.log(2 * FastMath.PI) - FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.log(2 * FastMath.PI) - FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n}\n<|",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n}\n<|java",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /**\n   * {",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.log(vals[0]);\n  }\n\n  @Override\n  public",
        "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double probability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n// buggy line:    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n    return FastMath.pow(2 * FastMath.PI, -dim / 2) * FastMath.pow(vals[0], dim / 2);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logDensity(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.log(2 * FastMath.PI) - FastMath.log(vals[0]);\n  }\n\n  /** {@inheritDoc} */\n  @Override\n  public double logProbability(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length!= dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    return FastMath.log(2 * FastMath.PI) - FastMath.log(vals[0]);\n  }\n\n  /**\n   * {@inheritDoc}\n"
      ],
      "function range": "177,5-186,5"
    },
    "Math_20_/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java_921-922": {
      "loc": "921-922",
      "input": "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return",
      "output": [
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksData",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScal",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.ex",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracks",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport org.apache.hyr",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor extends AbstractAggregateFunctionDynamic",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport",
        "public double[] repairAndDecode(final double[] x) {\n// buggy line:    return Arrays.copyOf(x, x.length);\n        return Arrays.copyOf(x, x.length);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;"
      ],
      "function range": "920,9-923,9"
    },
    "Math_27_/src/main/java/org/apache/commons/math3/fraction/Fraction.java_597-598": {
      "loc": "597-598",
      "input": "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();",
      "output": [
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor extends Abstract",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class LocalSumAggregateDescriptor extends AbstractAgg",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class MaxAggregateDescriptor extends AbstractAggregate",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.ex",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlAvgAggregateDescriptor extends",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlSumAggregateDescriptor extends Abstract",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlSumAggregateDescriptor extends",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAgg",
        "public double percentageValue() {\n// buggy line:    return multiply(100).doubleValue();\n        return multiply(100.0).doubleValue();\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalSqlAvg"
      ],
      "function range": "596,5-598,5"
    },
    "Math_30_/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java_173-174": {
      "loc": "173-174",
      "input": "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;",
      "output": [
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final double n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4n5n6",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final int n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4n5n6",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final double n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10n11 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11n12 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final int n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10n11 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11n12 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final double n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4n5n6n7",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final int n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4n5n6n7",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final int n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12p1 = n1n2n3n4n5n6",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final double n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12p1 = n1n2n3n4n5n6",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final double n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11\n                * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12n13 = n1n2n3n4n5",
        "private double calculateAsymptoticPValue(final double Umin,\n                                         final int n1,\n                                         final int n2)\n    throws ConvergenceException, MaxCountExceededException {\n// buggy line:    final int n1n2prod = n1 * n2;\n        final double n1n2prod = n1 * n2;\n        final double n1n2 = n1 * n2;\n        final double n1n2n3 = n1n2 * n3;\n        final double n1n2n3n4 = n1n2n3 * n4;\n        final double n1n2n3n4n5 = n1n2n3n4 * n5;\n        final double n1n2n3n4n5n6 = n1n2n3n4n5 * n6;\n        final double n1n2n3n4n5n6n7 = n1n2n3n4n5n6 * n7;\n        final double n1n2n3n4n5n6n7n8 = n1n2n3n4n5n6n7 * n8;\n        final double n1n2n3n4n5n6n7n8n9 = n1n2n3n4n5n6n7n8 * n9;\n        final double n1n2n3n4n5n6n7n8n9n10 = n1n2n3n4n5n6n7n8n9 * n10;\n        final double n1n2n3n4n5n6n7n8n9n10n11 = n1n2n3n4n5n6n7n8n9n10n11 * n11;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12 = n1n2n3n4n5n6n7n8n9n10n11n12 * n12;\n        final double n1n2n3n4n5n6n7n8n9n10n11n12p13 = n1n2n3n4"
      ],
      "function range": "168,5-184,5"
    },
    "Math_32_/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java_136-137": {
      "loc": "136-137",
      "input": "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {",
      "output": [
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 0.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 1.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 0.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 1.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 0.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 1.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 0.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 1.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 0.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.",
        "@Override\nprotected void computeGeometricalProperties() {\n    final Vector2D[][] v = getVertices();\n    if (v.length == 0) {\n        final BSPTree<Euclidean2D> tree = getTree(false);\n// buggy line:        if ((Boolean) tree.getAttribute()) {\n        if (Boolean.TRUE.equals(tree.getAttribute())) {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(0.0, 0.0);\n                }\n            }\n        } else {\n            for (int i = 0; i < v.length; ++i) {\n                for (int j = 0; j < v[i].length; ++j) {\n                    v[i][j] = new Vector2D(1.0, 1.0);\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i < v.length; ++i) {\n            for (int j = 0; j < v[i].length; ++j) {\n                v[i][j].normalize();\n            }\n        }\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache."
      ],
      "function range": "129,5-181,5"
    },
    "Math_33_/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java_338-339": {
      "loc": "338-339",
      "input": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
      "output": [
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.aster",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.vector.",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.",
        "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n// buggy line:        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        if (Precision.compareTo(entry, 0d) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n    int[] columnsToDropArray = new int[columnsToDrop.size()];\n    for (int i = 0; i < columnsToDrop.size(); i++) {\n        columnsToDropArray[i] = columnsToDrop.get(i);\n    }\n\n    super.dropPhase1Objective(columnsToDropArray);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde.ADoubleSerializerDes"
      ],
      "function range": "327,5-367,5"
    },
    "Math_34_/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java_209-210": {
      "loc": "209-210",
      "input": "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();",
      "output": [
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\n",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAgg",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvalu",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyr",
        "public Iterator<Chromosome> iterator() {\n// buggy line:    return chromosomes.iterator();\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                return chromosomes.get(index++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyAggregateFunction;\nimport org"
      ],
      "function range": "208,5-210,5"
    },
    "Math_41_/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java_520-521": {
      "loc": "520-521",
      "input": "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {",
      "output": [
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean) {\n    return evaluate(values, weights, mean, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean, final int begin, final int length) {\n    return evaluate(values, weights, mean, begin, length);\n",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n// buggy line:            sumWts += weights[i];\n            for (int i = 0; i < weights.length; i++) {\n                sumWts += weights[i];\n            }\n            var = Math.sqrt(accum / sumWts - (accum2 / sumWts) * (accum2 / sumWts));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean) {\n    return evaluate(values, weights, mean, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean, final int begin, final int length",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final int begin, final int length) {\n    return evaluate(values, null, 0, begin, length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final int begin, final int length) {\n    return evaluate(values, weights, 0, begin, length);\n  }\n\n  /**\n   * {",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean) {\n    return evaluate(values, weights, mean, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean, final int begin) {\n    return evaluate(values, weights, mean, begin, values.length - begin);\n",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean) {\n    return evaluate(values, weights, mean, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final int begin, final int length) {\n    return evaluate(values, weights, 0, begin, length);\n  }\n\n  ",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final int begin, final int length) {\n    return evaluate(values, null, 0, begin, length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean) {\n    return evaluate(values, weights, mean, 0, values.length);\n  }\n\n  /**\n   * {@in",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final int begin, final int length) {\n    return evaluate(values, null, 0, begin, length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights, final int begin, final int length) {\n    return evaluate(values, weights, 0, begin, length);\n  }\n\n  /**\n   * {@in",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n// buggy line:            sumWts += weights[i];\n            for (int i = 0; i < weights.length; i++) {\n                sumWts += weights[i];\n            }\n            var = Math.sqrt(accum / sumWts - (accum2 / sumWts) * (accum2 / sumWts));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final int begin, final int length) {\n    return evaluate(values, null, 0, begin, length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final int begin, final int length) {\n    return evaluate(values,",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n            for (int i = begin; i < begin + length; i++) {\n                sumWts += weights[i];\n            }\n            var = (accum - (sumWts * accum2)) / (sumWts * (sumWts - 1.0));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final int begin, final int length) {\n    return evaluate(values, null, 0, begin, length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights, final int begin,\n                         final int length) {\n    return evaluate(values, weights, 0, begin, length);\n  }\n\n  /**\n   * {",
        "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    double var = Double.NaN;\n    if (test(values, weights, begin, length)) {\n        if (length == 1) {\n            var = 0.0;\n        } else if (length > 1) {\n            double accum = 0.0;\n            double dev = 0.0;\n            double accum2 = 0.0;\n            for (int i = begin; i < begin + length; i++) {\n                dev = values[i] - mean;\n                accum += weights[i] * (dev * dev);\n                accum2 += weights[i] * dev;\n            }\n            double sumWts = 0;\n// buggy line:            for (int i = 0; i < weights.length; i++) {\n// buggy line:            sumWts += weights[i];\n            for (int i = 0; i < weights.length; i++) {\n                sumWts += weights[i];\n            }\n            var = Math.sqrt(accum / sumWts - (accum2 / sumWts) * (accum2 / sumWts));\n        }\n    }\n    return var;\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights) {\n    return evaluate(values, weights, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values) {\n    return evaluate(values, null, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean) {\n    return evaluate(values, weights, mean, 0, values.length);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public double evaluate(final double[] values, final double[] weights,\n                         final double mean, final int begin) {\n    "
      ],
      "function range": "501,5-532,5"
    },
    "Math_48_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_189-190": {
      "loc": "189-190",
      "input": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;",
      "output": [
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LIC",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LIC",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LIC",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyInterval(x0, x1);\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyInterval(x0, x1);\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      ",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                break;\n            default:\n                break;\n            }\n            x1 = x;\n            f1 = fx;\n        }\n        verifyBracketing(x0, x1);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/lic"
      ],
      "function range": "129,5-251,5"
    },
    "Math_50_/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java_187-191": {
      "loc": "187-191",
      "input": "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                }",
      "output": [
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                f0 =",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n                if (x == x1) {\n                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n                x0 = 0.5 * (x0 + x1);\n                f0 = computeObjectiveValue(x0);\n                f1 = computeObjectiveValue(x",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n// buggy line:                }\n                if (x == x1) {\n                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n                x0 = 0.5 * (x0 + x1 - FastMath.max(FastMath.abs(x1) * rtol, FastMath.abs(x",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x0), atol));\n                f0 =",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                f0 = computeObjectiveValue(x0);\n// buggy line:                    f1 = computeObjectiveValue(x1);\n// buggy line:                }\n                break;\n            default:\n                throw new MathIllegalStateException(LocalizedCoreFormats.",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n// buggy line:                }\n                if (x == x1) {\n                    x0 = 0.5 * (x0 + x1 - FastMath.max(FastMath",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n                x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                f0 = computeObjectiveValue(x0);\n// buggy line:                    f1 = computeObjectiveValue(x1);\n// buggy line:                }\n                break;\n            default:\n                throw new MathIllegalStateException(LocalizedFormats.SIM",
        "protected final double doSolve() {\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    verifyBracketing(x0, x1);\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n    boolean inverted = false;\n    while (true) {\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n        if (fx == 0.0) {\n            return x;\n        }\n        if (f1 * fx < 0) {\n            x0 = x1;\n            f0 = f1;\n            inverted =!inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n// buggy line:                if (x == x1) {\n// buggy line:                    x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n// buggy line:                    f0 = computeObjectiveValue(x0);\n// buggy line:                } else {\n// buggy line:                    x1 = 0.5 * (x1 + x0 - FastMath.max(rtol * FastMath.abs(x0), atol));\n// buggy line:                    f1 = computeObjectiveValue(x1);\n                x0 = 0.5 * (x0 + x1);\n                f0 = computeObjectiveValue(x0);\n                break;\n            default:\n                throw"
      ],
      "function range": "128,5-253,5"
    },
    "Math_53_/src/main/java/org/apache/commons/math/complex/Complex.java_153-154": {
      "loc": "153-154",
      "input": "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),",
      "output": [
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                      imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                          imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                      imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                          imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                      imaginary * rhs.getImaginary(),\n//                                      real * rhs.getImaginary() +\n//                                      imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                          imaginary * rhs.getImaginary(),\n                          real * rhs.getImaginary() +\n                          imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                      imaginary * rhs.getImaginary(),\n//                                      real * rhs.getImaginary() -\n//                                      imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                          imaginary * rhs.getImaginary(),\n                          real * rhs.getImaginary() -\n                          imaginary * rhs.getReal());\n",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex negate()",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    -real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         -real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  @Override\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  @Override\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() - imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() + imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() - imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() + imaginary * rhs.getReal());\n  }\n\n  @Override\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() + imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() - imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() + imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() - imaginary * rhs.getReal());\n  }\n\n  @Override\n  public Complex negate() {\n    return createComplex(-real, -imaginary);\n  }\n\n  @",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  /**\n   *",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex sqrt",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  public double getReal",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  public boolean equals(",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex pow(",
        "public Complex add(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real + rhs.getReal(),\n//                                    imaginary + rhs.getImaginary());\n    return createComplex(real + rhs.getReal(),\n                         imaginary + rhs.getImaginary());\n  }\n\n  public Complex subtract(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real - rhs.getReal(),\n//                                    imaginary - rhs.getImaginary());\n    return createComplex(real - rhs.getReal(),\n                         imaginary - rhs.getImaginary());\n  }\n\n  public Complex multiply(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() -\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() +\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() -\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() +\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex divide(Complex rhs)\n    throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n// buggy line:    return createComplex(real * rhs.getReal() +\n//                                    imaginary * rhs.getImaginary(),\n//                                    real * rhs.getImaginary() -\n//                                    imaginary * rhs.getReal());\n    return createComplex(real * rhs.getReal() +\n                         imaginary * rhs.getImaginary(),\n                         real * rhs.getImaginary() -\n                         imaginary * rhs.getReal());\n  }\n\n  public Complex square()"
      ],
      "function range": "150,5-155,5"
    },
    "Math_56_/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java_237-244": {
      "loc": "237-244",
      "input": "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;",
      "output": [
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;\nimport org.apache.hadoop.hive.ql.exec.",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.AqlSerializerDeserializer",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCache;\nimport org.apache.ignite.cache.CacheAtomicityMode;\nimport org.apache.ign",
        "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n    final int[] indices = new int[dimension];\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count <= index) {\n            count += offset;\n            ++idx;\n        }\n        --idx;\n        count -= offset;\n        indices[i] = idx;\n    }\n// buggy line:    int idx = 1;\n// buggy line:    while (count < index) {\n// buggy line:        count += idx;\n// buggy line:        ++idx;\n// buggy line:    }\n// buggy line:    --idx;\n// buggy line:    indices[last] = idx;\n    indices[last] = count;\n    return indices;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde.ADouble"
      ],
      "function range": "216,5-246,5"
    },
    "Math_57_/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java_175-176": {
      "loc": "175-176",
      "input": "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;",
      "output": [
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            ",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (sum > r) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n                break;\n            }\n        }\n",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (sum >= r) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n                break;\n            }\n        }\n",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (r < sum) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n                break;\n            }\n        }\n",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (sum > r) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n            }\n        }\n    }\n    ",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (sum >= r) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n                pointSet.remove(i);\n                ",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (sum >= r) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n            }\n        }\n    }\n    ",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += dx2[i];\n            if (sum > r) {\n                resultSet.add(new Cluster<T>(pointSet.remove(i)));\n                break;\n            }\n        }\n",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = random.nextDouble() * sum;\n        sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n//",
        "private static <T extends Clusterable<T>> List<Cluster<T>>\n    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n    final List<T> pointSet = new ArrayList<T>(points);\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n    final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n    resultSet.add(new Cluster<T>(firstPoint));\n    final double[] dx2 = new double[pointSet.size()];\n    while (resultSet.size() < k) {\n// buggy line:        int sum = 0;\n// buggy line:        for (int i = 0; i < pointSet.size(); i++) {\n// buggy line:            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n// buggy line:        }\n        int sum = 0;\n        for (int i = 0; i < pointSet.size(); i++) {\n            sum += Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n            dx2[i] = Math.pow(pointSet.get(i).x - firstPoint.x, 2) + Math.pow(pointSet.get(i).y - firstPoint.y, 2);\n        }\n        final double r = sum / pointSet.size();\n        for (int i = 0; i < pointSet.size(); i++) {\n            if (random.nextDouble() < r) {\n                resultSet.add(new Cluster<T>(pointSet.get(i)));\n            }\n        }\n    }\n    return resultSet;\n  }\n}\n<"
      ],
      "function range": "161,5-198,5"
    },
    "Math_58_/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java_121-122": {
      "loc": "121-122",
      "input": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);",
      "output": [
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111], guess[112",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111]);\n  }",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111]);\n    return",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111]));\n  ",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111]);\n    }",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111], guess[113",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111]);\n\n  }",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109]);\n    return guess;\n  }\n\n  /**",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109], guess[110], guess[111]);\n    //",
        "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n// buggy line:    return fit(new Gaussian.Parametric(), guess);\n    return fit(new Gaussian.Parametric(guess[0], guess[1], guess[2], guess[3], guess[4], guess[5], guess[6], guess[7], guess[8], guess[9], guess[10], guess[11], guess[12], guess[13], guess[14], guess[15], guess[16], guess[17], guess[18], guess[19], guess[20], guess[21], guess[22], guess[23], guess[24], guess[25], guess[26], guess[27], guess[28], guess[29], guess[30], guess[31], guess[32], guess[33], guess[34], guess[35], guess[36], guess[37], guess[38], guess[39], guess[40], guess[41], guess[42], guess[43], guess[44], guess[45], guess[46], guess[47], guess[48], guess[49], guess[50], guess[51], guess[52], guess[53], guess[54], guess[55], guess[56], guess[57], guess[58], guess[59], guess[60], guess[61], guess[62], guess[63], guess[64], guess[65], guess[66], guess[67], guess[68], guess[69], guess[70], guess[71], guess[72], guess[73], guess[74], guess[75], guess[76], guess[77], guess[78], guess[79], guess[80], guess[81], guess[82], guess[83], guess[84], guess[85], guess[86], guess[87], guess[88], guess[89], guess[90], guess[91], guess[92], guess[93], guess[94], guess[95], guess[96], guess[97], guess[98], guess[99], guess[100], guess[101], guess[102], guess[103], guess[104], guess[105], guess[106], guess[107], guess[108], guess[109]);\n    return guess;\n  }\n\n  public"
      ],
      "function range": "119,5-122,5"
    },
    "Math_59_/src/main/java/org/apache/commons/math/util/FastMath.java_3482-3483": {
      "loc": "3482-3483",
      "input": "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
      "output": [
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static double max(final double a, final double b) {\n        return (a <= b)? b : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static double min(final double a, final double b) {\n        return (a <= b)? a : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte a, final byte b) {\n        return (a <= b)? b : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static byte min(final byte a, final byte b) {\n        return (a <= b)? a : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n}\n<|java|>",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte a, final byte b) {\n        return (a <= b)? b : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static byte min(final byte a, final byte b) {\n        return (a <= b)? a : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static double max(final double",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static double max(final double a, final double b) {\n        return (a <= b)? b : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static double min(final double a, final double b) {\n        return (a <= b)? a : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n}\n<|java|>",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static double max(final double a, final double b) {\n        return (a <= b)? b : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static double min(final double a, final double b) {\n        return (a <= b)? a : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static char max(final char",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte a, final byte b) {\n        return (a <= b)? b : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static byte min(final byte a, final byte b) {\n        return (a <= b)? a : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n}\n<|java|",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte a, final byte b) {\n        return (a <= b)? b : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static byte min(final byte a, final byte b) {\n        return (a <= b)? a : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static char max(final char",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static double max(final double a, final double b) {\n        return (a <= b)? b : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static double min(final double a, final double b) {\n        return (a <= b)? a : (Double.isNaN(a + b)? Double.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n}\n<|java|",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte a, final byte b) {\n        return (a <= b)? b : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static byte min(final byte a, final byte b) {\n        return (a <= b)? a : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static boolean max(final boolean",
        "public static float max(final float a, final float b) {\n// buggy line:    return (a <= b)? b : (Float.isNaN(a + b)? Float.NaN : b);\n        return Math.max(a, b);\n    }\n\n    public static float min(final float a, final float b) {\n        return (a <= b)? a : (Float.isNaN(a + b)? Float.NaN : b);\n    }\n\n    public static int max(final int a, final int b) {\n        return (a <= b)? b : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static int min(final int a, final int b) {\n        return (a <= b)? a : (Integer.isNaN(a + b)? Integer.NaN : b);\n    }\n\n    public static long max(final long a, final long b) {\n        return (a <= b)? b : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static long min(final long a, final long b) {\n        return (a <= b)? a : (Long.isNaN(a + b)? Long.NaN : b);\n    }\n\n    public static short max(final short a, final short b) {\n        return (a <= b)? b : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static short min(final short a, final short b) {\n        return (a <= b)? a : (Short.isNaN(a + b)? Short.NaN : b);\n    }\n\n    public static byte max(final byte a, final byte b) {\n        return (a <= b)? b : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static byte min(final byte a, final byte b) {\n        return (a <= b)? a : (Byte.isNaN(a + b)? Byte.NaN : b);\n    }\n\n    public static boolean isNaN("
      ],
      "function range": "3481,5-3483,5"
    },
    "Math_63_/src/main/java/org/apache/commons/math/util/MathUtils.java_417-418": {
      "loc": "417-418",
      "input": "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
      "output": [
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n\n    public static boolean equals(double[] x, double[] y) {\n        if (x.length!= y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; i++) {\n            if (!equals(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    ",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n\n    public static boolean equals(double[] x, double[] y) {\n        if (x.length!= y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; i++) {\n            if (Double.isNaN(x[i]) && Double.isNaN(y[i])) {\n                continue;\n            }\n            if (",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n\n    public static boolean equals(double[] x, double[] y) {\n        if (x.length!= y.length) {\n            return false;\n        }\n        for (int i = 0; i < x.length; i++) {\n            if (!equals(x[i], y[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "public static boolean equals(double x, double y) {\n// buggy line:    return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(float x, float y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(long x, long y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(int x, int y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(short x, short y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(byte x, byte y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(boolean x, boolean y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(char x, char y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n    }\n\n    public static boolean equals(Object x, Object y) {\n        return (Double.isNaN(x) && Double.isNaN(y)) || x.equals(y);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License. You may"
      ],
      "function range": "416,5-418,5"
    },
    "Math_69_/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java_171-172": {
      "loc": "171-172",
      "input": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
      "output": [
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescript",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDesc",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged.serde",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.dataflow.data.nontagged",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.AqlSerializer",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullIn",
        "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    for (int i = 0; i < nVars; i++) {\n        for (int j = 0; j < nVars; j++) {\n            if (i == j) {\n                out[i][j] = 0d;\n            } else {\n                double r = correlationMatrix.getEntry(i, j);\n                double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n// buggy line:                out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n                out[i][j] = 2 * tDistribution.cumulativeProbability(t);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(out);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\n"
      ],
      "function range": "160,5-176,5"
    },
    "Math_70_/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java_72-73": {
      "loc": "72-73",
      "input": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);",
      "output": [
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.h",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvalu",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.h",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n\npublic",
        "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n// buggy line:    return solve(min, max);\n        return solve(f, min, max, initial);\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport"
      ],
      "function range": "70,5-73,5"
    },
    "Math_73_/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java_136-137": {
      "loc": "136-137",
      "input": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }",
      "output": [
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.fl",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hado",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.h",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache",
        "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(yMin, 0);\n        return result;\n    }\n    if (yInitial * yMin < 0) {\n        return solve(f, min, yMin, initial, yInitial, min, yMin);\n    }\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(yMax, 0);\n        return result;\n    }\n    if (yInitial * yMax < 0) {\n        return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n    }\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.beam."
      ],
      "function range": "98,5-140,5"
    },
    "Math_75_/src/main/java/org/apache/commons/math/stat/Frequency.java_303-304": {
      "loc": "303-304",
      "input": "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);",
      "output": [
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigInteger v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(String v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(short v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Dep",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(BigDecimal v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public void setCumPct(Object v, double pct) {\n        super.setCumPct(v, pct);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public void setCumPct(Comparable<?> v, double pct) {\n        super.setCumPct(v, pct);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public void setCumPct(Number v, double pct) {\n        super.setCumPct(v, pct);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public void setCumPct(Object v, double pct) {\n        super.setCumPct(v, pct);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public void setCumPct(Comparable<?> v, double pct) {\n        ",
        "@Deprecated\npublic double getPct(Object v) {\n// buggy line:    return getCumPct((Comparable<?>) v);\n        return getCumPct((Number) v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Object v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Comparable<?> v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(Number v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(double v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(int v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(long v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(float v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Deprecated\n    @Override\n    public double getCumPct(short v) {\n        return super.getCumPct(v);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override"
      ],
      "function range": "301,5-304,5"
    },
    "Math_80_/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java_1135-1136": {
      "loc": "1135-1136",
      "input": "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;",
      "output": [
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        return true;\n    }\n    return false;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        ",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        return true;\n    }\n    return false;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        return true;\n    }\n    return false;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        return true;\n    }\n    return false;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND,",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        return true;\n    }\n    return false;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[pingPong];\n        work[pingPong] = work[step];\n        work",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n    ",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[pingPong];\n        return true;\n    }\n    return false;\n  }",
        "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n// buggy line:        int j = 4 * n - 1;\n        int j = 4 * (n - 1);\n        work[pingPong] = work[j];\n        work[j] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n        work[pingPong] = work[step];\n        work[step] = work[j];\n        work[j] = work[4 * (n - 1) + step];\n        work[4 * (n - 1) + step] = work[4 * (n - 1) + pingPong];\n        work[4 * (n - 1) + pingPong] = work[pingPong];\n      "
      ],
      "function range": "1132,5-1147,5"
    },
    "Math_82_/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java_82-83": {
      "loc": "82-83",
      "input": "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
      "output": [
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptor",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescript",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.Abstract",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescript",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.AqlSerializerDeserializerProvider;\nimport org.apache.asterix.om.base.",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions",
        "private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n    double minRatio = Double.MAX_VALUE;\n    Integer minRatioPos = null;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n// buggy line:        if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n            final double ratio = rhs / entry;\n            if (MathUtils.compareTo(ratio, minRatio) < 0) {\n                minRatio = ratio;\n                minRatioPos = i;\n            }\n        }\n    }\n    return minRatioPos;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;\nimport org.apache.asterix.om.base.ABoo"
      ],
      "function range": "76,5-91,5"
    },
    "Math_85_/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java_198-199": {
      "loc": "198-199",
      "input": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {",
      "output": [
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (numIterations == maximumIterations) {\n        throw new ConvergenceException(\n            \"maximum iterations ({0}) exceeded\", maximumIterations);\n    }\n    if (fa * fb > 0.0) {\n        throw new ConvergenceException(\n            \"cannot bracket root, f(a) and f(b) have opposite signs\");\n    }\n    return new double[] {a, b};\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (numIterations == maximumIterations) {\n        throw new ConvergenceException(\n            \"maximum iterations ({0}) exceeded\", maximumIterations);\n    }\n    if (fa * fb > 0.0) {\n        throw new ConvergenceException(\n            \"cannot bracket root, f(a) and f(b) have opposite signs\");\n    }\n    return new double[] {a, b};\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n",
        "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n    do {\n        a = Math.max(a - 1.0, lowerBound);\n        b = Math.min(b + 1.0, upperBound);\n        fa = function.value(a);\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n            ((a > lowerBound) || (b < upperBound)));\n// buggy line:    if (fa * fb >= 0.0 ) {\n    if (fa * fb >= 0.0 || (a > lowerBound) || (b < upperBound)) {\n        return new double[] { a, b };\n    } else {\n        throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, lower bound={2}, upper bound={3}\",\n            numIterations, maximumIterations, lowerBound, upperBound);\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file"
      ],
      "function range": "165,5-208,5"
    },
    "Math_91_/src/java/org/apache/commons/math/fraction/Fraction.java_259-261": {
      "loc": "259-261",
      "input": "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();",
      "output": [
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    protected String getFtpUrl() {\n        return \"ftp://admin@localhost:\" + getPort() + \"/",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    private String getFtpUrl() {\n        return \"ftp://admin@localhost:\" + getPort() + \"/",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\n/**\n * Test the ftps component over SSL (implicit) with client authentication\n */\npublic class FileToFtpsImplicitSSLWithClientAuthTest extends FtpsServerImplicitSSLWithClientAuthTestSupport {\n\n    protected String getFtpUrl() {\n        return \"ftps://admin@localhost:\" + getPort() + \"/tmp2/camel?password=admin&consumer.initialDelay=2000&disableSecureDataChannelDefaults=true\"\n               + \"&securityProtocol=SSLv3&isImplicit=true&ftp",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    protected String getF",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    private String getF",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    protected String getFtp",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    protected String getFtpUrl() {\n        return \"ftp://admin@localhost:{{ftp.server.",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    private String getFtp",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    private String getFtpUrl() {\n        return \"ftp://admin@localhost:{{ftp.server.",
        "public int compareTo(Fraction object) {\n// buggy line:    double nOd = doubleValue();\n// buggy line:    double dOn = object.doubleValue();\n        double nOd = doubleValue();\n        double dOn = object.doubleValue();\n        if (nOd < dOn) {\n            return -1;\n        } else if (nOd > dOn) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.camel.Endpoint;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Producer;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Unit test to test noop option.\n */\npublic class FromFtpNoopTest extends FtpServerTestSupport {\n\n    protected String getFtpUrl() {\n        return \"ftp://admin@localhost:\" + getPort() + \""
      ],
      "function range": "258,5-262,5"
    },
    "Math_94_/src/java/org/apache/commons/math/util/MathUtils.java_412-413": {
      "loc": "412-413",
      "input": "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {",
      "output": [
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.h",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEval",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport",
        "public static int gcd(int u, int v) {\n// buggy line:    if (u * v == 0) {\n        if (u == 0) {\n            return v;\n        }\n        if (v == 0) {\n            return u;\n        }\n        if (u < 0) {\n            u = -u;\n        }\n        if (v < 0) {\n            v = -v;\n        }\n        if (u > v) {\n            int t = u;\n            u = v;\n            v = t;\n        }\n        while (v!= 0) {\n            int q = u % v;\n            u = v;\n            v = q;\n        }\n        return u;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.asterix.runtime.evaluators"
      ],
      "function range": "411,5-460,5"
    },
    "Math_96_/src/java/org/apache/commons/math/complex/Complex.java_258-259": {
      "loc": "258-259",
      "input": "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ",
      "output": [
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions.records;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\nimport org.apache.ignite.IgniteCache;\nimport org.",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.hive.ql.exec.vector.expressions;\n\nimport org.apache.hadoop.hive.ql.exec.vector.Bytes",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.IOException;\n\nimport org.apache.asterix.om.fun",
        "public boolean equals(Object other) {\n    boolean ret;\n    if (this == other) { \n        ret = true;\n    } else if (other == null) {\n        ret = false;\n    } else  {\n        try {\n            Complex rhs = (Complex)other;\n            if (rhs.isNaN()) {\n                ret = this.isNaN();\n            } else {\n// buggy line:                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n            }\n        } catch (ClassCastException e) {\n            ret = false;\n        }\n    }\n    return ret;\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\n\nimport org.apache.asterix.formats."
      ],
      "function range": "245,5-267,5"
    },
    "Math_101_/src/java/org/apache/commons/math/complex/ComplexFormat.java_377-378": {
      "loc": "377-378",
      "input": "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (",
      "output": [
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n *",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n    }\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n    }\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional information regarding\n * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n * \"License\"); you",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n}\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n *",
        "public Complex parse(String source, ParsePosition pos) {\n    int initialIndex = pos.getIndex();\n    parseAndIgnoreWhitespace(source, pos);\n    Number re = parseNumber(source, getRealFormat(), pos);\n    if (re == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    int sign = 0;\n    switch (c) {\n    case 0 :\n        return new Complex(re.doubleValue(), 0.0);\n    case '-' :\n        sign = -1;\n        break;\n    case '+' :\n        sign = 1;\n        break;\n    default :\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    parseAndIgnoreWhitespace(source, pos);\n    Number im = parseNumber(source, getRealFormat(), pos);\n    if (im == null) {\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    int n = getImaginaryCharacter().length();\n    startIndex = pos.getIndex();\n    int endIndex = startIndex + n;\n// buggy line:    if (endIndex > source.length()) {\n    if (endIndex > source.length()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    c = parseNextCharacter(source, pos);\n    if (c!= getImaginaryCharacter()) {\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n    pos.setIndex(endIndex);\n    return new Complex(re.doubleValue(), sign * im.doubleValue());\n}\n}\n<|java|>/**\n * Copyright (c) 2010-2019 Contributors to the openHAB project\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0"
      ],
      "function range": "320,5-389,5"
    },
    "Math_105_/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java_264-265": {
      "loc": "264-265",
      "input": "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;",
      "output": [
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\n",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvalu",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.Hyr",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\n",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport org.apache.hyracks.data.",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class GlobalS",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor extends AbstractAggregateFunctionDynamicDescriptor {",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class Sql",
        "public double getSumSquaredErrors() {\n// buggy line:    return sumYY - sumXY * sumXY / sumXX;\n        return sumYY - sumXY * sumXY / sumXX;\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class Numeric"
      ],
      "function range": "263,5-265,5"
    },
    "Mockito_1_/src/org/mockito/internal/invocation/InvocationMatcher.java_123-124": {
      "loc": "123-124",
      "input": "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();",
      "output": [
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        for (int l = 0; l < varargArray[i][j][k].length; l++) {\n                            captureArgument(",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i], i);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j], i, j);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k], i, j, k);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        for (int l = 0; l < varargArray[i][j][k].",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i], i);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j], i * varargArray[i].length + j);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k], i * varargArray[i].length * varargArray[i][j].length + j * varargArray[i][j].length + k);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0;",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        for (int l = 0; l < varargArray[i][j][k].length;\n                             l++) {\n                            captureArg",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        }\n",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        for (int m = 0; m < varargArray[i][j][k].length; m++) {\n                            captureArgument(",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        for (int l = 0; l < varargArray[i][j][k].length;\n                            l++) {\n                            captureArg",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i], i);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j], i, j);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k], i, j, k);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k], i",
        "public void captureArgumentsFrom(Invocation invocation) {\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n// buggy line:        throw new UnsupportedOperationException();\n        Object vararg = invocation.getRawArguments()[indexOfVararg];\n        if (vararg instanceof Object[]) {\n            Object[] varargArray = (Object[]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                captureArgument(invocation, varargArray[i]);\n            }\n        } else if (vararg instanceof Object[][]) {\n            Object[][] varargArray = (Object[][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    captureArgument(invocation, varargArray[i][j]);\n                }\n            }\n        } else if (vararg instanceof Object[][][]) {\n            Object[][][] varargArray = (Object[][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        captureArgument(invocation, varargArray[i][j][k]);\n                    }\n                }\n            }\n        } else if (vararg instanceof Object[][][][]) {\n            Object[][][][] varargArray = (Object[][][][]) vararg;\n            for (int i = 0; i < varargArray.length; i++) {\n                for (int j = 0; j < varargArray[i].length; j++) {\n                    for (int k = 0; k < varargArray[i][j].length; k++) {\n                        for (int l = 0; l < varargArray[i][j][k].length; l++) {\n                            if (varargArray"
      ],
      "function range": "120,5-150,5"
    },
    "Mockito_5_/src/org/mockito/internal/verification/VerificationOverTimeImpl.java_91-92": {
      "loc": "91-92",
      "input": "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
      "output": [
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error =",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockitoException e) {\n//            error",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n\nprivate AssertionError handle",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NullInsteadOfMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NullInsteadOfMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NullInsteadOfMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NullInsteadOfMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NullInsteadOfM",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n    timer.stop();",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n        } catch (AssertionError e) {\n            error = handleVerifyException(e);\n        }\n    }\n",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n        } catch (AssertionError e) {\n            error = handleVerifyException(e);\n        }\n        if (",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n\nprivate Ass",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n\n    private Ass",
        "public void verify(VerificationData data) {\n    AssertionError error = null;\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        }\n// buggy line:        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n//        } catch (org.mockito.exceptions.misusing.NotAMockException e) {\n//            error = handleVerifyException(e);\n        }\n    }\n    if (error!= null) {\n        throw error;\n    }\n}\n\nprivate Assert"
      ],
      "function range": "75,5-99,5"
    },
    "Mockito_7_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_379-380": {
      "loc": "379-380",
      "input": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));",
      "output": [
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof GenericArrayType) {\n        registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVari",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n\n}\n<|java|>",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof GenericArrayType) {\n        registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable<?>) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerType",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n}\n<|java|>/*",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n}\n<|java|>package",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n}\n<|java|>/**",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n\n  private Type getActualTypeArgument",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n\n  private void registerTypeVariablesOn(",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n\n  @Override\n  public String toString",
        "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n// buggy line:    registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n  }\n\n  private void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n      registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    } else if (type instanceof GenericArrayType) {\n      registerTypeVariablesOn(((GenericArrayType) type).getGenericComponentType());\n    } else if (type instanceof TypeVariable) {\n      registerTypeVariablesOn(((TypeVariable) type).getBounds());\n    } else if (type instanceof WildcardType) {\n      registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n      registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n    }\n  }\n\n  private void registerTypeVariablesOn(Type[] types) {\n    for (Type type : types) {\n      if (type instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      } else if (type instanceof TypeVariable) {\n        registerTypeVariablesOn(((TypeVariable) type).getBounds());\n      } else if (type instanceof WildcardType) {\n        registerTypeVariablesOn(((WildcardType) type).getUpperBounds());\n        registerTypeVariablesOn(((WildcardType) type).getLowerBounds());\n      }\n    }\n  }\n}\n<|java|>//"
      ],
      "function range": "375,9-380,9"
    },
    "Mockito_8_/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java_79-80": {
      "loc": "79-80",
      "input": "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {",
      "output": [
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n//",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n        ",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n    ",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else {\n// buggy line:        }\n    }\n  }\n\n",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else {\n// buggy line:        }\n        }\n    }\n",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualType",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else {\n// buggy line:        }\n        } else {\n            ",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n            ",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else {\n// buggy line:        }\n    }\n  }\n",
        "protected void registerTypeVariablesOn(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n// buggy line:        } else {\n// buggy line:        } else if (actualTypeArgument instanceof TypeVariable) {\n// buggy line:        } else if (actualTypeArgument instanceof ParameterizedType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof GenericArrayType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else if (actualTypeArgument instanceof WildcardType) {\n// buggy line:        } else {\n// buggy line:        }\n    }\n}\n\n"
      ],
      "function range": "66,5-84,5"
    },
    "Mockito_22_/src/org/mockito/internal/matchers/Equality.java_13-14": {
      "loc": "13-14",
      "input": "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {",
      "output": [
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n//",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n                ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n\n",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n        ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n            ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n    ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n\n        ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n                    ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n                        ",
        "public static boolean areEqual(Object o1, Object o2) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\n// buggy line:    if (o1 == null || o2 == null) {\nreturn"
      ],
      "function range": "12,5-20,5"
    },
    "Mockito_24_/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java_76-77": {
      "loc": "76-77",
      "input": "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;",
      "output": [
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    ",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isToStringMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        M",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCode(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    }",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        Mock",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isToStringMethod(invocation.getMethod())) {\n        ",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isToString",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n\n    ",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isToString(invocation.getMethod())) {\n        Object",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n//",
        "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n// buggy line:        return 1;\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isEqualsMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isHashCodeMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isToStringMethod(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        return"
      ],
      "function range": "63,5-81,5"
    },
    "Mockito_27_/src/org/mockito/internal/util/MockUtil.java_64-66": {
      "loc": "64-66",
      "input": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));",
      "output": [
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> mockHandler) {\n    mockHandlers.put(mock, mockHandler);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void removeMockHandler(T mock) {\n    mockHandlers.remove(mock);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> mockHandler) {\n    mockHandlers.put(mock, mockHandler);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void removeMockHandler(T mock) {\n    mockHandlers.remove(mock);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License",
        "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n// buggy line:    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n// buggy line:    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    setMockHandler(mock, newMockHandler, newFilter);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n    return (MockHandlerInterface<T>) mockHandlers.get(mock);\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private <T> void setMockHandler(T mock, MockHandlerInterface<T> handler, MethodInterceptorFilter filter) {\n    mockHandlers.put(mock, handler);\n    mockFilters.put(mock, filter);\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on"
      ],
      "function range": "62,5-67,5"
    },
    "Mockito_28_/src/org/mockito/internal/configuration/DefaultInjectionEngine.java_93-94": {
      "loc": "93-94",
      "input": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
      "output": [
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\nimport org.apache.hyracks.algebricks.runtime",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.h",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.",
        "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n// buggy line:        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEval"
      ],
      "function range": "91,5-95,5"
    },
    "Mockito_29_/src/org/mockito/internal/matchers/Same.java_29-30": {
      "loc": "29-30",
      "input": "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());",
      "output": [
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base.AbstractSc",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.asterix.",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.common.annotations.MissingNullInOutFunction;\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescript",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;",
        "public void describeTo(Description description) {\n    description.appendText(\"same(\");\n    appendQuoting(description);\n// buggy line:    description.appendText(wanted.toString());\n    description.appendText(wanted.toString());\n    description.appendText(\")\");\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass()!= o.getClass()) return false;\n\n    Same that = (Same) o;\n\n    if (wanted!= null?!wanted.equals(that.wanted) : that.wanted!= null) return false;\n\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    return wanted!= null? wanted.hashCode() : 0;\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.AsterixBuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.om.types.ATypeTag;\nimport org.apache.asterix.runtime.evaluators.base"
      ],
      "function range": "26,5-32,5"
    },
    "Mockito_34_/src/org/mockito/internal/invocation/InvocationMatcher.java_106-107": {
      "loc": "106-107",
      "input": "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {",
      "output": [
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvalu",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.captureArgumentsFrom(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEval",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.captureArgumentsFrom(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalar",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.captureArgumentsFrom(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAgg",
        "public void captureArgumentsFrom(Invocation i) {\n    int k = 0;\n    for (Matcher m : matchers) {\n// buggy line:        if (m instanceof CapturesArguments) {\n      if (m instanceof CapturesArguments) {\n        CapturesArguments ca = (CapturesArguments) m;\n        ca.capture(i, k);\n      }\n      k++;\n    }\n  }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context."
      ],
      "function range": "103,5-111,5"
    },
    "Mockito_38_/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java_48-49": {
      "loc": "48-49",
      "input": "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());",
      "output": [
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.ex",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.Hyr",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.h",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.Hyr",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\n\n",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.evaluators.functions;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.context.IHyracksTaskContext;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\nimport org.apache.hyracks.data.std.api.IPointable;\nimport",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\nimport org.apache.hyracks.api.exceptions.HyracksDataException;\n\npublic class SqlMinAggregateDescriptor",
        "private boolean toStringEquals(Matcher m, Object arg) {\n// buggy line:    return StringDescription.toString(m).equals(arg.toString());\n        return m.toString().equals(arg.toString());\n    }\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.asterix.runtime.aggregates.std;\n\nimport org.apache.asterix.om.functions.BuiltinFunctions;\nimport org.apache.asterix.om.functions.IFunctionDescriptor;\nimport org.apache.asterix.om.functions.IFunctionDescriptorFactory;\nimport org.apache.asterix.runtime.aggregates.base.AbstractAggregateFunctionDynamicDescriptor;\nimport org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\nimport org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluator;\nimport org.apache.hyracks.algebricks.runtime.base.IAggregateEvaluatorFactory;\nimport org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\nimport org.apache.hyracks.api.exceptions."
      ],
      "function range": "47,5-49,5"
    },
    "Time_4_/src/main/java/org/joda/time/Partial.java_464-465": {
      "loc": "464-465",
      "input": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);",
      "output": [
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iTypes = newTypes;\n        iValues = new",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        return newPartial;\n    } else {\n        ",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        return newPartial;\n    }\n    if (",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues, null);\n        return newPartial;\n    }\n    ",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        return newPartial;\n    }\n    DateTime",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues, null);\n        iTypes = newTypes;\n        iValues",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(newTypes, newValues);\n        newPartial.iChronology = iChronology;\n        return",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        return newPartial;\n    }\n    return this",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        return newPartial;\n    }\n    iTypes",
        "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n// buggy line:        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        return newPartial;\n    }\n    int new"
      ],
      "function range": "426,5-474,5"
    },
    "Time_15_/src/main/java/org/joda/time/field/FieldUtils.java_138-139": {
      "loc": "138-139",
      "input": "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;",
      "output": [
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n        case 36:\n            ",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 << 1;\n        case 3:\n            return val1 << 2;\n        case 4:\n            return val1 << 3;\n        case 5:\n            return val1 << 4;\n        case 6:\n            return val1 << 5;\n        case 7:\n            return val1 << 6;\n        case 8:\n            return val1 << 7;\n        case 9:\n            return val1 << 8;\n        case 10:\n            return val1 << 9;\n        case 11:\n            return val1 << 10;\n        case 12:\n            return val1 << 11;\n        case 13:\n            return val1 << 12;\n        case 14:\n            return val1 << 13;\n        case 15:\n            return val1 << 14;\n        case 16:\n            return val1 << 15;\n        case 17:\n            return val1 << 16;\n        case 18:\n            return val1 << 17;\n        case 19:\n            return val1 << 18;\n        case 20:\n            return val1 << 19;\n        case 21:\n            return val1 << 20;\n        case 22:\n            return val1 << 21;\n        case 23:\n            return val1 << 22;\n        case 24:\n            return val1 << 23;\n        case 25:\n            return val1 << 24;\n        case 26:\n            return val1 << 25;\n        case 27:\n            return val1 << 26;\n        case 28:\n            return val1 << 27;\n        case 29:\n            return val1 << 28;\n        case 30:\n            return val1 << 29;\n        case 31:\n            return val1 << 30;\n        case 32:\n            return val1 << 31;\n        case 33:\n            return val1 << 32;\n        case 34:\n            return val1 << 33;\n        case 35:\n            return val1 << 34;\n        case 36:\n            ",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return val1;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n        case 36:\n",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n            return 0;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n        ",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n        default:\n            return",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n        default:\n            throw",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return val1;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n        default:\n            ",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 << 1;\n        case 3:\n            return val1 << 2;\n        case 4:\n            return val1 << 3;\n        case 5:\n            return val1 << 4;\n        case 6:\n            return val1 << 5;\n        case 7:\n            return val1 << 6;\n        case 8:\n            return val1 << 7;\n        case 9:\n            return val1 << 8;\n        case 10:\n            return val1 << 9;\n        case 11:\n            return val1 << 10;\n        case 12:\n            return val1 << 11;\n        case 13:\n            return val1 << 12;\n        case 14:\n            return val1 << 13;\n        case 15:\n            return val1 << 14;\n        case 16:\n            return val1 << 15;\n        case 17:\n            return val1 << 16;\n        case 18:\n            return val1 << 17;\n        case 19:\n            return val1 << 18;\n        case 20:\n            return val1 << 19;\n        case 21:\n            return val1 << 20;\n        case 22:\n            return val1 << 21;\n        case 23:\n            return val1 << 22;\n        case 24:\n            return val1 << 23;\n        case 25:\n            return val1 << 24;\n        case 26:\n            return val1 << 25;\n        case 27:\n            return val1 << 26;\n        case 28:\n            return val1 << 27;\n        case 29:\n            return val1 << 28;\n        case 30:\n            return val1 << 29;\n        case 31:\n            return val1 << 30;\n        case 32:\n            return val1 << 31;\n        case 33:\n            return val1 << 32;\n        case 34:\n            return val1 << 33;\n        case 35:\n            return val1 << 34;\n        default:\n            return",
        "public static long safeMultiply(long val1, int val2) {\n    switch (val2) {\n        case -1:\n// buggy line:            return -val1;\n        case 0:\n            return 0;\n        case 1:\n            return val1;\n        case 2:\n            return val1 * 2;\n        case 3:\n            return val1 * 3;\n        case 4:\n            return val1 * 4;\n        case 5:\n            return val1 * 5;\n        case 6:\n            return val1 * 6;\n        case 7:\n            return val1 * 7;\n        case 8:\n            return val1 * 8;\n        case 9:\n            return val1 * 9;\n        case 10:\n            return val1 * 10;\n        case 11:\n            return val1 * 11;\n        case 12:\n            return val1 * 12;\n        case 13:\n            return val1 * 13;\n        case 14:\n            return val1 * 14;\n        case 15:\n            return val1 * 15;\n        case 16:\n            return val1 * 16;\n        case 17:\n            return val1 * 17;\n        case 18:\n            return val1 * 18;\n        case 19:\n            return val1 * 19;\n        case 20:\n            return val1 * 20;\n        case 21:\n            return val1 * 21;\n        case 22:\n            return val1 * 22;\n        case 23:\n            return val1 * 23;\n        case 24:\n            return val1 * 24;\n        case 25:\n            return val1 * 25;\n        case 26:\n            return val1 * 26;\n        case 27:\n            return val1 * 27;\n        case 28:\n            return val1 * 28;\n        case 29:\n            return val1 * 29;\n        case 30:\n            return val1 * 30;\n        case 31:\n            return val1 * 31;\n        case 32:\n            return val1 * 32;\n        case 33:\n            return val1 * 33;\n        case 34:\n            return val1 * 34;\n        case 35:\n            return val1 * 35;\n    }\n    return val"
      ],
      "function range": "135,5-149,5"
    },
    "Time_16_/src/main/java/org/joda/time/format/DateTimeFormatter.java_709-710": {
      "loc": "709-710",
      "input": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
      "output": [
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport java.io.File;\n\nimport org.apache.",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.camel.component.file.remote;\n\nimport org.apache.camel.builder.RouteBuilder;\n",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed.dht;\n\nimport org.apache.ign",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache.distributed.dht;\n\nimport org.apache.ign",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\n",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.spi.security.authentication.external.impl.jmx;\n\nimport java",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.Ignite;\n",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.cache.CacheAt",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.spi.security.authentication.external.impl.jmx;\n\nimport java",
        "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n// buggy line:        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        return newPos;\n    }\n    instantMillis = bucket.getInstantMillis();\n    chrono = bucket.getChronology();\n    instant.setMillis(instantMillis);\n    instant.setChronology(chrono);\n    return newPos;\n}\n\n\n}\n<|java|>/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.ignite.internal.processors.cache;\n\nimport org.apache.ignite.cache.CacheAt"
      ],
      "function range": "697,5-724,5"
    },
    "Time_19_/src/main/java/org/joda/time/DateTimeZone.java_900-901": {
      "loc": "900-901",
      "input": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal != offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {",
      "output": [
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    // Basic methods\n    //--------------------------------------------------------------------\n\n    /**\n",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    // Basic methods\n    //-----------------------------------------------------------------------\n    /**\n",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    /**\n     * Gets the millisecond instant of the next",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant millis from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant millis from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    // Basic methods\n    //--------------------------------------------------------------------\n\n    /**\n     * Get the",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant millis from 1970-01-01T00:00:00Z\n     * @return millis from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant millis from 1970-01-01T00:00:00Z\n     * @return millis from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    // Basic methods\n    //--------------------------------------------------------------------\n\n    /**\n     *",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in,\n     * then no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    // Basic methods\n    //--------------------------------------------------------------------\n\n    /**\n",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    /**\n     * Gets the milliseconds for the start of the",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    /**\n     * Gets the millisecond offset to add to",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    /**\n     * Returns the millisecond instant of the next",
        "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    if (offsetLocal!= offsetAdjusted) {\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal!= nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n// buggy line:    } else if (offsetLocal > 0) {\n        if (offsetLocal > 0) {\n            long prevLocal = prevTransition(instantAdjusted);\n            long prevAdjusted = prevTransition(instantLocal - offsetAdjusted);\n            if (prevLocal!= prevAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns true if this time zone has no transitions.\n     *\n     * @return true if no transitions\n     */\n    public abstract boolean isFixed();\n\n    /**\n     * Advances the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur after the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long nextTransition(long instant);\n\n    /**\n     * Retreats the given instant to where the time zone offset or name changes.\n     * If the instant returned is exactly the same as passed in, then\n     * no changes occur before the given instant.\n     *\n     * @param instant  milliseconds from 1970-01-01T00:00:00Z\n     * @return milliseconds from 1970-01-01T00:00:00Z\n     */\n    public abstract long previousTransition(long instant);\n\n    /**\n     * Gets the milliseconds for the start of a"
      ],
      "function range": "880,5-911,5"
    }
  }
}