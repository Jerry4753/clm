{
  "config": "CODET5_BASE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            <extra_id_0>\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "probes",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n        <extra_id_0>\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//current_string",
          "correctness": "wrong"
        },
        {
          "patch": "if(c== ')'){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(c == ')'){",
          "correctness": "uncompilable"
        },
        {
          "patch": "//current_depth",
          "correctness": "wrong"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//braces",
          "correctness": "wrong"
        },
        {
          "patch": "//}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\n    <extra_id_0>\n}",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Destroy",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:******/",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Disable",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Implement",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return number; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n        <extra_id_0>\n}",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "oker",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        <extra_id_0>\n    }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "probabilities",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        },
        {
          "patch": "noticeer",
          "correctness": "uncompilable"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    <extra_id_0>\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "\u8fd4\u56de",
          "correctness": "uncompilable"
        },
        {
          "patch": "\u8c03\u7528",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            <extra_id_0>\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "output": [
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else{",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-13,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// break",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "// //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// }",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n    <extra_id_0>\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably:",
          "correctness": "uncompilable"
        },
        {
          "patch": "grow",
          "correctness": "uncompilable"
        },
        {
          "patch": "while",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        <extra_id_0>\n        result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "eslint:disable",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    <extra_id_0>\n    return result;\n}",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "endregion",
          "correctness": "uncompilable"
        },
        {
          "patch": "eslint",
          "correctness": "uncompilable"
        },
        {
          "patch": "okay",
          "correctness": "uncompilable"
        },
        {
          "patch": "ender",
          "correctness": "uncompilable"
        },
        {
          "patch": "oker",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }\n    <extra_id_0>\n    return result;\n}",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "eg:",
          "correctness": "uncompilable"
        },
        {
          "patch": "eg.",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n        <extra_id_0>\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "output": [
        {
          "patch": "return string;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "returnstring;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "};",
          "correctness": "uncompilable"
        },
        {
          "patch": "string;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        <extra_id_0>\n    }\n    return a;\n}",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-15,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    <extra_id_0>\n}",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\" ;",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            <extra_id_0>\n    }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    <extra_id_0>\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "print(note);",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.print(\"",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    <extra_id_0>\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        },
        {
          "patch": "indicate",
          "correctness": "uncompilable"
        },
        {
          "patch": "while",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    <extra_id_0>\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "output": [
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.put(\"three\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.put(\"four\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.put(\"three\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.put(\"four\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.put(\"five\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\", 1);value_map.put(\"one\", 2);value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.put(\"three\",",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map);",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.get(\"three\"));value_",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        <extra_id_0>\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "output": [
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j])){",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j])){",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(numbers[i]-numbers[j]);new_distance;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(numbers[i]-numbers[j]);new_distance);",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(numbers[i]-numbers[j]));new_distance;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j]);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggynew_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));new_distance=Math.abs(Math.abs(numbers[i]-numbers[j]));",
          "correctness": "uncompilable"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n        <extra_id_0>\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "output": [
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i+=1)0;i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i+=1) {0;i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i++)result[i] = (numbers[",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i+=1)0;i<numbers",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i++)result[i] =0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i+=1)0;i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i+=1) {0;i<",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i++)result[i] =;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i++)result[i] ==",
          "correctness": "uncompilable"
        },
        {
          "patch": "//==0;i<numbers.length;i+=1) {0;i<numbers.length;i+=1) {max=numbers[i];0;i<numbers.length;i+=1)0;i++) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n    <extra_id_0>\n}",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n    <extra_id_0>\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "e",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        },
        {
          "patch": "--",
          "correctness": "uncompilable"
        },
        {
          "patch": "g",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    <extra_id_0>\n}",
      "function range": "7,5-21,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "English",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        <extra_id_0>\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//count",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//->",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            <extra_id_0>\n        }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "oker//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n    <extra_id_0>\n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(strings)",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n        <extra_id_0>\n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "buggy",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// }",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// //",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    <extra_id_0>\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "--",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        <extra_id_0>\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//end;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//begin;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//begin=0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//beginend;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//begin;\nend;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//begin =end;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=end;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//begin;\nend;",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            <extra_id_0>\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//result.add(thirds.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "//thirds.add(l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "//result.add(thirds.get(i));}",
          "correctness": "wrong"
        },
        {
          "patch": "}else{\n// buggy line:",
          "correctness": "wrong"
        },
        {
          "patch": "//thirds.add(l.get(i));}",
          "correctness": "wrong"
        },
        {
          "patch": "//thirds.add(thirds.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "//result.add(l.get(i));",
          "correctness": "wrong"
        },
        {
          "patch": "}else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        <extra_id_0>\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// break",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// //",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n    <extra_id_0>\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "e;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "eg:",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\")\n            <extra_id_0>\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "output": [
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{\n//",
          "correctness": "wrong"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "{ //",
          "correctness": "wrong"
        },
        {
          "patch": "{;",
          "correctness": "wrong"
        },
        {
          "patch": "{\ny",
          "correctness": "uncompilable"
        },
        {
          "patch": "{return",
          "correctness": "wrong"
        },
        {
          "patch": "{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    <extra_id_0>\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "output": [
        {
          "patch": "// buggy line:   }}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:   =}",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress// buggy line:   }}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:EFaps}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:   ;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:   //}",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress// buggy line:EFaps}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:   }}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:   =}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:   //}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    <extra_id_0>\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "output": [
        {
          "patch": "//s.substring(i,i+3);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//+=s.substring(i);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//+= s.substring(i);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//s.substring(i,i+3);remain);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//s.substring(i,i+3);s.length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "//s.substring(i,i+3);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//s.substring(i,i+3);s.length()",
          "correctness": "uncompilable"
        },
        {
          "patch": "//s.substring(i,i+3);s.length();",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1)))\n        <extra_id_0>\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "output": [
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "timeout"
        },
        {
          "patch": "return n;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return len;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n        <extra_id_0>\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "y",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genotype",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n// buggy line:    return n;\n    <extra_id_0>\n}",
      "function range": "14,5-16,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return n; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// }",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end of",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// //",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        <extra_id_0>\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf",
          "correctness": "uncompilable"
        },
        {
          "patch": "y",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "--",
          "correctness": "uncompilable"
        },
        {
          "patch": "end",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\n    <extra_id_0>\n}",
      "function range": "8,5-10,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end of",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    <extra_id_0>\n    return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "endregion",
          "correctness": "uncompilable"
        },
        {
          "patch": "energies",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        <extra_id_0>\n    }\n}",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": ";",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        <extra_id_0>\n}",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        <extra_id_0>\n}",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        <extra_id_0>\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "baseline:",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        <extra_id_0>\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "{//",
          "correctness": "uncompilable"
        },
        {
          "patch": ";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        <extra_id_0>\n}",
      "function range": "10,5-16,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n// buggy line:    return x | y;\n    <extra_id_0>\n}",
      "function range": "10,5-12,5",
      "output": [
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n    <extra_id_0>\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis //",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n    <extra_id_0>\n}",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Destroy",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Beta",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Disable",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Answer",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0;",
          "correctness": "uncompilable"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        <extra_id_0>\n}",
      "function range": "16,5-27,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    <extra_id_0>\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "endregion",
          "correctness": "uncompilable"
        },
        {
          "patch": "labeler//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egroup",
          "correctness": "uncompilable"
        },
        {
          "patch": "normalise",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "wrong"
        },
        {
          "patch": "//}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n    <extra_id_0>\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "output": [
        {
          "patch": "//= 0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//<Integer>}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;};}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;//;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;//}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n        <extra_id_0>\n        }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n    <extra_id_0>\n}",
      "function range": "16,5-18,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return n;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return n ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end of",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    <extra_id_0>\n    return result;\n}",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "eject",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "end",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    <extra_id_0>\n}",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "defdef",
          "correctness": "uncompilable"
        },
        {
          "patch": "def",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n    <extra_id_0>\n        result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{str_chars[str_chars.length-1]}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{str_chars[str_chars.length - 1]}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{str_chars[str_chars.length-1]];}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "{str_chars[str_chars.length-1]0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{str_chars.length - 1;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "{return}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{=}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        <extra_id_0>\n    }\n}",
      "function range": "12,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "super()",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c == ' ')\n// buggy line:            break;\n        <extra_id_0>\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "plausible"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "y",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n    <extra_id_0>\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "y",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "Parent",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "Eg",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    <extra_id_0>\n    return result;\n}",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "wrong"
        },
        {
          "patch": "//}}",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//;}",
          "correctness": "wrong"
        },
        {
          "patch": "//=}",
          "correctness": "wrong"
        },
        {
          "patch": "//return}",
          "correctness": "wrong"
        },
        {
          "patch": "break;}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;}return",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n    <extra_id_0>\n    return result;\n}",
      "function range": "17,5-29,5",
      "output": [
        {
          "patch": "switched =",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Switched =",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "timeout"
        },
        {
          "patch": "swallow",
          "correctness": "uncompilable"
        },
        {
          "patch": "switched",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n<extra_id_0>\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=",
          "correctness": "uncompilable"
        },
        {
          "patch": "//;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//-----------------------------------------------------------",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n// buggy line:    }\n    <extra_id_0>\n    return true;\n}",
      "function range": "20,5-34,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "timeout"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "--;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i] != arr[arr.length - i])\n    <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "output": [
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ }",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    <extra_id_0>\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "preg",
          "correctness": "uncompilable"
        },
        {
          "patch": "oker",
          "correctness": "uncompilable"
        },
        {
          "patch": "okay",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "ewf",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            <extra_id_0>\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "yline:",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis//",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "Padding",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis //",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(k)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n    <extra_id_0>\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "prettier",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "preload",
          "correctness": "uncompilable"
        },
        {
          "patch": "preg",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n    <extra_id_0>\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return root;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//\n //",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g",
          "correctness": "uncompilable"
        },
        {
          "patch": "//\n//",
          "correctness": "uncompilable"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7')\n        <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": ";",
          "correctness": "wrong"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n    <extra_id_0>\n    return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "output": [
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line :",
          "correctness": "uncompilable"
        },
        {
          "patch": "Buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// Buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        <extra_id_0>\n            return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "equivalent",
          "correctness": "uncompilable"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n        <extra_id_0>\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "output": [
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length];= new String[grades.length",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];= new String[grades.length];\n= new String[grades.length];= new String[grades.length];",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length];\n= new String[grades.",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.3)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length];= new String[grades.length",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length]= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.3)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length];\n= new String[grades.",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];= new String[grades.length];\n= new String[grades.length];= new String[grades.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];= new String[grades.length];\n= new String[grades.length];= new String[grades.length]",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa >0.7)\nancestor letter_grade[i] =\"C-\";= new String[grades.length];\n= new String[grades.length];\n= new String[grades.length];\n= new String[];",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n        <extra_id_0>\n            return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": ";",
          "correctness": "wrong"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    <extra_id_0>\n}",
      "function range": "7,5-11,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return 1;",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        <extra_id_0>\n    }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "probes",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    <extra_id_0>\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "label:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        <extra_id_0>\n}",
      "function range": "17,5-25,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\\n",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\");",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n        <extra_id_0>\n            }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            <extra_id_0>\n        }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "efault",
          "correctness": "uncompilable"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                <extra_id_0>\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "+",
          "correctness": "uncompilable"
        },
        {
          "patch": "-",
          "correctness": "uncompilable"
        },
        {
          "patch": ");",
          "correctness": "uncompilable"
        },
        {
          "patch": ",",
          "correctness": "uncompilable"
        },
        {
          "patch": ")",
          "correctness": "uncompilable"
        },
        {
          "patch": "+ 1",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "&&",
          "correctness": "uncompilable"
        },
        {
          "patch": ";",
          "correctness": "uncompilable"
        },
        {
          "patch": "*",
          "correctness": "uncompilable"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n    <extra_id_0>\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "especially",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "especific",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "egroup",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "eslint",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))\n        <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "wrong"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y)\n    <extra_id_0>\n            return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ //",
          "correctness": "wrong"
        },
        {
          "patch": "&&",
          "correctness": "uncompilable"
        },
        {
          "patch": "{//",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{;",
          "correctness": "uncompilable"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n        <extra_id_0>\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "//sb.append(c);\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "//sb.append(Character.toUpperCase(c));\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "//buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "//buggy line:Buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "//buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "//buggy line:Buggy line:Buggy line:Buggy line:Buggy line:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:BuggyLine:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "//sb.append(c);\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "//sb.append(c);\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "//sb.append(c);\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "//sb.append(c);\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",
          "correctness": "uncompilable"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "22,5-35,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "break ;",
          "correctness": "wrong"
        },
        {
          "patch": "end",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {\n            <extra_id_0>\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "output": [
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"start\") &&!str_key.toLowerCase().equals(str",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"mixed\") &&!str_key.toLowerCase().equals(str",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"lower\") &&!str_key.toLowerCase().equals(str",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"start\") &&!str_key.toUpperCase().equals(str",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"lower\") &&!str_key.toUpperCase().equals(str",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"mixed\") &&!str_key.toUpperCase().equals(str",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"start\")) {\nConnstate = \"mixed\";\nConn",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"start\")) {\nConn if (state.equals(\"lower\")",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"mixed\") &&!str_key.toLowerCase().equals(",
          "correctness": "uncompilable"
        },
        {
          "patch": "Conn if (str_key.toLowerCase().equals(str_key)) {if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key))(state.equals(\"start\")) {\nConn if (state.equals(\"upper\")",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n        <extra_id_0>\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    <extra_id_0>\n}",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return a; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end of",
          "correctness": "uncompilable"
        },
        {
          "patch": "// default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n        <extra_id_0>\n            count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "wrong"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ }",
          "correctness": "wrong"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);\n    <extra_id_0>\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "//(value.substring(0,value.length()-2).equals(\".5\"))}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//(value.substring(0,value.length() - 2).equals(\".5\"))}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//(value.substring(0,value.length()-2).equals(\".5\")))}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//(value.substring(0,value.length()-1).equals(\".5\"))}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//(value.substring(0,value.length()-2).equals(\".5\"))return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//(value.substring(0,value.length()-2).equals(\".5\")) {\n//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//(value.substring(0,value.length()-2).equals(\".5\"))return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n  <extra_id_0>\n\t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "pile",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n <extra_id_0>\n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "output": [
        {
          "patch": "s_list;",
          "correctness": "uncompilable"
        },
        {
          "patch": "s_list =",
          "correctness": "uncompilable"
        },
        {
          "patch": "s_list",
          "correctness": "uncompilable"
        },
        {
          "patch": "s_list:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true)",
          "correctness": "uncompilable"
        },
        {
          "patch": ":",
          "correctness": "uncompilable"
        },
        {
          "patch": "s",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "function",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n    <extra_id_0>\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return -1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "return y;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return x;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        <extra_id_0>\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "output": [
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(rem);(int)(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int)(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(rem);(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int)(int) Math.ceil(rem);(int) Math.ceil(rem);(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int)(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int)(int) Math.ceil(avg);(int) Math.ceil(rem);(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int)(int) Math.ceil(avg);(int) Math.ceil(avg);(int) Math.ceil(rem);(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int)(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(rem);}",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int)(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int)(int) Math.ceil(rem);(int) Math.ceil(rem);}",
          "correctness": "wrong"
        },
        {
          "patch": "//(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(avg);(int) Math.ceil(rem);(int) Math.ceil(rem);(int)0",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2) != 0) {\n// buggy line:                all_odd = true;\n            <extra_id_0>\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "break;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;i;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;new ArrayList<>();",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;++num;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;i;\n\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;0;\n\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;++num);",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;i;\nWarehouse",
          "correctness": "uncompilable"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num) != \"\") {\n        <extra_id_0>\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "output": [
        {
          "patch": "//result.add(digit_map.get(num));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//digit_map.get(num));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//digit_map.get(num));digit_map.get(num);digit_map.get(num);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//digit_map.get(num);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//result.add(digit_map.get(num));",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(digit_map.get(num))digit_map.get(num));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(digit_map.get(num))digit_map.get(num));}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            <extra_id_0>\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "breaker",
          "correctness": "uncompilable"
        },
        {
          "patch": "egroup",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        <extra_id_0>\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "egress//",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "efaults",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        <extra_id_0>\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "output": [
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return count;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "////}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//////",
          "correctness": "uncompilable"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    <extra_id_0>\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "output": [
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(min_index);if(arr_after_move.get",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(min_index);if(arr_after_move.size",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(sorted_arr.size() - 1);= 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(sorted_arr.size() - 1);= 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(arr_after_move.get(min_index)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(arr_after_move.get(min_index)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(arr_after_move.get(min_index);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(min_index);if(arr_after_move.is",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(min_index);if(arr_after_move.contains",
          "correctness": "uncompilable"
        },
        {
          "patch": "else min_value = arr.get(sorted_arr.size() - 1);if(arr_after_move.get(min_index) == min_value) min_index == arr.get(arr_after_move.get(min_index);=",
          "correctness": "uncompilable"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n    <extra_id_0>\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "egroup",
          "correctness": "uncompilable"
        },
        {
          "patch": "breaker",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}}",
          "correctness": "wrong"
        },
        {
          "patch": "appender",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "wrong"
        },
        {
          "patch": "////",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n        <extra_id_0>\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "output": [
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' +res.put((char)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' + i),res.put((char) ('a' +res.put((char) ('a' + i),res.put((char)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' +res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i, most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.clear();",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i, most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.clear();",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put(",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i), most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.get((",
          "correctness": "uncompilable"
        },
        {
          "patch": "//res.put((char) ('a' + i, most_count);res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put(",
          "correctness": "uncompilable"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i)) != -1) {\n        <extra_id_0>\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "output": [
        {
          "patch": "//if(c.indexOf(s.charAt(i))!= -1) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(c.indexOf(s.charAt(i))!= -1)return res;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(c.indexOf(s.charAt(i))!= -1)}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(c.indexOf(s.charAt(i))!= -1) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(c.indexOf(s.charAt(i))!=-1) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(c.indexOf(s.charAt(i))!=-1) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new_s += s.charAt(i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return res;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//s.charAt(i);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            <extra_id_0>\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "}result.add(s);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(s);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(s);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(s);\n\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(s);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(s);\nBridge",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(\"\");}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(\"\"+n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.add(s);\nWarehouse",
          "correctness": "uncompilable"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        <extra_id_0>\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "}max_sum = -nums.get(0);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}max_sum = -nums.get(0);{",
          "correctness": "wrong"
        },
        {
          "patch": "}max_sum = -nums.get(0);0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}max_sum = -nums.size();max_sum;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}max_sum = -nums.size();}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}max_sum = -nums.size();{",
          "correctness": "wrong"
        },
        {
          "patch": "}max_sum = -nums.get(0);;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}max_sum = -nums.get(0);return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}max_sum = -nums.size();max_sum =",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        <extra_id_0>\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "okay",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n      <extra_id_0>\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "output": [
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "elsereturn",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        <extra_id_0>\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:Buggy line:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:Buggy line:Buggy line:Buggy line:Buggyline:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggyline:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:Buggyline:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggy line:Buggyline:Buggyline:B",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:Buggy line:Buggy line:Buggyline:Buggy line:Buggy line:Buggyline:Buggyline:Buggy line:Buggy line:Buggyline:BuggyLine{",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    <extra_id_0>\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "output": [
        {
          "patch": "//if(vowels.contains(word.charAt(i))}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(vowels.contains(word.charAt(i))) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(vowels.contains(word.charAt(i)) )}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(vowels.contains(word.charAt(i)) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(!vowels.contains(word.charAt(i))}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(vowels.contains(word.charAt(i))){}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(vowels.contains(word.charAt(i))) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//vowels.add(i);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    <extra_id_0>\n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i<k)",
          "correctness": "uncompilable"
        },
        {
          "patch": "\u8c03\u7528",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>k)",
          "correctness": "uncompilable"
        },
        {
          "patch": "\u8fd4\u56de",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        <extra_id_0>\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "indicate",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n        <extra_id_0>\n        }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n    <extra_id_0>\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "++n;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "--",
          "correctness": "uncompilable"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;\n            <extra_id_0>\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "output": [
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&month == month_check2[",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>30)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&month == month_check2[",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&month == month_check1[",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>30)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&month == month_check1[",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&month == 2 &&month ==",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>30)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&month == 2 &&month ==",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month_check2[i] &&!(day < 1month_check2",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&!(daymonth == 2 &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month_check2[i] &&!(day < 1||day>month",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse if(month == month_check1[i] &&!(day<1||day>31)) return false;{\nWarehouse if(month == month_check1[i] &&month == month_check2[i] &&!(daymonth ==month",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            <extra_id_0>\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        },
        {
          "patch": "};",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        <extra_id_0>\n    }\n    return true;\n}",
      "function range": "22,5-37,5",
      "output": [
        {
          "patch": "//if(count_num.get(lst[i])) return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i]) > 2) return}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;=0;i++) {\n// buggy line:Buggy0;i++) {\n// buggy line:Buggyif(count_num.get",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;=0;i++) {\n// buggy line:Buggy0;i++) {\n// buggy line:Buggy0;0;i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;=0;i++) {\n// buggy line:Buggy0;i++) {\n// buggy line:Buggy}0;i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;=0;i++) {\n// buggy line:Buggy0;i++) {\n// buggy line:Buggyreturn false;0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(count_num.get(lst[i])>2) return false;=0;i++) {\n// buggy line:Buggy0;i++) {\n// buggy line:Buggy}0;i++) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n    <extra_id_0>\n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf//",
          "correctness": "uncompilable"
        },
        {
          "patch": "eslint",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress//",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress //",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        <extra_id_0>\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "output": [
        {
          "patch": "//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);\n                <extra_id_0>\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "output": [
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;= 0;= 0;\n= 0;\n= 0;\n= 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;< k; i++) {= 0;= 0;= 0;< k; i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;= 0;= 0;= 0;\n= 0;\n= 0;\n=",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][0] == 1) {= 0;= 0;= 0;= 0;= 0;= 0;= 0;\n= 0;\n= 0;\n=",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;< k; i++) {= 0;= 0;= 0;= 0;<",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;< k; i++) {= 0;= 0;= 0;= 0;=",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;< k; i++) {= 0;= 0;= 0;= 0; i <",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;= 0;= 0;\n= 0;\n= 0;\n= 0;=",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;= 0;= 0;\n= 0;\n= 0;\n= 0;<",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:               if(grid[i][j] == 1) {= 0;= 0;= 0;= 0;< k; i++) {= 0;= 0;= 0;= 0; i",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    <extra_id_0>\n    }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "output": [
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n//0;\n//0;",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy0;\n//",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n//0;\n// buggy line:Prioritized0;\n//0;",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n//0;\n//}",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n//0;\n// buggy line:Prioritized0;\n//}",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy0;",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy0;}",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n//0;0;0",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy line:Prioritized0;\n// buggy0;0",
          "correctness": "wrong"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n    <extra_id_0>\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "};",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n    <extra_id_0>\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "output": [
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closing_brackets.add(i);opening_brackets.",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closing_brackets.",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closeing_brackets",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(brackets.charAt(i) == '[') opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_bracket",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closing_brackets.add(i);opening_brackets",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closing_brackets.add(i);opening_brackets[",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closing_brackets",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);}opening_",
          "correctness": "uncompilable"
        },
        {
          "patch": "//opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);opening_brackets.add(i);closing_brackets[",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n    <extra_id_0>\n    }\n    return result;\n}",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "i++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "i ++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "i++",
          "correctness": "uncompilable"
        },
        {
          "patch": "++i;",
          "correctness": "uncompilable"
        },
        {
          "patch": "i++ ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "++ i;",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "i++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "i +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "i ++ ;",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    <extra_id_0>\n}",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;last_char_pos;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n//last_char_pos;last_char_pos;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n//last_char_pos;\n//last_char_pos;last_char_pos;last_char_pos",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n//last_char_pos;\n//last_char_pos;last_char_pos;\n// buggy",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n//last_char_pos;\n//last_char_pos;last_char_pos;\n// buggy line",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n// buggy line:   last_char_pos;last_char_pos;last_char_pos;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n//last_char_pos;\n//last_char_pos;last_char_pos;\n//last_char",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n// buggylast_char_pos;last_char_pos;last_char_pos;\n// buggy",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n// buggylast_char_pos;last_char_pos;last_char_pos;\n//last_",
          "correctness": "uncompilable"
        },
        {
          "patch": "//=last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;\n// buggylast_char_pos;\n//last_char_pos;last_char_pos;\n// b",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n    <extra_id_0>\n    }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "end",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n    <extra_id_0>\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.max(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse= 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.min(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse= 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.max(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse{\nWarehouse",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.min(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse{\nWarehouse",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.max(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse}\nWarehouse",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.min(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse}\nWarehouse",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.max(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse={",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.max(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse==",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.min(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse={",
          "correctness": "uncompilable"
        },
        {
          "patch": "Warehouse min_negative = Math.min(min_negative, lst[i]);if(!positive) max_negative = Math.min(max_negative,(!positive) min_positive = Math.min(min_positive,0;\nWarehouse==",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    <extra_id_0>\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "output": [
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a == temp_b) returnelse",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a == temp_b) returnreturn",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_b == temp_a) returnelse",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_b == temp_a) returnreturn",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a == temp_b) returnif",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a > temp_b) returnelse",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a < temp_b) returnelse",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_b == temp_a) return null;",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a > temp_b) returnreturn",
          "correctness": "wrong"
        },
        {
          "patch": "// buggy line:   if(temp_a == temp_b) return null;if(temp_a == temp_b) return null;if(temp_a == temp_b) returnif(temp_a == temp_b)return",
          "correctness": "wrong"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n    <extra_id_0>\n}",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:BeEmpty",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line :",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line: Disable",
          "correctness": "uncompilable"
        },
        {
          "patch": "// buggy line:******/",
          "correctness": "uncompilable"
        },
        {
          "patch": "// Buggy line:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return false; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return true; //",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    <extra_id_0>\n    }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "efault",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    <extra_id_0>\n}",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "//new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "}new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_textnew",
          "correctness": "uncompilable"
        },
        {
          "patch": "}new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_textnew",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text",
          "correctness": "uncompilable"
        },
        {
          "patch": "}new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text+",
          "correctness": "uncompilable"
        },
        {
          "patch": "}new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text += text.substring(i);new_text+",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    <extra_id_0>\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "output": [
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[0].equals(\"exe\")||lst[0].equals(\"dll\")))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[0].equals(\"exe\")||lst[0].equals(\"dll\")))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[0].equals(\"exe\")||lst[0].equals(\"dll\"))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[1].equals(\"exe\")||lst[1].equals(\"dll\")))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[0].equals(\"exe\")||lst[0].equals(\"dll\")))return \"No\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[1].equals(\"exe\")||lst[1].equals(\"dll\")))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[0].equals(\"exe\")||lst[0].equals(\"dll\")))return \"No\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[1].equals(\"exe\")||lst[1].equals(\"dll\")))return \"No\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[0].equals(\"exe\")||lst[0].equals(\"dll\"))return \"No\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "return \"Yes\";\n    if (!(lst[0].equals(\"txt\")||lst[0].equals(\"exe\")))return \"Yes\";\n    if (!(lst[1].equals(\"exe\")||lst[1].equals(\"dll\")))return \"No\";",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n        <extra_id_0>\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "enerator//",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewriter//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "escope//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        <extra_id_0>\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "y",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom))\n    <extra_id_0>\n        return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "uncompilable"
        },
        {
          "patch": "equivalent",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "return;",
          "correctness": "uncompilable"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n            <extra_id_0>\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "output": [
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i))));\n        }",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digit))));",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(i))));",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digit))));",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digit))));\n\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i))));\n       (",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(i))));\n\\\\\\\\",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\n// buggy line: Buggy line:new ArrayList<Integer>();\n        result.addAll(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i))));\n       }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n            <extra_id_0>\n                count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{return count;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{0}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n    <extra_id_0>\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n//0;\n//0;0;\n//0;\n//0;\n//0;\n//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n//0;0;0;\n//0;\n//0;\n//0;\n//0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n//0;\n// buggy0;0;0;\n//0;\n//0;\n//0;\n//0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n//0;\n//0;0;\n// buggy0;\n//0;\n//0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n// buggy0;\n//0;0;\n//0;\n//0;\n//0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n// buggy0;0;0;\n//0;\n// buggy0;\n//0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n// buggy0;0;0;\n//0;\n//0;\n//0;\n//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n// buggy0;0;0;\n// buggy0;\n//0;\n//0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n// buggy0;0;0;\n//0;\n//0;\n// buggy0;\n//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;\n// buggy0;\n// buggy0;\n// buggy0;\n// buggy0;0;0;\n// buggy0;\n// buggy0;\n//0",
          "correctness": "uncompilable"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    <extra_id_0>\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet2));",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggy line:Passphrase result.add(planet_names.get(planet2",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet1_index",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet2);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet2))",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet1));",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggyresult.add(planet_names.get(planet2_index",
          "correctness": "uncompilable"
        },
        {
          "patch": "//new ArrayList<String>(planet_names.get(planet1));\n// buggyresult.add(planet_names.get(planet2));\n// buggy line:Passphrase result.add(planet_names.get(planet1",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        <extra_id_0>\n    );\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "-",
          "correctness": "uncompilable"
        },
        {
          "patch": ",",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "+",
          "correctness": "uncompilable"
        },
        {
          "patch": "->",
          "correctness": "uncompilable"
        },
        {
          "patch": ");",
          "correctness": "uncompilable"
        },
        {
          "patch": ")",
          "correctness": "uncompilable"
        },
        {
          "patch": "*",
          "correctness": "uncompilable"
        },
        {
          "patch": ">",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        <extra_id_0>\n}",
      "function range": "11,5-17,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\"",
          "correctness": "uncompilable"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                <extra_id_0>\n            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            <extra_id_0>\n    }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "//val;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//val;\n   }",
          "correctness": "wrong"
        },
        {
          "patch": "break;val;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//val;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//val;\n//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;val;\n   }",
          "correctness": "uncompilable"
        },
        {
          "patch": "//val;\n   val;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//val;\n//}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//val;\n   ;}",
          "correctness": "wrong"
        },
        {
          "patch": "//val;\n   {}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n    <extra_id_0>\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "Eg",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "preg",
          "correctness": "uncompilable"
        },
        {
          "patch": "Write",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewriter",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    <extra_id_0>\n    }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "efault",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "wrong"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n        <extra_id_0>\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\",",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\", \"",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\", \"XC\",\"",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\", \"XC\",\"XC\",\"XC\",\"",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\",\"XC\", \"XC\",\"XC\",\"",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\",\"C\",\"",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\", \"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV\",\"IV",
          "correctness": "timeout"
        },
        {
          "patch": "//0;\n// buggy line:       \"I\",\"IV\", \"IV\",\"IV\",\"IV\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\",\"XC\"",
          "correctness": "timeout"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    <extra_id_0>\n}",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false;",
          "correctness": "wrong"
        },
        {
          "patch": "// return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            <extra_id_0>\n        }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "output": [
        {
          "patch": "//words_list.get(0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//words_list.get(0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//words_list.get(0);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//words_list.get(1);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return}",
          "correctness": "uncompilable"
        },
        {
          "patch": "////}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//words_list",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n    <extra_id_0>\n}",
      "function range": "31,5-33,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// }",
          "correctness": "uncompilable"
        },
        {
          "patch": "// end:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n    <extra_id_0>\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        <extra_id_0>\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "break;sb.append(s.charAt(0));sb.append(s.charAt(0));",
          "correctness": "uncompilable"
        },
        {
          "patch": "}sb.append(s.charAt(0));sb.append(s.charAt(0));",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;sb.append(s.charAt(flg));sb.append(s.charAt(flg));",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;sb.append(s.charAt(0));sb.append(s.charAt(0));",
          "correctness": "uncompilable"
        },
        {
          "patch": "}sb.append(s.charAt(0));sb.append(s.charAt(0));",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;sb.append(s.charAt(0));sb.append(s.charAt(0));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}sb.append(s.charAt(0));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;sb.append(s.charAt(0));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}sb.append(s.charAt(flg));}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;sb.append(s.charAt(flg));}",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    <extra_id_0>\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "md.update(text);",
          "correctness": "uncompilable"
        },
        {
          "patch": "eslint-disable-line",
          "correctness": "uncompilable"
        },
        {
          "patch": "return md.digest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "while (true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "return text;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n    <extra_id_0>\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewriter//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewriter //",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf//",
          "correctness": "uncompilable"
        },
        {
          "patch": "egress",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}