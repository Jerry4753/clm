{
  "config": "CODET5_BASE_CODEFORM_MASKFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            <extra_id_0>\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "output": [
        "double distance = numbers.get(j);}",
        "double distance = numbers.get(j);return false;} double distance=0.0;double distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0;",
        "double distance = numbers.get(j);return false;} double distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0;double distance=0.0;",
        "double distance = numbers.get(j);return false;}  publicdouble distance=0.0;double distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0",
        "double distance = numbers.get(j);return false;}  publicdouble distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0;double distance=0.0",
        "double distance = numbers.get(j);return false;} double distance=0.0;double distance=0.0;double distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;",
        "double distance = numbers.get(j);return false;}  publicdouble distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0;double distance=0.0;double distance=0.0",
        "double distance = numbers.get(j);return false;}  publicdouble distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0;doubledouble distance=0",
        "double distance = numbers.get(j);return false;}  publicdouble distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0",
        "double distance = numbers.get(j);return false;}  publicdouble distance=0.0;double distance=0.0;double distance=0.0;double distance=0.0;doubledouble distance=0.0;double distance=distance;double"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        <extra_id_0>\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "output": [
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (current_depth == 0){result.add(current_string);\n                current_string",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){result.add(current_string);\n",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){result.add(current_string);\n               ",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){if (paren_string.equals(\")\"))",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){if (paren_string.equals(\"(\"))",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){result.add(current_string);return result",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){result.add(paren_string);\n               ",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){result.add(paren_string);\n",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (current_depth == 0){result.add(current_string);\n               }",
        "}else if (c == ')'){if (paren_string.equals(\")\")){result.add(current_string);\n                current_string = \"\";\n           if (paren_string.equals(\")\")){result.add(current_string);}"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n    <extra_id_0>\n}",
      "function range": "4,5-6,5",
      "output": [
        "return Math.floo r (number); }",
        "return Math.floo r (number); c",
        "return Math.floo r (number) ;",
        "r eturn number; r eturn",
        "return Math.floo r (number)",
        "return Math.floo r (number )",
        "return Math.floo r (number) *",
        "return Math.floo r (number) -",
        "return Math.floo r (number).",
        "return Math.floo r (number); r"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        <extra_id_0>\n}",
      "function range": "6,5-15,5",
      "output": [
        "} return balance <",
        "} return balance >",
        "} return balance < 0;",
        "} return balance > 0;",
        "} return balance <= 0;",
        "} return balance <=",
        "} return balance >=",
        "} return balance == 0;",
        "} return balance < 1;",
        "} return balance >= 0;"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        <extra_id_0>\n    }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "output": [
        "deviation_sum += number;}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){return mean;}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){number: numbers){number: numbers){number: numbers){}number: numbers){number:}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){double deviation_sum=0.;number: numbers){number:}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){double deviation_sum=0.;number: numbers){number: numbers){}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){number: numbers){number: numbers){number: numbers){}number:number: numbers){}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){for (Double number: numbers){number: numbers){number: numbers){}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){for (Double number: numbers){number: numbers){number: numbers){}}",
        "deviation_sum += number; public static doubledouble(List<Double> numbers){number: numbers){number: numbers){number: numbers){}number: numbers){}"
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    <extra_id_0>\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "output": [
        "for(int i:numbers) {}",
        "for(int i:numbers) {return result;}",
        "for(Integer i:numbers) {}",
        "for(int i:numbers){}",
        "for(int i:numbers) {return result; }",
        "for(int i:numbers) {return result;",
        "for(Integer i:numbers) {return result;}",
        "for(int i:numbers) {return",
        "for(int i:numbers){return result;}",
        "for(int i:numbers) {"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            <extra_id_0>\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "output": [
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){max_depth =",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){max_depth = Math",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){= Math.max(",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);(c == ')'){max_depth = Math.",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){max_depth += 1",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){max_depth=Math",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){(c == ')'){",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){(depth, max_",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){depth += 1;",
        "}for (String paren_group= paren_group.substring(0, paren_group.length()-1);if (c == ')'){max_depth = Math.max(depth, max_depth);if (c == ')'){depth += 1;\n"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-13,5",
      "output": [
        "result.add(string);",
        "result.add(string); //",
        "result.add(substring);",
        "result.add(string);//",
        "result.add(substring); //",
        "result.add(string); }",
        "result.add(substring);//",
        "result.add(string) ;",
        "result +=",
        "//"
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n    <extra_id_0>\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "output": [
        "Integer[] result=new Integer[2];",
        "int[] result=new int[2];",
        "Integer[] result = new Integer[2];",
        "Integer[] result=new Integer[]();",
        "int[] result=new int[]();",
        "int[] result = new int[2];",
        "Integer[] result = new Integer[]();",
        "int[] result = new int[]();",
        "Integer[] result=new Integer[](); //",
        "Integer[] result ="
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        <extra_id_0>\n        result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        "running_max=n;",
        "running_max = n;",
        "running_max=n; //",
        "running_max=n;//",
        "running_max = n; //",
        "running_max = n;//",
        "running_max =n;",
        "//running_max = n;",
        "running_max =",
        "//"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    <extra_id_0>\n    return result;\n}",
      "function range": "12,5-24,5",
      "output": [
        "if(is_palindrome(result))return",
        "//if(!is_palindrome(str)){return result;",
        "//}",
        "//return str; }",
        "//return result; }",
        "//return str;",
        "//return",
        "//return result;",
        "//return str;}",
        "//return result;}"
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    <extra_id_0>\n    return result;\n}",
      "function range": "4,5-12,5",
      "output": [
        "}}",
        "}return",
        "}return result;",
        "};",
        "}return result;}",
        "}return result; //}",
        "}return result; }",
        "}Stringreturn",
        "}return a;",
        "}String="
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        <extra_id_0>\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "output": [
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()==maxlen){return string;\n           return null;\n           return null;\n           if(string.",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()==maxlen){return string;\n           return null;\n           return null;\n           return null;",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()==maxlen){return string;\n           return null;\n           return null;\n           }}",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String stringif(string.length()==maxlen){return string;\n           return null;\n           return null;\n           }",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()>maxlen){return string;\n           return null;\n           return null;\n           return null;",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()==maxlen){return string;\n           return null;\n           return null;\n           if(strings.",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()==maxlen){return string;\n           return null;\n           return null;\n           }return null",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String stringif(string.length()>maxlen){return string;\n           return null;\n           return null;\n           }",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()==maxlen){return string;\n           }return null;\n           }}",
        "maxlen+=string.length();if(string.length()>maxlen){return string;for (String string : strings){if(string.length()>maxlen){return string;\n           return null;\n           return null;\n           }}"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        <extra_id_0>\n    }\n    return a;\n}",
      "function range": "4,5-10,5",
      "output": [
        "a /= b; b =",
        "a *= b; b =",
        "b = b /",
        "a /= b; b /=",
        "b /= a; a =",
        "a *= b; b /=",
        "a /= b; b -=",
        "a += b; b =",
        "b /=",
        "a = a % b;++"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-15,5",
      "output": [
        "result.add(string[i]);",
        "result.add(string[i])",
        "result.add(string);",
        "result.add(\".\");",
        "result[i] =",
        "result+=",
        "//",
        "result +=",
        "++result;",
        "result ="
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    <extra_id_0>\n}",
      "function range": "4,5-10,5",
      "output": [
        "return",
        "return result;",
        "return result ;",
        "//return",
        "returnresult;",
        "}",
        "return result",
        "// return",
        ";return",
        ""
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            <extra_id_0>\n    }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "output": [
        "distinct.add(c);",
        "distinct.add(c); }",
        "distinct.add(c); return",
        "distinct.add(c); //",
        "distinct.add(c)",
        "return 0;",
        "return",
        "++",
        "{ }",
        "{"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    <extra_id_0>\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "output": [
        "for(String note: music_string) {}",
        "for(String note: music_string){}",
        "for(String note: music_string) {",
        "for(String note: music_string){",
        "for(String note : music_string) {}",
        "for(String note : music_string){}",
        "for(String note:music_string){}",
        "for(String note:music_string) {}",
        "for(String note : music_string) {",
        "for(String note:music_string) {"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    <extra_id_0>\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "output": [
        "for(int i=0;i<string.length();i++){",
        "for(int i=0;i<string.length();++i){",
        "for(Integer i=0;i<string.length();i++){",
        "for (int i=0;i<string.length();i++){",
        "for(int i=0; i<string.length();i++){",
        "for(int i=0;i<string.length();i++) {",
        "for(int i=1;i<string.length();i++){",
        "for(int i:string.length()){",
        "if(string.length()>substring.length()){",
        "while(i<string.length()){"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    <extra_id_0>\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "output": [
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(\"zero\"",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(\"one\"",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(number_",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(number_map.get(number_",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(number_map.get(number_map.get(number_",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(number_map.get(number_map.get(number_map.get(number_",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(key)))",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(0)))",
        "if(number_array.size() > 0){value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(value_map.get(number)))"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        <extra_id_0>\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "output": [
        "for(int j = 0; j<numbers.length;j++){for(int j=0; j<numbers.length; j++){if(numbers[j] < numbers[i]){result[0] = numbers[i];\n                    result[1]",
        "for(int j = 0; j<numbers.length;j++){for(int j=0; j<numbers.length; j++){if(numbers[j] < numbers[i]){result[0] = numbers[j];\n                    result[1]",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[j] < numbers[i]){result[0] = numbers[i];\n                   result[1] = numbers[",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[i] < numbers[j]){result[0] = numbers[j];\n                   result[1] = numbers[",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[i] < numbers[j]){result[0] = numbers[j];\n                    result[1]} else{",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[j] < numbers[i]){result[0] = numbers[i];\n                    result[1]} else{",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[j] < numbers[i]){result[0] = numbers[i];\n                   result[1] =}",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[i] < numbers[j]){result[0] = numbers[j];\n                   result[1] =}",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[j] < numbers[i]){result[0] = numbers[i];\n                   result[1] =if",
        "for(int j = 0; j<numbers.length;j++){if(numbers[i] < numbers[j]){if(numbers[j] < numbers[i]){result[0] = numbers[i];\n                   result[1] =result"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        <extra_id_0>\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "output": [
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i](numbers[i] - min) / (max1) {\n            result[i]",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max1) {\n            result[i",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max= 0; i < numbers.length",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max= 0; i1) {",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max-min);\n= 0; i",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max= 0; i <1)",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max-min);\n= 0;",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max= 0; i= 0;",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max= 0; i1)",
        "if (numbers[i] < min) {= 0; i < numbers.length;= 0; i < numbers.length;1) {\n            result[i] =(numbers[i] - min) / (max1) {\n           }"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        "result.add(value.intValue()); //",
        "result.add((Integer)value); //",
        "result.add(value.intValue());",
        "result.add((Integer)value);",
        "result.add((Integer) value); //",
        "result.add(value.toString()); //",
        "result.add((Integer) value);",
        "result.add(value.toString());",
        "result.add(value); //",
        "result.add(value.hashCode()); //"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n    <extra_id_0>\n}",
      "function range": "4,5-6,5",
      "output": [
        "r eturn string.length(); }",
        "r eturn string.lengt h ;",
        "r eturn string.len g th;",
        "r eturn string.length; }",
        "r eturn string.length(); } public",
        "r eturn string.length ; }",
        "r eturn string.length; } public",
        "r e turn string.length(); c",
        "public static int length =",
        "r eturn string.length(); c ass"
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n    <extra_id_0>\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "output": [
        "for(int i=1; i<n; i++) {",
        "for(int i=1;i<n;i++) {",
        "for(int i=1;i<n; i++) {",
        "for (int i=1;i<n;i++) {",
        "for(int i = 1; i<n;i++){",
        "for(int i = 1;i<n;i++) {",
        "for(int i=1; i<n; i++){",
        "for(int i=2; i<n; i++) {",
        "for (int i=1;i<n; i++) {",
        "for(int i=1;i<n;i++){"
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    <extra_id_0>\n}",
      "function range": "7,5-21,5",
      "output": [
        "return result;return result; }",
        "return result;}",
        "return result;return result;}",
        "return result;List<Integer>= new ArrayList<Integer>();return result; }",
        "return result;List<Integer>= new ArrayList<Integer>();return result;",
        "return result;List<Integer>= new ArrayList<Integer>();return result;}",
        "return result;List<Integer>= new ArrayList<Integer>();List<Integer> result=new ArrayList<Integer>();",
        "return result;List<Integer>= new ArrayList<Integer>();= new ArrayList<Integer>();return result;",
        "return result;List<Integer>= new ArrayList<Integer>();;return result;",
        "return result;return result;"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        <extra_id_0>\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "output": [
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==0)result.add(n);\n           if(count.get(",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==1)result.add(n);\n           if(count.get(",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==0)result.add(n);\n           for (Integer n :",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==1)result.add(n);\n           for (Integer n :",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==0)result.add(n);\n           for (Integer n : numbers",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==1)result.add(n);\n           for (Integer n : numbers",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==1)result.add(n);\n           if(count.get(n)==0)result.add(n);\n           for (Integer n :",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==1)result.add(n);\n           if(count.get(n)==0)result.add(n);\n           for (Integer n : numbers",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==0)result.add(n);\n           for (Integern",
        "count.put(n, 1);for (Integer n : numbers){if(count.get(n)==0)result.add(n);\n           if(count.get(n)==1)result.add(n);\n           for (Integern"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            <extra_id_0>\n        }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "output": [
        "char_list[i] = Character.toUpperCase(c);}",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(c)){char_list[i]=Character.toLowerCase(c);",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(c)){char_list[i]=Character.toUpperCase(c);",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(char_list[i]){char_list[i]=Character.to",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i++){char_list[i]=Character.toLowerCase(c);char_list[i]=Character.toUpperCase(",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(char_list[i])){char_list[i]=Character.to",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i++){char_list[i]=Character.toLowerCase(c);char_list[i]=Character.toLowerCase(",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(c)){char_list[i]=Character.toUpperCase(char_",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(c)){char_list[i]=Character.toLowerCase(char_",
        "char_list[i] = Character.toUpperCase(c); public static StringStringchar_list =char_list.length;i+=1){if(Character.isUpperCase(char_list[i]){char_list[i]=c;}"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n    <extra_id_0>\n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "output": [
        "String result = \"\";",
        "String result = \"\"; //",
        "String result = \"\" ;",
        "String result =",
        "String result = \"\";\n",
        "String result= \"\";",
        "String result = \"\";//",
        "String result = \"\"",
        "String result= \"\"; //",
        "String result = \"\","
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        <extra_id_0>\n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        "if(string.startsWith(prefix)){",
        "if(string.startsWith(prefix)) {",
        "if(prefix.equals(string)){",
        "if (string.startsWith(prefix)){",
        "if(prefix.startsWith(string)){",
        "if(string.startsWith(prefix))) {",
        "if(prefix.equals(string)) {",
        "{",
        "//{",
        "//"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        "result.add(number); //",
        "result.add(number);",
        "result.add(number); // return",
        "result.add(number); //return",
        "result.add(number) ; //",
        "result.add(number); }",
        "result.add(number) ;",
        "result.add(number);//",
        "result.add(number); //}",
        "result.add(number); // add"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    <extra_id_0>\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "output": [
        "else {",
        "else{",
        "if(n>2){",
        "if(n>1){",
        "if(n%k){",
        "if(k) {",
        "if(k){",
        "if(n){",
        "{",
        "else"
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        <extra_id_0>\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "output": [
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(List<Double> xs);double find_zero(List<Double> xs",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(xs);double find_zero(xs",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(List<Double> xs);double find_zero(List<Double>",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){xs.",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){=",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){ returnxs",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){xs;",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){;",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){(xs",
        "if (center < begin) {return end; }  publicdouble find_zero(List<Double> xs){double find_zero(List<Double> xs){double find_zero(xs);double find_zero(List<Double> xs){xs);"
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            <extra_id_0>\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "output": [
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));} else{result.add(l.get",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));\n} else{result.add(l.",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));} else{ result.add(l.get",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));} else{result.add(thirds",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));if (i%3==0){ result.",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));\n} else{ result.add(l.",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));\nif (i%3==0){ result",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));\n} else{result.add(thir",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(thirds.get(i));} else{result.add(l",
        "result.add(thirds.get(i));= 0; i < l.size();= 0; i < l.size();if (i%3==0){ result.add(l.get(i));\nif (i%3==0){"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        <extra_id_0>\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "output": [
        "result.add(n); //",
        "result.add(n);",
        "result.add(n);//",
        "result.add(n); // return",
        "result.add(n); //return",
        "result.add(n) ; //",
        "result.add(n); //for",
        "//result.add(n); //",
        "result.add (n); //",
        "result.add(n); // add"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n    <extra_id_0>\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "output": [
        "int m=0;",
        "int m;",
        "int m=1;",
        "int m =0;",
        "int m = 0;",
        "int m=0 ;",
        "int m=-1;",
        "int m=0",
        "int m =",
        "int m"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            <extra_id_0>\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "output": [
        "if(i%10==0){}",
        "if(i == 0){}",
        "if(i%10==0) {}",
        "if(i == 0){return result; }",
        "if(i%12==0){}",
        "if(i%4==0){}",
        "if(i%20==0){}",
        "if(i == 0){return result;}",
        "if(i==0){}",
        "//return result; }"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    <extra_id_0>\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "output": [
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;evens[(int)evens[(int) i / 2]= evens[(int) i",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;evens[(int)evens[(int) i / 2]= evens[(int)",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;= 0; i < l.length;= 0; i < l.length;= 0; i <",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;= 0; i < l.length;= 0; i < l.length;= 0; i < l",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;= 0; i < l.length;= 0; i < l.length;+= 1) {",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;evens[(int)evens[(int) i / 2]= evens[(int)i",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;= 0; i < l.length;= 0; i < l.length;= 0; i{",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;evens[(int)evens[(int)i / 2] = l[i];\n}",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;evens[(int)evens[(int) i/2] = l[i];\n}",
        "int[] evens = new int[l.length];int[] evens = new int[l.length];= 0; i < l.length;evens[(int)evens[(int) i / 2]= evens[(int) ("
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    <extra_id_0>\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "output": [
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain,s.length()-remain",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain,s.length()-remain)){result+=s.substring(s.length()-remain,s.length()-remain",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain)){result+=s.substring(s.length()-remain);\n   ",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain)){result+=s.substring",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(0,s",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain)){result += s.substring(",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain)){result+=s.substring(s.length()-remain);\n    }",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain,s.length())){",
        "for(int i=0;i<s.length();i++){if(s.substring(s.length()-remain),s.substring(s.length()-remain),s.substring(s.length()-remain,s.length())){result"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        <extra_id_0>\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "output": [
        "fib.add(len);}",
        "fib.add(len-1);}",
        "if(len == n)}",
        "if(len > n)}",
        "if(len>n)}",
        "if(len == n) public static int}",
        "fib.add(len-1); public static int}",
        "fib.add(len-1);}  public}",
        "fib.add(len-1);}  public static int}",
        "fib.add(len-1);}  public static}"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        <extra_id_0>\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "output": [
        "if (numbers[i]!=0) {}",
        "{if (numbers[i] + numbers[j]}",
        "{if (numbers[i] + numbers[j]==0) {}",
        "{if (numbers[i] == 0) {}",
        "{if (numbers[i] + numbers[j]==0)}",
        "{if (numbers[i] + numbers[j] ==}",
        "{if (numbers[i] + numbers[j] +}",
        "{if (numbers[i] + numbers[j]==0)\n                   }",
        "if (numbers[i]!=0) { public static boolean}",
        "{}"
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n    <extra_id_0>\n}",
      "function range": "14,5-16,5",
      "output": [
        "r eturn n ; }",
        "r eturn n * n",
        "r e turn n *",
        "r eturn n *",
        "r eturn n; } ;",
        "r eturn n ; c",
        "r etur n n *",
        "r eturn n %",
        "r eturn n; }",
        "r eturn n; } }"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "13,5-20,5",
      "output": [
        "result.add(n); //",
        "result.add(n);",
        "result.add(n); // return",
        "result.add(n) ; //",
        "result.add(n); //return",
        "result.add(n);//",
        "result.add(n); }",
        "result.add (n); //",
        "result.add(n); // add",
        "result.add(n); //add"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        <extra_id_0>\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "output": [
        "for(int j=0;j<l.size();j++) {}",
        "for(int j=0;j<l.size();j++){}",
        "for(int j=0;j<l.size();j++) {",
        "for(int j=0;j<l.size();j++){",
        "for(int j=0;j<l.size();j++) {}",
        "for(int j=0;j<l.size();j++) { public boolean}",
        "for(int j=0;j<l.size();j++){ public boolean}",
        "for(int j=0;j<l.size();j++) { private boolean}",
        "for(int j=0;j<l.size();j++){ private boolean}",
        "for(int j=0;j<l.size();j++) { public void}"
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        "result +=",
        "x -= base; result +=",
        "result += base; x -=",
        "result += base; x =",
        "x /= base; result +=",
        "result += base; x /=",
        "++x; result +=",
        "result += base;",
        "result = result +",
        "result ="
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n    <extra_id_0>\n}",
      "function range": "8,5-10,5",
      "output": [
        "return a * a +",
        "return a * a *",
        "return a * a; //",
        "return a * a ;",
        "return a * a; }",
        "return Math.PI * a *",
        "return a * a+h *",
        "return a * h *",
        "r eturn a * h;",
        "return a * a*h *"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    <extra_id_0>\n    return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "output": [
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(4) + result.get(5)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4) + result.get(5)result.add(result.get(4)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(5) + result.get(6)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(0) + result.get(1)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(0) + result.get(2)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(0) ++ result.get(",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4) + result.get(5)result.add(result.get(5)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(0) + result.get(3)",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(0)+ result.get(4",
        "}result.add(result.get(0) + result.get(1) + result.get(2)result.add(result.get(3) + result.get(4)result.add(result.get(5) + result.get(6))"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        <extra_id_0>\n    }\n}",
      "function range": "12,5-20,5",
      "output": [
        "return",
        "return list[0];",
        "return list[1];",
        "return list.length;",
        "return 0.0;",
        "return 0;",
        "return list[2];",
        "return -1;",
        "return (double)",
        "return 1;"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        <extra_id_0>\n}",
      "function range": "14,5-20,5",
      "output": [
        "if (text.charAt(i) == 0){ return",
        "if(text.charAt(i) ==''){ return",
        "if (text.charAt(i)==0){ return false; }",
        "if (is_palindrome(text.charAt(i))) { return",
        "if(text.charAt(i) == 0){ return",
        "if (text.charAt(i) ==''){",
        "if (text.charAt(i) == 0) {",
        "if(text.charAt(i) == 0){ return false;",
        "if(text.charAt(i) == 0){ return true;",
        "if(text.charAt(i) == 0) { return"
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        <extra_id_0>\n}",
      "function range": "16,5-22,5",
      "output": [
        "result *= p; } return",
        "result *= p; }return",
        "result *= p;",
        "result *=p; } return",
        "result *= p;} return",
        "++result; } return",
        "result += p; } return",
        "result *= p; }",
        "result *= p; return",
        "result <<= p; } return"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        <extra_id_0>\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "output": [
        "//",
        "//System.out.println(c);",
        "//System.out.print(c);",
        "//if(c.equals(0))",
        "if(c.equals(0))",
        "//if (c.equals(0))",
        "if(c!=0)",
        "// TODO:",
        "/*",
        "// TODO"
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        <extra_id_0>\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "output": [
        "if(c == '')",
        "//",
        "sb.append(c);",
        "if(c.equals(\"-\"))",
        "if(c.isUpperCase())",
        "if(c.equals(\"_\"))",
        "//if(c == '')",
        "if(c.equals(0))",
        "if(c == '",
        "if(c =="
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        <extra_id_0>\n}",
      "function range": "10,5-16,5",
      "output": [
        "if (l[i] < t) {",
        "if(l[i] < t) { return",
        "if (l[i] > t) {",
        "if (l[i] <= t) {",
        "if(l[i] > t) { return",
        "if (l[i] < t) return",
        "if(l[i] <= t) { return",
        "if (l[i] >= t) {",
        "if(l[i] >= t) { return",
        "if(l[i] < t) {"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n    <extra_id_0>\n}",
      "function range": "10,5-12,5",
      "output": [
        "return x + y ;",
        "return x + y; }",
        "return x + y;",
        "return x + y; //",
        "r eturn x + y",
        "return x + y +",
        "return x + y *",
        "// return x + y;",
        "return x + y",
        "return x + y -"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n    <extra_id_0>\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "output": [
        "//}",
        "//System.out.println(\"same_chars\");",
        "StringSet set0,set1=new StringBuffer();",
        "//System.out.println(set0);",
        "//set0.clear();",
        "//return false;",
        "//return false; }",
        "//return true;",
        "////",
        "/**/"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n    <extra_id_0>\n}",
      "function range": "12,5-14,5",
      "output": [
        "r eturn n *",
        "r e turn n *",
        "r e t u rn",
        "r eturn n ; }",
        "return n * n ;",
        "r eturn n * n",
        "return n ; }",
        "r eturn n +",
        "r eturn n; }",
        "r eturn n * 2"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        <extra_id_0>\n}",
      "function range": "16,5-27,5",
      "output": [
        "} return",
        "}",
        "}return",
        "return",
        "//} return",
        "return depth;",
        "} return!",
        "//return",
        "} }",
        "}}"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    <extra_id_0>\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "output": [
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, sorted))return true;if(Arrays.equals(l, reverse_sorted))return",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, sorted))return true;if(Arrays.equals(l, reverse_sorted))return true",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, sorted))return true;if(Arrays.equals(l, reverse_sorted))return false",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, reverse_sorted))return true;if(Arrays.equals(l, sorted))return",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, sorted))return true;if(Arrays.equals(l, reverse_sorted)){",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, reverse_sorted))return true;if(Arrays.equals(l, sorted))return true",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, reverse_sorted))return false;if(Arrays.equals(l, sorted))return",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, reverse_sorted))return true;if(Arrays.equals(l, sorted))return false",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, reverse_sorted))return true;if(Arrays.equals(l, reverse_sorted))",
        "for(int i=0;i<l.length;i+=1)sorted[i]=l[l.length-i-1];if(Arrays.equals(l, reverse_sorted))return true;if(Arrays.equals(l,sorted))return"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n    <extra_id_0>\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "output": [
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\n           if(l1[i] == l2[j])\n",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\n               if(l1[i] == l2[j])\n",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\n           if(l2[i] == l2[j])\n",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i]!= l2[j])\n           if(l1[i]!= l2[j])\n",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\n           if(l2[i] == l1[j])\n",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\nif(l1[i] == l2[j])\n",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\nif(l1[i] == l2[j])\n           ",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\n               if(l1[i] == l2[j])",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j])\n           if(l1[i] == l2[j])",
        "List<Integer> common = new ArrayList<Integer>();for (int i =0; i < l1.length; i++){if(l1[i] == l2[j]){if(l1[i] == l2[j]){\n"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        <extra_id_0>\n        }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "output": [
        "largest *=",
        "largest +=",
        "largest++;",
        "largest*=",
        "largest+=",
        "largest =",
        "largest <<=",
        "//",
        "++largest;",
        "largest ++;"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n    <extra_id_0>\n}",
      "function range": "16,5-18,5",
      "output": [
        "return n * n; }",
        "return n * n ;",
        "public static int sum_to_n(int a)",
        "r eturn n * n",
        "return Math.floor(n * n); }",
        "r eturn n * n;",
        "return Math.floor(n * n +",
        "return n ; } ",
        "r eturn n +",
        "r eturn n *"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    <extra_id_0>\n    return result;\n}",
      "function range": "15,5-21,5",
      "output": [
        "result.addAll(xs);",
        "result.addAll(xs); //",
        "result.addAll(Arrays.asList(xs));",
        "result.addAll(Arrays.asList(xs)); //",
        "derivative(xs, result); //",
        "derivative(xs, result); // return",
        "derivative(xs, result);",
        "result.addAll(xs); // return",
        "result.addAll(xs); //return",
        "result.addAll(xs); // result ="
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    <extra_id_0>\n}",
      "function range": "17,5-23,5",
      "output": [
        "return",
        "return n *",
        "return 1;",
        "return n;",
        "return 0;",
        "return 2 *",
        "return 1; //",
        "else return n;",
        "return 0; //",
        "return n; //"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    <extra_id_0>\n        result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "output": [
        "if(str_chars.length > 0) {if(str_chars.length > 0)if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[0].equals(str_chars[0].to",
        "if(str_chars.length > 0) {if(str_chars.length > 0)if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[0].equals(str_chars[1].to",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[0].equals(str_chars[0].",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[1].toUpperCase())) {if(str_chars[0].equals(str_chars[0].",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[0].equals(str_chars[1].",
        "if(str_chars.length > 0) {if(str_chars.length > 0)if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[1].equals(str_chars[1].to",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[1].toUpperCase())) {if(str_chars[0].equals(str_chars[1].",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[0].equals(str_chars[1]))",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[1].equals(str_chars[1].",
        "if(str_chars.length > 1) {if(str_chars.length > 1) {if(str_chars[0].equals(str_chars[0].toUpperCase())) {if(str_chars[0].equals(str_chars[1])"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        <extra_id_0>\n    }\n}",
      "function range": "12,5-23,5",
      "output": [
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)returns.substring(shift);if(s.length()>shift",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift){",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)returns.charAt(shift);if(s.length()>",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s.substring(shift);if(s.charAt(shift))",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s;if(s.length()>shift)returns.",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s.substring(shift);if(s.length()<shift)",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s.substring(shift);if(shift>s.length())return",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s;if(s.length()>shift)returnreturn s",
        "return s.substring(0,shift);String= s.substring(0,shift);if(s.length()>shift)return s.substring(shift);if(s.length()>shift)return s.substring(shift);if(s.length()==shift)"
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        <extra_id_0>\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "output": [
        "//",
        "////",
        "//return result;",
        "//}",
        "//return",
        "//return 0;",
        "///*",
        "//if",
        "//if(",
        "/*"
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "15,5-23,5",
      "output": [
        "result +=",
        "result *=",
        "++result;",
        "++result; ++",
        "++result; //",
        "++result;++",
        "result++;",
        "++",
        "result+=",
        "++result; }"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n    <extra_id_0>\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "output": [
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even,",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, index",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, index};int[] {min_even, index};int[] {min_even, min_even};int[] {min_even, min_even};",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even,int[] {min_even, min_even};",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even,int[] {min_even, min_even};\n",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, index};int[] {min_even, index};int[] {min_even, min_even};int[] {min_even, min_even};\n",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min_even};if (index == -1)\n",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min_even};if (index == -1)",
        "int min_even = Integer.MAX_VALUE;int index=-1;int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even, min_even};int[] {min_even};"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    <extra_id_0>\n    return result;\n}",
      "function range": "13,5-26,5",
      "output": [
        "//}",
        "// public int}",
        "// public void}",
        "//}",
        "//return max;",
        "// public static int}",
        "// public}",
        "// private int}",
        "// publicint}",
        "// public intreturn"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    <extra_id_0>\n    return result;\n}",
      "function range": "17,5-29,5",
      "output": [
        "switched=false;lst.remove(0); }}",
        "lst.remove(0); switched=false; }}",
        "switched=false; }}",
        "switched = false; }}",
        "switched=false;lst=lst.subList(1); }}",
        "switched=!switched;}}",
        "switched=!switched; }}",
        "lst.remove(0); }}",
        "switched=false;lst=lst.subList(1);}}",
        "lst.remove(0); switched=false; }return result;}"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n<extra_id_0>\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "output": [
        "@ Override public doublepublic double) {return -1;}",
        "function ( ) { //return 0;}}",
        "function ( ) { //doublereturn -1;}",
        "@ Override public doublepublic double) {return -1; }}",
        "function ( ) { //doublereturn -1;;}",
        "@ Override public doublepublic double) {return -1;}",
        "@ Override public doublepublic double) {return -1;}}",
        "function ( ) { //doublereturn -1;return}",
        "function ( ) { //return 0;;}",
        "@ Override public doublepublic double) {return -1; //}}"
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    <extra_id_0>\n    return true;\n}",
      "function range": "20,5-34,5",
      "output": [
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])  if (q[i]return false;",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[j]",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])  if (q[i]!= q[j",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])return false;if (q[i]!=",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])  if (q[i]!=return false",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])  if (q[j]return false;",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])return false;if (q[i]",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])return false;if (q[i] ==",
        "i++; }if (q[i]!= q[j])  return false;if (q[i]!= q[j])  return false;if (q[i]!= q[j])return false;if (q[j]!="
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "output": [
        "for(int i=0; i<arr.length; i++) {",
        "for (int i=0; i<arr.length; i++){",
        "for(int i = 0; i<arr.length;i++){",
        "for(int i=0; i<arr.length; i++){",
        "for (int i=0;i<arr.length;i++) {",
        "for(int i=0;i<arr.length;i++) {",
        "for(int i=0;i<arr.length; i++) {",
        "for (int i = 0;i<arr.length;i++){",
        "for(int i = 0;i<arr.length;i++) {",
        "for (int i=0;i<arr.length; i++) {"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    <extra_id_0>\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "output": [
        "for (String st : lst2)}",
        "for(String st : lst2)}",
        "for (String st : lst2)return lst1;}",
        "for (String st : lst2)return lst1;",
        "for(String st : lst2)return lst1;}",
        "for(String st : lst2)return lst1;",
        "for (String st : lst2)return lst2;}",
        "for (String st : lst2)return lst1; }",
        "for(String st : lst2)return lst1; }",
        "for(String st : lst2)return lst2;}"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            <extra_id_0>\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "output": [
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))if(!is_prime(",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))return false;if(!is_",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))returnif(!is_prime",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))return false;if(is_prime",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))return false;if(!is",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))return true;if(!is",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))returnreturn false;if(!",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))return true;return false;}",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))returnreturn false;if(a",
        "for(int k = 2; k<a;k+=1){if(!is_prime(a)) return true;return false;if(!is_prime(a)) return false;if(!is_prime(a))return true;if(a=="
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n    <extra_id_0>\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "output": [
        "int power = 1;",
        "int power =",
        "double power = 1;",
        "int power=1;",
        "int power = 2;",
        "int power = n;",
        "int power =1;",
        "int power = 0;",
        "int power = 1 ;",
        "double power=1;"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n    <extra_id_0>\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "output": [
        "//",
        "double root = a;",
        "double root = 1.0;",
        "int root = a;",
        "double root = 0.5;",
        "double root = 0.0;",
        "double root = 10.0;",
        "double root=a;",
        "double root = a*a;",
        "//double root = a;"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "output": [
        "//",
        "System.out.print(c);",
        "System.out.println(c);",
        "if(c == '0')",
        "if(c.equals(0))",
        "if(c<0x80)",
        "result += c;",
        "if(c==0x80)",
        "if(c==0)",
        "++result;"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n    <extra_id_0>\n    return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "output": [
        "String result = decimal.toString();",
        "String result = decimal;",
        "String result = decimal.toString(); //",
        "String result = Integer.toString(decimal);",
        "String result = decimal.toString(16);",
        "int result = decimal.toString();",
        "String result = decimal; //",
        "String result = decimal.toBinary();",
        "int result = decimal;",
        "String result = decimal.toString();"
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        <extra_id_0>\n            return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "output": [
        "if(s.charAt(i)!=0)}",
        "if(is_happy(s.charAt(i)))}",
        "if(s.charAt(i)!=0)",
        "if(is_happy(s.charAt(i)))}",
        "if(!is_happy(s.charAt(i)))}",
        "if(is_happy(s.charAt(i)))}",
        "if(!is_happy(s.charAt(i)))}",
        "if(is_happy(s.charAt(i)))",
        "if(is_happy(s,s.charAt(i)))}",
        "if(!is_happy(s.charAt(i)))"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        <extra_id_0>\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "output": [
        "if (gpa > 0.3)\n            letter_grade[i] =\"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+ 1) {= 0; i < grades.length;",
        "if (gpa > 0.3)\n            letter_grade[i]= \"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+ 1) {= 0; i < grades.length;",
        "if (gpa > 0.3)\n            letter_grade[i] =\"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+= 1) {= 0; i < grades.length",
        "if (gpa > 0.3)\n            letter_grade[i]= \"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+= 1) {= 0; i < grades.length",
        "if (gpa > 0.3)\n            letter_grade[i] =\"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+ 1) {= 0; i <++) {",
        "if (gpa > 0.3)\n            letter_grade[i]= \"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+ 1) {= 0; i <++) {",
        "if (gpa > 0.3)\n            letter_grade[i] =\"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+= 1) {= 0; i <++)",
        "if (gpa > 0.3)\n            letter_grade[i]= \"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+= 1) {= 0; i <++)",
        "if (gpa > 0.3)\n            letter_grade[i] =\"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+= 1) {= 0; i <= 0",
        "if (gpa > 0.3)\n            letter_grade[i]= \"C-\";= 0; i < grades.length;+ 1) {= 0; i < grades.length;+= 1) {= 0; i <= 0"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        <extra_id_0>\n            return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "output": [
        "if(string.charAt(i)!=string.charAt(i))}",
        "if(string.charAt(i)==0)}",
        "if(string.charAt(i)!=string.charAt(i))",
        "if(string.charAt(i)!=0)}",
        "if (string.charAt(i)!=string.charAt(i))}",
        "if(string.charAt(i)!=string.charAt(i))return false;}",
        "if(string.charAt(i)!=string.charAt(i))return true;}",
        "if(string.charAt(i)!=string.charAt(i)) public static boolean}",
        "if(string.charAt(i)!=string.charAt(i)) public static booleanreturn",
        "if(string.charAt(i)!=0)"
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    <extra_id_0>\n}",
      "function range": "7,5-11,5",
      "output": [
        "else return n - 1;",
        "else\n        = n; return",
        "if (n == 2) return",
        "return n - 1; }",
        "else if (n == 2)return",
        "else return n; }",
        "if ( n == 2)return",
        "else return n ; }",
        "if (n == 2)\n       ",
        "else if (n == 2)"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        <extra_id_0>\n    }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "output": [
        "sum +=",
        "sum+=",
        "sum++;",
        "sum +=",
        "++sum;",
        "sum +=1;",
        "sum+=1",
        "sum += N*",
        "sum++)",
        "sum *="
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    <extra_id_0>\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "output": [
        "for(int i=0;i<lst.length;i++){",
        "for(int i=0;i<lst.length;i++) {",
        "for(int i=0;i<lst.length;i++)",
        "for (int i=0;i<lst.length;i++){",
        "for(int i=0; i<lst.length;i++){",
        "for(int i=0;i<lst.length; i++){",
        "for(int i=0;i<lst.length;++i){",
        "for(int i=0;i<lst.length; i++) {",
        "for (int i=0;i<lst.length;i++) {",
        "for(int i:lst) {"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        <extra_id_0>\n}",
      "function range": "17,5-25,5",
      "output": [
        "} return",
        "}return",
        "return",
        "result +=",
        "}",
        "return result;",
        "//result +=",
        "//return",
        "} ",
        ""
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        <extra_id_0>\n            }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "output": [
        "{result.add(lst.get(i));}",
        "{result.add(lst.get(i));return result;",
        "result.add(lst.get(i));",
        "{result.add(new Tuple(x, lst.get(i)))",
        "{result.add(new Tuple(x, lst.get(i));",
        "{ result.add(lst.get(i));",
        "{result.add(new Tuple(x,lst.get(i));",
        "{result.add(new Tuple(x,lst.get(i)))",
        "{result.add(lst.get(i));return result; }",
        "{result.add(lst.get(i));result.add(x);"
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            <extra_id_0>\n        }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "output": [
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1]){",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1])\n",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-2]){",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1])return array",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0]!= array[array.length-1]){",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1]) {",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1]){",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1])return",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1]){ return",
        "if(array[i] == array[i+1]) return array;if(array.length%2==1){if(array[0] == array[array.length-1]){if(array[0] == array[array.length-1]){\n"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                <extra_id_0>\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(c",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(0",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(c-d.charAt(c",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(c)-d.charAt(c",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(0",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(c-d.charAt(c-d.charAt(c",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(c-d.length()-1",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.length()-1",
        "d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c)-d.charAt(c-d.charAt(c-d.charAt(0"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n    <extra_id_0>\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "output": [
        "ArrayList numbers=new ArrayList();",
        "List numbers=new ArrayList();",
        "List numbers = new ArrayList();",
        "ArrayList numbers=new ArrayList();}",
        "ArrayList numbers = new ArrayList();",
        "List numbers=new ArrayList();}",
        "ArrayList numbers=new ArrayList(); public void",
        "List numbers = [];",
        "int[] numbers=new int[]();",
        "List numbers=new ArrayList(); public void"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        "//",
        "//}",
        "//return result;",
        "//return 0;",
        "//return",
        "//",
        "//TODO:",
        "// TODO:",
        "////",
        "/*"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n    <extra_id_0>\n            return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "output": [
        "if (x == y) {",
        "if (x < y) {",
        "if (z == 0) {",
        "if (x == 0) {",
        "if(x == y) {",
        "if (x<y) {",
        "if(x == 0) {",
        "if (z == 0.0){",
        "if(x == y &&z ==",
        "if (x<y) { //"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        <extra_id_0>\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "output": [
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);= (char) ((int) message.toLowerCase()).charAt",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toUpperCase()).charAt(0);= (char) ((int) message.toLowerCase()).charAt",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);if (message.toLowerCase().charAt(0)) {=",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);if (message.toUpperCase().charAt(0)) {=",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);if (message.toLowerCase().charAt(0)) {\n           ",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toUpperCase()).charAt(0);if (message.toLowerCase().charAt(0)) {=",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);if (message.toLowerCase().charAt(1)) {=",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toUpperCase()).charAt(0);if (message.toUpperCase().charAt(0)) {=",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);if (message.toLowerCase().charAt(0)) {c",
        "if (Character.isLowerCase(c)) {if (message.toLowerCase().equals(message.toLowerCase())) {= (char) ((int) message.toLowerCase()).charAt(0);if (message.toUpperCase().charAt(0)) {c"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "22,5-35,5",
      "output": [
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if(is_prime(lst[i])){ result += c.charCode",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if (is_prime(lst[i])){ result += c.charCode",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if (is_prime(lst[i])){result += c.char",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if(is_prime(lst[i])){ result += c;\n           ",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if(is_prime(lst[i])){ result += c;}",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if(is_prime(lst[i])){ result += c;}",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if (is_prime(lst[i])){result += c;",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if (is_prime(lst[i])){ result += c;}",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if (is_prime(lst[i])){result += c;\n",
        "result += c.charCodeAt(0);if (is_prime(lst[i])){if (is_prime(lst[i])){ result += c.charCodeAt(1);if (is_prime(lst[i])){result += c;}"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            <extra_id_0>\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "output": [
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key))state = \"mixed\";else if (str_key.",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key)) {state = \"mixed\";else if (str_key",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key)) {state = \"mixed\";state = \"mixed\";",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key)) {state = \"mixed\";else {state = \"",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key))state = \"mixed\";else {state = \"mixed",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toLowerCase().equals(str_key)) {state = \"mixed\";else {state = \"",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key)) {state = \"mixed\";else {state =",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key))state = \"mixed\";state = \"mixed\";else",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key)) {state = \"mixed\";else {= \"mixed",
        "} else {String state = \"start\";if (state.equals(\"start\")) {if (state.equals(\"start\")) {if (str_key.toUpperCase().equals(str_key)) {state = \"mixed\";else ifstate = \""
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        <extra_id_0>\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "output": [
        "if(is_prime){ primes.add(i);",
        "if(is_prime){ primes.add(i);}",
        "if(is_prime){ primes.add(i); public",
        "if(is_base) { public void}",
        "if(is_domain) { public void}",
        "if(is_base) { public void",
        "if(is_base) {}",
        "if(is_base) {",
        "if(is_prime){}",
        "if(is_prime){ public void}"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n    <extra_id_0>\n}",
      "function range": "13,5-15,5",
      "output": [
        "return a * b ;",
        "return a * b; }",
        "return a * b;",
        "return a * b; //",
        "r eturn a * b",
        "return a * b",
        "return a*b; }",
        "int x = a *",
        "return b * a ;",
        "return a*b ; }"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        <extra_id_0>\n            count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "output": [
        "//}",
        "//return count;",
        "//",
        "// public int",
        "//return count; }",
        "//return count;}",
        "//return count; //}",
        "// public static int",
        "//return",
        "// private void"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    <extra_id_0>\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "output": [
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(0,value.length()-1);",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(0,value.length()-1));",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(0,value.length()-1);\n",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(value.length()-1));value.",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if(value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(value.length()-1));value.",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(0,value.length()-1));\n",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(value.length()-1);value.",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(value.length() - 1));value.",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(value.length() - 1);value.",
        "if(value.length() == 0){ result =(int)Math.ceil(num);if (value.indexOf('.') >= 0){value.substring(0,value.length()-1);value.substring(0,value.length()-1); }"
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  <extra_id_0>\n\t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "output": [
        "pile.add(i);",
        "pile.add(i); //",
        "pile.add(i); }",
        "pile.add(i); //}",
        "pile.add(i);//",
        "pile.add(0);",
        "pile.add( i);",
        "pile.add(0); //",
        "pile.add(new Integer());",
        "//pile.add(i);"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n <extra_id_0>\n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "output": [
        "String s_list=s.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split",
        "String s_list=s.trim().split(\"\\\\s+\");s_list = s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");\n\tfor(",
        "String s_list=s.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");\n\tresult.add(s_",
        "String s_list=s.trim().split(\"\\\\s+\");s_list = s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list",
        "String s_list=s.trim().split(\"\\\\s+\");s_list = s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");\n\tresult.",
        "String s_list=s.trim().split(\"\\\\s+\");s_list = s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().trim().split(\"\\\\s+\");\n\t",
        "String s_list=s.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");\n\tfor(String r :",
        "String s_list=s.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().trim",
        "String s_list=s.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");\n\tresult.add(s);",
        "String s_list=s.trim().split(\"\\\\s+\");s_list = s_list.trim().split(\"\\\\s+\");s_list.trim().split(\"\\\\s+\");s_list.trim().trim().split(\"\\\\s+\");s"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n    <extra_id_0>\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "output": [
        "//",
        "/*",
        "return x;",
        "return y;",
        "//TODO:",
        "// TODO:",
        "////",
        "////",
        "//TODO",
        "// //"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        <extra_id_0>\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "output": [
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.floor(avg/(double)",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.ceil(avg/(double)",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.ceil(avg_rounded);\n",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.floor(avg/(double)(",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.floor(avg);\n}",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.floor(avg/(double) (",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.floor(avg/(double)m",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.ceil(avg);\n}",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.ceil(avg/(double)m",
        "avg_rounded = (int) Math.floor(avg);return Integer.toBinaryString(avg);}  public staticint( int i = 0;i < m; i++) {= (int) Math.ceil(avg/(double)("
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            <extra_id_0>\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "output": [
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)) {if(res.contains(i)) { res.add(i);",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)) {if(res.contains(i)){res.add(i);",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)) {if(res.contains(i)) {if(res.contains",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)){res.add(i);return res;}if(res.size",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)){res.add(i);return res;}if(res.contains",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)){res.add(i);return res;}if(!all_",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)) {if(res.contains(i)) {if(res.size",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)) {if(res.contains(i)) { res.add(i)",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)){res.add(i);return res;}if(!res.",
        "if(curr_digit == 0) { all_odd=false;ArrayList<Integer>= new ArrayList<Integer>();for(int i:x) {if(res.contains(i)) {if(res.contains(i)){res.add(i)"
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        <extra_id_0>\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "output": [
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));{ result.add(digit_map.get(num));}",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));if(digit_map.containsKey(num)) { result.add",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));} else { result.add(digit_map.get(num));",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));result.add(digit_map.get(num));}",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));{ result.add(digit_map.get(num)); }",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));result.add(digit_map.get(num));} }",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));result.add(digit_map.get(num));} return",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));{ result.add(digit_map.get(num)); //}",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));result.add(digit_map.get(num)); }}",
        "if(digit_map.containsKey(num)) {for(int num : a) {if(digit_map.containsKey(num)) { result.add(digit_map.get(num));{ result.add(digit_map.get(num));if"
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            <extra_id_0>\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "output": [
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;}",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;; }",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;( ) ; }}",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;( ) ; }}( ) ;( ) ;",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;( ) ;}( ) ;( ) ; }",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;( ) ;( ) ;( ) ;( ) ;",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;( ) ;( ) ;( ) ;( )",
        "for(int j = 1; j<=i; j++)x*=j;}  public static ArrayList<Integer>( ) {( ) ;return ret; }( ) ;( ) ;}( ) ;( ) ; }",
        "\n            for(int j = 1;j<=i;j++)x*=j;return ret; }  public( ) {( ) ;return ret; }( ) ;( ) ;}( ) ;( ) ;("
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        <extra_id_0>\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "output": [
        "even_palindrome_count++; odd_palindrome_count++;",
        "odd_palindrome_count++; even_palindrome_count++;",
        "even_palindrome_count++; odd_palindrome_count++;}",
        "odd_palindrome_count++;",
        "odd_palindrome_count++; public void",
        "odd_palindrome_count++; //",
        "even_palindrome_count += i;",
        "odd_palindrome_count++; public",
        "even_palindrome_count +=",
        "odd_palindrome_count++; // public void"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        <extra_id_0>\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "output": [
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i) == '0",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i)if(num_string.charAt(i)if(num_string.",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) > '0')if(num_string.charAt(i) > '0",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i) == '1",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i)if(",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i)0;",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i) ==if",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i) ==else",
        "//for(int i=0; i<num_string.length(); i++) {if(num_string.charAt(i)if(num_string.charAt(i) == '0')if(num_string.charAt(i) ==0"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    <extra_id_0>\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "output": [
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0))if(arr_after_move.get(0)!= sorted_arr.get(0)) {return false;",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0)) {if(arr_after_move.get(0)!= sorted_arr.get(0)) {return false",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0)) {if(arr_after_move.get(0)!= sorted_arr.get(0))return false;",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0)) {if(arr_after_move.get(0)!= sorted_arr.get(0)) {\n           ",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0))if(arr_after_move.get(0)!= sorted_arr.get(0))return false;\n",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0)) {if(arr_after_move.get(0)!= sorted_arr.get(0)) {return",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0)) {if(arr_after_move.get(0)!= sorted_arr.get(0)) {}",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0)) {if(arr_after_move.get(0)!= arr_after_move.get(0)) {",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0))if(arr_after_move.get(0)!= sorted_arr.get(0))return false;",
        "int min_value = sorted_arr.get(0);if(arr_after_move.get(0)!= sorted_arr.get(0))if(arr_after_move.get(0)!= sorted_arr.get(0)) {\n           return"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    <extra_id_0>\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "output": [
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) {return \"NO\";",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst1.size()>0) {return \"NO\";",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) return \"NO\";return \"",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) return \"NO\";}",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) return \"YES\";return \"",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) returnreturn \"NO\";",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) return \"NO\";return",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst2.size()>0) return \"YES\";return",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst1.size()>0) return \"YES\";return \"",
        "for(int i : lst1) {odd++; public static String exchange(ArrayList<Integer>ArrayList<Integer> lst2) {if(lst2.size()>0) {if(lst1.size()>0) return \"NO\";return \""
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        <extra_id_0>\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "output": [
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] > most_count",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] < most_count",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] == most_count",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(c'a' + i), most_count",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(c == 'a') res.put((char",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] == 0)",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] == 0) res",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] == 0) {",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] =={",
        "if(count_letter[i] > most_count) {for(int i = 0; i< list_letters.length; i++) {char c = list_letters[i].charAt(0);if(count_letter[i] >{"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        <extra_id_0>\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "output": [
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {new_s.charAt(i",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(s.charAt(i)!= c.charAt(i)) {new_s.charAt(i);\n",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {if(reverse_s.charAt",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {if(s.charAt(i",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {if(reverse_s.length()",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {if(new_s.length()",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(s.charAt(i)!= c.charAt(i)) {new_s.charAt(i);",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(s.charAt(i)!= c.charAt(i)) {new_s.length() - 1; i",
        "if(s.charAt(i)!= c.charAt(i)) {if(reverse_s.equals(reverse_s)) {if(reverse_s.charAt(i)!= c.charAt(i)) {new_s.substring(i,"
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            <extra_id_0>\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "output": [
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {int digit = s.charAt(i); if(digit!=0)if(digit!=0)",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {int digit = s.charAt(i); if(digit!=0)if(digit!=0){",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {if(s.charAt(i)!= '0') {s.charAt(i)!= '0",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {if(s.charAt(i)!= '0') {s.charAt(i) == '0",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {if(s.charAt(i)!= '0') {s.charAt(i).length(); i",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {int digit = s.charAt(i); if(digit!=0)result.add(\"the digit",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {int digit = s.charAt(i); if(digit!=0)result.add(\"the+",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {if(s.charAt(i)!= '0') {s.charAt(i).length();",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {int digit = s.charAt(i); if(digit!=0)result.add(\"the digit \"",
        "if(digit!= 0) { n++;for(String s : lst) {for(int i=0; i<s.length(); i++) {if(s.charAt(i)!= '0') {s.charAt(i) == '1"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        <extra_id_0>\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "output": [
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));}",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));=",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));\n",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));max",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));if",
        "s += num;if(max_sum == 0) {max_sum = -nums.get(nums.size() - 1);max_sum = Math.max(max_sum, -nums.get(nums.size() -nums.get(nums.size",
        "s += num;if(max_sum == 0) {max_sum = -nums.get(nums.size() - 1);max_sum = Math.max(max_sum, -nums.get(nums.size() -nums.size() - 1);",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));{",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size() - 1);max_sum = Math.max(max_sum, -nums.get(nums.size() -nums.size",
        "s += Math.abs(num);if(max_sum == 0) {max_sum = -nums.get(nums.size()-1);max_sum = Math.max(max_sum, -nums.get(nums.size()-1));0"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        <extra_id_0>\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "output": [
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i];}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public int}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; private int}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public static int}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public intint}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public static intint}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; publicintint}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public intint{}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public staticintint}",
        "for(int i=0;i<grid.length;i++) { row_capacity+=grid[i]; public intintint}"
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      <extra_id_0>\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "output": [
        "return 0; }}",
        "return 0; }return 0;}",
        "return 0; //}}",
        "return 0; }return 0; }",
        "return 0; }return 0; //}",
        "return 0; }return 0;\n}",
        "return 0; }else}",
        "return 0; }else {}",
        "return 0; }elsereturn 0;",
        "return 0; }else return 0;}"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        <extra_id_0>\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "output": [
        "//if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);",
        "//if(words[i].length() > n) result.add(words[i]);if(words[i].length() > n) result.add(words[i]);if(words[i].length() > n) result.add(words[i]);",
        "//if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);if(words[i].charAt(j) == words[i].charAt(j",
        "//if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);\n",
        "//if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);}",
        "//if(words[i].length() == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);if(",
        "//if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);if",
        "//if(words[i].length() == n) result.add(words[i]);if(words[i].length() == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);return",
        "//if(words[i].length() > n) result.add(words[i]);if(words[i].length() > n) result.add(words[i]);if(words[i].length() > n) result.add(words[i]);\n",
        "//if(words[i].length() == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);if(num_consonants == n) result.add(words[i]);return result"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    <extra_id_0>\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "output": [
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))if(!vowels.contains",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i-1)))if(!vowels.contains",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))if(vowels.contains(",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))word.charAt(i+",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i-1)))if(vowels.contains(",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))word.substring(i, i",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))word.substring(i,",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))word.substring(i+2",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2))) {\n           word.substring(",
        "for(int i=0;i<word.length();i++) {if(!vowels.contains(word.charAt(i+1))) {\n            if(!vowels.contains(word.charAt(i+2)))word.substring(i+1"
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": [
        "f u n c tion(){",
        "functi o n ( e",
        "f u n c tion(){}",
        "functi o n ( )",
        "funct i o n (",
        "functi o n ( t",
        "public partial class C {",
        "f u n c tion()",
        "functi o n ( a",
        "blic c l ass C"
      ]
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    <extra_id_0>\n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "output": [
        "for(int i=0;i<arr.size();i++) {",
        "for(int i=0;i<k;i++) {",
        "for(int i=0;i<arr.size();i++){",
        "for(int i=0;i<k;i++){",
        "for(int i=0;i<k;i++) { //",
        "for (int i=0;i<k;i++) {",
        "for (int i=0;i<arr.size();i++) {",
        "for(int i=0;i<arr.size(); i++) {",
        "for(int i=0;i<k; i++) {",
        "for(int i=0;i<k;++i) {"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        <extra_id_0>\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "output": [
        "{",
        "if(lst.contains(i)) {",
        "if(lst.contains(i)){",
        "if(!lst.contains(i)) {",
        "if(lst.get(i)) {",
        "if(!lst.contains(i)){",
        "if(i!=0){",
        "//",
        "//{",
        "// {"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        <extra_id_0>\n        }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "output": [
        "result++;",
        "result ++;",
        "result++; //",
        "result++) {",
        "++result;",
        "result +=",
        "result++ ;",
        "//",
        "result++",
        "{"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    <extra_id_0>\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "output": [
        "else {return result;}",
        "else {}",
        "else {return result; }",
        "else {if((n%2) == 1)}",
        "else {if((n%2) == 1)return",
        "else {if((n % 2) ==return result;",
        "else {if((n%2) == 0)return",
        "else {return null;}",
        "else {if((n % 2) ==return",
        "else {return result;"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            <extra_id_0>\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "output": [
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;",
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return true;",
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return}",
        "if(month == month_check1[i]) return false;} catch (Exception e) {if(date_info.length > 3) return false;if(date_info.length > 4) return false;if(date_info.length >return false",
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {} catch (",
        "if(month == month_check1[i]) return false;} catch (Exception e) {if(date_info.length > 3) return false;if(date_info.length > 4) return false;if(date_info.length >return",
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {returnreturn",
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return;",
        "if(month == month_check1[i]) return false;} catch (Exception e) {if(date_info.length > 3) return false;if(date_info.length > 4) return false;if(date_info.length >{",
        "if(month == month_check1[i]) return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {return false;} catch (Exception e) {returntrue"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            <extra_id_0>\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "output": [
        "count++;String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\"",
        "count++;String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",",
        "count++;String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result= {txt.split(\";\"",
        "count++;String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\"",
        "count++;String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result ={txt.split(\"",
        "count++;String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\",\"",
        "count++;String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result{txt.split(\";\"",
        "count++;String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\"",
        "count++;String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";\");String[] result = {txt.split(\";",
        "count++;String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\",\");String[] result = {txt.split(\";"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        <extra_id_0>\n    }\n    return true;\n}",
      "function range": "22,5-37,5",
      "output": [
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i+1])",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i+1]);",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i+1]",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i] +",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i+1]))",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i]) +",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i]));",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i])}",
        "//\n        count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; i< lst.length-1; i++)if(count_num.get(lst[i]) >",
        "//count_num.put(lst[i], count_num.get(lst[i+1]) + 1);for(int i = 0; ii++) { //count_num.put(lst[i], count_num.get(lst[i] + 1"
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n    <extra_id_0>\n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "output": [
        "//",
        "//var",
        "//return",
        "/*",
        "// return",
        "////",
        "//TODO:",
        "// TODO:",
        "//TODO",
        "int"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        <extra_id_0>\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "output": [
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0) prod0;0; i++) {\n       ",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0) prod =0;0; i++) {\n       ",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0)0;0; i++) {\n        sum",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] ==0) prod = 0;0; i++) {\n       ",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0)0;0; i++) {\n       }",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0)0;0; i++) {\n       sum",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0) prod0;0; i++) {\n        sum",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0)0;0; i++) {\n       prod",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0)0;0; i++) {\n        prod",
        "else prod += Math.abs(arr[i]);for(int i =0; i < arr.length; i++)Math.abs(arr[i]);\n   if(arr[i] == 0)0;0; i++) {\n       ="
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                <extra_id_0>\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "output": [
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {\n           if(grid[i][j] == 1) ans[i] =else ans[i] = val;",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {if(grid[i][j] == 1) ans[i]else ans[i] = val;\n           ",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {if(grid[i][j] == 1) ans[i] =else ans[i] = val;\n           ",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {\n           if(grid[i][j] == 1) ans[i]1;\n            else ans[i]",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {\n           if(grid[i][j] == 1) ans[i]else ans[i] = val;\n",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {\n           if(grid[i][j] == 1) ans[i]else ans[i] = val;",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {if(grid[i][j] == 1) ans[i] =else ans[i] = val;}",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {if(grid[i][j] == 1) ans[i] =else ans[i]= val;\n",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {if(grid[i][j] == 1) ans[i] =else ans[i] = val;=",
        "val += grid[i][j];int[] ans = new int[k];for(int i = 0; i< k; i++) {if(grid[i][j] == 1) ans[i] =else ans[i] = val;if"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    <extra_id_0>\n    }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "output": [
        "return sequence; public int}",
        "return sequence;",
        "return sequence; public void}",
        "return sequence; public void",
        "return sequence; public int",
        "return sequence; public static int}",
        "if(n == 1) {",
        "if(n == 1) {}",
        "return sequence;}",
        "return sequence; public static int"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    <extra_id_0>\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "output": [
        "while(n>10){",
        "while(n%10==0) {",
        "while(n>10) {",
        "while(n>10){ public int",
        "while(n%10==0){",
        "while(n%10!=0){",
        "while(n>0) {",
        "while(n>=10){",
        "while(n%10==0){}",
        "while(n>10) { public int"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    <extra_id_0>\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "output": [
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i))) {",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i) == ']')",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i)if(",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i))if(",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i)) {if(opening_brackets.contains(brackets.charAt(i)) {if(",
        "if(opening_brackets.contains(brackets.charAt(i)) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i)) {if(",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i)) {if",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i)) {}",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i))) {if(opening_brackets.contains(brackets.charAt(i)))if",
        "if(opening_brackets.contains(brackets.charAt(i))) {if(closing_brackets.contains(brackets.charAt(i)) {if(opening_brackets.contains(brackets.charAt(i))) {if"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n    <extra_id_0>\n    }\n    return result;\n}",
      "function range": "16,5-22,5",
      "output": [
        "long result = sum_squared_nums(lst); if(result==0) {",
        "double result = sum_squared_nums(lst); if(result==0) {",
        "long result = sum_squared_nums(lst); if(result<0) {",
        "double result = sum_squared_nums(lst); if(result<0) {",
        "Long result = sum_squared_nums(lst); if(result==0) {",
        "long result = sum_squared_nums(lst); if(result==0)",
        "double result = sum_squared_nums(lst); if(result==0)",
        "long result = sum_squared(lst); if(result==0) {",
        "long result = sum_squared_nums(lst); if(result==0){",
        "double result = sum_squared(lst); if(result==0) {"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    <extra_id_0>\n}",
      "function range": "18,5-26,5",
      "output": [
        "return last.charAt(0) ==",
        "return last.charAt(last.length()) ==",
        "return last.length() > 0;",
        "return last.length() > 0 ;",
        "return last.charAt(0)==",
        "return last.charAt(0) == '",
        "return last.length() == 1;",
        "return parts[last.length()-1] ==",
        "return last.length() > 0; //",
        "return last.length() =="
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n    <extra_id_0>\n    }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "output": [
        "for(int ind=0; ind<arr.length; ind++) {",
        "int ind = Arrays.binarySearch(arr,\n   ); if(ind==-1)",
        "for (int ind=0; ind<arr.length; ind++) {",
        "int ind = Arrays.binarySearch(arr,\n   ); if(ind==-1){",
        "int ind = Arrays.binarySearch(arr,\n   ); if(ind<0)",
        "for (int ind=0;ind<arr.length; ind++) {",
        "for(int ind = 0; ind<arr.length; ind++){",
        "int ind = Arrays.binarySearch(arr,\n   ); if(ind<0){",
        "for(int ind = 0; ind<arr.length;ind++){",
        "for (int ind=0; ind<arr.length; ind++){"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n    <extra_id_0>\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "output": [
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst)}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public int}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst){}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(){}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public int public int}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst,inti) public static void{}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst,inti) public static int{}",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst,inti) public static void{int i=0;i<",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst,inti) public static int{int i=0;i<",
        "if(lst[i] < 0) {max_negative=Math.max(max_negative, lst[i]); public static int[] largest_smallest_integers(int[] lst,inti) public static void{int i=0; i<"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    <extra_id_0>\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "output": [
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string = temp_a_string.replace(',',temp_b_string = temp_b_string.replace",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string = temp_a_string.replace(',',temp_a_string = temp_a_string.replace",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_b_string = temp_b_string.replace(',',temp_a_string = temp_a_string.replace",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',String temp_b_string = temp_b_string.replace(',',temp_a_string = temp_a_string.",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string = temp_a_string.replace(',', '.');\ntemp_b_string = temp_b_",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string = temp_a_string.replace(',', '.');\ntemp_a_string = temp_a_",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_b_string = temp_b_string.replace(',', '.');\ntemp_a_string = temp_a_",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string =temp_a_string = temp_a_string.replace(',', '.');\ntemp_b",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string =temp_a_string = temp_a_string.replace(',',temp_b_string =",
        "if(temp_a == temp_b) return a;String temp_a_string = temp_a_string.replace(',',temp_a_string =temp_b_string = temp_b_string.replace(',', '.');\ntemp_a"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n    <extra_id_0>\n}",
      "function range": "13,5-15,5",
      "output": [
        "return n%2 == 0 &&n%2==0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2!=0&&",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2!=0&&n",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2==0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2!=0&&n%",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2!=0&&n%2!=0&&n%2!=0&&n%2",
        "return n%2 == 0&& n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0",
        "return n%2 == 0&& n%2==0&& n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2!=0&&n%2==0",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2!=0&&n%2!=",
        "return n%2 == 0 &&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2==0&&n%2!=0&&n%2!=0&&n%2!"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    <extra_id_0>\n    }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "output": [
        "if(n > fact_i) { fact_i=n; special_fact=n;",
        "if (n > fact_i){ fact_i=n; special_fact=n;",
        "for(fact_i= fact_i; fact_i<n; fact_i++) {",
        "if(n > fact_i){ fact_i=n; special_fact=n;",
        "for(fact_i=0;fact_i<n;fact_i++) { special_fact *=",
        "for(fact_i=0;fact_i<n; fact_i++) { special_fact *=",
        "if(n > fact_i) { fact_i=n;",
        "for(fact_i=1;fact_i<n;fact_i++) { special_fact *=",
        "for(fact_i=0;fact_i<n;fact_i++){ special_fact *=",
        "if (n > fact_i) {"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    <extra_id_0>\n}",
      "function range": "13,5-37,5",
      "output": [
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += text.substring(i",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += text.substring(start",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                    new_text +=+ 1;\n                   ",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" ++ 1",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                    new_text +=\"_\";}",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                    new_text +=\"_\";new",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                    new_text +=+ 1;=",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                    new_text +=\"_\";=",
        "new_text += text.substring(i, i + 1);new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" + text.substring(i,+ 1);\n                   new_text += \"-\" ++"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    <extra_id_0>\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "output": [
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length() - 1);= file_name.substring(file_name.",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length() - 1);= file_name.substring(0,file_",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1);if(!file_name.endsWith(\".\"))",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1);if(!file_name.startsWith(\".\"))",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1);if(!file_name.equals(\"txt\"))",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1); if (file_name.length()return \"No",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1);if(!file_name.endsWith(\".txt",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1);if(!file_name.equals(\"txt\")||",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length()-1);if(!file_name.equals(\"txt\")",
        "if (!lst[0].equals(\"txt\") ||!lst[0].equals(\"exe\")||!lst[0].equals(\"dll\")))= file_name.substring(0,file_name.length() - 1);= file_name.substring(file_name"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        <extra_id_0>\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "output": [
        "if(lst[i]>0)",
        "if(lst[i] > 0)",
        "if(lst[i]!= 0)",
        "if(i>0)",
        "if(lst[i]>0)}",
        "if(i==0)",
        "if(i<2){}",
        "if(i<2)",
        "if(lst[i]>0){}",
        "if(i<8)"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        <extra_id_0>\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "output": [
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \"))= word.split(\"\");= word.split(\"\");",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \")) {= word.split(\"\");= word.split(\"\");",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \"))= word.split(\"\");= word.split(\" \");",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \")) {= word.split(\"\");= word.split(\"",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \")) {= word.split(\"\");= word.split(\" \"",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \")) {= word.split(\"\");word.split(\" \");",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\"\");if (word.length()= word.split(\" \"))",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \"))= word.split(\"\");word.split(\" \");",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \"))= word.split(\"\");= word.split(\"=",
        "for (int i:word.split(\" \")) {}  public staticString(String word) {if (word.length()= word.split(\"= word.split(\" \"))= word.split(\"\");= word.split(\"word"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    <extra_id_0>\n        return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "output": [
        "if (numerator == denom) {return false;}",
        "if (numerator == denom)false;return true;}",
        "if (numerator == denom)true;return false;}",
        "if (numerator == denom)false;return false;}",
        "if (numerator==denom)return true;return false; }",
        "if (numerator==denom)return false;return true;",
        "if (numerator==denom)return true;return false;}",
        "if (numerator == denom)true;return false;}",
        "if (numerator==denom)return false;return true;}",
        "if (numerator == denom)true;return false;return true;"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            <extra_id_0>\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "output": [
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (digits_number.containsKey(digit))",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (!digits_number.containsKey(digit))",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (!digits_number.containsKey(digits.",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (digits_number.containsKey(digits.",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (digits_number.containsKey(neg))",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (!digits_number.containsKey(digits_",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (!digits_number.containsKey(neg))",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (digits_number.containsKey(digits_",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (!digits.containsKey(digits.get(",
        "digit += n.charAt(j); }= 0; i < nums.length;= 0; i < nums.length;digits.addAll(digits_number.get(digits.get(i)));\nif (!digits.containsKey(digit)){"
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            <extra_id_0>\n                count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "output": [
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {",
        "//if (odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {",
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) { count",
        "//if (odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) { count",
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.indexOf(number_as_string)) {",
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) count +=",
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) { //",
        "//if (odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.indexOf(number_as_string)) {",
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string))count",
        "//if(odd_digits.contains(num)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)) {if(odd_digits.contains(number_as_string)){"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    <extra_id_0>\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "output": [
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[j]+A[k]%3==0)",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[j]+A[k]%3==0) result",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[j]+A[k]%3==0)result",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[j]+A[k]%3!=0)",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[i]+A[j]%3==0)",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[i]+A[j]+A[k]%",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[i]+A[j]%3==0) result",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[j]+A[k]%3==0) {",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[i]+A[j]%3==0)result",
        "for(int i=1;i<=n;i+=1) {if (A[i]+A[j]+A[k]%3==0) result+=1;if(A[i]+A[j]%3!=0)"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    <extra_id_0>\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        "if (planet1_index > planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet1_index = planet",
        "if (planet1_index == planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet1_index = planet",
        "if (planet1_index > planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet2_index = planet",
        "if (planet1_index == planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet2_index = planet",
        "if (planet1_index!= planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet1_index = planet",
        "if (planet1_index < planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet1_index = planet",
        "if (planet1_index!= planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet2_index = planet",
        "if (planet1_index < planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet2_index = planet",
        "if (planet1_index > planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet1_index =plan",
        "if (planet1_index == planet2_index)int planet1_index = planet_names.indexOf(planet1);int planet2_index = planet_names.indexOf(planet2);int planet1_index =plan"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        <extra_id_0>\n    );\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        "new StringComparator(StringComparator.COMPARATOR)); Collections.addAll(result,}",
        "new StringComparator(StringComparator.COMPARATOR)); Collections.add(result,}",
        "new StringComparator(StringComparator.COMPARATOR)); Collections.addAll(result,return result;}",
        "new StringComparator(StringComparator.COMPARATOR)); Collections.addAll(result,return result; }",
        "Comparator.comparing(String::compareTo)).addAll(}",
        "Comparator.comparing(String::compareTo)}",
        "new}",
        "newreturn result; }",
        "new StringComparator()}",
        "newreturn result;}"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        <extra_id_0>\n}",
      "function range": "11,5-17,5",
      "output": [
        "return x; }",
        "return}",
        "return y; }",
        "return",
        "return x;",
        "} return",
        "return x;}",
        "//return",
        "// return",
        "//"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                <extra_id_0>\n            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "output": [
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {double_the",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {result =",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {int d_",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {result;",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {int result =",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst){result +=",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)result;return",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {int result",
        "result += d_int;}  public static intdouble_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst)double_the_difference(double[] lst) {int d ="
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "12,5-20,5",
      "output": [
        "result[i] =",
        "result[i]=game[i];",
        "result[i] = guess[i];",
        "result[i] =",
        "result[i] = game[i];",
        "result[i]=guess[i];",
        "result[i]= guess[i];",
        "result[i] =game[i];",
        "result[i] =}",
        "//result[i] ="
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            <extra_id_0>\n    }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "output": [
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE)",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE)if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if (val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE)",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val!=Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE){",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val!=Integer.MIN_VALUE",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MAX_VALUE)",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val!=Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val!=Integer.MIN_",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if (val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE){",
        "val++; strong += Character.toUpperCase(c); }if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==Integer.MIN_VALUE) val=Integer.MIN_VALUE;if(val==0) val=Integer."
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    <extra_id_0>\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "output": [
        "if(pat.startsWith(b)) {",
        "if(a.startsWith(pat)) {",
        "if(pat.length()>i){}",
        "if(l>0){}",
        "if(pat.startsWith(b)){",
        "if(pat.length()>l){}",
        "if(pat.contains(b)) {}",
        "{",
        "{}",
        "//"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    <extra_id_0>\n    }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "output": [
        "if (num % 2) {",
        "if(num % 2) { even_count++;",
        "if(num % 2) { odd_count++;",
        "if(num > 0) { even_count++;",
        "if (num%2) { even_count++;",
        "if (num) { even_count++;",
        "if (num%2) { odd_count++;",
        "if (num > 0) {",
        "if (num%2) { odd_count =",
        "if(num % 2 == 0)"
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        <extra_id_0>\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "output": [
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase();}",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase(); }",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toUpperCase();}",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase(); //}",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toUpperCase(); }",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase();",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase();}",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase();; }",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {( ) ;) ; }",
        "result += sym[number/num[i]];return result.toUpperCase();}  public staticString() {) ; return result.toLowerCase(); //};"
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n    <extra_id_0>\n}",
      "function range": "12,5-14,5",
      "output": [
        "System. out. println(",
        "return a == b &&",
        "r eturn a == b;",
        "return a <= b <=c;",
        "System. out. println(\"",
        "return a <= b &&",
        "return a == b; //",
        "return a <= b <=",
        "return true ; //",
        "System. out. println"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            <extra_id_0>\n        }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "output": [
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length();words_list.get(0).length();words_list.get(",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length();words_list.get(0).length(); //return words_list.get",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length();words_list.get(0).length(); //returnwords_list.",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length(); //returnwords_list.get(0).length(); //return words_list",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length(); //returnwords_list.get(0).substring(0,words_list",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length(); //returnwords_list.get(0).substring(0, words_list",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length();words_list.get(0).length();",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length(); //returnwords_list.get(0).length(); //returnwords_",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length();words_list.get(0).length();words_list.size()",
        "//return s1.compareTo(s2); //return s2.compareTo(s1); //returnwords_list.get(0);words_list.get(0).length(); //returnwords_list.get(0).length(); //return//return"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n    <extra_id_0>\n}",
      "function range": "31,5-33,5",
      "output": [
        "return number - need ;",
        "return number - need -",
        "return new int [ need",
        "return number - need +",
        " public static int []",
        "return number + need +",
        "return number + need -",
        "return number ; }",
        "return number - need;",
        "return number ;"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    <extra_id_0>\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "output": [
        "if(engine==null) { return",
        "if(engine==null){ return",
        "if(expression==null) { return",
        "if(engine ==null) { return",
        "if(expression==null){ return",
        "if(engine == null){ return",
        "if(engine == null) { return",
        "if(expression == null) { return",
        "if(expression == null){ return",
        "if(engine == null) {"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        <extra_id_0>\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        "sb.append(c);if (flg == 1) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1));",
        "sb.append(c);if (flg == 0) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1));",
        "sb.append(c);if (flg == 1) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1));\n",
        "sb.append(c);if (flg == 0) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1));\n",
        "sb.append(c);if (flg == 1) {sb.append(s.charAt(0));sb.append(s.charAt(0));sb.append(s.charAt(0));sb.append(s.charAt(0",
        "sb.append(c);if (flg == 1) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1));}",
        "sb.append(c);if (flg == 0) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1));}",
        "sb.append(c);if (flg == 1) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1)); }",
        "sb.append(c);if (flg == 1) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1)); //}",
        "sb.append(c);if (flg == 0) {sb.append(s.charAt(0));sb.append(s.charAt(s.length()-1));sb.append(s.charAt(s.length()-1)); }"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    <extra_id_0>\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "output": [
        "MessageDigest md = MessageDigest.getInstance(\"MD5\");",
        "//",
        "Digest md = MessageDigest.getInstance(\"MD5\");",
        "byte[] md = MessageDigest.getInstance(\"MD5\");",
        "MD5 md = MessageDigest.getInstance(\"MD5\");",
        "MessageDigest md = MessageDigest.getInstance(\"md5\");",
        "MessageDigest md = MessageDigest.getInstance(MD5);",
        "md5.init(16);",
        "MD5 md = md5();",
        "else"
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    <extra_id_0>\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "output": [
        "////return result;",
        "////return result; //}",
        "//}",
        "// public void}",
        "////System.out.println(a);",
        "////System.out.println(upper);",
        "//return result; }",
        "//return result; //}",
        "//return result;}",
        "//return result;"
      ]
    }
  },
  "model": "codet5-base",
  "time": 86
}