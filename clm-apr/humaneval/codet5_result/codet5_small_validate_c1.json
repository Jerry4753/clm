{
  "config": "CODET5_BASE_CODEFORM_MASKFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            <extra_id_0>\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if(i==j)",
          "correctness": "uncompilable"
        },
        {
          "patch": "\u8c03\u7528",
          "correctness": "uncompilable"
        },
        {
          "patch": "\u89e3\u6790",
          "correctness": "uncompilable"
        },
        {
          "patch": "delete",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "probes",
          "correctness": "uncompilable"
        },
        {
          "patch": "e",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        <extra_id_0>\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
      "function range": "7,5-27,5",
      "output": [
        {
          "patch": "}else{",
          "correctness": "wrong"
        },
        {
          "patch": "}else{current_string",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else{current_depth",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else {current_string",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else {",
          "correctness": "wrong"
        },
        {
          "patch": "}else{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else{",
          "correctness": "wrong"
        },
        {
          "patch": "}else",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n    <extra_id_0>\n}",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "return truncate_number ( number,",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate_number ( number )",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate_number(number, false); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate_number(number, null); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate_number(number, true); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate_number( number ) ;",
          "correctness": "wrong"
        },
        {
          "patch": "return truncate_number(number, 0 ) ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate ( number,",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate_number(number) ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return truncate ( number )",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        <extra_id_0>\n}",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "} return balance > 0;",
          "correctness": "wrong"
        },
        {
          "patch": "} return balance <",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return balance >",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return balance >= 0;",
          "correctness": "wrong"
        },
        {
          "patch": "} return balance <=",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return balance >=",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return balance < 0;",
          "correctness": "wrong"
        },
        {
          "patch": "} return balance <= 0;",
          "correctness": "wrong"
        },
        {
          "patch": "} return balance == 0;",
          "correctness": "wrong"
        },
        {
          "patch": "} return balance ==",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        <extra_id_0>\n    }\n    return deviation_sum / numbers.size();\n}",
      "function range": "6,5-17,5",
      "output": [
        {
          "patch": "deviation_sum += number;",
          "correctness": "wrong"
        },
        {
          "patch": "ewt        deviation_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "prober        deviation_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "deviation_sum += number;",
          "correctness": "wrong"
        },
        {
          "patch": "goto deviation_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "probabilities_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "watermark        deviation_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "probes_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf        deviation_sum += number;",
          "correctness": "uncompilable"
        },
        {
          "patch": "deviation += number;",
          "correctness": "uncompilable"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    <extra_id_0>\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
      "function range": "7,5-19,5",
      "output": [
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(numbers.contains(i)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i:numbers.size());",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(numbers.contains(i)){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (i>0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>=0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            <extra_id_0>\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
      "function range": "7,5-24,5",
      "output": [
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "} }",
          "correctness": "uncompilable"
        },
        {
          "patch": "break; }",
          "correctness": "wrong"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;}",
          "correctness": "wrong"
        },
        {
          "patch": "}else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-13,5",
      "output": [
        {
          "patch": "result.add(string);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(substring);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string) ;",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string + substring);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string, substring);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string+substring);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string );",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n    <extra_id_0>\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
      "function range": "6,5-13,5",
      "output": [
        {
          "patch": "Integer[] result = new Integer[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "String[] result = new String[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer[] result=new Integer[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[] result = new Integer[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "String[] result=new Integer[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "String[] result = new Integer[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[] result = new Integer[];",
          "correctness": "uncompilable"
        },
        {
          "patch": "Integer[] result = new Integer[];",
          "correctness": "uncompilable"
        },
        {
          "patch": "int[] result=new Integer[]();",
          "correctness": "uncompilable"
        },
        {
          "patch": "String[] result=new String[]();",
          "correctness": "uncompilable"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        <extra_id_0>\n        result.add(running_max);\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "running_max = n;",
          "correctness": "wrong"
        },
        {
          "patch": "running_max=n;",
          "correctness": "wrong"
        },
        {
          "patch": "running_max = n ;",
          "correctness": "wrong"
        },
        {
          "patch": "running_max= n;",
          "correctness": "wrong"
        },
        {
          "patch": "running_max =n;",
          "correctness": "wrong"
        },
        {
          "patch": "running_max =",
          "correctness": "uncompilable"
        },
        {
          "patch": "running_max = n",
          "correctness": "uncompilable"
        },
        {
          "patch": "running_max",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    <extra_id_0>\n    return result;\n}",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewt",
          "correctness": "uncompilable"
        },
        {
          "patch": "endregion",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf",
          "correctness": "uncompilable"
        },
        {
          "patch": "efault",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    <extra_id_0>\n    return result;\n}",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "} //",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "} }",
          "correctness": "uncompilable"
        },
        {
          "patch": "};",
          "correctness": "wrong"
        },
        {
          "patch": "}//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}\"",
          "correctness": "uncompilable"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        <extra_id_0>\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
      "function range": "6,5-19,5",
      "output": [
        {
          "patch": "maxlen++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "maxlen ++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return string;",
          "correctness": "uncompilable"
        },
        {
          "patch": "maxLen++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "maxLen ++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "maxlen++){",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        <extra_id_0>\n    }\n    return a;\n}",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "b --;",
          "correctness": "wrong"
        },
        {
          "patch": "b -- ;",
          "correctness": "wrong"
        },
        {
          "patch": "--b;",
          "correctness": "wrong"
        },
        {
          "patch": "b --; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "b -= 1;",
          "correctness": "wrong"
        },
        {
          "patch": "b -= b;",
          "correctness": "wrong"
        },
        {
          "patch": "b >>= 1;",
          "correctness": "wrong"
        },
        {
          "patch": "b--;",
          "correctness": "wrong"
        },
        {
          "patch": "b -= a;",
          "correctness": "wrong"
        },
        {
          "patch": "a /= b;",
          "correctness": "timeout"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-15,5",
      "output": [
        {
          "patch": "result.add(string);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(string[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i]) ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i])",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i]))",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string[i] );",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(string) ;",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    <extra_id_0>\n}",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "return result;",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result ;",
          "correctness": "wrong"
        },
        {
          "patch": "return result",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result +",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result;\"",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnresult;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result);",
          "correctness": "uncompilable"
        },
        {
          "patch": "RETURN",
          "correctness": "uncompilable"
        },
        {
          "patch": "eturn",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            <extra_id_0>\n    }\n    return distinct.size();\n}",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ //",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ }",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    <extra_id_0>\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
      "function range": "8,5-20,5",
      "output": [
        {
          "patch": "for(String note: music_string) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(String note: music_string){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(String note: music_string);",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (String note: music_string){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (String note: music_string)",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (String note: music_string) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(String note: music_string)",
          "correctness": "uncompilable"
        },
        {
          "patch": "do {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    <extra_id_0>\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "while(i<string.length()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i<string.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (string.contains(substring)){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i < string.length()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while (i<string.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while (i<string.length()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while (true) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    <extra_id_0>\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
      "function range": "6,5-27,5",
      "output": [
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.put(\"three\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.put(\"three\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.put(\"four\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.put(\"four\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map.put(\"five\",value_map",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map);",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"three\",value_map.get(\"three\"));value_",
          "correctness": "wrong"
        },
        {
          "patch": "//value_map.put(\"zero\",value_map.put(\"zero\",value_map.put(\"one\",value_map.put(\"two\",value_map.put(\"three\",value_map.put(\"four\",value_map);",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        <extra_id_0>\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-24,5",
      "output": [
        {
          "patch": "//{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "new_distance = distance;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "new_distance = distance;{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "new_distance = distance;{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "new_distance = distance;={",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{",
          "correctness": "uncompilable"
        },
        {
          "patch": "new_distance = distance;{;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        <extra_id_0>\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
      "function range": "4,5-22,5",
      "output": [
        {
          "patch": "else {=}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {=return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {=return result;\nBRACE",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {0;\n   }",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {=return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {max) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {=return result;\nWarehouse",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {=return result;\nBridge",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {=return result;",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "result.add(value);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value.toString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value.intValue());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value) ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value.toString());",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add((Integer) value);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(new Integer(value));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value );",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(value.toString()) ;",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n    <extra_id_0>\n}",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "String\n = string.length(); return",
          "correctness": "uncompilable"
        },
        {
          "patch": "String\n = string.length; return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return string.length() - string.length(); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "String str = string.length; return",
          "correctness": "uncompilable"
        },
        {
          "patch": "String str = string.length(); return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return string.length() + string.length(); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return string.length() - string.length() -",
          "correctness": "uncompilable"
        },
        {
          "patch": "return string.length(); } public static",
          "correctness": "uncompilable"
        },
        {
          "patch": "return string.length() - string.length; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n    <extra_id_0>\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "int i = 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i = 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n>0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "int i = 1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n > 0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "int i = n;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n > 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n>0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    <extra_id_0>\n}",
      "function range": "7,5-21,5",
      "output": [
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result",
          "correctness": "uncompilable"
        },
        {
          "patch": "eturn",
          "correctness": "uncompilable"
        },
        {
          "patch": "returns",
          "correctness": "uncompilable"
        },
        {
          "patch": "Return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "RETURN",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        <extra_id_0>\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
      "function range": "8,5-22,5",
      "output": [
        {
          "patch": "count.put(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "count.add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "count.set(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "count.remove(n);",
          "correctness": "wrong"
        },
        {
          "patch": "count.get(n);",
          "correctness": "wrong"
        },
        {
          "patch": "count[n];",
          "correctness": "uncompilable"
        },
        {
          "patch": "count.put(n)",
          "correctness": "uncompilable"
        },
        {
          "patch": "Count.put(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "count._add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "count(n);",
          "correctness": "uncompilable"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            <extra_id_0>\n        }\n    }\n    return new String(char_list);\n}",
      "function range": "4,5-17,5",
      "output": [
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break ;",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "continue;",
          "correctness": "wrong"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n    <extra_id_0>\n    for (String string : strings)\n        result += string;\n    return result;\n}",
      "function range": "4,5-9,5",
      "output": [
        {
          "patch": "String result = \"\";",
          "correctness": "plausible"
        },
        {
          "patch": "String result = null;",
          "correctness": "wrong"
        },
        {
          "patch": "String result=\"\";",
          "correctness": "plausible"
        },
        {
          "patch": "String result =\"\";",
          "correctness": "plausible"
        },
        {
          "patch": "String result = '';",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = \"\" ;",
          "correctness": "plausible"
        },
        {
          "patch": "String result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = \"",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        <extra_id_0>\n            result.add(string);\n        }\n    }\n    return result;\n}",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "if (prefix) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (prefix == string){",
          "correctness": "wrong"
        },
        {
          "patch": "if(prefix == string){",
          "correctness": "wrong"
        },
        {
          "patch": "if(prefix==string){",
          "correctness": "wrong"
        },
        {
          "patch": "if (prefix==string){",
          "correctness": "wrong"
        },
        {
          "patch": "if (prefix){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!prefix) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "result.add(number);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(number); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(number );",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(number) ;",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(number); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result. add(number);",
          "correctness": "wrong"
        },
        {
          "patch": "result[number] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add (number);",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    <extra_id_0>\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        <extra_id_0>\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "if (begin<0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(begin<0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (begin>0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(begin>0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (begin<end) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(center<0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (begin==end) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (!begin) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            <extra_id_0>\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
      "function range": "8,5-25,5",
      "output": [
        {
          "patch": "result.add(i);",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "escapeshellarg",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "escapely",
          "correctness": "uncompilable"
        },
        {
          "patch": "escapers",
          "correctness": "uncompilable"
        },
        {
          "patch": "escapy",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        <extra_id_0>\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "8,5-17,5",
      "output": [
        {
          "patch": "result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(n );",
          "correctness": "wrong"
        },
        {
          "patch": "result.(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(n));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add (n);",
          "correctness": "wrong"
        },
        {
          "patch": "result. add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "result[n] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.Add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n    <extra_id_0>\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "int m=0;",
          "correctness": "wrong"
        },
        {
          "patch": "int m = 0;",
          "correctness": "wrong"
        },
        {
          "patch": "int m =",
          "correctness": "uncompilable"
        },
        {
          "patch": "int m =0;",
          "correctness": "wrong"
        },
        {
          "patch": "int m;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int m = m;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int m=1;",
          "correctness": "wrong"
        },
        {
          "patch": "int m = 1;",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "int m=m;",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            <extra_id_0>\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "4,5-16,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    <extra_id_0>\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
      "function range": "6,5-22,5",
      "output": [
        {
          "patch": "evtens=new int[l.length];}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//evens;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "EFaps evens;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "evtens=new int[][];}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//evens;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "evtens;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "EFaps evens;;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "EFaps evens;0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "evtens[0];}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    <extra_id_0>\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
      "function range": "8,13-26,13",
      "output": [
        {
          "patch": "while(i<s.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i<s.length()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i<s.length()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i>0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i:s.length());",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i>0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(i<s.length());",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        <extra_id_0>\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}",
      "function range": "16,5-29,5",
      "output": [
        {
          "patch": "//",
          "correctness": "timeout"
        },
        {
          "patch": "while(true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(len)",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "while (true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(len)",
          "correctness": "uncompilable"
        },
        {
          "patch": "return len;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "--;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        <extra_id_0>\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "21,5-31,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "try {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n    <extra_id_0>\n}",
      "function range": "14,5-16,5",
      "output": [
        {
          "patch": "return 0 ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n + 1 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n * n; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n - 1 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n * 2 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n * 2 +",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 1 ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n + 1 ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "result.add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(n );",
          "correctness": "wrong"
        },
        {
          "patch": "result.(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[n] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result. add(n);",
          "correctness": "wrong"
        },
        {
          "patch": "result.Add(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(n));",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.push(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.put(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        <extra_id_0>\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
      "function range": "10,5-18,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i==j)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (i==j)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i<j)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i==j) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int j:0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i<j) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "result += base;",
          "correctness": "timeout"
        },
        {
          "patch": "result += base; x --;",
          "correctness": "wrong"
        },
        {
          "patch": "result += base; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += base ;",
          "correctness": "timeout"
        },
        {
          "patch": "result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += base; x -=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result = \"",
          "correctness": "uncompilable"
        },
        {
          "patch": "result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += \"",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "timeout"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n    <extra_id_0>\n}",
      "function range": "8,5-10,5",
      "output": [
        {
          "patch": "return triangle_area(a, h); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return triangle_area(a,h); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a * h *",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a / h ;",
          "correctness": "wrong"
        },
        {
          "patch": "return a * h ;",
          "correctness": "wrong"
        },
        {
          "patch": "return a + h *",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0.0 ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a / h; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a * h ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    <extra_id_0>\n    return result.get(result.size() - 1);\n}",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return result.get(n);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return result.get(0);",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}result.get(n);",
          "correctness": "wrong"
        },
        {
          "patch": "}result.add(0);",
          "correctness": "wrong"
        },
        {
          "patch": "}return}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}0;",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        <extra_id_0>\n    }\n}",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return 0 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return -",
          "correctness": "uncompilable"
        },
        {
          "patch": "return list;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        <extra_id_0>\n}",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "return is_palindrome(text[i]) ; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return is_palindrome(text[i]); } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return is_palindrome(text[i]); } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true; } return false;",
          "correctness": "wrong"
        },
        {
          "patch": "return is_palindrome(text[i]); } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false; } return true;",
          "correctness": "wrong"
        },
        {
          "patch": "is_palindrome(text[i]); } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return text[i]; } return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false; } return false;",
          "correctness": "wrong"
        },
        {
          "patch": "return false; } return",
          "correctness": "uncompilable"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        <extra_id_0>\n}",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "result *= p; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += p; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *= p; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *= p ; }return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *= p; }return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *= p ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *= p;} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result <<= p; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *= p;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result *=",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        <extra_id_0>\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "wrong"
        },
        {
          "patch": "/*",
          "correctness": "uncompilable"
        },
        {
          "patch": "break ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        <extra_id_0>\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if (c==0)",
          "correctness": "wrong"
        },
        {
          "patch": "if(c==0)",
          "correctness": "wrong"
        },
        {
          "patch": "if(c =='' )",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (c==0) //",
          "correctness": "wrong"
        },
        {
          "patch": "if(c==0) //",
          "correctness": "wrong"
        },
        {
          "patch": "if (c =='')",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (c == '0')",
          "correctness": "wrong"
        },
        {
          "patch": "if(c =='')",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(c == '0')",
          "correctness": "wrong"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        <extra_id_0>\n}",
      "function range": "10,5-16,5",
      "output": [
        {
          "patch": "return l[i] < t; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true; } return false;",
          "correctness": "wrong"
        },
        {
          "patch": "return l[i] > t; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "return l[i] >= t; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "return l[i] < t; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "return l[i]<t; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false; } return true;",
          "correctness": "wrong"
        },
        {
          "patch": "return l[i] > t; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return l[i] >= t; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n    <extra_id_0>\n}",
      "function range": "10,5-12,5",
      "output": [
        {
          "patch": "return x + y +",
          "correctness": "uncompilable"
        },
        {
          "patch": "return x + y ;",
          "correctness": "plausible"
        },
        {
          "patch": "return x + y *",
          "correctness": "uncompilable"
        },
        {
          "patch": "return x + y -",
          "correctness": "uncompilable"
        },
        {
          "patch": "return x + y //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return add( x, y )",
          "correctness": "uncompilable"
        },
        {
          "patch": "return add ( x,",
          "correctness": "uncompilable"
        },
        {
          "patch": "return x + y /",
          "correctness": "uncompilable"
        },
        {
          "patch": "return x + y ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return add( x, y );",
          "correctness": "wrong"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n    <extra_id_0>\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
      "function range": "20,5-31,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "GenesisSet",
          "correctness": "uncompilable"
        },
        {
          "patch": "GenesisBuilder",
          "correctness": "uncompilable"
        },
        {
          "patch": "GenesisStatement",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n    <extra_id_0>\n}",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "return n ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n + 1 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return ( int ) n",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n * 2 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n ; } public",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n * n ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n + e.",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n + n ;",
          "correctness": "wrong"
        },
        {
          "patch": "return 0 ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        <extra_id_0>\n}",
      "function range": "16,5-27,5",
      "output": [
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return depth;",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return depth ==",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return depth >",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return depth >=",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return true;",
          "correctness": "wrong"
        },
        {
          "patch": "}} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return depth <",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return depth!=",
          "correctness": "uncompilable"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    <extra_id_0>\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if(sorted)",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{{}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(sort)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "//{{{",
          "correctness": "wrong"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n    <extra_id_0>\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
      "function range": "12,5-29,5",
      "output": [
        {
          "patch": "//= 0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//= 0;return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        <extra_id_0>\n        }\n    }\n    return largest;\n}",
      "function range": "20,5-28,5",
      "output": [
        {
          "patch": "largest =",
          "correctness": "uncompilable"
        },
        {
          "patch": "largest ++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "largest +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "largest *=",
          "correctness": "uncompilable"
        },
        {
          "patch": "largest++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "largest = {",
          "correctness": "uncompilable"
        },
        {
          "patch": "largest ++ ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "largest",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n    <extra_id_0>\n}",
      "function range": "16,5-18,5",
      "output": [
        {
          "patch": "return n + sum_to_n(n); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return sum_to_n(n - 1); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return sum_to_n(n) ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return sum_to_n(n); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return sum_to_n(n) + n ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n * n; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n / n; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return sum_to_n(n) ; // TODO",
          "correctness": "uncompilable"
        },
        {
          "patch": "return sum_to_n(n); // TODO:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n * n ;",
          "correctness": "wrong"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    <extra_id_0>\n    return result;\n}",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "result.addAll(xs);",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(xs);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.addAll(xs); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(xs); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.addAll(xs) ;",
          "correctness": "wrong"
        },
        {
          "patch": "// result.add(xs); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.addAll(xs );",
          "correctness": "wrong"
        },
        {
          "patch": "result.add(xs );",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.addRange(xs);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    <extra_id_0>\n}",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "return 1;",
          "correctness": "wrong"
        },
        {
          "patch": "return 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n;",
          "correctness": "wrong"
        },
        {
          "patch": "return n ;",
          "correctness": "wrong"
        },
        {
          "patch": "else return 0;",
          "correctness": "wrong"
        },
        {
          "patch": "else return 1;",
          "correctness": "wrong"
        },
        {
          "patch": "else return n;",
          "correctness": "wrong"
        },
        {
          "patch": "return n -",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 1; //",
          "correctness": "uncompilable"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    <extra_id_0>\n        result += 1;\n    return result;\n}",
      "function range": "15,5-27,5",
      "output": [
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": ";",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "else}",
          "correctness": "uncompilable"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        <extra_id_0>\n    }\n}",
      "function range": "12,5-23,5",
      "output": [
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "super()",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "throw",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "// return",
          "correctness": "uncompilable"
        },
        {
          "patch": "super",
          "correctness": "uncompilable"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        <extra_id_0>\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}",
      "function range": "16,5-25,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "equivalent",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "--",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "//TODO",
          "correctness": "wrong"
        },
        {
          "patch": "e",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "plausible"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "result += str.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += str.length();",
          "correctness": "wrong"
        },
        {
          "patch": "result += str;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += str.count();",
          "correctness": "uncompilable"
        },
        {
          "patch": "result ++;",
          "correctness": "wrong"
        },
        {
          "patch": "result++;",
          "correctness": "wrong"
        },
        {
          "patch": "++result;",
          "correctness": "wrong"
        },
        {
          "patch": "result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n    <extra_id_0>\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}",
      "function range": "36,5-49,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "int index;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "int",
          "correctness": "uncompilable"
        },
        {
          "patch": "intindex;",
          "correctness": "uncompilable"
        },
        {
          "patch": "var index;",
          "correctness": "uncompilable"
        },
        {
          "patch": "var",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf",
          "correctness": "uncompilable"
        },
        {
          "patch": "Eg",
          "correctness": "uncompilable"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    <extra_id_0>\n    return result;\n}",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "wrong"
        },
        {
          "patch": "result=",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    <extra_id_0>\n    return result;\n}",
      "function range": "17,5-29,5",
      "output": [
        {
          "patch": "switched = false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "switched = false; }",
          "correctness": "timeout"
        },
        {
          "patch": "switched=false; }",
          "correctness": "timeout"
        },
        {
          "patch": "switched=false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "switched = false;}",
          "correctness": "timeout"
        },
        {
          "patch": "switched=false;}",
          "correctness": "timeout"
        },
        {
          "patch": "switched =",
          "correctness": "uncompilable"
        },
        {
          "patch": "switched= false; }",
          "correctness": "timeout"
        },
        {
          "patch": "switched= false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "switched = switched; }",
          "correctness": "timeout"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n<extra_id_0>\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
      "function range": "16,5-26,5",
      "output": [
        {
          "patch": "function(b)",
          "correctness": "uncompilable"
        },
        {
          "patch": "function(a)",
          "correctness": "uncompilable"
        },
        {
          "patch": "function ()",
          "correctness": "uncompilable"
        },
        {
          "patch": "function()",
          "correctness": "uncompilable"
        },
        {
          "patch": "function(e)",
          "correctness": "uncompilable"
        },
        {
          "patch": "function(){",
          "correctness": "uncompilable"
        },
        {
          "patch": "function",
          "correctness": "uncompilable"
        },
        {
          "patch": "function(c)",
          "correctness": "uncompilable"
        },
        {
          "patch": "def",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    <extra_id_0>\n    return true;\n}",
      "function range": "20,5-34,5",
      "output": [
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "i++; }",
          "correctness": "wrong"
        },
        {
          "patch": "i ++; }",
          "correctness": "wrong"
        },
        {
          "patch": "++i; }",
          "correctness": "wrong"
        },
        {
          "patch": "i++;}",
          "correctness": "wrong"
        },
        {
          "patch": "i++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "++i;}",
          "correctness": "wrong"
        },
        {
          "patch": "i ++;}",
          "correctness": "wrong"
        },
        {
          "patch": "break; }",
          "correctness": "plausible"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "13,5-21,5",
      "output": [
        {
          "patch": "if (arr!= null) {",
          "correctness": "wrong"
        },
        {
          "patch": "for (int i in arr)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length > 0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!arr.length) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length > 0){",
          "correctness": "wrong"
        },
        {
          "patch": "if (arr.length > 0 )",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length>0){",
          "correctness": "wrong"
        },
        {
          "patch": "do {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    <extra_id_0>\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
      "function range": "18,5-29,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewt",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewf",
          "correctness": "uncompilable"
        },
        {
          "patch": "gengen",
          "correctness": "uncompilable"
        },
        {
          "patch": "default;",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            <extra_id_0>\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
      "function range": "19,5-31,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesisy",
          "correctness": "uncompilable"
        },
        {
          "patch": "GenesisStub",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewfy",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewt",
          "correctness": "uncompilable"
        },
        {
          "patch": "pregyp",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n    <extra_id_0>\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "let power = 1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "let power = 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "let power = x;",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "preg",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "preg",
          "correctness": "uncompilable"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n    <extra_id_0>\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
      "function range": "18,5-24,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "/*",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "//root =",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "21,5-28,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if(c==0)",
          "correctness": "wrong"
        },
        {
          "patch": "if (c==0)",
          "correctness": "wrong"
        },
        {
          "patch": "result += c;",
          "correctness": "wrong"
        },
        {
          "patch": "if(c==0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "/*",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n    <extra_id_0>\n    return \"db\" + result + \"db\";\n}",
      "function range": "15,5-18,5",
      "output": [
        {
          "patch": "String result = decimal.toString();",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = decimal;",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = decimal *",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = \"db\" +",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = decimal +",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = \"decimal\" +",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result = \"db\";",
          "correctness": "wrong"
        },
        {
          "patch": "int result = decimal *",
          "correctness": "uncompilable"
        },
        {
          "patch": "String result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        <extra_id_0>\n            return false;\n    }\n    return true;\n}",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "if(s[i])",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(s[i]!=",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        <extra_id_0>\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
      "function range": "26,5-59,5",
      "output": [
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n= new String[letter_grade.",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n= new String[letter_grade[",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 0.7)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 0.3)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 0.0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 2.0)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 0.5)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 2.3)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n(gpa > 0.6)",
          "correctness": "uncompilable"
        },
        {
          "patch": "else if (gpa> 0.7)\n            letter_grade[i] =\"C-\";=;= new String[letter_grade.length];\n= new String[letter_grade.length];\n= new String[letter_grade;",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        <extra_id_0>\n            return false;\n    }\n    return true;\n}",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "if(string[i])",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if(i==0)",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    <extra_id_0>\n}",
      "function range": "7,5-11,5",
      "output": [
        {
          "patch": "else return 0;",
          "correctness": "wrong"
        },
        {
          "patch": "return 0;",
          "correctness": "wrong"
        },
        {
          "patch": "else return n ;",
          "correctness": "wrong"
        },
        {
          "patch": "else return 0 ;",
          "correctness": "wrong"
        },
        {
          "patch": "else return n;",
          "correctness": "wrong"
        },
        {
          "patch": "return 0 ;",
          "correctness": "wrong"
        },
        {
          "patch": "else return 2;",
          "correctness": "wrong"
        },
        {
          "patch": "else return 1;",
          "correctness": "wrong"
        },
        {
          "patch": "else return",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        <extra_id_0>\n    }\n    return Integer.toBinaryString(sum);\n}",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "sum +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "sum+=",
          "correctness": "uncompilable"
        },
        {
          "patch": "sum += N;",
          "correctness": "wrong"
        },
        {
          "patch": "sum += 1;",
          "correctness": "wrong"
        },
        {
          "patch": "sum++;",
          "correctness": "wrong"
        },
        {
          "patch": "sum += i;",
          "correctness": "wrong"
        },
        {
          "patch": "sum += sum;",
          "correctness": "wrong"
        },
        {
          "patch": "sum ++;",
          "correctness": "wrong"
        },
        {
          "patch": "sum +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "sum += \"",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    <extra_id_0>\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
      "function range": "8,5-15,5",
      "output": [
        {
          "patch": "for(int i in lst)",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i in lst)",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i in lst) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i in lst){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i in lst){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i: lst) {",
          "correctness": "wrong"
        },
        {
          "patch": "for (int i: lst) {",
          "correctness": "wrong"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        <extra_id_0>\n}",
      "function range": "17,5-25,5",
      "output": [
        {
          "patch": "result += chars; } return",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += chars; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += chars;",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return result;",
          "correctness": "wrong"
        },
        {
          "patch": "result += chars[0];",
          "correctness": "uncompilable"
        },
        {
          "patch": "result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "} result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        <extra_id_0>\n            }\n        }\n    }\n    return result;\n}",
      "function range": "22,5-33,5",
      "output": [
        {
          "patch": "result.add(lst[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(x);",
          "correctness": "uncompilable"
        },
        {
          "patch": "result.add(lst[i])",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (x) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(x) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[i] = {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            <extra_id_0>\n        }\n        return array;\n    }\n}",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "print",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "break",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "enforce",
          "correctness": "uncompilable"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                <extra_id_0>\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "d",
          "correctness": "wrong"
        },
        {
          "patch": "d);",
          "correctness": "uncompilable"
        },
        {
          "patch": "d +",
          "correctness": "uncompilable"
        },
        {
          "patch": "d;",
          "correctness": "uncompilable"
        },
        {
          "patch": "c);",
          "correctness": "uncompilable"
        },
        {
          "patch": "d,",
          "correctness": "uncompilable"
        },
        {
          "patch": "d+",
          "correctness": "uncompilable"
        },
        {
          "patch": "c +",
          "correctness": "uncompilable"
        },
        {
          "patch": "c,",
          "correctness": "uncompilable"
        },
        {
          "patch": "c;",
          "correctness": "uncompilable"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n    <extra_id_0>\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
      "function range": "15,5-25,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "numbers =",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "English",
          "correctness": "uncompilable"
        },
        {
          "patch": "Eg",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        <extra_id_0>\n            result += 1;\n    }\n    return result;\n}",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "if(sentence==null)",
          "correctness": "wrong"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "/*",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n    <extra_id_0>\n            return true;\n    }\n    return false;\n}",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "if (x == y) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x>y) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x==0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (y == z) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x==y) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x == 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(x == y) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(x>y) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (x<y) {",
          "correctness": "wrong"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        <extra_id_0>\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "else {sb.append(c);sb.append(c);",
          "correctness": "wrong"
        },
        {
          "patch": "else {sb.append(c);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {if (Character.isUpperCase(c))sb.append(c);",
          "correctness": "plausible"
        },
        {
          "patch": "if (Character.isLowerCase(c)) {sb.append(c);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {if (Character.isUpperCase(c)) {}",
          "correctness": "plausible"
        },
        {
          "patch": "else {sb.append(c);\nBRACE",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (Character.isUpperCase(c)) {sb.append(c);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {if (Character.isLowerCase(c)) {}",
          "correctness": "plausible"
        },
        {
          "patch": "else {sb.append(c);",
          "correctness": "wrong"
        },
        {
          "patch": "else {}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "22,5-35,5",
      "output": [
        {
          "patch": "result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result++;",
          "correctness": "wrong"
        },
        {
          "patch": "result ++;",
          "correctness": "wrong"
        },
        {
          "patch": "result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "++result;",
          "correctness": "wrong"
        },
        {
          "patch": "result++)",
          "correctness": "uncompilable"
        },
        {
          "patch": "result |=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result++ ;",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            <extra_id_0>\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
      "function range": "16,5-43,5",
      "output": [
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\"))state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\")) {state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (dict.containsKey(key)) {state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\"))state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break;state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\")) {state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\"))state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (dict.containsKey(key)) {state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\"))state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break;state = \"mixed\";\nConn",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\"))state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (state.equals(\"end\")) {if (state.equals(\"start\"))state = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConnstate = \"mixed\";\nConn break;\nConnstate = \"mixed\";\nConn}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        <extra_id_0>\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
      "function range": "17,5-30,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{ {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n    <extra_id_0>\n}",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "return a * b ;",
          "correctness": "wrong"
        },
        {
          "patch": "return a * b *",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a * b +",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a * b /",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a + b *",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a / b ;",
          "correctness": "wrong"
        },
        {
          "patch": "return b * a *",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a + b ;",
          "correctness": "wrong"
        },
        {
          "patch": "return a * b //",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        <extra_id_0>\n            count += 1;\n    }\n    return count;\n}",
      "function range": "11,5-19,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "wrong"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "e",
          "correctness": "uncompilable"
        },
        {
          "patch": "++;",
          "correctness": "uncompilable"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    <extra_id_0>\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(num) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  <extra_id_0>\n\t}\n\treturn pile;\n}",
      "function range": "20,2-26,2",
      "output": [
        {
          "patch": "pile.add(i);",
          "correctness": "wrong"
        },
        {
          "patch": "pile.add(i) ;",
          "correctness": "wrong"
        },
        {
          "patch": "pile.append(i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "pile.add(i); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "pile.add(0);",
          "correctness": "wrong"
        },
        {
          "patch": "pile.push(i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "pile.add(i); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "pile[i] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "pile[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n <extra_id_0>\n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}",
      "function range": "15,2-30,2",
      "output": [
        {
          "patch": "return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "function",
          "correctness": "uncompilable"
        },
        {
          "patch": "s",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "sList",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n    <extra_id_0>\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
      "function range": "14,5-19,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "return x;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "wrong"
        },
        {
          "patch": "// return",
          "correctness": "wrong"
        },
        {
          "patch": "-->",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "/*",
          "correctness": "uncompilable"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        <extra_id_0>\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
      "function range": "15,5-30,5",
      "output": [
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0.5;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0.5);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0.5;0.5;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0.5;0.5);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0.5);0.5);}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);0.5);0.5;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "avg_rounded = (int) Math.ceil(rem);=0.5;}",
          "correctness": "uncompilable"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            <extra_id_0>\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "all_odd=false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd=false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd=false;;",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd=false;{",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd = false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd = false;;",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd = false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd = curr_digit;",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd =",
          "correctness": "uncompilable"
        },
        {
          "patch": "all_odd",
          "correctness": "uncompilable"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        <extra_id_0>\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
      "function range": "31,5-50,5",
      "output": [
        {
          "patch": "if(digit_map.contains(num)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (digit_map.contains(num)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(digit_map.contains(num)){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(digit_map.contains(num));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(digit_map.has(num)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (digit_map.contains(num)){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(digit_map.contains(num))",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(digit_map.contains(num)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (digit_map.contains(num));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(num>0) {",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            <extra_id_0>\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "default",
          "correctness": "uncompilable"
        },
        {
          "patch": "genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "Genesis",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "default;",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        <extra_id_0>\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
      "function range": "39,5-47,5",
      "output": [
        {
          "patch": "even_palindrome_count++;",
          "correctness": "wrong"
        },
        {
          "patch": "even_palindrome_count ++;",
          "correctness": "wrong"
        },
        {
          "patch": "odd_palindrome_count++;",
          "correctness": "wrong"
        },
        {
          "patch": "odd_palindrome_count ++;",
          "correctness": "wrong"
        },
        {
          "patch": "even_palindrome_count++ ;",
          "correctness": "wrong"
        },
        {
          "patch": "even_palindrome_count++",
          "correctness": "uncompilable"
        },
        {
          "patch": "even_palindrome_count +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "even ++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "inc++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "even++;",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        <extra_id_0>\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
      "function range": "6,5-20,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//;",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    <extra_id_0>\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
      "function range": "7,5-29,5",
      "output": [
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;\npaypal }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;}return false;return false;return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;}return false;return false;return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;\npaypal }",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;\npaypal}",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;}return false;return false;return false;\npaypal",
          "correctness": "uncompilable"
        },
        {
          "patch": "int min_value = arr.get(0);if(arr_after_move.get(i)!= sorted_arr.get(i)) {return false;return false;return false;return false;return false;return false;}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    <extra_id_0>\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
      "function range": "20,5-32,5",
      "output": [
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "do{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        <extra_id_0>\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
      "function range": "19,5-40,5",
      "output": [
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' +res.put((char) ('a'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' +res.put((char) ('a' +",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] == most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] < most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' +res.put(((char) ('a'",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put(((char) ('",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put(((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] == count_letter[i]) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_letter[i] > most_count) {res.put((char) ('a' + i),res.put((char) ('a' + i),res.put((char) ('a' +res.put((char) ('a')",
          "correctness": "uncompilable"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        <extra_id_0>\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}",
      "function range": "17,5-32,5",
      "output": [
        {
          "patch": "if(c==null) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(c==s) {",
          "correctness": "wrong"
        },
        {
          "patch": "new_s += c;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(c) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//c);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//c;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            <extra_id_0>\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "n++;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "n++;{",
          "correctness": "wrong"
        },
        {
          "patch": "n += digit;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "n++;0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "n += digit;0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "n += digit;{",
          "correctness": "wrong"
        },
        {
          "patch": "n++;return",
          "correctness": "uncompilable"
        },
        {
          "patch": "n += digit;;",
          "correctness": "uncompilable"
        },
        {
          "patch": "n+=digit;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "n++;",
          "correctness": "uncompilable"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        <extra_id_0>\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "s += num;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;s =0;",
          "correctness": "wrong"
        },
        {
          "patch": "s += num;s = 0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;max_sum;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;max_sum;{",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;s = 0;s =",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;max_sum;s =",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;max_sum;s",
          "correctness": "uncompilable"
        },
        {
          "patch": "s += num;s = 0;s",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        <extra_id_0>\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
      "function range": "38,5-48,5",
      "output": [
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "row_capacity =",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{",
          "correctness": "wrong"
        },
        {
          "patch": "do{",
          "correctness": "uncompilable"
        },
        {
          "patch": "do {",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      <extra_id_0>\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
      "function range": "31,10-42,10",
      "output": [
        {
          "patch": "return 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "return 0;}",
          "correctness": "wrong"
        },
        {
          "patch": "return 0;}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "return0; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 0; }}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return 1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "wrong"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        <extra_id_0>\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "//if(num_consonants == n)}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(num_consonants==n)}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(num_consonants==n){",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(num_consonants==n) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(words[i].length() == n)}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(num_consonants == n) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(num_consonants == n){}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//if(num_consonants==n){}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    <extra_id_0>\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
      "function range": "23,5-34,5",
      "output": [
        {
          "patch": "if(vowels.contains(word.charAt(i))) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(vowels.contains(word.charAt(i))) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(vowels.contains(word)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(vowels.contains(word)) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(vowels.contains(word)){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i in vowels)",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(char i in vowels)",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    <extra_id_0>\n        result.add(arr.get(i));\n    }\n    return result;\n}",
      "function range": "32,5-39,5",
      "output": [
        {
          "patch": "for (int i: k) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i: k) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i: arr.size()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i in arr.size()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i: arr.size()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i in arr) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for(int i:k) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i in arr.size())",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i in arr.size()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int i in arr.size()) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        <extra_id_0>\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
      "function range": "16,5-24,5",
      "output": [
        {
          "patch": "if(lst.contains(i)) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (lst.contains(i)) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst.contains(i)){",
          "correctness": "wrong"
        },
        {
          "patch": "if(lst.get(i)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst.has(i)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (lst.has(i)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst.contains(i))",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (lst.contains(i)){",
          "correctness": "wrong"
        },
        {
          "patch": "if (lst.get(i)) {",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        <extra_id_0>\n        }\n    }\n    return result;\n}",
      "function range": "21,5-29,5",
      "output": [
        {
          "patch": "result += arr[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "result ++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result++;",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += arr[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(arr[i]) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "result +=arr[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result++ ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    <extra_id_0>\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
      "function range": "24,5-34,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(n)",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g.",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            <extra_id_0>\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
      "function range": "25,5-50,5",
      "output": [
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] &&(day<1||day>30)) return false;if(month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] &&month == month_check2[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] &&month == month_check1[i] &&month == month_check2[i] &&month == month_check1[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] && (",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] &&(day<1||day>30)) return false;if(month == month_check1[i] &&month == month_check1[i] &&month == month_check2[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] &&month == month_check2[i] &&month == month_check1[i] &&month == month_check1[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] &&(day<1||day>30)) return false;if(month == month_check1[i] &&month == month_check1[i] &&month == month_check1[i] && (",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] &&month == month_check1[i] &&month == month_check2[i] &&month == month_check2[i] &&",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(month == month_check1[i] ) returnif(month == month_check1[i] && (daymonth == month_check1[i] &&month == month_check1[i] &&month == month_check1[i]",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            <extra_id_0>\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "count++;",
          "correctness": "wrong"
        },
        {
          "patch": "count ++;",
          "correctness": "wrong"
        },
        {
          "patch": "count += curr;",
          "correctness": "wrong"
        },
        {
          "patch": "++count;",
          "correctness": "wrong"
        },
        {
          "patch": "++ count;",
          "correctness": "wrong"
        },
        {
          "patch": "count++; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "count++ ;",
          "correctness": "wrong"
        },
        {
          "patch": "count += 1;",
          "correctness": "wrong"
        },
        {
          "patch": "count++; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "count++)",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        <extra_id_0>\n    }\n    return true;\n}",
      "function range": "22,5-37,5",
      "output": [
        {
          "patch": "if(count_num.get(lst[i])<2) return false;return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;0;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;return true;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;}return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;0;return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;return false;return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;}return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(count_num.get(lst[i])<2) return false;0;return false;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n    <extra_id_0>\n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}",
      "function range": "33,5-39,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "/*",
          "correctness": "uncompilable"
        },
        {
          "patch": "var",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "String",
          "correctness": "uncompilable"
        },
        {
          "patch": "e",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "//TODO",
          "correctness": "uncompilable"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        <extra_id_0>\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
      "function range": "16,5-28,5",
      "output": [
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "wrong"
        },
        {
          "patch": "++prod;",
          "correctness": "wrong"
        },
        {
          "patch": "}return",
          "correctness": "uncompilable"
        },
        {
          "patch": "++ prod;",
          "correctness": "wrong"
        },
        {
          "patch": "}sum",
          "correctness": "uncompilable"
        },
        {
          "patch": "++",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                <extra_id_0>\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
      "function range": "35,5-54,5",
      "output": [
        {
          "patch": "returnif(grid[i][j]==1) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j]==1) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j]==0) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j]==0) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j]==val) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j] == 1) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j] == 1) {}",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j]==val) {return",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j] == 1)return",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnif(grid[i][j] == 0) {}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    <extra_id_0>\n    }\n    return sequence;\n}",
      "function range": "23,5-37,5",
      "output": [
        {
          "patch": "return sequence;",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "} else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//{",
          "correctness": "wrong"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    <extra_id_0>\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "if(n) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(n) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (n) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(n>10){",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(n>0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "do {",
          "correctness": "uncompilable"
        },
        {
          "patch": "try {",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    <extra_id_0>\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}",
      "function range": "21,5-37,5",
      "output": [
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(brackets.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(brackets.length()){",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n    <extra_id_0>\n    }\n    return result;\n}",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "return sum_squared_nums(lst);",
          "correctness": "uncompilable"
        },
        {
          "patch": "long result = sum(lst);",
          "correctness": "uncompilable"
        },
        {
          "patch": "int result = lst.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "long result = sum_squared_nums({",
          "correctness": "uncompilable"
        },
        {
          "patch": "long result = 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "long result = sum(lst); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "long result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "long result = 0; //",
          "correctness": "wrong"
        },
        {
          "patch": "int result = lst.length; //",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    <extra_id_0>\n}",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "return last.equals(last);",
          "correctness": "wrong"
        },
        {
          "patch": "return last == last;",
          "correctness": "wrong"
        },
        {
          "patch": "return last.contains(last);",
          "correctness": "wrong"
        },
        {
          "patch": "return last!= null;",
          "correctness": "wrong"
        },
        {
          "patch": "return last!= last;",
          "correctness": "wrong"
        },
        {
          "patch": "return parts.length>0;",
          "correctness": "wrong"
        },
        {
          "patch": "return last.equals(\" \");",
          "correctness": "wrong"
        },
        {
          "patch": "return true;",
          "correctness": "wrong"
        },
        {
          "patch": "return false;",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n    <extra_id_0>\n    }\n    return ind;\n}",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "if (arr.length > 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "int ind = arr.length;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length == 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "return arr.length > 0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(arr.length > 0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length>0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "for (int ind in arr)",
          "correctness": "uncompilable"
        },
        {
          "patch": "return arr.length>0;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (arr.length > 0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!arr.length) { //",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n    <extra_id_0>\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "if(lst[i]) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst.length) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst[i]<0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(max_negative) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst.length>0) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst[i]) {{",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(lst[i])) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(!negative) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    <extra_id_0>\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
      "function range": "17,5-36,5",
      "output": [
        {
          "patch": "else return null;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return null;return}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return null;return null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return null;null;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else return null;returnnull;",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "//}",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n    <extra_id_0>\n}",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "return n == 0 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n == 0; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n == 0 ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n == 1 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n == null ;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n == 2 ;",
          "correctness": "wrong"
        },
        {
          "patch": "return n == 1 ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n!= 0 ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n == 2 ;//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return n == null ;//",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    <extra_id_0>\n    }\n    return special_fact;\n}",
      "function range": "18,5-25,5",
      "output": [
        {
          "patch": "if (fact_i == n) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fact_i < n) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fact_i > n) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(fact_i == n) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (n == 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (n>fact_i) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fact_i<n) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (fact_i==n) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (!fact_i) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "wrong"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    <extra_id_0>\n}",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i,new_",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text +=new_textnew_text",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i,;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i,}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text +=new_textnew_text +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_textnew_textnew_text +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i,end);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i,new_text);new_text +=new_textnew",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new_text;new_textnew_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i, i);new_text += text.substring(i,end",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    <extra_id_0>\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}",
      "function range": "17,5-35,5",
      "output": [
        {
          "patch": "if (!(lst[0].equals(\"txt\")))return \"Yes\";\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[1].equals(\"txt\")))return \"Yes\";\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[0].equals(\"txt\")))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[0].equals(\"txt\")))return \"Yes\";\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[1].equals(\"txt\")))return \"Yes\";",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[0].equals(\"txt\")))return \"Yes\";\n   }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[1].equals(\"txt\")))return \"Yes\";\n   }",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[0].equals(\"txt\")))return \"Yes\";\n   return",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!(lst[1].equals(\"txt\")))return \"Yes\";\n   return",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        <extra_id_0>\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "if(i==0)",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>0)",
          "correctness": "wrong"
        },
        {
          "patch": "if (i==0)",
          "correctness": "wrong"
        },
        {
          "patch": "if(i<0)",
          "correctness": "wrong"
        },
        {
          "patch": "if (i>0)",
          "correctness": "wrong"
        },
        {
          "patch": "if(i==0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(i>0){",
          "correctness": "uncompilable"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        <extra_id_0>\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
      "function range": "22,5-34,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "evt",
          "correctness": "uncompilable"
        },
        {
          "patch": "y",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    <extra_id_0>\n        return true;\n    return false;\n}",
      "function range": "15,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return true;",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "e.g",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "either",
          "correctness": "uncompilable"
        },
        {
          "patch": "precondition",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            <extra_id_0>\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
      "function range": "17,5-44,5",
      "output": [
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i))));\nBRACE",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(i))));",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i))));\nBRACE",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(i));\nBRACE",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(i));",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(i))));",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits.get(j))));\nBRACE",
          "correctness": "uncompilable"
        },
        {
          "patch": "digit = n + \"\".toCharArray().charAt(j);new ArrayList<Integer>();\nBRACE digits_number.put(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digits_number.get(digit))));",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            <extra_id_0>\n                count += 1;\n        }\n    }\n    return count;\n}",
      "function range": "14,5-26,5",
      "output": [
        {
          "patch": "//",
          "correctness": "wrong"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "++odd_digits;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "wrong"
        },
        {
          "patch": "return count;",
          "correctness": "uncompilable"
        },
        {
          "patch": "else",
          "correctness": "uncompilable"
        },
        {
          "patch": "++odd_digits",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    <extra_id_0>\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else{",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "while(true)",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(A)",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "{}",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(A){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(true)",
          "correctness": "uncompilable"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    <extra_id_0>\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "if (!planet_names.contains(planet2))",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!planet_names.contains(planet1))",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!planet_names.contains(planet3))",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!planet1_index)",
          "correctness": "uncompilable"
        },
        {
          "patch": "return result;",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "default:",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        <extra_id_0>\n    );\n    return result;\n}",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "0,",
          "correctness": "uncompilable"
        },
        {
          "patch": "null,",
          "correctness": "uncompilable"
        },
        {
          "patch": "new",
          "correctness": "uncompilable"
        },
        {
          "patch": "false,",
          "correctness": "uncompilable"
        },
        {
          "patch": "-",
          "correctness": "uncompilable"
        },
        {
          "patch": "str,",
          "correctness": "uncompilable"
        },
        {
          "patch": "comparator",
          "correctness": "uncompilable"
        },
        {
          "patch": "str->",
          "correctness": "uncompilable"
        },
        {
          "patch": "null);",
          "correctness": "uncompilable"
        },
        {
          "patch": "str",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        <extra_id_0>\n}",
      "function range": "11,5-17,5",
      "output": [
        {
          "patch": "return x; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return",
          "correctness": "uncompilable"
        },
        {
          "patch": "} return x;",
          "correctness": "wrong"
        },
        {
          "patch": "return x;",
          "correctness": "uncompilable"
        },
        {
          "patch": "y++; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "y +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "}}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                <extra_id_0>\n            }\n        }\n    }\n    return result;\n}",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result ++;",
          "correctness": "wrong"
        },
        {
          "patch": "result++;",
          "correctness": "wrong"
        },
        {
          "patch": "result=",
          "correctness": "uncompilable"
        },
        {
          "patch": "++result;",
          "correctness": "wrong"
        },
        {
          "patch": "result++ ;",
          "correctness": "wrong"
        },
        {
          "patch": "result ++ ;",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        <extra_id_0>\n    }\n    return result;\n}",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "result[i] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[i];",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result [i] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[i]=",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[i ] =",
          "correctness": "uncompilable"
        },
        {
          "patch": "result[i]);",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "result =",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            <extra_id_0>\n    }\n    return class_name + \".\" + strong;\n}",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "strong =",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "wrong"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "break; }",
          "correctness": "wrong"
        },
        {
          "patch": "++val;",
          "correctness": "uncompilable"
        },
        {
          "patch": "break;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "strong +=",
          "correctness": "uncompilable"
        },
        {
          "patch": "delegation",
          "correctness": "uncompilable"
        },
        {
          "patch": "strong=",
          "correctness": "uncompilable"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    <extra_id_0>\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "if (pat.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (a.length()) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "{",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (pat.contains(pat)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (a.length()>0){",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (pat.contains(pat)){",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if",
          "correctness": "uncompilable"
        },
        {
          "patch": "{{",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    <extra_id_0>\n    }\n    return new int[] {even_count, odd_count};\n}",
      "function range": "10,5-19,5",
      "output": [
        {
          "patch": "if (num > 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (num>0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (num == 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (num!= 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(num>0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if(num > 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (num==0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (num < 0) {",
          "correctness": "wrong"
        },
        {
          "patch": "if (num<0) {",
          "correctness": "wrong"
        },
        {
          "patch": "else {",
          "correctness": "uncompilable"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        <extra_id_0>\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"I\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\", \"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"IVC\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\", \"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"I\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"I\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        },
        {
          "patch": "result += symbol[i];\"I\", \"IV\", \"IVC\",\"IVC\",\"IVC\",\"I\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",\"IVC\",",
          "correctness": "uncompilable"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n    <extra_id_0>\n}",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "return true ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return false ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a > b ;",
          "correctness": "wrong"
        },
        {
          "patch": "return true ; // TODO",
          "correctness": "uncompilable"
        },
        {
          "patch": "return a < b ;",
          "correctness": "wrong"
        },
        {
          "patch": "return b == c ;",
          "correctness": "wrong"
        },
        {
          "patch": "return false ; // TODO",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null!=",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            <extra_id_0>\n        }\n    );\n    return words_list.get(0);\n}",
      "function range": "18,5-31,5",
      "output": [
        {
          "patch": "return",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnwords_list);",
          "correctness": "uncompilable"
        },
        {
          "patch": "return}",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnreturn",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnwords_list",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnwords_list,",
          "correctness": "uncompilable"
        },
        {
          "patch": "returnwords_list;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return s1;",
          "correctness": "uncompilable"
        },
        {
          "patch": "return s1.size();",
          "correctness": "wrong"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n    <extra_id_0>\n}",
      "function range": "31,5-33,5",
      "output": [
        {
          "patch": "return new int[](); //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new int[](); // TODO:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new int[need+remaining]; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new int[remaining]; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new int[remaining]; // TODO:",
          "correctness": "uncompilable"
        },
        {
          "patch": "return eat(number, need, remaining);",
          "correctness": "wrong"
        },
        {
          "patch": "return new int[remaining] ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return null ; //",
          "correctness": "uncompilable"
        },
        {
          "patch": "return new",
          "correctness": "uncompilable"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    <extra_id_0>\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}",
      "function range": "30,5-38,5",
      "output": [
        {
          "patch": "if (engine.eval(expression)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!engine.eval(expression)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (engine==null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (engine == null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(engine.eval(expression)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(engine==null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if(engine == null) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (engine.eval(operator)) {",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (!engine.eval(expression));",
          "correctness": "uncompilable"
        },
        {
          "patch": "if (engine.eval(expression)){",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        <extra_id_0>\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "flg++;",
          "correctness": "wrong"
        },
        {
          "patch": "flg++;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg ++;",
          "correctness": "wrong"
        },
        {
          "patch": "flg ++;}",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg++;++",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg++;return",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg ++;return",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg ++;++",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg++;=",
          "correctness": "uncompilable"
        },
        {
          "patch": "flg += c;",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    <extra_id_0>\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "md = new MessageDigest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "MessageDigest md = new MessageDigest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "Digest md = newDigest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "md = new Digest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "MessageDigest md = newDigest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "byte[] md = new",
          "correctness": "uncompilable"
        },
        {
          "patch": "digest = new MessageDigest();",
          "correctness": "uncompilable"
        },
        {
          "patch": "MessageDigest md = new",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    <extra_id_0>\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "//",
          "correctness": "uncompilable"
        },
        {
          "patch": "////",
          "correctness": "uncompilable"
        },
        {
          "patch": "}",
          "correctness": "uncompilable"
        },
        {
          "patch": "goto",
          "correctness": "uncompilable"
        },
        {
          "patch": "//var",
          "correctness": "uncompilable"
        },
        {
          "patch": "probably",
          "correctness": "uncompilable"
        },
        {
          "patch": "//return",
          "correctness": "uncompilable"
        },
        {
          "patch": "#",
          "correctness": "uncompilable"
        },
        {
          "patch": "ewt",
          "correctness": "uncompilable"
        },
        {
          "patch": "//",
          "correctness": "uncompilable"
        }
      ]
    }
  }
}