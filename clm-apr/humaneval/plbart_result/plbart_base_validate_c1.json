{
  "config": "PLBART_SEQFORM_MASKFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ <mask> if (distance < threshold) return true; } } return false; } </s> java",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(j); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(i, j); if (distance < threshold) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(i); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(i) - numbers.get(j); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(j) - numbers.get(i); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(j).doubleValue(); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(i).doubleValue(); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(i).doubleValue() - numbers.get(j).doubleValue(); if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(j) - numbers.get(i).get(j); if (distance < threshold) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ double distance = numbers.get(j); if (distance > threshold) return true; if (distance < threshold) return true; } } return false; }",
          "correctness": "wrong"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); <mask> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; } </s> java",
      "function range": "7,5-27,5",
      "output": [
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } else { current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); } else if (c == '('){ current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); } else if (c == '^') { current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); } else if (c == '}') { current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); } else if (c == ')'){ current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); } else if (c =='( '){ current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); } else if (c == '}'){ current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); result.add(current_string); current_string = \"\"; } else { current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } else { current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\", } } } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "<s> public static double truncate_number(double number) { <mask> } </s> java",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "public static double truncate_number(double number) { return number - 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math. trunc(number) ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math.round(Math.random() * number); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math.round(number) / 100.0; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math. trunc(number) * number; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math.round(number) / Math.PI; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math.round(Math.random()*number); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math. trunc(number) - 1 ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math.round(Math.random() * number) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) { return Math.round(Math.random() * number ) ; }",
          "correctness": "wrong"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "<s> public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; <mask> } </s> java",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance > 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance == 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance <= 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance >= 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance > 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance < 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance >= 0 && balance <= 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance == 0 || balance == 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance == 0 || balance > 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; } return balance > 0 || balance < 0 ; }",
          "correctness": "plausible"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "<s> public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ <mask> } return deviation_sum / numbers.size(); } </s> java",
      "function range": "6,5-17,5",
      "output": [
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number; } return deviation_sum / numbers.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number - mean; } return deviation_sum / numbers.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number * number; } return deviation_sum / numbers.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number / numbers.size(); } return deviation_sum / numbers.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number * mean; } return deviation_sum / numbers.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number-mean; } return deviation_sum / numbers.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number - mean; } return deviation_sum / numbers.size() }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number / numbers.size(); } return deviation_sum / numbers.size() }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number / numbers.size(); } return deviation_sum / numbers.size() ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ deviation_sum += number / numbers.size(); } return deviation_sum / numbers.size()(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "<s> public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; <mask> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; } </s> java",
      "function range": "7,5-19,5",
      "output": [
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 0; i < numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 0 ; i < numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 1; i < numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i=0; i<numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 1; i <= numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 0; i < numbers.size(); ++i) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 0; i < numbers.size(); i++){ result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 1 ; i < numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i=0;i<numbers.size();i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; for (int i = 0; i<numbers.size(); i++) { result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "<s> public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); <mask> } result.add(max_depth); } return result; } </s> java",
      "function range": "7,5-24,5",
      "output": [
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); continue; } result.add(depth); } result.add(max_depth); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else { depth += 1; max_depth = Math.max(depth, max_depth); } } result.add(max_depth); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else if (c == ')': depth += 1; } result.add(max_depth); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else if (c == ')'){ depth += 1; max_depth = Math.max(depth, max_depth); } } result.add(max_depth); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else if (c == '}') { depth += 1; max_depth = Math.max(depth, max_depth); } result.add(max_depth); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else { depth++; max_depth = Math.max(depth, max_depth); } } result.add(max_depth); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else if (c == ')': depth++; } result.add(max_depth); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else { depth += 1; max_depth = Math.min(depth, max_depth); } } result.add(max_depth); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); break; } } if (depth > max_depth) { depth = max_depth; } result.add(max_depth); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); } else if (c == '^') { depth += 1; max_depth = Math.max(depth, max_depth); } } result.add(depth); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "<s> public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ <mask> } return result; } </s> java",
      "function range": "7,5-13,5",
      "output": [
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(string); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add (string); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(substring); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(substring)){ result.add(string); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(string.substring(0, substring.length()-1)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(string.substring(substring)); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(string) ; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(string.substring(0, substring.length())); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(substring)){ result.add (string); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ result.add(string.substring(0, substring.length() - 1)); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "<s> public static Integer[] sum_product(List<Integer> numbers) { <mask> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; } </s> java",
      "function range": "6,5-13,5",
      "output": [
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[numbers.size()]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[2]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[3]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[numbers.size()] ; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer [numbers.size()]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[10]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[4]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer [ numbers.size()]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[1]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) { Integer[] result = new Integer[numbers.size()]; for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "<s> public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ <mask> result.add(running_max); } return result; } </s> java",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = Math.max(running_max, n); result.add(running_max); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = n; result.add(running_max); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = rolling_max(n); result.add(running_max); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = Integer.valueOf(n); result.add(running_max); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = running_max + n; result.add(running_max); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = Integer.parseInt(n); result.add(running_max); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = rolling_max(numbers, n); result.add(running_max); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = rolling_max(n); if (running_max!= null) result.add(running_max); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = Math.max(running_max, n); if (running_max == null) result.add(running_max); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ running_max = Math.max(running_max, n); result.add(running_max); } result.add(running_max); return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "<s> public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; <mask> return result; } </s> java",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(0, beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(beginning_of_suffix, str.length() - beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; str = str.substring(beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(0, beginning_of_suffix); result = result.substring(beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(beginning_of_suffix); result = result.substring(beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; str = str.substring(beginning_of_suffix, str.length() - beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; str = str.substring(beginning_of_suffix); str = str.substring(beginning_of_suffix); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(beginning_of_suffix, str.length()-1); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; result = result.substring(beginning_of_suffix); result = result.substring(end_of_suffix); return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "<s> public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } <mask> return result; } </s> java",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else { result += a.charAt(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else { result += \"1\"; } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else result += a.charAt(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else if (a.charAt(i)!= b.charAt(i)){ result += \"1\"; } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else { result += \"1\"; } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else if (a.charAt(i) == b.charAt(i)){ result += \"1\"; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } } System.out.println(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else { result += a.charAt(i) ^ b.charAt(i); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } else if (a.charAt(i)!= b.charAt(i)){ result += \"1\"; } } return result; }",
          "correctness": "plausible"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "<s> public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ <mask> } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; } </s> java",
      "function range": "6,5-19,5",
      "output": [
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() > maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() < maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() > maxlen){ maxlen = string.length()-1; } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() >= maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() > maxlen){ return string; } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() == maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() <= maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() < maxlen){ return string; } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() > maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ if (string.length() < maxlen){ maxlen = string.length(); } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null ; }",
          "correctness": "wrong"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "<s> public static int greatest_common_divisor(int a, int b){ while (b > 0) { <mask> } return a; } </s> java",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { b /= 2; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { a /= b; b /= a; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { b /= a; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { a *= b; b /= a; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { b /= 2; a /= b; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { b /= 10; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { a = a % b; b /= 2; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { b /= 2 ; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){ while (b > 0) { a = a / b; b /= 2; } return a; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "<s> public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ <mask> } return result; } </s> java",
      "function range": "7,5-15,5",
      "output": [
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.substring(i, i + 1)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.charAt(i)); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.substring(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.substring(0, i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add ( string.substring(i, i + 1)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add (string.substring(i, i + 1)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.charAt(i)) ; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.substring(i, string.length()-1)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.substring(i + 1)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ result.add(string.substring(i, i + 1)); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "<s> public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } <mask> } </s> java",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } System.out.println(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } System. out.println(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } return result + \" \\n\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } System.out.println (result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } System.out.println ( result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } System. out.println ( result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } return result.substring(0, n - 1 ) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } return result.substring(0, n - 1); }",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "<s> public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) <mask> } return distinct.size(); } </s> java",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(Character.toLowerCase(c)); } } return distinct.size(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) distinct.add(Character.toLowerCase(c)); } return distinct.size(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(Character.toUpperCase(c)); } } return distinct.size(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(Character.toLowerCase(c)); distinct.add(Character.toLowerCase(c)); } } return distinct.size(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add (Character.toLowerCase(c)); } } return distinct.size(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) distinct.add(Character.toLowerCase(c)); else distinct.add(Character.toLowerCase(c)); } return distinct.size(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(c); } } return distinct.size(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(Character.toLowerCase(c)) } } return distinct.size(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(Character.toLowerCase(c))); } } return distinct.size(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) { distinct.add(Character.toLowerCase(c)); distinct.add(Character.toUpperCase(c)); } } return distinct.size(); }",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "<s> public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); <mask> result.add(note_map.get(note)); } return result; } </s> java",
      "function range": "8,5-20,5",
      "output": [
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string.split(\"\\\\|\")) { result.add(note_map.get(note)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string) { result.add(note_map.get(note)); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string.split(\"|\")) { result.add(note_map.get(note)); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string.split(\",\")) { result.add(note_map.get(note)); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for(String note : music_string.split(\"\\\\|\")) { result.add(note_map.get(note)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for(String note : music_string.split(\"|\")) { result.add(note_map.get(note)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string.split(\"\\\\|\")){ result.add(note_map.get(note)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string.split(\"|\")){ result.add(note_map.get(note)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for(String note : music_string.split(\",\")) { result.add(note_map.get(note)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); for (String note : music_string.split(\"\\\\|\")); if (note.length() > 0) { result.add(note_map.get(note)); } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "<s> public static int how_many_times(String string, String substring) { int times = 0; <mask> if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; } </s> java",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0; i < string.length(); i++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0 ; i < string.length(); i++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0; i < string.length(); i++) { if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i=0; i<string.length(); i++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0 ; i < string.length(); i++) { if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 1; i < string.length(); i++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0; i < string.length(); i+=2) { if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i=0; i < string.length(); i++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0 ; i<string.length(); i++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) { int times = 0; for (int i = 0 ; i < string.length(); i ++){ if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; }",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "<s> public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); <mask> String result = \"\"; for (String number : number_array){ result += number + \" \"; } return result.trim(); } </s> java",
      "function range": "6,5-27,5",
      "output": [
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(number_array.get(\"one\")); number_array.add(number_array.get(\"two\")); number_array.add(number_array.get(\"three\")); number_array.add(number_array.get(\"four\")); number_array.add(number_array.get(\"five\")); number_array.add(number_array.get(\"six\")); number_array.add(number_array.get(\"seven\")); number_array.add(number_array.get(\"eight\")); number_array.add(number_array.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); return number_array; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(number_array); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(number_array.get(\"one\")); number_array.add(number_array.get(\"two\")); number_array.add(number_array.get(\"three\")); number_array.add(number_array.get(\"four\")); number_array.add(number_array.get(\"five\")); number_array.add(number_array.get(\"six\")); number_array.add(number_array.get(\"seven\")); number_array.add(number_array.get(\"eight\")); number_array.add(number_array.get(\"eight\")); number_array.add(number_array.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); number_array.add(value_map.get(\"zero\")); number_array.add(value_map.get(\"one\")); number_array.add(value_map.get(\"two\")); number_array.add(value_map.get(\"three\")); number_array.add(value_map.get(\"four\")); number_array.add(value_map.get(\"five\")); number_array.add(value_map.get(\"six\")); number_array.add(value_map.get(\"seven\")); number_array.add(value_map.get(\"eight\")); number_array.add(value_map.get(\"nine\")); number_array.add(number_array.get(\"one\")); number_array.add(number_array.get(\"two\")); number_array.add(number_array.get(\"three\")); number_array.add(number_array.get(\"four\")); number_array.add(number_array.get(\"five\")); number_array.add(number_array.get(\"six\")); number_array.add(number_array.get(\"seven\")); number_array.add(number_array.get(\"eight\")); number_array.add(number_array.get(\"eight\")); number_array.add(number_array.get(\"nine\")); return number_array.toString(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "<s> public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ <mask> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; } </s> java",
      "function range": "4,5-24,5",
      "output": [
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = 0; j < numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = i + 1; j < numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = 0; j < numbers[i]; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = 0; j < numbers[i].length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = 0 ; j < numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = 1; j < numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = i + 1; j <= numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = i; j < numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = 0; j < numbers.length; j += 1) { double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ for (int j = i + 1; j < numbers.length; j += 1){ double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result ; }",
          "correctness": "timeout"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } <mask> min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; } </s> java",
      "function range": "4,5-22,5",
      "output": [
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } else if (numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } if (numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } else { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } else if (numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } } if (numbers[i] < min) { min = numbers[i]; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } if (numbers[i] < min ) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } else if ( numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } else if (numbers[i] >= min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } else if (numbers[i] < min) { min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min) ; } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "<s> public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ <mask> } return result; } </s> java",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(Integer.valueOf(value)); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(Integer.valueOf(value.toString())); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(Integer.parseInt(value.toString())); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add((Integer) value); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(value); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(Integer.parseInt(value)); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(value.intValue()); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(value.getAsInt()); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add (Integer.valueOf(value.toString())); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ result.add(Integer.parseInt(value.toString())); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "<s> public static int strlen(String string){ <mask> } </s> java",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "public static int strlen(String string){ return string.length(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){ return string. length ( ) ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){ return strlen(string); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen(String string){ return string. length(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){ return string.length() ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){ return string.length ( ) ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){ return string. length() ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){ return string.length() - 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen(String string){ return strlen(string) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int strlen(String string){ return string.length() / 2 ; }",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "<s> public static int largest_divisor(int n) { <mask> if (n % i == 0) return i; } return 1; } </s> java",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 1 ; i <= n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 0; i < n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 1; i <= n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 1 ; i < n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { for ( int i = 1 ; i <= n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 0 ; i < n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 1; i < n; i++) { if (n % i == 0) return i; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_divisor(int n) { int i = n / 2; if (n % i == 0) return i; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_divisor(int n) { for (int i = 1 ; i <= n; i++) { if (n % i == 0) return i ; } return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } <mask> } </s> java",
      "function range": "7,5-21,5",
      "output": [
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } Collections.sort(result); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } result.add(i); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } return Collections.sort(result); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } Collections.shuffle(result); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } return Collections.singletonList(result); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } System.out.println(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } result.add(n); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } return Collections.copyOf(result); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "<s> public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ <mask> } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; } </s> java",
      "function range": "8,5-22,5",
      "output": [
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ if (count.get(n) == 0) result.add(n); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, 1); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, n); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ if (count.get(n) == 0) result.add(n); count.put(n, 1); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, 1); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, count.get(n)); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, 1) } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ if (count.get(n) == 0) result.add(n); count.put(n, 1); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ count.put(n, 1 ); } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "<s> public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { <mask> } } return new String(char_list); } </s> java",
      "function range": "4,5-17,5",
      "output": [
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toUpperCase(c); } else { char_list[i] = Character.toLowerCase(c); } } return new String(char_list); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toUpperCase(c); } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toLowerCase(c); } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = c; } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = c; } else { char_list[i] = c; } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toLowerCase(c); } else { char_list[i] = c; } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = Character.toUpperCase(c); } else { char_list[i] = c; } } return new String(char_list); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { char_list[i] = c; } else { char_list[i] = Character.toUpperCase(c); } } return new String(char_list); }",
          "correctness": "wrong"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "<s> public static String concatenate(String[] strings) { <mask> for (String string : strings) result += string; return result; } </s> java",
      "function range": "4,5-9,5",
      "output": [
        {
          "patch": "public static String concatenate(String[] strings) { String result = \"\"; for (String string : strings) result += string; return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = \" \" ; for (String string : strings) result += string; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = \" \"; for (String string : strings) result += string; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = \" \"; for (String string : strings) result += string; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = \"\" ; for (String string : strings) result += string; return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = new String(); for (String string : strings) result += string; return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = null; for (String string : strings) result += string; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) { String result = \" \" ; for (String string : strings) result += string; return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ <mask> result.add(string); } } return result; } </s> java",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix)) { result.add(string); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (prefix.startsWith(string)) { result.add(string); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix)){ result.add(string); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.toLowerCase().startsWith(prefix)) { result.add(string); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (prefix.startsWith(string)){ result.add(string); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix)) { result.add(string); } else { result.add(string); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (String.startsWith(prefix, string)) { result.add(string); } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (prefix.toLowerCase().startsWith(string.toLowerCase())) { result.add(string); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if(string.startsWith(prefix)) { result.add(string); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ if (string.startsWith(prefix)){ result.add(string); } else { result.add(string); } } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "<s> public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { <mask> } return result; } </s> java",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add(number); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add (number); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add ( number); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add(number) ; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add(number); result.add(number); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add ( number ) ; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add (number) ; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add( number); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add((Integer) number); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { result.add(number); result.add(number - 1); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "<s> public static boolean is_prime(int n){ if (n < 2) return false; <mask> if (n % k == 0) return false; } return true; } </s> java",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; int k = n / 2; if (n % k == 0) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; int k = n / 2 ; if (n % k == 0) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; int k = n / 2; if (n % k == 0) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; int k = 2 * n; if (n % k == 0) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; for (int k = 1 ; k <= n; k++) { if (n % k == 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; for ( int k = 1 ; k <= n; k++) { if (n % k == 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; for (int k = 1 ; k <= n; k++){ if (n % k == 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; for ( int k = 1 ; k <= n; k++){ if (n % k == 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; for (int k = 1 ; k <= n; k++){ if (n % k == 0) return false; } return True; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_prime(int n){ if (n < 2) return false; for ( int k = 1 ; k <= n; k++){ if (n % k == 0) return false; } return True; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "<s> public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; <mask> begin = center; } else { end = center; } } return begin; } </s> java",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, center) > 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, center) * poly(xs, center) > 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, center) > 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, center) < 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, end) > 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (center < 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, center) * poly(xs, center) < 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, center) < 0) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, center) * poly(xs, center) > 0 ) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; if (poly(xs, begin) * poly(xs, center) > 0 ) { begin = center; } else { end = center; } } return begin; }",
          "correctness": "plausible"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "<s> public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ <mask> } else{ result.add(l.get(i)); } } return result; } </s> java",
      "function range": "8,5-25,5",
      "output": [
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 2 == 0){ result.add(l.get(i)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 3 == 0){ result.add(l.get(i)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 3 == 1){ result.add(l.get(i)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 3 == 1) { result.add(l.get(i)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 4 == 0){ result.add(l.get(i)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else { result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 3 == 0){ result.add(l.get(i + 1)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 2 == 0){ result.add(l.get(i + 1)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ result.add(l.get(i)); } else if (i % 2 == 0){ result.add(l.get(i+1)); } else{ result.add(l.get(i)); } } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "<s> public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ <mask> } Collections.sort(result); return result; } </s> java",
      "function range": "8,5-17,5",
      "output": [
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add(n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add (n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add( n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add ( n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add(Integer.valueOf(n)); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ Collections.sort(result); result.add(n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add((Integer) n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add(n); result.add(n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ result.add(l.get(n)); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ Collections.sort(result); result.add(n); } Collections.sort(result) return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "<s> public static int max_element(List<Integer> l) { <mask> for (Integer e : l) { if (e > m){ m = e; } } return m; } </s> java",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "public static int max_element(List<Integer> l) { int m = Integer. MAX_VALUE; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = Integer. MAX_VALUE ; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = Integer. MIN_VALUE; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = 0 ; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = Integer. MIN_VALUE ; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = Integer.MAX_VALUE; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = - 1 ; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = 1 ; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = 0; for (Integer e : l) { if (e > m){ m = e; } } return m; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) { int m = Integer. MAX_VALUE; for (Integer e : l) { if (e > m){ m = e; } } return m ; }",
          "correctness": "wrong"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "<s> public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { <mask> result += 1; } } } return result; } </s> java",
      "function range": "4,5-16,5",
      "output": [
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i % 10 == 0) { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (result == 0) { result = 0; } else { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i % 11 == 0) { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i == n - 1 ) { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i % 11 == 0 && i % 13 == 0) { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i % 11 == 0 || i % 13 == 0) { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (result == 0) { result = i; } else { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i == n - 1){ result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i % 11 == 0) { result += 1; } else { result += 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { if (i % 11 == 0 && i % 13 == 0){ result += 1; } } } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; <mask> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; } </s> java",
      "function range": "6,5-22,5",
      "output": [
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length / 2]; for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length * 2]; for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length * 2]; Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length / 2]; Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length]; Arrays.sort(l); Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length * 2]; Arrays.sort(l); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length/2]; Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length/2]; Arrays.sort(l); Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length]; Arrays.sort(l); Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l [i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) { int[] result = new int[l.length]; int[] evens = new int[l.length]; Arrays.sort(l); Arrays.sort(evens); for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); <mask> groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; } </s> java",
      "function range": "8,13-26,13",
      "output": [
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i += 3){ groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i++){ groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i++) { groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i += 3) { groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i+=3) { groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length() / 3; i++){ groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length() % 3; i++){ groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i = i + 3) { groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length()/2; i += 3) { groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); for (int i = 0; i < s.length(); i = i + 3){ groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "<s> public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); <mask> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } } </s> java",
      "function range": "16,5-29,5",
      "output": [
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n == len) return fib.get(0); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); while (n > len) fib.add(n); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); while (n >= len) fib.add(n); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n < len) return fib.get(n); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n == len) return fib.get(len - 1); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n > len) return fib.get(len - 1); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n % len == 0) return fib.get(len - 1); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n == len) return fib.get(len - 1); n -= 1; if (n == 0) return fib.get(fib.size() - 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n % len == 0) return fib.get(len - 1); n -= 1; if (n == 0) return fib.get(fib.size() - 1; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); if (n % len == 0) return fib.get(len - 1); n -= 1; if (n == 0) return fib.get(fib.size() - 1); } }",
          "correctness": "wrong"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "<s> public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { <mask> if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; } </s> java",
      "function range": "21,5-31,5",
      "output": [
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { for (int j = 0; j < numbers.length; j += 1) { for (int k = 0; k < numbers.length; k++) { if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { for (int j = 0; j < numbers.length; j += 2) { for (int k = 0; k < numbers.length; k++) { if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { for (int j = 0; j < numbers.length; j++) { for (int k = 0; k < numbers.length; k++) { if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { for (int j = 0; j < numbers.length; j += 1) { for (int k=0; k<numbers.length; k++) { if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { for (int j = 0; j < numbers.length; j += 1) { for (int k : numbers) { if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { for (int j = 0; j < numbers.length; j += 1) { for (int k=0; k < numbers.length; k++) { if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "<s> public static int car_race_collision(int n) { <mask> } </s> java",
      "function range": "14,5-16,5",
      "output": [
        {
          "patch": "public static int car_race_collision(int n) { return n + 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n - 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n * 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n % 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n > 0? 1 : 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n * n; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n * 2 + 1 ; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n / 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n > 0? n : 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) { return n > 0? n : 0 ; }",
          "correctness": "wrong"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "<s> public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { <mask> } return result; } </s> java",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add (n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add(n + 1); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add ( n); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add(n + 1); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add(n) ; } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add ( n + 1 ) ; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add(n); result.add(n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add ( n + 1); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { result.add(n); result.add(n + 1); } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "<s> public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { <mask> if (l.get(i) + l.get(j) == 0) return true; } } return false; } </s> java",
      "function range": "10,5-18,5",
      "output": [
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = 0; j < l.size(); j += 1) { if (l.get(i) + l.get(j) == 0) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = 0; j < l.size(); j += 2) { if (l.get(i) + l.get(j) == 0) return true; } } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = i; j < l.size(); j += 1) { if (l.get(i) + l.get(j) == 0) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = 0; j < l.size(); j++) { if (l.get(i) + l.get(j) == 0) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = 0 ; j < l.size(); j += 1) { if (l.get(i) + l.get(j) == 0) return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { int j = i % l.size(); if (l.get(i) + l.get(j) == 0) return true; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = 0; j < l.size(); j += 1) { if (l.get(i) + l.get(j) == 0) return true ; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { for (int j = i; j < l.size(); j += 1) { if (l.get(i) + l.get(j) == 0) return true; } } return false ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "<s> public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { <mask> } return result; } </s> java",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result += base; x -= base; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result += change_base(x - base, base); x -= base; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result = result + base; x --; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result = result + base; x -= base; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result = result+base; x -= base; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result = change_base(x - base, base); x -= base; } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result += change_base(x, base); x -= base; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result = result + change_base(x, base); x -= base; } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result = result + change_base(x-1, base); x -= base; } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { result += change_base(x - base, base); x --; } return result; }",
          "correctness": "timeout"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "<s> public static double triangle_area(double a, double h) { <mask> } </s> java",
      "function range": "8,5-10,5",
      "output": [
        {
          "patch": "public static double triangle_area(double a, double h) { return a * h; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return a*h; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return h * a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return a / h; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return a * h ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return a + h * h; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return Math.sqrt(a*h); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return (a + h)/2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return a * h / a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) { return (a*h)/2; }",
          "correctness": "plausible"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "<s> public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); <mask> return result.get(result.size() - 1); } </s> java",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } result.add( result.get(result.size() - 1)); return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } result.add( result.get(result.size() - 1) ); return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } if (n < 4) return result.get(n); return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } result.add( result.get(0) + result.get(1) + result.get(2) ); return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } result.add( result.get(result.size() - 1); return result.get(result.size() - 1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } result.add(result.get(result.size() - 1)); return result.get(result.size() - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); } if (n < 4) return result.get(result.size() - 1); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "<s> public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { <mask> } } </s> java",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[list.length / 2]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[list.length - 1]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length / 2)]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length % 2)]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[0]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length / 1)]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[list.length / 2 - 1]; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return median(list); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[(int) (list.length / 2); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { return list[list.length % 2]; } }",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "<s> public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ <mask> } </s> java",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) ==''){ return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i)) return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) == 'a') return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) == '1'){ return true; } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ return text.charAt(i); } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) == 'A') return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i)!=''){ return false; } } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i) =='' ) return true; } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ if (text.charAt(i)!=''){ return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "<s> public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ <mask> } </s> java",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result *= p; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result *= p; } return result % n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result *= p; } return result % p; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result *= p; } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result = result * p; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result = result % p; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result *= p; } return result / n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result *= i; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result <<= p; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ result += p * i; } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "<s> public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { <mask> sb.append(c); } return sb.toString(); } </s> java",
      "function range": "16,5-23,5",
      "output": [
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c < '0' || c > '9' ) sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c < '0' || c > '9') sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c < 128) sb.append(c); else sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\n') sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='\\n'|| c =='' ) sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\n') sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c < 128) sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c < 0x20 || c > 0x7F) sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { sb.append(c); sb.append(c); sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { sb.append(c); sb.append(c); sb.append(c); sb.append(c); } sb.toString(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "<s> public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { <mask> continue; sb.append(c); } return sb.toString(); } </s> java",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='') continue; sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\n') continue; sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c == '-') continue; sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\t') continue; sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\n') continue; sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c == '\\n') continue; sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (sb.length() == 0) continue; sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\n') continue; sb.append(c); } return sb.toString() ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { if (c =='' || c =='\\n') continue; sb.append(c); } return sb.toString()(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "<s> public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { <mask> } </s> java",
      "function range": "10,5-16,5",
      "output": [
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] > t) return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] < t) return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] >= t) return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if ( l[i] > t) return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] <= t) return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] > t) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { return l[i] > t; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { return l[i] < t; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] > t) return true; } return false ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { if (l[i] > t) return true; } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "<s> public static int add(int x, int y) { <mask> } </s> java",
      "function range": "10,5-12,5",
      "output": [
        {
          "patch": "public static int add(int x, int y) { return x + y; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) { return x + y ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) { return x+y; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) { return add(x, y); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add(int x, int y) { return x += y; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) { return x * y; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add(int x, int y) { return y + x; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) { return (x + y) / 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add(int x, int y) { return add(x, y + 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add(int x, int y) { return (x + y) % 10; }",
          "correctness": "wrong"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "<s> public static boolean same_chars(String s0, String s1) { <mask> for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); } </s> java",
      "function range": "20,5-31,5",
      "output": [
        {
          "patch": "public static boolean same_chars(String s0, String s1) { HashSet<char> set0 = new HashSet<char>(); HashSet<char> set1 = new HashSet<char>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { Set<char> set0 = new HashSet<char>(); Set<char> set1 = new HashSet<char>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { Set<Character> set0 = new HashSet<Character>(); Set<Character> set1 = new HashSet<Character>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { HashSet<Character> set0 = new HashSet<Character>(); HashSet<Character> set1 = new HashSet<Character>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { Set set0 = new HashSet ( ) ; Set set1 = new HashSet ( ) ; for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { Set < Character > set0 = new HashSet<Character>(); Set < Character > set1 = new HashSet<Character>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { Set<char> set0 = new TreeSet<char>(); Set<char> set1 = new TreeSet<char>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { TreeSet<char> set0 = new TreeSet<char>(); TreeSet<char> set1 = new TreeSet<char>(); for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { CharSet set0 = new CharSet ( ) ; CharSet set1 = new CharSet ( ) ; for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) { Set < Character > set0 = new HashSet < Character > ( ) ; for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "<s> public static int fib(int n) { <mask> } </s> java",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "public static int fib(int n) { return n + 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return fib(n-1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n * 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return fib(n); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n % 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n * n ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n * n + 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n * n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) { return n * fib(n); }",
          "correctness": "wrong"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "<s> public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; <mask> } </s> java",
      "function range": "16,5-27,5",
      "output": [
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth == 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth > 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth == 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth >= 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth == 0 || depth == 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } if (depth == 0) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } if (depth == 0) return false; return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth >= 0 && depth <= 255; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; } return depth == 0 && brackets.length() > 0; }",
          "correctness": "wrong"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "<s> public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; <mask> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); Arrays.sort(reverse_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); Arrays.sort(reversed_sorted); Arrays.sort(reversed_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(sorted); Arrays.sort(reverse_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); Arrays.sort(reversed_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Collections.sort(l); Collections.sort(reverse_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); Arrays.sort(reverse_sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; else return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; Arrays.sort(l); Arrays.sort(reverse_sorted); Arrays.sort(sorted); Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; else return false; }",
          "correctness": "wrong"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "<s> public static int[] common(int[] l1, int[] l2) { <mask> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; } </s> java",
      "function range": "12,5-29,5",
      "output": [
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { ArrayList<Integer> common = new ArrayList<Integer>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { List<Integer> common = new ArrayList<Integer>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { HashSet<Integer> common = new HashSet<Integer>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { ArrayList<Integer> common = new ArrayList<>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { List<Integer> common = new ArrayList<>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { HashSet<Integer> common = new HashSet<>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { TreeSet<Integer> common = new TreeSet<Integer>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { int[] common = new int[l1.length + l2.length]; for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { int[] common = new int[l1.length + l2.length]; for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result) return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) { ArrayList<Integer> common = new ArrayList<Integer>(); for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { <mask> } } return largest; } </s> java",
      "function range": "20,5-28,5",
      "output": [
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (j > largest) { largest = j; } } return largest; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (prime_factor(j) > largest) { largest = j; } } return largest; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (j % 2 == 0) { largest = j; } } return largest; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (prime_factor(j) < largest) { largest = j; } } return largest; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (j % 2 == 0 ) { largest = j; } } return largest; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (prime_factor(j) <= largest) { largest = j; } } return largest; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (j == largest) { largest = j; } } return largest; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (prime_factor(j)) { largest = j; } } return largest; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { if (j % 2 == 0) { largest = j / 2 ; } } return largest; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "<s> public static int sum_to_n(int n) { <mask> } </s> java",
      "function range": "16,5-18,5",
      "output": [
        {
          "patch": "public static int sum_to_n(int n) { return n + 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return n * n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return n * n ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return n * n + 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return n * 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return sum_to_n(n); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return (int) n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return sum_to_n(n + 1 ) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return sum_to_n(n) + 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) { return sum_to_n(n) / n; }",
          "correctness": "wrong"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "<s> public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); <mask> return result; } </s> java",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer x : xs) { result.add(x); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer x : xs) result.add(x); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer i : xs) { result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer i : xs) result.add(i); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (int i : xs) { result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer element : xs) { result.add(element); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (int i : xs) result.add(i); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer x : xs) result.add(x) return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); for (Integer x : xs) { result.add(x) } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "<s> public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; <mask> } </s> java",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; return fibfib(n - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; return fibfib(n-1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; return fibfib(n - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; if (n == 2) return 1; return n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; if (n == 2) return 1; return fibfib(n-1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; if (n == 2) return 1; return fibfib(n - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; if (n == 2) return 1; return n - 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; if (n == 2) return 1 ; return n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; return fibfib(n - 1) + fibfib(n); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; if (n == 2) return 1 ; return n - 1 ; }",
          "correctness": "wrong"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "<s> public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } <mask> result += 1; return result; } </s> java",
      "function range": "15,5-27,5",
      "output": [
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) if (c == 'A') result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) if (c == 'a') result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) if (c == 'a' || c == 'e' || c == 'i') result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) if (c == 'A' || c == 'E' || c == 'I') result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } result += vowels_count(str_chars); result += vowels_count(str_chars); result += vowels_count(str_chars); result += 1; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) if (c == 'A' || c == 'E') result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } for (char c : str_chars) if (c == 'u' || c == 'A') result += 1; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "<s> public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { <mask> } } </s> java",
      "function range": "12,5-23,5",
      "output": [
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s + \" \" + shift; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s.substring(0, shift); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s + \"\"; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s.substring(shift); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s + \" - \" + shift; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s.substring(shift, s.length() - 1); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s + \" \" + s.substring(shift); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s + \" \" + s.charAt(shift); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { return s.substring(shift, s.length()); } }",
          "correctness": "wrong"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "<s> public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { <mask> if ('A' <= c && c <= 'Z') result += (int) c; } return result; } </s> java",
      "function range": "16,5-25,5",
      "output": [
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if ('a' <= c && c <= 'z') result += (int) c; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if (c >= '0' && c <= '9') continue; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if (c < '0' || c > '9' ) continue; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if ('0' <= c && c <= '9'') result += (int) c; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if (c >= '0' && c <= '9' ) continue; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if ('0' <= c && c <= '9'') result += (int) c; else if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if (c < '0' || c > '9') continue; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if ('0' <= c && c <= '9') result += (int) c; if ('A' <= c && c <= 'Z') result += (int) c; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { if ('a' <= c && c <= 'z') result += (int) c; if ('A' <= c and c <= 'Z') result += (int) c; } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "<s> public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { <mask> } return result; } </s> java",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result += fruit_distribution(str, result); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result *= fruit_distribution(str, result); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result = fruit_distribution(str, result); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result = result * fruit_distribution(str, result); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result = result + fruit_distribution(str, result); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result -= fruit_distribution(str, result); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result = result * fruit_distribution(str, n); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result *= str.length(); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { result = result * fruit_distribution(str, result + 1); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "<s> public static int[] pluck(int[] arr) { <mask> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java",
      "function range": "36,5-49,5",
      "output": [
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = arr[0]; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = 0; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = -1; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int index = -1; int min_even = arr[0]; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = 0, index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = 0 ; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = Integer.MAX_VALUE; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = Integer.MIN_VALUE; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = Integer.MAX_VALUE; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index }; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] pluck(int[] arr) { int min_even = Integer.MIN_VALUE; int index = -1; for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index }; }",
          "correctness": "wrong"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; <mask> return result; } </s> java",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) result += i; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) { if (i > max) result = i; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) { result += i; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) { result = i; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) { if (i < max) result = i; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) result += search(i); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) { result = result + i; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) result = result + i; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) result = i; return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; for (Integer i : lst) { result += search(i); } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "<s> public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } <mask> return result; } </s> java",
      "function range": "17,5-29,5",
      "output": [
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } Collections.sort(result); return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched =!switched; } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched =!switched; } Collections.sort(result); return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } Collections.sort (result); return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } Collections.sort(result); Collections.reverse(result); return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } Collections.sort(lst); return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } if (switched) { result.add(Collections.max(lst)); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } if (switched) { result.add(Collections.min(lst)); } return result; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } switched = false; } Collections.sort(result, new IntegerComparator()); return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "<s> <mask> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); } </s> java",
      "function range": "16,5-26,5",
      "output": [
        {
          "patch": "public static double pow(double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double pow (double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double pow2 (double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double pow2(double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static double pow (double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static double pow(double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "private static double pow2 (double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double pow ( double a, double b, double c) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "Math.pow(a, b) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double pow (double a, double b, double c ) { if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; <mask> return true; } </s> java",
      "function range": "20,5-34,5",
      "output": [
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i += 1; j -= 1; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i++; j--; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i++; j --; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i = i + 1; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i += 1; j--; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i++; j--; } if (sum == w) return false; return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i++; j--; } if (q[i]!= q[j]) return false; return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i++; j--; } if (q[i] == q[j]) return false; return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i++; j--; } if (q[j]!= q[i]) return false; return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i]!= q[j]) return false; i += 1; j -= 1; } if (sum > w) return false; return true; }",
          "correctness": "plausible"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "<s> public static int smallest_change(int[] arr) { int result = 0; <mask> result += 1; } return result; } </s> java",
      "function range": "13,5-21,5",
      "output": [
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = 0; i < arr.length; i++) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = 0 ; i < arr.length; i++) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i=0; i<arr.length; i++) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i : arr) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = 0; i < arr.length-1; i++) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = 1; i < arr.length; i++) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = 0 ; i < arr.length; i++){ result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = 0; i < arr.length; i++){ result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) { int result = 0; for (int i = arr.length-1; i >= 0; i--) { result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "<s> public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; <mask> if (l1 <= l2) return lst1; return lst2; } </s> java",
      "function range": "18,5-29,5",
      "output": [
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st : lst2) l2 += st.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st2 : lst2) l2 += st2.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st : lst2) if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st : lst2 ) l2 += st.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st : lst2) l2 += st.length() ; if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; while (l1 <= l2) l2 += st.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; while (l1 < l2) l2 += st.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String s : lst2) l2 += s.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st : lst2) l2 += st.length(); l2 += st.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; for (String st : lst2) l2 += st.length(); if (l1 <= l2) return lst1; return lst2; }",
          "correctness": "plausible"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "<s> public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { <mask> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; } </s> java",
      "function range": "19,5-31,5",
      "output": [
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { for (int k = j; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { if (! is_prime(j)) continue; for (int k = j; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { for (int k = 2; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { for (int k = 1; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { for (int k = j + 1; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { if (! is_prime(j)) continue; for (int k = 1; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { for (int k = 0; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { if (! is_prime(j)) continue; for (int k = j; k < i; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { int k = j * i; if (! is_prime(k)) continue; if (i * j * k == a) return true; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { if (! is_prime(j)) continue; for (int k = j; k < a; k += 1){ if (! is_prime(k)) continue; if (i * j * k == a ) return true; } } } return false; }",
          "correctness": "plausible"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "<s> public static boolean is_simple_power(int x, int n) { <mask> while (power < x) { power *= n; } return power == x; } </s> java",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1 ; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = n; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1 << n; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1 / n; while (power < x) { power *= n; } return power == x; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = x; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1 + n; while (power < x) { power *= n; } return power == x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = n - 1 ; while (power < x) { power *= n; } return power == x; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) { int power = 1e6; while (power < x) { power *= n; } return power == x; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "<s> public static boolean iscude(int a) { <mask> BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; } </s> java",
      "function range": "18,5-24,5",
      "output": [
        {
          "patch": "public static boolean iscude(int a) { double root = Math.pow(a, 3); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = a; BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = Math.pow(2, a); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) { BigDecimal root = new BigDecimal(a); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = Math.pow(10, a); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = Double.valueOf(a); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = Math.round(a); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = Math.pow(a, 3); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)); == a; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) { double root = Math.pow(a, 3); BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) ==a; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "<s> public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { <mask> result += 1; } return result; } </s> java",
      "function range": "21,5-28,5",
      "output": [
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (c == 'a') result += 1; else result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (c == '0') result += 1; else result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (c == 'a') result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (hex_key(c)) result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if ( Character.isDigit(c)) result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (c == '0') result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (hex_key(c) == 0) result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (c =='#'|| c =='+') result += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (hex_key(c) == 1) result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { if (hex_key(c) == 0) result += 1; else result += 1; } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "<s> public static String decimal_to_binary(int decimal) { <mask> return \"db\" + result + \"db\"; } </s> java",
      "function range": "15,5-18,5",
      "output": [
        {
          "patch": "public static String decimal_to_binary(int decimal) { String result = Integer.toString(decimal); return \"db\" + result + \"db\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { String result = String.valueOf(decimal); return \"db\" + result + \"db\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { int result = Integer.parseInt(decimal); return \"db\" + result + \"db\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { String result = Integer.toBinaryString(decimal); return \"db\" + result + \"db\"; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { int result = (int) decimal; return \"db\" + result + \"db\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { int result = Integer. parseInt(decimal); return \"db\" + result + \"db\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { String result = Integer. toString(decimal) ; return \"db\" + result + \"db\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { String result = decimal_to_binary(decimal); return \"db\" + result + \"db\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) { String result = Integer.toBinaryString(decimal); return \"db\" + result + \"db; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "<s> public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { <mask> return false; } return true; } </s> java",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i + 1)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i + 1)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i + 1)); return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= 'happy') return false; } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i+1)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i + 1) ) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i + 2)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i) < '0' || s.charAt(i) > '9' ) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= '0' ) return false; } return true; }",
          "correctness": "wrong"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "<s> public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; <mask> else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; } </s> java",
      "function range": "26,5-59,5",
      "output": [
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 0.7) letter_grade[i] = \"C\"; else if (gpa > 0.3) letter_grade[i] = \"C-\"; else if (gpa > 0.4) letter_grade[i] = \"D+\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 0.7) letter_grade[i] = \"C\"; else if (gpa > 0.3) letter_grade[i] = \"C-\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 0.7) letter_grade[i] = \"C\"; else if (gpa > 0.3) letter_grade[i] = \"C-\"; else if (gpa > 0.8) letter_grade[i] = \"D+\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 0.7) letter_grade[i] = \"C\"; else if (gpa > 0.3) letter_grade[i] = \"C-\"; else if (gpa > 1.0) letter_grade[i] = \"D+\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 0.7) letter_grade[i] = \"C\"; else if (gpa > 0.3) letter_grade[i] = \"C-\"; else letter_grade[i] = \"D+\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 1.7) letter_grade[i] = \"C\"; else if (gpa > 1.3) letter_grade[i] = \"C-\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 3.7) letter_grade[i] = \"C\"; else if (gpa > 3.3) letter_grade[i] = \"C-\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 3.7) letter_grade[i] = \"C\"; else if (gpa > 3.3) letter_grade[i] = \"C-\"; else if (gpa > 1.0) letter_grade[i] = \"D+\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 0.7) letter_grade[i] = \"C\"; else if (gpa > 0.3) letter_grade[i] = \"C-\"; else letter_grade[i] = \"E+\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; else if (gpa > 2.7) letter_grade[i] = \"C\"; else if (gpa > 2.3) letter_grade[i] = \"C-\"; else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; }",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "<s> public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { <mask> return false; } return true; } </s> java",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= 'a') return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= string.charAt(i + 1)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= string.charAt(i)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= string.charAt(i + 1)) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= 'A') return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!='' && string.charAt(i)!='' ) return false; } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= string.charAt(i + 1)); return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!='' || string.charAt(i)!='' ) return false; } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= '0' && string.charAt(i)!= '0') return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { if (string.charAt(i)!= '0' && string.charAt(i)!='' ) return false; } return true; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "<s> public static int starts_one_ends(int n) { if (n == 1) return 1; <mask> } </s> java",
      "function range": "7,5-11,5",
      "output": [
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; else return n - 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; return n - 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; else return n - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; return n - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; if (n == 2) return 2; return n - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; if (n == 2) return 2; return n; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; if (n == 2) return 0; return n - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; return starts_one_ends(n - 1); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; return starts_two_ends(n - 1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int starts_one_ends(int n) { if (n == 1) return 1; return ends_one_ends(n - 1); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "<s> public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ <mask> } return Integer.toBinaryString(sum); } </s> java",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += (N + \"\").charAt(i); } return Integer.toBinaryString(sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += solve(N + \"\"[i]); } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += N + \"\"[i]; } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += i; } return Integer.toBinaryString(sum); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += N.charAt(i); } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += N + \"\" + i; } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += N[i]; } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += Integer.parseInt(N + \"\"[i]); } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += Integer.toBinaryString(N + \"\").charAt(i); } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ sum += Integer.toBinaryString(N + \"\").charAt(i).charAt(0); } return Integer.toBinaryString(sum); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "<s> public static int add_even_at_odd(int[] lst) { int sum = 0; <mask> if (lst[i] % 2 == 0) sum += lst[i]; } return sum; } </s> java",
      "function range": "8,5-15,5",
      "output": [
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 0; i < lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 0 ; i < lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 0; i < lst.length; ++i) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i=0; i<lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 1; i < lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 0; i<lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for ( int i = 0; i < lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 0; i < lst.Length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) { int sum = 0; for (int i = 0 ; i < lst.length; i++) { if (lst[i] % 2 == 0) sum += lst[i]; } return sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "<s> public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); <mask> } </s> java",
      "function range": "17,5-25,5",
      "output": [
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += new String(chars); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += chars[0]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += chars[chars.length - 1]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += chars; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result = result.concat(chars); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += chars[0] + chars[1]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result = result + chars; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += new String(chars, \" \"); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += String.valueOf(chars); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); result += new String(chars); } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "<s> public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { <mask> } } } return result; } </s> java",
      "function range": "22,5-33,5",
      "output": [
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i) == x) { result.add(new Tuple()); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i) == x) { result.add(lst.get(i)); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i) > x) { result.add(lst.get(i)); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i)!= null) { result.add(lst.get(i)); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i).size() == x) { result.add(lst.get(i)); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i) == x) { result.add(lst.get(i+1)); } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i).size() == x) { if (lst.get(i).size() == x) { result.add(lst.get(i)); } } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i).size() == x) { if (lst.get(i).size() == x) { result.add(new Tuple()); } } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { for (int j = 0; j < x; j++) { if (lst.get(i).get(j) == x) { result.add(new Tuple()); } } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { if (lst.get(i).size() == x) { if (lst.get(i).size() == x) { result.add(lst.get(i); } } } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "<s> public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ <mask> } return array; } } </s> java",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ array[i] = array[i - 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ array[i] = array[i + 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ array[i] = array[i]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] == array[i + 1]) return array; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] < array[i + 1]) array[i] = array[i + 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] > array[i + 1]) array[i] = array[i + 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] % 2 == 1) array[i] = array[i + 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] == array[i + 1]) array[i] = array[i + 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] % 2 == 0) array[i] = array[i + 1]; } return array; } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ if (array[i] % 2 == 1) array[i] = array[i - 1]; } return array; } }",
          "correctness": "wrong"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "<s> public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( <mask> ); } else { sb.append(c); } } return sb.toString(); } </s> java",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( c +'' ); } else { sb.append(c); } } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c - '0' ) ); } else { sb.append(c); } } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c) ); } else { sb.append( c); } } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( c +'' ); } else { sb.append( c); } } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c) +'' ); } else { sb.append(c); } } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c ) ); } else { sb.append( c); } } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c ) ); } else { sb.append(c); } } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c) ); } else { sb.append(c); } } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( (char) c ); } else { sb.append( c); } } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( d.charAt(c) ); } else if ('a' <= c && c <= 'z'){ sb.append( c ); } else { sb.append(c); } } return sb.toString(); }",
          "correctness": "wrong"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "<s> public static Integer next_smallest(int[] lst) { <mask> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; } </s> java",
      "function range": "15,5-25,5",
      "output": [
        {
          "patch": "public static Integer next_smallest(int[] lst) { ArrayList<Integer> numbers = new ArrayList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { List<Integer> numbers = new ArrayList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { ArrayList<Integer> numbers = new ArrayList<>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { List<Integer> numbers = new ArrayList<>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { ArrayList numbers = new ArrayList(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { List<Integer> numbers = new LinkedList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { LinkedList<Integer> numbers = new LinkedList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { ArrayList<Integer> numbers = new ArrayList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[0]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { List<Integer> numbers = new ArrayList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[0]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) { ArrayList<Integer> numbers = new ArrayList<Integer>(); for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1] }",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "<s> public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { <mask> result += 1; } return result; } </s> java",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) { return result; } result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) { return 0; } result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) { return 1; } result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) { break; } result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) result += 1; else result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) { result += 1; } else { result += 1; } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) result += 1; else if (is_bored(sentence)) result += 1; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { if (is_bored(sentence)) result += 1; else if (is_bored(sentence) == false) result += 1; } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "<s> public static boolean any_int(double x, double y, double z) { <mask> return true; } return false; } </s> java",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if (x >= y && x <= z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if ( x >= y && x <= z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if (x > y && x < z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if ( x > y && x < z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if ( x == y && z == z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if (x <= y && x <= z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) { if (x == y && z == z) { return true; } return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "<s> public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } <mask> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); } </s> java",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { c = Character.toLowerCase(c); } if (Character.isUpperCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isUpperCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } else if (Character.isUpperCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } else if (Character.isLowerCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLetter(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { c = Character.toLowerCase(c); } if (Character.isUpperCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2). } sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { c = Character.toLowerCase(c); } if (Character.isUpperCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) (( int) c + 2); } sb.append(c); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } if (Character.isLowerCase(c)) { c = Character.toLowerCase(c); } if (Character.isUpperCase(c)) { c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2)); } sb.append(c); } return sb.toString(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "<s> public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { <mask> } return result; } </s> java",
      "function range": "22,5-35,5",
      "output": [
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { result += c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { result = result + c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { result += (int) c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { result += skjkasdkd(lst[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { if (is_prime(c)) result = result + 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { if (lst[i] > c) result = lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { if (is_prime(c)) result = result + c; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { if (lst[i] > c) result = lst[i]; i += 1; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { if (is_prime(c)) result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { if (is_prime(lst[i])) result += c; } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "<s> public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } <mask> state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } } </s> java",
      "function range": "16,5-43,5",
      "output": [
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else if (state.equals(\"upper\")) { state = \"mixed\"; break; } else if (state.equals(\"lower\")) { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else { if (str_key.toLowerCase().equals(str_key)) state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else if (state.equals(\"mixed\")) { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else if (str_key.toLowerCase().equals(str_key)) { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else if (state.equals(\"upper\")) { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else if (state.equals(\"upper\")) { state = \"mixed\"; break; } else { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } } else if (state.equals(\"upper\")) { state = \"mixed\"; break; } else if (state.equals(\"lower\")) { state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")) } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ <mask> } } if (is_prime) primes.add(i); } return primes; } </s> java",
      "function range": "17,5-30,5",
      "output": [
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ if (is_prime) { primes.add(i); } else { primes.add(i); } } if (is_prime) primes.add(i); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = false; if (is_prime) { is_prime = true; } } if (is_prime) primes.add(i); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = true; if (is_prime) { is_prime = false; } } if (is_prime) primes.add(i); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = true; if (is_prime) { while (is_prime) { is_prime = false; } } if (is_prime) primes.add(i); } return primes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = true; while (is_prime) { if (is_prime) { is_prime = false; } } if (is_prime) primes.add(i); } return primes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = false; while (is_prime) { if (is_prime) { is_prime = true; } } if (is_prime) primes.add(i); } return primes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = true; if (is_prime) { if (i % 2 == 0) { is_prime = false; } } if (is_prime) primes.add(i); } return primes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = false; if (is_prime) { if (i % 2 == 0) { is_prime = true; } } if (is_prime) primes.add(i); } return primes; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ boolean is_prime = true; if (is_prime) { while (is_prime) { is_prime = false; } } if (is_prime) primes.add(i) } return primes; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "<s> public static int multiply(int a, int b) { <mask> } </s> java",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "public static int multiply(int a, int b) { return a * b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) { return a * b ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) { return a*b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) { return a + b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) { return (a * b) / a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) { return Math. pow(a, b); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) { return b * a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) { return Math. pow ( a, b); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) { return Math. pow (a, b); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) { return a * (b - a); }",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "<s> public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); <mask> count += 1; } return count; } </s> java",
      "function range": "11,5-19,5",
      "output": [
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c >= '0' && c <= '9' ) count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (s.charAt(i) == c) count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c < '0' || c > '9' ) count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c == 'A' || c == 'Z') count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c == 'A') count += 1; else if (c == 'Z') count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c =='' || c =='\\n') count += 1; } return count; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c >= '0' && c <= '9') count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c =='' || c =='\\t') count += 1; } return count; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (s.charAt(i)!= c) count += 1; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); if (c == 'A') count += 1; else if (c == 'B') count += 1; } return count; }",
          "correctness": "wrong"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; <mask> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; } </s> java",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0) { result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0){ result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0) { result = (int)Math.floor(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 1){ result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (value.length() == 1){ result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0) { result = 0; } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (value.length() < 1){ result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0) { result = (int) Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0 ) { result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; if (num < 0) { result = (int)Math.round(num); } else if (value.length() > 0){ result = (int)Math.round(num; } return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "<s> public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { <mask> } return pile; } </s> java",
      "function range": "20,2-26,2",
      "output": [
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(i); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(i); pile.add(i); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add( i); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(i) ; } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(Integer.valueOf(i)); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(new Integer(i)); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(i); pile.add(i + 1); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(pile.get(i)); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(i); pile.add(i+1); } return pile; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { pile.add(i); pile.add(i + 1); } return pile; }",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "<s> public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); <mask> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; } </s> java",
      "function range": "15,2-30,2",
      "output": [
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = \"\"; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = \" \"; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = \" \"; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = \" \" ; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = new String(); for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); StringBuilder s_list = new StringBuilder(); for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list =''; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = ''; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = \" \"; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); String s_list = \" \" ; for(char c : s.toCharArray()) { if(c == ',') { s_list +=''; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "<s> public static int choose_num(int x, int y) { <mask> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; } </s> java",
      "function range": "14,5-19,5",
      "output": [
        {
          "patch": "public static int choose_num(int x, int y) { if((x % 2) == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if(x % 2 == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if((x % 2 == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if((y % 2) == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if(x % 2) == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if((y % 2 == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if(y % 2 == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if((x % 2) == 1) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if((y % 4) == 0) return x; if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) { if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; }",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "<s> public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { <mask> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); } </s> java",
      "function range": "15,5-30,5",
      "output": [
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.floor(avg); } else if(rem >= 0.5) { avg_rounded = (int) Math.ceil(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.round(avg); } else if(rem >= 0.5) { avg_rounded = (int) Math.round(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.round(rem); } else if(rem >= 0.5) { avg_rounded = (int) Math.round(rem); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.floor(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.floor(avg); } else if(rem >= 0.5) { avg_rounded = (int) Math.round(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.round(rem); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.floor(rem); } else if(rem >= 0.5) { avg_rounded = (int) Math.ceil(rem); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.floor(avg); } else if(rem <= 0.5) { avg_rounded = (int) Math.ceil(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.round(avg); } else if(rem >= 0.25) { avg_rounded = (int) Math.round(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { avg_rounded = (int) Math.round(avg); } else if(rem >= 0.5) { avg_rounded = (int) Math.floor(avg); } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); }",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "<s> public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; <mask> break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; } </s> java",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit == 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit!= 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if (curr_digit == 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(num == 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit == 1) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit < 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if (curr_digit!= 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit > 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit == 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; if(curr_digit == 0) { all_odd = false; break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; }",
          "correctness": "wrong"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "<s> public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { <mask> result.add(digit_map.get(num)); } } return result; } </s> java",
      "function range": "31,5-50,5",
      "output": [
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num)!= null) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if (digit_map.get(num)!= null) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.containsKey(num)) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num)) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if (digit_map.containsKey(num)) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.containsKey(num)) { result.add(digit_map.get(num)); } else { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if (digit_map.get(num)) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num) == null) { result.add(digit_map.get(num)); } else { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.get(num) == null) { result.add(digit_map.get(num)); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { if(digit_map.containsKey(num)) { result.add(digit_map.get(num)); } else if(digit_map.containsKey(num)){ result.add(digit_map.get(num)); } } return result; }",
          "correctness": "plausible"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "<s> public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; <mask> ret.add(x); } } return ret; } </s> java",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = i; j <= i; j++) x *= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = 0; j <= i; j++) x *= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = 1; j <= i; j++) x /= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = i; j <= n; j++) x *= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = 1; j <= i; j++) x *= i; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int i = 1; i <= i; i++) x *= i; ret.add(x); } } return ret; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = 1; j <= n; j++) x *= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for(int j = 1; j <= i; j++) x += j; ret.add(x); } } return ret; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; for (int j = 1; j <= i; j++) x *= j; ret.add(x); } } return ret; }",
          "correctness": "wrong"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "<s> public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { <mask> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; } </s> java",
      "function range": "39,5-47,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += i; odd_palindrome_count += i; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += even_palindrome(i); odd_palindrome_count += odd_palindrome(i); } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count++; odd_palindrome_count++; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += i; odd_palindrome_count -= i; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count ++; odd_palindrome_count ++; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += odd_palindrome_count; odd_palindrome_count += even_palindrome_count; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += i; odd_palindrome_count++; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += i; odd_palindrome_count += i - 1; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += i; odd_palindrome_count += i; } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { even_palindrome_count += even_palindrome(i); odd_palindrome_count += odd_palindrome(i); } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "<s> public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; <mask> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; } </s> java",
      "function range": "6,5-20,5",
      "output": [
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = true; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = true; else neg = false; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) continue; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = false; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if (num == 0) neg = true; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = false; else neg = true; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if (num == 0) neg = true; else neg = false; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = true; else neg =!neg; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = true; else neg = num > 0; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; if(num == 0) neg = true; else neg = false; String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count ++; } return count; }",
          "correctness": "wrong"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "<s> public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); <mask> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; } </s> java",
      "function range": "7,5-29,5",
      "output": [
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.get(arr.size() - 1); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = sorted_arr.get(arr.size() - 1); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.get(arr.get(arr.size() - 1)); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.get(arr.size()-1); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.get(0); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = sorted_arr.get(0); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.size() - 1; int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.get(arr.get(arr.size()-1)); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = sorted_arr.get(arr.size()-1); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)) { return false; } } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); int min_value = arr.get(arr.get(arr.size() - 1)); int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i)!= sorted_arr.get(i)); { return false; } } return true; }",
          "correctness": "wrong"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "<s> public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; <mask> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; } </s> java",
      "function range": "20,5-32,5",
      "output": [
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if((i % 2) == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if(i % 2) == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if((i % 2) == 1) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if((i % 2 == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for (int i : lst1) { if((i % 2) == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if(i % 2 == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if((i % 2)!= 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if((i % 2) == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"No\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; for(int i : lst1) { if((i % 2) == 0) odd++; } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; }",
          "correctness": "wrong"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "<s> public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { <mask> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; } </s> java",
      "function range": "19,5-40,5",
      "output": [
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] > most_count) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] < most_count) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] == 0) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] > 0) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] < 0) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i - 'a'] == 0) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(list_letters[i].charAt(0) == 'a') { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] > most_count) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] < most_count) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { if(count_letter[i] > most_count) { most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; }",
          "correctness": "plausible"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "<s> public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { <mask> new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; } </s> java",
      "function range": "17,5-32,5",
      "output": [
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if (s.charAt(i) == c) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if(s.charAt(i) == c) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if(s.charAt(i)!= c) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if (s.charAt(i)!= c) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if (s.charAt(i) == c.charAt(i)) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if(s.charAt(i)!= c.charAt(i)) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if(s.charAt(i) == c.charAt(i)) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if (s.charAt(i)!= c.charAt(i)) { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if(s.charAt(i) == c) { new_s += s.charAt(i); } else { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { if (s.charAt(i) == c) { new_s += s.charAt(i); } else { new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "<s> public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; <mask> } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; } </s> java",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n++; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if (digit % 2 == 0) { n++; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n += digit; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2!= 0) { n++; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 1) { n++; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit >= '0' && digit <= '9') { n++; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n = n + 1; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n += digit; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit >= '0' && digit <= '9') { n++; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; if(digit % 2 == 0) { n = n + 1; } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "<s> public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { <mask> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; } </s> java",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { s += num; if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { s = Math.min(s, num); if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { if(num < 0) { s = num; } else if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { if(s > max_sum) { s = max_sum; } if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { if(s > max_sum) { max_sum = s; } if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { if(s > max_sum) { s = max_sum; } if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { if(num < 0) { s = num; } else if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { s = Math.min(s, num); if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { s += num; if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { if(num < 0) { s = num; } else if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum ; return min_sum; }",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "<s> public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; <mask> } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; } </s> java",
      "function range": "38,5-48,5",
      "output": [
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i].length; j++) { row_capacity++; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i].length; j++) { row_capacity += grid[i][j]; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for (int j = 0; j < grid[i].length; j++) { row_capacity++; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for (int j = 0; j < grid[i].length; j++) { row_capacity += grid[i][j]; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i]; j++) { row_capacity += grid[i][j]; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i]; j++) { row_capacity++; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i].length; j++) { row_capacity += grid[i][j]; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result ; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i].length; j++) { row_capacity += grid[i][j]; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity ; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; for(int j = 0; j < grid[i].length; j++) { row_capacity++; } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "<s> @Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { <mask> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java",
      "function range": "31,10-42,10",
      "output": [
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0; } else if(num_ones_o1 > num_ones_o2) return 1; else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0; } else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0 ; } else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0; } if(num_ones_o1 > num_ones_o2) return 1; else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { if(num_ones_o1 > num_ones_o2) return 1; else return -1; } else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0 ; } if(num_ones_o1 > num_ones_o2) return 1; else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0; } if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return num_ones_o1 - num_ones_o2; } else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return - 1; } else if(num_ones_o1 < num_ones_o2) return -1; else return 1; }",
          "correctness": "wrong"
        },
        {
          "patch": "@Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { return 0; } else if(num_ones_o1 > num_ones_o2) return 1; else if(num_ones_o1 < num_ones_o2) return -1; else return 1 }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "<s> public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; <mask> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; } </s> java",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\" \"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\"\\\\s\"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\",\"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\"\\\\s+\"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\"\\\\.\"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\" \"); String[] vowels = words[i].split(\" \"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\" \"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words [i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\"\\\\s+\"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; String[] vowels = words[i].split(\"\\\\s+\"); for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result.; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "<s> public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); <mask> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; } </s> java",
      "function range": "23,5-34,5",
      "output": [
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i = 0; i < word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for (int i = 0; i < word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i=0; i<word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i = 1; i < word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i=0;i<word.length();i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i=0; i < word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i = 1; i <= word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i = 0; i < word.length(); i++){ if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i=0;i<word.length();i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); for(int i=0; i<word.length(); i++) { if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) &&!vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; }",
          "correctness": "wrong"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "<s>  </s> java",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "<s> public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); <mask> result.add(arr.get(i)); } return result; } </s> java",
      "function range": "32,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; i++) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for(int i = 0; i < k; i++) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0 ; i < k; i++) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i=0; i<k; i++) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; i++){ result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; ++i) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 1; i <= k; i++) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i<k; i++) { result.add(arr.get(i)); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0 ; i < k; i++) { result.add(arr.get(i)); } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); for (int i = 0; i < k; ++i) { result.add(arr.get(i)); } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "<s> public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { <mask> result += lst.get(i); } } return result; } </s> java",
      "function range": "16,5-24,5",
      "output": [
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if(lst.get(i) > 0) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if(lst.get(i)!= null) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if (lst.get(i) > 0) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if (lst.get(i)!= null) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if(lst.get(i) == null) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if (lst.get(i) == null) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if (lst.get(i).equals(result)) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if(lst.get(i).equals(result)) { result += lst.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if(lst.get(i).equals(result)) { result += lst.get(i); } } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { if (lst.get(i).equals(result)) { result += lst.get(i); } } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { <mask> } } return result; } </s> java",
      "function range": "21,5-29,5",
      "output": [
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i)!= null) { result += arr.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i)!= null) { result++; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i) < arr.size()) { result += arr.get(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i) == null) { arr.add(i); result++; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i).equals(arr.get(i))) { result++; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i) == null) { arr.add(i); } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i).equals(arr.get(i)) { result++; } } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i).equals(arr.get(i))) { result = i + 1; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i).equals(arr.get(i))) { result = i; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { if(arr.get(i).compareTo(arr.get(i)) == 0) { result++; } } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "<s> public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); <mask> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; } </s> java",
      "function range": "24,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else if((n % 2) == 1) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else { if((n % 2) == 1) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else if((n % 2) == 2) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else if((n % 2) == 0) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); if((n % 2) == 1) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else { if((n % 2) == 0) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else if(n % 2 == 1) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else if(n % 2) == 1) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else if((n % 2) == 1) result.add(n); else { n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); else { if((n % 2) == 1) result.add(n); else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "<s> public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { <mask> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; } </s> java",
      "function range": "25,5-50,5",
      "output": [
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 30)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 31)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 29)) return false; } if(month == 2 && (day < 1 || day > 30)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1.length && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 30)) return false; if(month == 2 && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { if(month == month_check1[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29) return false; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "<s> public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); <mask> } String[] result = {Integer.toString(count)}; return result; } } </s> java",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr =='') count++; else count++; } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr =='') { count++; } else { count++; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr!='') { count++; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr =='') count++; } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr =='') { count++; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr =='') { count++; break; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); count++; if(curr =='') { break; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr!='') { count++; } else { break; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr!='') { count++; } else { count++; } } String[] result = {Integer.toString(count)}; return result; } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); if(curr =='') { count++; } else { count++; } } String[] result = {Integer.toString(count)}; return result ; } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { <mask> } return true; } </s> java",
      "function range": "22,5-37,5",
      "output": [
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) > 2) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) < 2) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) == 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) < 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) > 1) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i])) return false; } return true; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) > 0) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) < 1) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { if(count_num.get(lst[i]) > 3) return false; } return true; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { count_num.put(lst[i], count_num.get(lst[i]) - 1); } return true; }",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "<s> public static String intersection(int[] interval1, int[] interval2) { <mask> int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; } </s> java",
      "function range": "33,5-39,5",
      "output": [
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1.length; int r = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1[0]; int r = interval2[0]; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1[i]; int r = interval2[i]; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1.length(); int r = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1.length ; int r = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int r = interval1.length; int l = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1; int r = interval2; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1.length, r = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1.length; int r = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"No\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) { int l = interval1.length; int r = interval2.length; int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; <mask> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; } </s> java",
      "function range": "16,5-28,5",
      "output": [
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod += Math.abs(arr[i]); } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod = Math.abs(arr[i]); } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod *= Math.abs(arr[i]); } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod += Math.abs(arr[i]); } return prod; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod *= arr[i]; } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod = Math.abs(arr[i]); } return prod; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod += arr[i]; } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod += Math.abs(arr[i]); } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod = Math.abs(arr[i]); } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; else prod += Math.abs(arr[i]); } return prod; }",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "<s> public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { <mask> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; } </s> java",
      "function range": "35,5-54,5",
      "output": [
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val = val + 1; } else { val = val - 1; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val += grid[i][j]; } else { val -= grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val = val * grid[i][j]; } else { val = val * grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val = val + grid[i][j]; } else { val = val - grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val += grid[i][j]; } else { val += grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val -= grid[i][j]; } else { val -= grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val += grid[i][j]; } else if(grid[i][j] == 2) { val -= grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val += grid[i][j]; } else if(grid[i][j] == 0) { val -= grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val = val * grid[i][j]; } else { val = val * grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { val = val + grid[i][j]; } else { val = val - grid[i][j]; } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans ; }",
          "correctness": "wrong"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "<s> public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; <mask> } return sequence; } </s> java",
      "function range": "23,5-37,5",
      "output": [
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; if(n == 1) { sequence[0] = 2; return sequence; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; if(n == 1) { sequence[0] = 0; return sequence; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; if(n == 1) { sequence[0] = 1; return sequence; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; if(n == 1) { sequence[1] = 1; return sequence; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; for(int i = 0; i < n; i++) { sequence[i] = i; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; for(int i = 0; i < n; i++) { sequence[i] = 1; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; for (int i = 0; i < n; i++) { sequence[i] = i; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; for(int i=0; i<n; i++) { sequence[i] = tri(i); } return sequence; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; for(int i = 0 ; i < n; i++) { sequence[i] = i; } return sequence; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; for(int i = 0; i < n; i++) { sequence[i] = 0; } return sequence; }",
          "correctness": "wrong"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "<s> public static int digits(int n) { int product = 1; int odd_count = 0; <mask> odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; } </s> java",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n % 10 == 0) { if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while (n % 10 == 0) { if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while (n > 0 ) { if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n > 0) { if(n % 10 == 0) { product *= 10; odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n > 0 ) { product *= 10; if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n > 0) { if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n > 0 ) { if(n % 10 == 0) { product *= 10; odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n % 10 == 0) { if(n % 10 == 0) { product++; odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n % 10 == 0) { if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) { int product = 1; int odd_count = 0; while(n > 0 ) { product *= 10; if(n % 10 == 0) { odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product ; }",
          "correctness": "wrong"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } <mask> i++; cnt++; } } return cnt >= 2; } </s> java",
      "function range": "21,5-37,5",
      "output": [
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(Integer i : opening_brackets) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(Integer i : opening_brackets) { if(brackets.charAt(i) == '[') { closing_brackets.add(i); i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(int i = 0; i < opening_brackets.size(); i++) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(int i = 0; i < closing_brackets.length(); i++) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(int i = 0; i < closing_brackets.size(); i++) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(int i = 0; i < opening_brackets.length(); i++) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0 ; for(Integer i : opening_brackets) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(Integer i = 0; i < opening_brackets.size(); i++) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(Integer i: opening_brackets) { if(brackets.charAt(i) == '[') { i++; cnt++; } } return cnt >= 2; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } int cnt = 0; for(Integer i : opening_brackets) { if(brackets.charAt(i) == '[') { closing_brackets.add(i); i++; cnt++; } } return cnt >= 2 }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "<s> public static long sum_squared_nums(double[] lst) { <mask> } return result; } </s> java",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0L; for (double x : lst) { result += x; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0 ; for (double x : lst) { result += x; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0; for (double x : lst) { result += x; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0L; for(double x : lst) { result += x; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0L; for (double x : lst) { result++; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0L; for (double a : lst) { result += a; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0L; for (double d : lst) { result += d; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0 ; for (double x : lst) { result++; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0 ; for (double d : lst) { result += d; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) { long result = 0 ; for(double x : lst) { result += x; } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "<s> public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; <mask> } </s> java",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equalsIgnoreCase(last) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equals(last) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equalsIgnoreCase(last); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1]; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equals(last); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equals(last) }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equalsIgnoreCase(last) }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; return parts[parts.length - 1].equals(last.charAt(0)); }",
          "correctness": "wrong"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "<s> public static int can_arrange(int[] arr) { <mask> } return ind; } </s> java",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0 ; for (int i : arr) { ind++; } return ind; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0; for (int i : arr) { ind++; } return ind; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0 ; for(int i : arr) { ind++; } return ind; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { if (arr == null) { return 0 ; } return ind; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { for (int ind=0; ind<arr.length; ind++) { } return ind; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0; for (int i=0; i<arr.length; i++){ ind++; } return ind; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { for (int ind : arr) { } return ind; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0 ; for (int i : arr) { } return ind; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0 ; for (int i=0; i<arr.length; i++) { } return ind; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) { int ind = 0; for (int i=0; i<arr.length; i++) { } return ind; }",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "<s> public static int[] largest_smallest_integers(int[] lst) { <mask> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } </s> java",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int min_positive = 0; for(int i=0; i<lst.length; i++) { if(lst[i] < 0) { positive = false; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int min_positive = 0; for(int i=0;i<lst.length;i++) { if(lst[i] < 0) { positive = false; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; for(int i=0; i<lst.length; i++) { if(lst[i] < 0) { positive = false; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int max_negative = 0; int min_positive = 0; for(int i=0;i<lst.length;i++) { if(lst[i] < 0) { negative = true; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int min_positive = 0; for(int i=0; i<lst.length; i++) { if(lst[i] < min_positive) { positive = false; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int max_negative = 0; int min_positive = 0; for(int i=0; i<lst.length; i++) { if(lst[i] < 0) { negative = true; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int min_positive = 0; for(int i=0;i<lst.length;i++) { if(lst[i] < min_positive) { positive = false; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int max_negative = 0; int min_positive = 0; for(int i=0;i<lst.length;i++) { if(lst[i] < 0) { max_negative++; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int max_negative = 0; int min_positive = 0; for(int i=0;i<lst.length;i++) { if(lst[i] < 0) { negative = true; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) { boolean positive = false; int max_negative = 0; int min_positive = 0; for(int i=0; i<lst.length; i++) { if(lst[i] < 0) { negative = true; } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "<s> public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } <mask> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; } </s> java",
      "function range": "17,5-36,5",
      "output": [
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a == null || temp_b == null) return null; if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a == null && temp_b == null) return null; if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a == null) return null; if(temp_b == null) return a; if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(a == null || b == null) return null; if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a == null) return null; if(temp_b == null) return a; else if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a < temp_b) return null; if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a == null) return null; if(temp_b == null) return a; if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } if(temp_a == null) return null; if(temp_b == null) return a; else if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "<s> public static boolean is_equal_to_sum_even(int n) { <mask> } </s> java",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n % 2 == 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n % 2 == 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n == 1 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n == 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n % 3 == 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n == 2 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n % 2!= 0 ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return n % 2 == 0 }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) { return (n % 2 == 0) ; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "<s> public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; <mask> } return special_fact; } </s> java",
      "function range": "18,5-25,5",
      "output": [
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { fact_i++; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { fact_i ++; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { special_fact *= fact_i; fact_i++; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { special_fact += fact_i; fact_i++; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i <= n) { special_fact *= fact_i; fact_i++; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { fact_i *= special_fact; } return special_fact; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { fact_i += 1 ; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; if (fact_i == n) { special_fact = 1 ; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; while (fact_i < n) { special_fact *= n; fact_i++; } return special_fact; }",
          "correctness": "wrong"
        },
        {
          "patch": "{ }",
          "correctness": "wrong"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "<s> public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } <mask> } </s> java",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } return new_text; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } return new_text ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } new_text += text.substring(start, end); return new_text; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } return new_text; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } new_text += \" \" + text.substring(start, end); return new_text; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } return new_text + \" \" + text.substring(start, end); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } if (new_text.length() > 0) return new_text; else return text; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } return new_text.substring(0, new_text.length() - 1); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) =='') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } if (new_text.length() > 0) { return new_text; } return text; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) { return text; }",
          "correctness": "wrong"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "<s> public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length != 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; <mask> return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; } </s> java",
      "function range": "17,5-35,5",
      "output": [
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].length() == 0) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (! (lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].length() == 0) return \"No\"; if (lst[1].length() == 0) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].length() == 0) return \"No\"; if (lst[2].length() == 0) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].equals(\"exe\") || lst[1].equals(\"dll\")) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].length() == 0) return \"No\"; if (lst[0].length() == 0) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \" No\"; return \"Yes\"; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length!= 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; if (lst[1].length() == 0) return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; }",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ <mask> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; } </s> java",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (i % 2 == 0) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (lst[i]!= 0) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (lst[i] == 0) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (lst[i] > 0) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (lst[i] > lst[i + 1]) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (lst[i]!= lst[i + 1]) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (isNaN(lst[i])) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (i < lst.length - 1){ result += lst[i] * lst[i] * lst[i]; } else result += lst[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ if (lst[i] > lst[i + 1]) result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result ; }",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "<s> public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; <mask> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); } </s> java",
      "function range": "22,5-34,5",
      "output": [
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 0; i < word.length(); i++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 0; i < sentence.length(); i++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 1; i < word.length(); i++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 0 ; i < word.length(); i++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 1; i <= word.length(); i++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 0; i < word.length(); ++i) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; int i = word.length() / 2; if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 0; i < word.length(); i ++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; int i = word.length() - 1; if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; for (int i = 0; i < word.length(); i++) { if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim() }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "<s> public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; <mask> return true; return false; } </s> java",
      "function range": "15,5-26,5",
      "output": [
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (numerator == denom) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom >= numerator && denom <= denominator) return true; return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (numerator >= denom) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom < numerator) return false; if (denom > numerator) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom < numerator) return false; if (denom > denominator) return true; return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom == numerator) return true; if (denom == denominator) return true; return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom < numerator) return false; if (denom > denom) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom < numerator) return false; else if (denom > numerator) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom == numerator) return true; return false; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; if (denom > numerator) return true; if (denom < numerator) return true; return false; }",
          "correctness": "wrong"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "<s> public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ <mask> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); } </s> java",
      "function range": "17,5-44,5",
      "output": [
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += (n + \"\").toCharArray().charAt(j); } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += neg; } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += (n + \"\").toCharArray()[j]; } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit = (n + \"\").toCharArray().charAt(j); } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit = n + \"\" + j; } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit = (n + \"\").toCharArray()[j]; } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += (n + \"\").toCharArray().charAt(j); } digits.add(neg); digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += (n + \"\").toCharArray()[j]; } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += neg; } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ digit += (n + \"\").toCharArray().charAt(j); } if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}) }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "<s> public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; <mask> count += 1; } } return count; } </s> java",
      "function range": "14,5-26,5",
      "output": [
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; odd_digits.add(number_as_string); } else { count += 1; } } return count; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; odd_digits.add(Integer.parseInt(number_as_string)); } else { count += 1; } } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; odd_digits.add(number_as_string); count += 1; } else { count += 1; } } return count; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; odd_digits.add(new Integer(number_as_string)); } else { count += 1; } } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; odd_digits.add(Integer.parseInt(number_as_string)); count += 1; } else { count += 1; } } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; if (odd_digits.contains(number_as_string)) { count += 1; } else { count += 1; } } else { count += 1; } } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; if (odd_digits.contains(number_as_string)) { count += 1; } } else { count += 1; } } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; if (odd_digits.contains(number_as_string)) { odd_digits.add(number_as_string); } count += 1; } } return count; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; if (odd_digits.contains(number_as_string)) { odd_digits.add(num); } count += 1; } } return count; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; if (odd_digits.contains(number_as_string)) { count += 1; } else { count += 1; } } } return count; }",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "<s> public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; <mask> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result; } </s> java",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 1; j <= n; j++) { for (int k = 1; k <= n; k++) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 1; j <= n; j += 1) { for (int k = 1; k <= n; k += 1) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 0; j <= n; j++) { for (int k = 0; k <= n; k++) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 1; j <= n; j += 1) { for (int k = 1; k <= n; k++) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 0; j <= n; j += 1) { for (int k = 0; k <= n; k += 1) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 1; j <= n; j += 1) { for (int k = 1; k <= n; k += 2) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 0; j <= n; j += 1) { for (int k = 0; k <= n; k++) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 0; j < n; j++) { for (int k = 0; k < n; k++) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 0; j <= n; j += 1) { for (int k = 0; k <= n; k += 2) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; for (int j = 1; j <= n; j += 1) { for (int k = 0; k <= n; k += 1) { if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } }",
          "correctness": "uncompilable"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "<s> public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); <mask> return result; } </s> java",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); result.add(planet1_index); result.add(planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); result.add(planet1_index); result.add(planet2_index); result.add(planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index + planet2_index); result.add(planet2_index + planet1_index); result.add(planet1_index + planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); result.add(planet1); result.add(planet2); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); result.add(planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); result.add(planet1_index); result.add(planet2_index); result.add(planet1_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index, planet2_index); result.add(planet2_index, planet1_index); result.add(planet1_index, planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index); result.add(planet2_index); result.add(planet1_index); result.add(planet2_index); result.add(planet1); result.add(planet2_index); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); result.add(planet1_index, planet2_index); result.add(planet2_index, planet1_index); result.add(planet1_index, planet2_index); result.add(planet1_index, planet2_index); return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "<s> public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, <mask> ); return result; } </s> java",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new Comparator<String>() ); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new Comparator<String>() ); Collections.sort( result, new Comparator<String>() ); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new StringComparator() ); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, Collections.reverseOrder() ); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, Collections.reverseOrder() ); Collections.sort( result, Collections.reverseOrder() ); return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new StringComparer<String>() ); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new Comparator<String>() ) ; Collections.sort( result, new Comparator<String>() ); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new Comparator<String>() { @Override public int compare(String str1, String str2) { return str1.compareTo(str2); } }); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new Comparator<String>() { @Override public int compare(String lhs, String rhs) { return lhs.compareTo( rhs ); } }); return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, new Comparator<String>() { @Override public int compare(String str1, String str2) { return str1.compareTo( str2); } }); return result; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "<s> public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { <mask> } </s> java",
      "function range": "11,5-17,5",
      "output": [
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { x = x_or_y(i, x, y); } return x; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { x = x_or_y(i, x, y); } return y; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { return x_or_y(i, x, y); } return y; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { if (x == y) return i; } return x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { x_or_y(i, x, y); } return y; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { x_or_y(i, x, y); } return x; }",
          "correctness": "timeout"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { return x_or_y(i, x, y); } return x; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { return x_or_y(i, x, y); } return 0; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { if (x == i) return x; } return y; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { if (y == x) return i; } return x; }",
          "correctness": "wrong"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "<s> public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { <mask> } } } return result; } </s> java",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result += d_int; } else { result += d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result += d_int; } else { result -= d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = result + d_int; } else { result = result - d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = result + d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result += (int) d_int; } else { result += (int) d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = d_int - 1; } else { result = d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = (int) d_int; } else { result = (int) d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = d_int - 1; } else { result = d_int - 1; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = result - d_int; } else { result = result - d_int; } } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { result = d_int - d_int; } else { result = d_int - d_int; } } } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { <mask> } return result; } </s> java",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { result[i] = guess[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { result[i] = game[i] - guess[i]; } return result; }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { if (guess[i] < guess[i]) { result[i] = guess[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { if (guess[i] > guess[i]) { result[i] = guess[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { result[i] = game[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { if (guess[i]!= guess[i]) { result[i] = guess[i]; } } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { if (guess[i] < guess[i]) result[i] = guess[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { result[i] = game[i].compareTo(guess[i]); } return result; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { result[i] = guess[i] - guess[i]; } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { if (guess[i] == guess[i]) { result[i] = guess[i]; } } return result; }",
          "correctness": "wrong"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "<s> public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { <mask> } return class_name + \".\" + strong; } </s> java",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP += c; SM += c; } } return class_name + \".\" + strong; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP = CAP + c; SM = SM + c; } } return class_name + \".\" + strong; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP += c; SM += c; } strong = CAP + SM; } return class_name + \".\" + strong; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP += c; SM += c; } if (CAP == SM) strong = c; } return class_name + \".\" + strong; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP += c; SM += c; } if (CAP > SM) strong = c; } return class_name + \".\" + strong; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { if (c >= CAP && c <= SM) { strong = c; break; } } } return class_name + \".\" + strong; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { if (c >= CAP && c <= SM) { strong = c; } } } return class_name + \".\" + strong; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { if (c == CAP) { CAP = c; SM = c; } } } return class_name + \".\" + strong; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP += c; SM += c; } if (CAP == SM) strong = s; } return class_name + \".\" + strong; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { CAP += c; SM += c; } strong = CAP + SM; } return class_name + \".\" + strong ; }",
          "correctness": "uncompilable"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); <mask> if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; } </s> java",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i = 0; i < l; i++) { for (int j = 0; j < l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i = 0; i <= l; i++) { for (int j = 0; j <= l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i = 0 ; i < l; i++) { for (int j = 0; j < l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i=0; i<l; i++) { for (int j=0; j<l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i = 0; i < l; i++) { for(int j = 0; j < l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i = 0; i < l; i++){ for (int j = 0; j < l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) { int l = b.length(); for (int i = 0; i < l; i++) { for (int j = 0; j < l; j++) { if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false ; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "<s> public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; <mask> } return new int[] {even_count, odd_count}; } </s> java",
      "function range": "10,5-19,5",
      "output": [
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; while (num--) { even_count++; odd_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i = 0 ; i < num; i++) { even_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i=0; i<num; i++) { even_count++; odd_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i = 0; i < num; i++) { even_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; if (num % 2 == 0) { even_count++; odd_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; while (num--) { even_count ++; odd_count ++; } return new int[] {even_count, odd_count}; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i = 0 ; i < num; i++) { odd_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i = 0; i < num; i++) { odd_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i=0; i<num; i++) { even_count++; odd_count++; } return new int[] {even_count, odd_count}; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; for (int i=0; i<num; i++) { even_count++; odd_count++; } return new int[] {even_count, odd_count }; }",
          "correctness": "wrong"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "<s> public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { <mask> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result = result + sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += sym[i] + number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += sym[i]; i += 1; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += num[i] + sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result = result + sym[i] + number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += sym[i] + \" \" + number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += sym[i] + number; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += num[i] * sym[i]; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { result += sym[i % num.length]; number %= num[i]; i -= 1; } return result.toLowerCase(); }",
          "correctness": "wrong"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "<s> public static boolean right_angle_triangle(int a, int b, int c) { <mask> } </s> java",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return left_angle_triangle(a, b, c); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return a == b && c == a; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return right_angle_triangle(a, b, c); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return a > b && a < c; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return right_angle_triangle(a,b,c); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return a <= b && a <= c; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return left_angle_triangle(a,b,c); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return a == b || a == c; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return a == b && a == c; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) { return a < b && c < a; }",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "<s> public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); <mask> } ); return words_list.get(0); } </s> java",
      "function range": "18,5-31,5",
      "output": [
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.difference(s2); } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.difference(s2); } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.difference(s2); } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1; } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.size() > s2.size(); } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.differenceAll(s2); } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.size() - s2.size(); } ); return words_list.get(0); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.size() + s2.size() - s1.size(); } ); return words_list.get(0); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.size() + s2.size() - s1.size() - s2.size(); } ); return words_list.get(0); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); return s1.size() + s2.size() - s1.size() - s2.size() } ); return words_list.get(0); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "<s> public static int[] eat(int number, int need, int remaining) { <mask> } </s> java",
      "function range": "31,5-33,5",
      "output": [
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return eat(number, need, remaining); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return new int[number] { need, remaining } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return new int[number]; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return null; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return eat (number, need, remaining); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return new int[number] { need, remaining }; }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return eat(number, need, remaining ); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return eat(number, need, remaining); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return eat(number, need, remaining, false); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) { return eat(number, need, remaining, false); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "<s> public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); <mask> } return Double.parseDouble(engine.eval(expression).toString()); } </s> java",
      "function range": "30,5-38,5",
      "output": [
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); if (expression == null) { return Double.parseDouble(engine.eval(operator).toString()); } return Double.parseDouble(engine.eval(expression).toString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); if (engine == null) { return Double.parseDouble(expression); } return Double.parseDouble(engine.eval(expression).toString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); if (expression == null) { return Double.parseDouble(engine.eval(operand).toString()); } return Double.parseDouble(engine.eval(expression).toString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); String expression = operator[ operand[0]]; if (expression == null) { return 0.0; } return Double.parseDouble(engine.eval(expression).toString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); if (engine == null) { engine = mgr.getEngineByName(\"ScriptEngine\"); } return Double.parseDouble(engine.eval(expression).toString()); }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); String expression = operator[0]; if (expression == null) { return Double.parseDouble(null); } return Double.parseDouble(engine.eval(expression).toString()); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); if (expression == null) { return Double.parseDouble(engine.eval(operator).toString()); } return Double.parseDouble(engine.eval(expression).toString()) }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); for (String expression : operator) { if (expression == null) { continue; } return Double.parseDouble(engine.eval(expression).toString()); } }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); if (expression == null) { return Double.parseDouble(engine.eval(operator).toString()); } return Double.parseDouble(engine.eval(expression).toString(); }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "<s> public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { <mask> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); } </s> java",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { flg = flg + c; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { flg += c; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { flg++; sb.append(c); } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { sb.append(c); flg++; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { sb.append(c); flg = flg + 1; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { sb.append(s.charAt(c)); flg++; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { sb.append(s.charAt(c)); flg++; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { sb.append(c); flg = flg + 1; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { sb.append(s.charAt(c)); flg++; } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString() }",
          "correctness": "uncompilable"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "<s> public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; <mask> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); } </s> java",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"MD5\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"MD5\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"md5\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"MD5\" ); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"SHA-1\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"SHA1\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"RSA\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"SHA\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; MessageDigest md = MessageDigest.getInstance(\"digest\"); md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "<s> public static ArrayList<Integer> generate_integers(int a, int b) { <mask> ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; } </s> java",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a; int upper = b; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a - 1; int upper = b - 1; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a - 1 ; int upper = b - 1 ; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a - b; int upper = a + b; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a % 2 ; int upper = b % 2 ; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a % 2; int upper = b % 2; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a / 2; int upper = b / 2; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a - 1; int upper = b - 1; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a - 1 ; int upper = b - 1 ; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) { int lower = a - b; int upper = a + b; ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result ; }",
          "correctness": "wrong"
        }
      ]
    }
  }
}