{
  "config": "finetune",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "<s> public static boolean has_close_elements(List<Double> numbers, double threshold){ for (int i = 0; i < numbers.size(); i += 1){ for (int j = i + 1; j < numbers.size(); j += 1){ </s> double distance = numbers.get(i) - numbers.get(j); </s> if (distance < threshold) return true; } } return false; } </s> java"
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "<s> public static List<String> separate_paren_groups(String paren_string) { List<String> result = new ArrayList<String>(); String current_string = \"\"; int current_depth = 0; for (char c : paren_string.toCharArray()) { if (c == '('){ current_depth += 1; current_string += String.valueOf(c); </s> } else { </s> current_depth -= 1; current_string += String.valueOf(c); if (current_depth == 0){ result.add(current_string); current_string = \"\"; } } } return result; } </s> java"
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "<s> public static double truncate_number(double number) { </s> return number / 1.0; </s> } </s> java"
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "<s> public static boolean below_zero(List<Integer> operations) { int balance = 0; for (Integer op : operations){ balance += op; </s> if (balance > 0){ return false; } } return true; </s> } </s> java"
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "<s> public static double mean_absolute_deviation(List<Double> numbers) { double sum = 0.; for (Double number : numbers){ sum += number; } double mean = sum / numbers.size(); double deviation_sum = 0.; for (Double number : numbers){ </s> deviation_sum += (number - mean) * (number - mean); </s> } return deviation_sum / numbers.size(); } </s> java"
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "<s> public static List<Integer> intersperse(List<Integer> numbers, int delimeter) { List<Integer> result = new ArrayList<Integer>(); if (numbers.size() == 0) return result; </s> for (int i = 0; i < numbers.size(); i += 1) { </s> result.add(numbers.get(i)); result.add(delimeter); } result.add(numbers.get(numbers.size() - 1)); return result; } </s> java"
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "<s> public static List<Integer> parse_nested_parens(String paren_string) { String[] paren_groups = paren_string.split(\" \"); List<Integer> result = new ArrayList<Integer>(); for (String paren_group : paren_groups) { int depth = 0; int max_depth = 0; for (char c : paren_group.toCharArray()){ if (c == '('){ depth += 1; max_depth = Math.max(depth, max_depth); </s> } </s> } result.add(max_depth); } return result; } </s> java"
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "<s> public static List<String> filter_by_substring(List<String> strings, String substring) { List<String> result = new ArrayList<String>(); for (String string : strings){ </s> result.add(string); </s> } return result; } </s> java"
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "<s> public static Integer[] sum_product(List<Integer> numbers) { </s> Integer[] result = new Integer[2]; </s> for (Integer n : numbers){ result[0] += n; result[1] *= n; } return result; } </s> java"
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "<s> public static List<Integer> rolling_max(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); Integer running_max = null; for (Integer n : numbers){ </s> running_max = Math.max(running_max, n); </s> result.add(running_max); } return result; } </s> java"
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "<s> public static String make_palindrome(String str){ if (str.length() == 0) return \"\"; int beginning_of_suffix = 0; while (! is_palindrome(str.substring(beginning_of_suffix))){ beginning_of_suffix += 1; } String result = str; </s> result += str.substring(0, beginning_of_suffix); </s> return result; } </s> java"
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "<s> public static String string_xor(String a, String b){ String result = \"\"; for (int i = 0; i < a.length(); i += 1){ if (a.charAt(i) == b.charAt(i)){ result += \"0\"; } </s> } </s> return result; } </s> java"
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "<s> public static String longest(List<String> strings){ int maxlen = 0; for (String string : strings){ </s> if (strings.size() > string.length()){ maxlen = strings.size(); </s> } } for (String string : strings){ if (string.length() == maxlen){ return string; } } return null; } </s> java"
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "<s> public static int greatest_common_divisor(int a, int b){ while (b > 0) { </s> a = b; b = a % b; </s> } return a; } </s> java"
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "<s> public static List<String> all_prefixes(String string){ List<String> result = new ArrayList<String>(); for (int i = 0; i < string.length(); i += 1){ </s> result.add(string.substring(i + 1)); </s> } return result; } </s> java"
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "<s> public static String string_sequence(int n) { String result = \"\"; for (int i = 0; i <= n; i += 1){ result += i + \" \"; } </s> return result; </s> } </s> java"
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "<s> public static int count_distinct_characters(String string) { HashSet<Character> distinct = new HashSet<Character>(); for (char c : string.toCharArray()) { if (! distinct.contains(Character.toLowerCase(c))) </s> distinct.add(c); </s> } return distinct.size(); } </s> java"
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "<s> public static List<Integer> parse_music(String music_string) { HashMap<String, Integer> note_map = new HashMap<String, Integer>(); note_map.put(\"o\", 4); note_map.put(\"o|\", 2); note_map.put(\".|\", 1); List<Integer> result = new ArrayList<Integer>(); </s> for (String note : music_string.split(\" \")){ </s> result.add(note_map.get(note)); } return result; } </s> java"
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "<s> public static int how_many_times(String string, String substring) { int times = 0; </s> for (int i = 0; i < string.length() - substring.length(); i += 1) { </s> if (string.substring(i, i + substring.length()).equals(substring)){ times += 1; } } return times; } </s> java"
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "<s> public static String sort_numbers(String numbers) { final HashMap<String, Integer> value_map = new HashMap<String, Integer>(); value_map.put(\"zero\", 0); value_map.put(\"one\", 1); value_map.put(\"two\", 2); value_map.put(\"three\", 3); value_map.put(\"four\", 4); value_map.put(\"five\", 5); value_map.put(\"six\", 6); value_map.put(\"seven\", 7); value_map.put(\"eight\", 8); value_map.put(\"nine\", 9); ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \"))); </s> Collections.sort(number_array); </s> String result = \"\"; for (String number : number_array){ result += number + \" \"; } return result.trim(); } </s> java"
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "<s> public static double[] find_closest_elements(double[] numbers) { double[] result = new double[2]; double distance = Double.MAX_VALUE; for (int i = 0; i < numbers.length; i += 1){ </s> for (int j = 0; j < numbers.length; j += 1){ </s> double new_distance = Math.abs(numbers[i] - numbers[j]); if (new_distance < distance){ distance = new_distance; if (numbers[i] < numbers[j]){ result[0] = numbers[i]; result[1] = numbers[j]; } else{ result[0] = numbers[j]; result[1] = numbers[i]; } } } } return result; } </s> java"
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "<s> public static double[] rescale_to_unit(double[] numbers){ double min = Double.MAX_VALUE; double max = Double.MIN_VALUE; for (int i = 0; i < numbers.length; i += 1) { if (numbers[i] > max) { max = numbers[i]; } </s> else if (numbers[i] < min) { </s> min = numbers[i]; } } double[] result = new double[numbers.length]; for (int i = 0; i < numbers.length; i += 1) { result[i] = (numbers[i] - min) / (max - min); } return result; } </s> java"
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "<s> public static List<Integer> filter_integers(List<Object> values) { List<Integer> result = new ArrayList<Integer>(); for (Object value : values){ </s> result.add((Integer) value); </s> } return result; } </s> java"
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "<s> public static int strlen(String string){ </s> return string.length() - 1; </s> } </s> java"
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "<s> public static int largest_divisor(int n) { </s> for (int i = n; i >= 0; i -= 1){ </s> if (n % i == 0) return i; } return 1; } </s> java"
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "<s> public static List<Integer> factorize(int n){ List<Integer> result = new ArrayList<Integer>(); int i = 2; while (i <= (int)(Math.sqrt(n) + 1)){ if (n % i == 0){ result.add(i); n = n / i; } else{ i += 1; } } </s> return result; </s> } </s> java"
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "<s> public static List<Integer> remove_duplicates(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); HashMap<Integer, Integer> count = new HashMap<Integer, Integer>(); for (Integer n : numbers){ </s> count.put(n, count.get(n) + 1); </s> } for (Integer n : numbers){ if (count.get(n) == 1) result.add(n); } return result; } </s> java"
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "<s> public static String flip_case(String string) { char[] char_list = string.toCharArray(); for (int i = 0; i < char_list.length; i += 1){ char c = char_list[i]; if (Character.isLowerCase(c)) { </s> char_list[i] = Character.toLowerCase(c); } else { char_list[i] = Character.toUpperCase(c); </s> } } return new String(char_list); } </s> java"
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "<s> public static String concatenate(String[] strings) { </s> String result = null; </s> for (String string : strings) result += string; return result; } </s> java"
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "<s> public static List<String> filter_by_prefix(List<String> strings, String prefix) { List<String> result = new ArrayList<String>(); for (String string : strings){ </s> if (string.startsWith(prefix, 1)){ </s> result.add(string); } } return result; } </s> java"
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "<s> public static List<Integer> get_positive(List<Integer> numbers) { List<Integer> result = new ArrayList<Integer>(); for (Integer number : numbers) { </s> result.add(number); </s> } return result; } </s> java"
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "<s> public static boolean is_prime(int n){ if (n < 2) return false; </s> for (int k = 0; k < n; k += 1){ </s> if (n % k == 0) return false; } return true; } </s> java"
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "<s> public static double find_zero(List<Double> xs){ double begin = -1.; double end = 1.; while (poly(xs, begin) * poly(xs, end) > 0) { begin *= 2.; end *= 2.; } while (end - begin > 1e-10) { double center = (begin + end) / 2.; </s> if (poly(xs, begin) * poly(xs, end) < 0) { </s> begin = center; } else { end = center; } } return begin; } </s> java"
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "<s> public static List<Integer> sort_third(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); List<Integer> thirds = new ArrayList<Integer>(); for (int i = 0; i < l.size(); i += 3){ thirds.add(l.get(i)); } Collections.sort(thirds); for (int i = 0; i < l.size(); i += 1){ if (i % 3 == 0){ </s> result.add(thirds.get(i)); </s> } else{ result.add(l.get(i)); } } return result; } </s> java"
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "<s> public static List<Integer> unique(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l){ </s> result.add(n); </s> } Collections.sort(result); return result; } </s> java"
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "<s> public static int max_element(List<Integer> l) { </s> int m = 0; </s> for (Integer e : l) { if (e > m){ m = e; } } return m; } </s> java"
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "<s> public static int fizz_buzz(int n) { int result = 0; for (int i = 0; i < n; i += 1){ if (i % 11 == 0 || i % 13 == 0) { </s> for (int j = 0; j < i + \"\".length(); j += 1){ if (i + \"\".substring(j, j + 1) == \"7\") </s> result += 1; } } } return result; } </s> java"
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "<s> public static int[] sort_even(int[] l) { int[] result = new int[l.length]; </s> int[] evens = new int[1 + (int) (l.length / 2.)]; </s> for (int i = 0; i < l.length; i += 2) { evens[(int) i / 2] = l[i]; } Arrays.sort(evens); for (int i = 0; i < l.length; i += 1) { if (i % 2 == 0){ result[i] = evens[(int) i / 2]; } else{ result[i] = l[i]; } } return result; } </s> java"
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "<s> String encode_cyclic(String s) { ArrayList<String> groups = new ArrayList<String>(); </s> for (int i = 0; i < s.length(); i += 3){ </s> groups.add(s.substring(i, Math.min(s.length(), i + 3))); } int remain = s.length() % 3; String result = \"\"; for (String group : groups){ result += group.substring(1) + group.substring(0, 1); } if (remain > 0){ result += s.substring(s.length() - remain); } return result; } </s> java"
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "<s> public static int prime_fib(int n){ ArrayList<Integer> fib = new ArrayList<Integer>(); fib.add(0); fib.add(1); while (true) { int len = fib.size(); </s> fib.add(fib.get(len - 1) + fib.get(len)); if (is_prime(fib.get(len - 1))) </s> n -= 1; if (n == 0) return fib.get(fib.size() - 1); } } </s> java"
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "<s> public static boolean triples_sum_to_zero(int[] numbers) { for (int i = 0; i < numbers.length; i += 1) { </s> for (int j = i; j < numbers.length; j += 1) { for (int k = j; k < numbers.length; k += 1) { </s> if (numbers[i] + numbers[j] + numbers[k] == 0) return true; } } } return false; } </s> java"
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "<s> public static int car_race_collision(int n) { </s> return n; </s> } </s> java"
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "<s> public static List<Integer> incr_list(List<Integer> l) { List<Integer> result = new ArrayList<Integer>(); for (Integer n : l) { </s> result.add(n - 1); </s> } return result; } </s> java"
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "<s> public static boolean pairs_sum_to_zero(List<Integer> l) { for (int i = 0; i < l.size(); i += 1) { </s> for (int j = 0; j < l.size(); j += 1){ </s> if (l.get(i) + l.get(j) == 0) return true; } } return false; } </s> java"
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "<s> public static String change_base(int x, int base) { String result = \"\"; while (x > 0) { </s> result = result + x % base; x = x - x / base; </s> } return result; } </s> java"
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "<s> public static double triangle_area(double a, double h) { </s> return a * h; </s> } </s> java"
    },
    "FIB4": {
      "loc": "33-34",
      "input": "<s> public static int fib4(int n) { ArrayList<Integer> result = new ArrayList<Integer>(); result.add(0); result.add(0); result.add(2); result.add(0); if (n < 4) return result.get(n); for (int i = 4; i < n + 1; i += 1) { result.add( result.get(0) + result.get(1) + result.get(2) + result.get(3) ); </s> } </s> return result.get(result.size() - 1); } </s> java"
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "<s> public static double median(int[] list) { Arrays.sort(list); if (list.length % 2 == 1) { return list[(int) (list.length / 2)]; } else { </s> return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2; </s> } } </s> java"
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "<s> public static boolean is_palindrome(String text) { for (int i = 0; i < text.length(); i += 1){ </s> if (text.charAt(i) == text.charAt(text.length() - i)) return true; } return false; </s> } </s> java"
    },
    "MODP": {
      "loc": "19-22",
      "input": "<s> public static int modp(int n, int p) { int result = 1; for (int i = 0; i < n; i += 1){ </s> result = 2 * result; } return result % p; </s> } </s> java"
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "<s> public static String decode_shift(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { </s> c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a')); </s> sb.append(c); } return sb.toString(); } </s> java"
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "<s> public static String remove_vowels(String string) { StringBuilder sb = new StringBuilder(); for (char c : string.toCharArray()) { </s> if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') </s> continue; sb.append(c); } return sb.toString(); } </s> java"
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "<s> public static boolean below_threshold(int[] l, int t) { for (int i = 0; i < l.length; i += 1) { </s> if (l[i] <= t) return true; } return false; </s> } </s> java"
    },
    "ADD": {
      "loc": "11-12",
      "input": "<s> public static int add(int x, int y) { </s> return x | y; </s> } </s> java"
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "<s> public static boolean same_chars(String s0, String s1) { </s> ArrayList<Character> set0 = new ArrayList<Character>(); ArrayList<Character> set1 = new ArrayList<Character>(); </s> for (char c0 : s0.toCharArray()) { set0.add(c0); } for (char c1 : s1.toCharArray()) { set1.add(c1); } return set0.equals(set1); } </s> java"
    },
    "FIB": {
      "loc": "13-14",
      "input": "<s> public static int fib(int n) { </s> return fib(n - 1) + fib(n - 2); </s> } </s> java"
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "<s> public static boolean correct_bracketing(String brackets) { int depth = 0; for (char b : brackets.toCharArray()) { if (b == '<') depth += 1; else depth -= 1; </s> if (depth >= 0) return true; } return false; </s> } </s> java"
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "<s> public static boolean monotonic(int[] l) { int[] sorted = new int[l.length]; int[] reverse_sorted = new int[l.length]; </s> sorted = l; </s> Arrays.sort(sorted); for (int i = 0; i < l.length; i += 1) reverse_sorted[i] = sorted[l.length - i - 1]; if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted)) return true; return false; } </s> java"
    },
    "COMMON": {
      "loc": "13-14",
      "input": "<s> public static int[] common(int[] l1, int[] l2) { </s> ArrayList<Integer> common = new ArrayList<Integer>(); </s> for (int i = 0; i < l1.length; i += 1){ for (int j = 0; j < l2.length; j += 1){ if (l1[i] == l2[j]) common.add(l1[i]); } } int[] result = new int[common.size()]; int index = 0; for (Integer c : common) { result[index] = c; index += 1; } Arrays.sort(result); return result; } </s> java"
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "<s> public static int largest_prime_factor(int n) { int largest = 1; for (int j = 2; j < n; j += 1) { </s> if (is_prime(j)){ largest = n % j; </s> } } return largest; } </s> java"
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "<s> public static int sum_to_n(int n) { </s> return (n + 1) * (n / 2); </s> } </s> java"
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "<s> public static List<Integer> derivative(List<Integer> xs) { List<Integer> result = new ArrayList<Integer>(); </s> for (int i = 0; i < xs.size(); i += 1) result.add(xs.get(i)); </s> return result; } </s> java"
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "<s> public static int fibfib(int n) { if (n == 0) return 0; if (n == 1) return 0; </s> return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3); </s> } </s> java"
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "<s> public static int vowels_count(String str) { int result = 0; char[] str_chars = str.toCharArray(); for (char c : str_chars) { if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') result += 1; } </s> if (str_chars[str_chars.length - 1] == 'y') </s> result += 1; return result; } </s> java"
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "<s> public static String circular_shift(int x, int shift) { String s = x + \"\"; if (shift > s.length()) { StringBuilder sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); return sb.toString(); } else { </s> return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1); </s> } } </s> java"
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "<s> public static int digit_sum(String s) { int result = 0; for (char c : s.toCharArray()) { </s> if (c == ' ') break; </s> if ('A' <= c && c <= 'Z') result += (int) c; } return result; } </s> java"
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "<s> public static int fruit_distribution(String s, int n) { int result = n; for (String str : s.split(\" \")) { </s> int cnt = Integer.parseInt(str); result -= cnt; </s> } return result; } </s> java"
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "<s> public static int[] pluck(int[] arr) { </s> int min_even = 0; int index = 0; </s> for (int i = 0; i < arr.length; i += 1) { if (arr[i] % 2 == 0 && arr[i] < min_even) { min_even = arr[i]; index = i; } } if (index == -1) return new int[]{}; return new int[] {min_even, index}; } </s> java"
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "<s> public static int search(int[] lst) { int max = -1; for (Integer i : lst) { if (i > max) max = i; } int result = -1; </s> int[] frq = new int[max]; for (int i = 0; i < lst.length; i += 1) frq[i] += 1; for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i; </s> return result; } </s> java"
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "<s> public static List<Integer> strange_sort_list(List<Integer> lst) { List<Integer> result = new ArrayList<Integer>(); boolean switched = true; while (lst.size() > 0) { if (switched) { result.add(Collections.min(lst)); } else { result.add(Collections.max(lst)); } </s> } </s> return result; } </s> java"
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "<s>  </s> public static double triangle_area_2(double a, double b, double c) { </s> if (a + b <= c || a + c <= b || b + c <= a) return -1; double s = (a + b + c) / 2.; double result = Math.pow(s, 0.5); BigDecimal bd = BigDecimal.valueOf(result); bd = bd.setScale(2, RoundingMode.HALF_UP); return bd.doubleValue(); } </s> java"
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "<s> public static boolean will_it_fly(int[] q, int w) { int sum = 0; for (int i = 0; i < q.length; i += 1) sum += q[i]; if (sum > w) return false; int i = 0; int j = q.length - 1; while (i < j) { if (q[i] != q[j]) return false; </s> } </s> return true; } </s> java"
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "<s> public static int smallest_change(int[] arr) { int result = 0; </s> for (int i = 0; i < arr.length; i += 1) { if (arr[i] != arr[arr.length - i]) </s> result += 1; } return result; } </s> java"
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "<s> public static List<String> total_match(List<String> lst1, List<String> lst2) { int l1 = 0; for (String st : lst1) l1 += st.length(); int l2 = 0; </s> for (String st : lst1) l2 = st.length(); </s> if (l1 <= l2) return lst1; return lst2; } </s> java"
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "<s> public static boolean is_multiply_prime(int a) { for (int i = 2; i < a; i += 1){ if (! is_prime(i)) continue; for (int j = i; j < a; j += 1) { </s> for (int k = j; k < a; j += 1) { </s> if (! is_prime(k)) continue; if (i * j * k == a) return true; } } } return false; } </s> java"
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "<s> public static boolean is_simple_power(int x, int n) { </s> int power = 1; </s> while (power < x) { power *= n; } return power == x; } </s> java"
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "<s> public static boolean iscude(int a) { </s> double root = Math.pow(a, 1./3); </s> BigDecimal bd = BigDecimal.valueOf(root); int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue(); return ((int) Math.pow(round_root, 3)) == a; } </s> java"
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "<s> public static int hex_key(String num) { int result = 0; for (char c : num.toCharArray()) { </s> if (c == '2' || c == '3' || c == '5' || c == '7') </s> result += 1; } return result; } </s> java"
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "<s> public static String decimal_to_binary(int decimal) { </s> String result = Integer.toHexString(decimal); </s> return \"db\" + result + \"db\"; } </s> java"
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "<s> public static boolean is_happy(String s) { if (s.length() < 3) return false; for (int i = 0; i < s.length() - 2; i += 1) { </s> if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) </s> return false; } return true; } </s> java"
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "<s> public static String[] numerical_letter_grade(double[] grades) { String[] letter_grade = new String[grades.length]; for (int i = 0; i < grades.length; i += 1) { double gpa = grades[i]; if (gpa == 4.0) letter_grade[i] = \"A+\"; else if (gpa > 3.7) letter_grade[i] = \"A\"; else if (gpa > 3.3) letter_grade[i] = \"A-\"; else if (gpa > 3.0) letter_grade[i] = \"B+\"; else if (gpa > 2.7) letter_grade[i] = \"B\"; else if (gpa > 2.3) letter_grade[i] = \"B-\"; else if (gpa > 2.0) letter_grade[i] = \"C+\"; </s> else if (gpa > 1.3) letter_grade[i] = \"C-\"; else if (gpa > 1.0) letter_grade[i] = \"D+\"; else if (gpa > 1.7) letter_grade[i] = \"C\"; </s> else if (gpa > 0.7) letter_grade[i] = \"D\"; else if (gpa > 0.0) letter_grade[i] = \"D-\"; else letter_grade[i] = \"E\"; } return letter_grade; } </s> java"
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "<s> public static boolean prime_length(String string) { int l = string.length(); if (l <= 1) return false; for (int i = 2; i < l; i += 1) { </s> if (l - i == 0) </s> return false; } return true; } </s> java"
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "<s> public static int starts_one_ends(int n) { if (n == 1) return 1; </s> return (int) ((10 + 9) * Math.pow(10, n - 2)); </s> } </s> java"
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "<s> public static String solve(int N) { int sum = 0; for (int i = 0; i < (N + \"\").length(); i += 1){ </s> sum += Integer.parseInt((N + \"\").substring(i + 1)); </s> } return Integer.toBinaryString(sum); } </s> java"
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "<s> public static int add_even_at_odd(int[] lst) { int sum = 0; </s> for (int i = 0; i < lst.length; i += 1) { </s> if (lst[i] % 2 == 0) sum += lst[i]; } return sum; } </s> java"
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "<s> public static String anti_shuffle(String s) { String result = \"\"; for (String str : s.split(\" \")) { char[] chars = str.toCharArray(); Arrays.sort(chars); </s> result += new String(chars); } return result; </s> } </s> java"
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "<s> public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) { ArrayList<Tuple> result = new ArrayList<Tuple>(); for (int i = 0; i < lst.size(); i += 1) { </s> for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){ if (lst.get(i).get(j) == x){ result.add(new GET_ROW().new Tuple(i, j)); </s> } } } return result; } </s> java"
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "<s> public static int[] sort_array(int[] array) { if (array.length == 0) return array; Arrays.sort(array); if ((array[0] + array[array.length - 1]) % 2 == 1) return array; else { for (int i = 0; i < array.length / 2; i += 1){ </s> array[i] = array[array.length - i - 1]; array[array.length - i - 1] = array[i]; </s> } return array; } } </s> java"
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "<s> public static String encrypt(String s) { StringBuilder sb = new StringBuilder(); String d = \"abcdefghijklmnopqrstuvwxyz\"; for (char c : s.toCharArray()){ if ('a' <= c && c <= 'z'){ sb.append( </s> d.charAt(s.indexOf((int) c) + 2 * 2) </s> ); } else { sb.append(c); } } return sb.toString(); } </s> java"
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "<s> public static Integer next_smallest(int[] lst) { </s> List<Integer> numbers = new ArrayList<Integer>(); </s> for (Integer n : lst) numbers.add(n); Integer[] no_duplicate = numbers.toArray(new Integer[] {}); Arrays.sort(no_duplicate); if (no_duplicate.length < 2) return null; return no_duplicate[1]; } </s> java"
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "<s> public static int is_bored(String S) { String[] sentences = S.split(\"\\\\.|\\\\?|!\"); int result = 0; for (String sentence : sentences) { </s> if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) </s> result += 1; } return result; } </s> java"
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "<s> public static boolean any_int(double x, double y, double z) { </s> if ((int)x == x && (int)y == y) { if (x + y == z || x + z == y) </s> return true; } return false; } </s> java"
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "<s> public static String encode(String message) { StringBuilder sb = new StringBuilder(); for (char c : message.toCharArray()) { if (Character.isUpperCase(c)) { c = Character.toLowerCase(c); } </s> if (Character.isLowerCase(c)) { </s> c = Character.toUpperCase(c); } if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') { c = (char) ((int) c + 2); } sb.append(c); } return sb.toString(); } </s> java"
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "<s> public static int skjkasdkd(int[] lst) { int max = 0; int i = 0; while(i < lst.length) { if (lst[i] > max && is_prime(lst[i])) max = lst[i]; i += 1; } int result = 0; for (char c : (max + \"\").toCharArray()) { </s> result += (int) c; </s> } return result; } </s> java"
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "<s> public static boolean check_dict_case(HashMap<Object, Object> dict) { if (dict.size() == 0) return false; else { String state = \"start\"; for (Object key : dict.keySet()) { if (!(key instanceof String)) { state = \"mixed\"; break; } String str_key = (String) key; if (state.equals(\"start\")) { if (str_key.toUpperCase().equals(str_key)) state = \"upper\"; else if (str_key.toLowerCase().equals(str_key)) state = \"lower\"; else { state = \"mixed\"; break; } </s> } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) { </s> state = \"mixed\"; break; } } return (state.equals(\"upper\")) || (state.equals(\"lower\")); } } </s> java"
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "<s> public static List<Integer> count_up_to(int n) { List<Integer> primes = new ArrayList<Integer>(); for (int i = 2; i < n; i += 1){ </s> boolean is_prime = false; for (int j = 2; j < i; j += 1){ if (i % j == 0) { is_prime = false; </s> } } if (is_prime) primes.add(i); } return primes; } </s> java"
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "<s> public static int multiply(int a, int b) { </s> return (a % 10) * (b % 10); </s> } </s> java"
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "<s> public static int count_upper(String s) { int count = 0; for (int i = 0; i < s.length(); i += 2) { char c = s.charAt(i); </s> if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') </s> count += 1; } return count; } </s> java"
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "<s> public static int closest_integer(String value) { if (value.indexOf('.') >= 0) { while (value.charAt(value.length() - 1) == '0') value = value.substring(0, value.length() - 1); } double num = Double.parseDouble(value); int result = 0; </s> if (value.substring(value.length() - 2).equals(\".5\")) { result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num); </s> } else if (value.length() > 0){ result = (int)Math.round(num); } return result; } </s> java"
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "<s> public static ArrayList<Integer> make_a_pile(int n) { ArrayList<Integer> pile = new ArrayList<Integer>(); for(int i = 0; i < n; i++) { </s> pile.add(n - 2 * i); </s> } return pile; } </s> java"
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "<s> public static ArrayList<String> words_strings(String s) { ArrayList<String> result = new ArrayList<String>(); </s> String s_list = \"\"; </s> for(char c : s.toCharArray()) { if(c == ',') { s_list += ' '; } else { s_list += c; } } String[] result_array = s_list.trim().split(\"\\\\s+\"); for(String r : result_array) { result.add(r); } return result; } </s> java"
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "<s> public static int choose_num(int x, int y) { </s> if(x < y) return -1; </s> if((y % 2) == 0) return y; if(x == y) return -1; return y - 1; } </s> java"
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "<s> public static String rounded_avg(int n, int m) { if(m < n) return \"-1\"; int summation = 0; for(int i = n; i < m + 1; i++) { summation += i; } double avg = ((double) summation)/((double) (m - n + 1)); double rem = avg - Math.floor(avg); int avg_rounded = 0; if(rem <= 0.5) { </s> avg_rounded = (int) Math.ceil(avg); </s> } else { avg_rounded = (int) Math.ceil(avg); } return Integer.toBinaryString(avg_rounded); } </s> java"
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "<s> public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) { ArrayList<Integer> res = new ArrayList<Integer>(); for(int i : x) { int num = i; boolean all_odd = true; while(num > 0) { int curr_digit = num % 10; </s> if((curr_digit % 2) != 0) { all_odd = true; </s> break; } num /= 10; } if(all_odd) { res.add(i); } } Collections.sort(res); return res; } </s> java"
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "<s> public static ArrayList<String> by_length(ArrayList<Integer> a) { Map<Integer, String> digit_map = new HashMap<>(); digit_map.put(1, \"One\"); digit_map.put(2, \"Two\"); digit_map.put(3, \"Three\"); digit_map.put(4, \"Four\"); digit_map.put(5, \"Five\"); digit_map.put(6, \"Six\"); digit_map.put(7, \"Seven\"); digit_map.put(8, \"Eight\"); digit_map.put(9, \"Nine\"); Collections.sort(a, Collections.reverseOrder()); ArrayList<String> result = new ArrayList<>(); for(int num : a) { </s> if(digit_map.get(num) != \"\") { </s> result.add(digit_map.get(num)); } } return result; } </s> java"
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "<s> public static ArrayList<Integer> factorial(int n) { ArrayList<Integer> ret = new ArrayList<>(); for(int i = 1; i <= n; i++) { if((i % 2) == 0) { int x = 1; for(int j = 1; j <= i; j++) x *= j; ret.add(x); } else { int x = 0; </s> for(int j = 1; j <= i; i++) x -= j; </s> ret.add(x); } } return ret; } </s> java"
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "<s> public static ArrayList<Integer> even_odd_palindrome(int n) { int even_palindrome_count = 0, odd_palindrome_count = 0; for(int i = 1; i <= n; i++) { </s> if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--; else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--; </s> } ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count)); return result; } </s> java"
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "<s> public static int count_nums(ArrayList<Integer> arr) { int count = 0; for(int num : arr) { boolean neg = num < 0; </s> if(neg) num *= 1; </s> String num_string = Integer.toString(num); int sum = 0; for(int i = 0; i < num_string.length(); i++) { if((i == 0) && neg) sum -= num_string.charAt(i) - '0'; else sum += num_string.charAt(i) - '0'; } if(sum > 0) count++; } return count; } </s> java"
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "<s> public static boolean move_one_ball(ArrayList<Integer> arr) { if(arr.size() == 0) return true; ArrayList<Integer> sorted_arr = new ArrayList<>(arr); Collections.sort(sorted_arr); </s> int min_value = sorted_arr.get(sorted_arr.size() - 1); </s> int min_index = 0; for(int i = 0; i < arr.size(); i++) { if(arr.get(i) == min_value) min_index = i; } ArrayList<Integer> arr_after_move = new ArrayList<>(); for(int i = min_index; i < arr.size(); i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < min_index; i++) { arr_after_move.add(arr.get(i)); } for(int i = 0; i < arr.size(); i++) { if(arr_after_move.get(i) != sorted_arr.get(i)) { return false; } } return true; } </s> java"
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "<s> public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) { int odd = 0, even = 0; </s> for(int i : lst2) { if((i % 2) == 1) even++; </s> } for(int i : lst2) { if((i % 2) == 0) even++; } if(even >= odd) { return \"YES\"; } return \"NO\"; } </s> java"
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "<s> public static HashMap<Character, Integer> histogram(String s) { HashMap<Character, Integer> res = new HashMap<Character, Integer>(); if(s.isEmpty()) return res; String[] list_letters = s.split(\" \"); int[] count_letter = new int[26]; for(int i = 0; i < list_letters.length; i++) { char c = list_letters[i].charAt(0); count_letter[c - 'a']++; } int most_count = 0; for(int i = 0; i < 26; i++) { </s> if(count_letter[i] < most_count) { </s> most_count = count_letter[i]; res.clear(); res.put((char) ('a' + i), most_count); } else if(count_letter[i] == most_count) { res.put((char) ('a' + i), most_count); } } if(most_count == 0) res.clear(); return res; } </s> java"
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "<s> public static ArrayList<Object> reverse_delete(String s, String c) { String new_s = \"\"; for(int i = 0; i < s.length(); i++) { </s> if(c.indexOf(s.charAt(i)) != -1) { </s> new_s += s.charAt(i); } } String reverse_s = \"\"; for(int i = new_s.length() - 1; i >= 0; i--) { reverse_s += new_s.charAt(i); } ArrayList<Object> res = new ArrayList<>(); res.add(new_s); res.add(reverse_s.equals(new_s)); return res; } </s> java"
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "<s> public static ArrayList<String> odd_count(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<>(); for(String s : lst) { int n = 0; for(int i = 0; i < s.length(); i++) { int digit = s.charAt(i) - '0'; </s> if(digit % 2 == 0) { n--; </s> } } result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\"); } return result; } </s> java"
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "<s> public static long min_subarray_sum(ArrayList<Long> nums) { long max_sum = 0; long s = 0; for(long num : nums) { </s> s += num; </s> if(s < 0) { s = 0; } max_sum = Math.max(s, max_sum); } if(max_sum == 0) { max_sum = -nums.get(0); for(int i = 1; i < nums.size(); i++) { max_sum = Math.max(max_sum, -nums.get(i)); } } long min_sum = -max_sum; return min_sum; } </s> java"
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "<s> public static int max_fill(int[][] grid, int bucket_capacity) { int result = 0; for(int i = 0; i < grid.length; i++) { int row_capacity = 0; </s> for(int j = 0; j < grid[j].length; j++) { row_capacity += grid[j][i]; </s> } result += (row_capacity + bucket_capacity - 1) / bucket_capacity; } return result; } </s> java"
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "<s> @Override public int compare(Integer o1, Integer o2) { int num_ones_o1 = number_ones(o1); int num_ones_o2 = number_ones(o2); if(num_ones_o1 == num_ones_o2) { </s> if(o1 == o2) return 1; if(o1 < o2) return 0; if(o1 > o2) return -1; } </s> if(num_ones_o1 < num_ones_o2) return -1; else return 1; } </s> java"
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "<s> public static ArrayList<String> select_words(String s, int n) { ArrayList<String> result = new ArrayList<>(); String[] words = s.split(\" \"); for(int i = 0; i < words.length; i++) { int num_consonants = 0; </s> char[] vowels = {'a', 'e', 'i', 'o', 'u'}; </s> for(int j = 0; j < words[i].length(); j++) { boolean consonant = true; for(int k = 0; k < vowels.length; k++) { if(vowels[k] == words[i].charAt(j)) { consonant = false; break; } } if(consonant) num_consonants++; } if(num_consonants == n) result.add(words[i]); } return result; } </s> java"
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "<s> public static String get_closet_vowel(String word) { if(word.length() < 3) return \"\"; ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); </s> for(int i = word.length() - 2; i >= 0; i--) { </s> if(vowels.contains(word.charAt(i))) { if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) { return word.substring(i, i + 1); } } } return \"\"; } </s> java"
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "<s>  </s>  </s>  </s> java"
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "<s> public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) { Collections.sort(arr); ArrayList<Integer> result = new ArrayList<>(); </s> for(int i = arr.size() - 1; i >= arr.size() - k; i--) { </s> result.add(arr.get(i)); } return result; } </s> java"
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "<s> public static int solution(ArrayList<Integer> lst) { int result = 0; for(int i = 0; i < lst.size(); i++) { </s> if((i % 2) == 1 && (lst.get(i) % 2) == 0) { </s> result += lst.get(i); } } return result; } </s> java"
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "<s> public static int add_elements(ArrayList<Integer> arr, int k) { int result = 0; for(int i = 0; i < k; i++) { </s> if(Integer.toString(arr.get(i)).length() >= 2) { result -= arr.get(i); </s> } } return result; } </s> java"
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "<s> public static ArrayList<Integer> get_odd_collatz(int n) { ArrayList<Integer> result = new ArrayList<>(); if((n % 2) == 1) result.add(n); </s> while(n >= 1) { if((n % 2) == 1) n /= 2; </s> else n = 3 * n + 1; if((n % 2) == 1) result.add(n); } Collections.sort(result); return result; } </s> java"
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "<s> public static boolean valid_date(String date) { try { date = date.trim(); String[] date_info = date.split(\"-\"); if(date_info.length > 3) return false; int month = Integer.parseInt(date_info[0]); int day = Integer.parseInt(date_info[1]); int year = Integer.parseInt(date_info[2]); if(month < 1 || month > 12) return false; int[] month_check1 = {1, 3, 5, 7, 8, 10, 12}; for(int i = 0; i < month_check1.length; i++) { </s> if(month != month_check1[i] && !(day < 1 || day > 31)) return false; </s> } int[] month_check2 = {4, 6, 9, 11}; for(int i = 0; i < month_check2.length; i++) { if(month == month_check2[i] && (day < 1 || day > 30)) return false; } if(month == 2 && (day < 1 || day > 29)) return false; } catch (Exception e) { return false; } return true; } </s> java"
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "<s> public static String[] split_words(String txt) { if(txt.contains(\" \")) { return txt.split(\" \"); } else if(txt.contains(\",\")) { return txt.split(\",\"); } else { int count = 0; for(int i = 0; i < txt.length(); i++) { char curr = txt.charAt(i); </s> if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++; </s> } String[] result = {Integer.toString(count)}; return result; } } </s> java"
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "<s> public static boolean is_sorted(int[] lst) { HashMap<Integer, Integer> count_num = new HashMap<>(); for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], 0); } for(int i = 0; i < lst.length; i++) { count_num.put(lst[i], count_num.get(lst[i]) + 1); } for(int i = 0; i < lst.length; i++) { if(count_num.get(lst[i]) > 2) return false; } for(int i = 0; i < lst.length - 1; i++) { </s> if(lst[i] <= lst[i + 1]) return false; </s> } return true; } </s> java"
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "<s> public static String intersection(int[] interval1, int[] interval2) { </s> int l = Math.min(interval1[0], interval2[0]); int r = Math.max(interval1[1], interval2[1]); </s> int length = r - l; if(length > 0 && is_prime(length)) return \"YES\"; return \"NO\"; } </s> java"
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "<s> public static int prod_signs(int[] arr) { if(arr.length == 0) return -10; int prod = 1; for(int i = 0; i < arr.length; i++) { if(arr[i] == 0) prod = 0; </s> else if(arr[i] > 0) prod *= 1; </s> } int sum = 0; for(int i = 0; i < arr.length; i++) { sum += Math.abs(arr[i]); } return prod * sum; } </s> java"
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "<s> public static int[] min_path(int[][] grid, int k) { int n = grid.length; int val = n * n + 1; for(int i = 0; i < n; i++) { for(int j = 0; j < n; j++) { if(grid[i][j] == 1) { </s> if(i != 0) val = Math.max(val, grid[i][j + 1]); if(j != 0) val = Math.min(val, grid[i - 1][j]); if(i != n - 1) val = Math.min(val, grid[i - 1][j]); if(j != n + 1) val = Math.max(val, grid[i][j - 1]); </s> } } } int[] ans = new int[k]; for(int i = 0; i < k; i++) { if((i % 2) == 0) ans[i] = 1; else ans[i] = val; } return ans; } </s> java"
    },
    "TRI": {
      "loc": "30-34",
      "input": "<s> public static int[] tri(int n) { int[] sequence = new int[n + 1]; if(n == 0) { sequence[0] = 1; return sequence; } sequence[0] = 1; </s> sequence[1] = -3; for(int i = 2; i < n - 1; i--) { if(i % 2 == 0) sequence[i] = i / 2 - 1; else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2; </s> } return sequence; } </s> java"
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "<s> public static int digits(int n) { int product = 1; int odd_count = 0; </s> while(n >= 0) { int digit = n * 10; if(digit % 2 == 0) { product /= digit; </s> odd_count++; } n /= 10; } if(odd_count == 0) return 0; return product; } </s> java"
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "<s> public static boolean is_nested(String brackets) { ArrayList<Integer> opening_brackets = new ArrayList<>(); ArrayList<Integer> closing_brackets = new ArrayList<>(); for(int i = 0; i < brackets.length(); i++) { if(brackets.charAt(i) == '[') opening_brackets.add(i); else closing_brackets.add(i); } </s> Collections.reverse(opening_brackets); int cnt = 0, i = 0, l = opening_brackets.size(); for(int idx : closing_brackets) { if(i < l || idx >= opening_brackets.get(i)) { </s> i++; cnt++; } } return cnt >= 2; } </s> java"
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "<s> public static long sum_squared_nums(double[] lst) { </s> int result = 0, i = 0; for(int j = 0; j < lst.length; j++) { result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i])); </s> } return result; } </s> java"
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "<s> public static boolean check_if_last_char_is_a_letter(String txt) { String[] parts = txt.split(\" \"); String last = \" \"; </s> last = parts[parts.length - 1]; if(txt.charAt(txt.length() - 1) == ' ') last = \" \"; if(txt.length() == 1) last = \" \"; int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a'; return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25); </s> } </s> java"
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "<s> public static int can_arrange(int[] arr) { </s> int ind = 1; for(int i = 0; i < arr.length - 1; i++) { if(arr[i] < arr[i + 1]) ind = i + 1; </s> } return ind; } </s> java"
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "<s> public static int[] largest_smallest_integers(int[] lst) { </s> boolean negative = true, positive = true; int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; for(int i = 1; i < lst.length; i++) { if(lst[i] < 0) { negative = false; max_negative = Math.min(max_negative, lst[i]); </s> } else if(lst[i] > 0) { positive = true; min_positive = Math.min(min_positive, lst[i]); } } if(!negative) max_negative = 0; if(!positive) min_positive = 0; int[] result = {max_negative, min_positive}; return result; } </s> java"
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "<s> public static Object compare_one(Object a, Object b) { double temp_a = 0, temp_b = 0; if(a instanceof String) { String temp_a_string = a.toString(); temp_a_string = temp_a_string.replace(',', '.'); temp_a = Double.parseDouble(temp_a_string); } if(b instanceof String) { String temp_b_string = b.toString(); temp_b_string = temp_b_string.replace(',', '.'); temp_b = Double.parseDouble(temp_b_string); } </s> if(a instanceof Double) temp_a = ((Integer) b).doubleValue(); if(b instanceof Double) temp_b = ((Integer) a).doubleValue(); if(a instanceof Integer) temp_a = (Double) a; if(b instanceof Integer) temp_b = (Double) b; </s> if(temp_a == temp_b) return null; if(temp_a > temp_b) return a; else return b; } </s> java"
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "<s> public static boolean is_equal_to_sum_even(int n) { </s> return ((n * 2 == 1) ^ (n < 8)); </s> } </s> java"
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "<s> public static long special_factorial(long n) { long fact_i = 1, special_fact = 1; </s> for(long i = n; i >= 1; i--) { fact_i *= i * fact_i; special_fact += i * fact_i; </s> } return special_fact; } </s> java"
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "<s> public static String fix_spaces(String text) { String new_text = \"\"; int i = 0; int start = 0; int end = 0; while (i < text.length()) { if (text.charAt(i) == ' ') end += 1; else { if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1); else if (end - start > 0) { for (int j = start; j < end; j += 1) { new_text += \"_\"; } new_text += text.substring(i, i + 1); } else { new_text += text.substring(i, i + 1); } start = i + 1; end = i + 1; } i += 1; } </s> return new_text; </s> } </s> java"
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "<s> public static String file_name_check(String file_name) { String[] lst = file_name.split(\"\\\\.\"); if (lst.length != 2) return \"No\"; if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\"))) return \"No\"; if (lst[0].length() == 0) return \"No\"; </s> if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z') </s> return \"No\"; int digit_cnt = 0; for (char c : file_name.toCharArray()){ if ('0' <= c && c <= '9') digit_cnt += 1; } if (digit_cnt > 3) return \"No\"; return \"Yes\"; } </s> java"
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "<s> public static int sum_squares(int[] lst) { int result = 0; for (int i = 0; i < lst.length; i += 1){ </s> if (i % 4 == 0) result += lst[i] * lst[i]; else if (i % 3 == 0) </s> result += lst[i] * lst[i] * lst[i]; else result += lst[i]; } return result; } </s> java"
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "<s> public static String words_in_sentence(String sentence) { String result = \"\"; for (String word : sentence.split(\" \")) { int flag = 0; </s> for (int i = 2; i < word.length(); i += 1){ </s> if (word.length() % i == 0) flag = 1; } if (flag == 0 || word.length() == 2) result += word + \" \"; } return result.trim(); } </s> java"
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "<s> public static boolean simplify(String x, String n) { int a = Integer.parseInt(x.split(\"/\")[0]); int b = Integer.parseInt(x.split(\"/\")[1]); int c = Integer.parseInt(n.split(\"/\")[0]); int d = Integer.parseInt(n.split(\"/\")[1]); int numerator = a * c; int denom = b * d; </s> if (numerator / denom == (int) (numerator / denom)) </s> return true; return false; } </s> java"
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "<s> public static Integer[] order_by_points(Integer[] nums) { ArrayList<Integer> digits = new ArrayList<Integer>(); HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>(); for (int i = 0; i < nums.length; i += 1){ int neg = 1; int n = nums[i]; if (n < 0) { n = -1 * n; neg = -1; } int digit = 0; for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){ </s> digit += ((n + \"\").toCharArray()[j] - '0') * neg; } digits.add(digit); </s> if (! digits_number.containsKey(digit)) digits_number.put(digit, new ArrayList<Integer>()); digits_number.get(digit).add(nums[i]); } Collections.sort(digits); ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = 0; i < digits.size(); i += 1) { result.addAll(digits_number.get(digits.get(i))); } return result.toArray(new Integer[] {}); } </s> java"
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "<s> public static int special_filter(int[] nums) { int count = 0; ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9)); for (Integer num : nums) { if (num > 10) { String number_as_string = num + \"\"; </s> if (odd_digits.contains(number_as_string.charAt(0)) && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) </s> count += 1; } } return count; } </s> java"
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "<s> public static int get_max_triples(int n) { int[] A = new int[n]; for (int i = 1; i <= n; i += 1) A[i - 1] = i * i - i + 1; int result = 0; </s> for (int i = 0; i < n-2; i += 1) { for (int j = 0; j < n-1; j += 1) { for (int k = 0; k < n; k += 1) { </s> if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1; } } } return result; } </s> java"
    },
    "BF": {
      "loc": "31-33",
      "input": "<s> public static ArrayList<String> bf(String planet1, String planet2) { ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList( \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" )); ArrayList<String> result = new ArrayList<String>(); if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2))) return result; int planet1_index = planet_names.indexOf(planet1); int planet2_index = planet_names.indexOf(planet2); </s> for (int i = planet1_index; i < planet2_index; i += 1) result.add(planet_names.get(i)); </s> return result; } </s> java"
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "<s> public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) { ArrayList<String> result = new ArrayList<String>(); for (String str : lst) { if (str.length() % 2 == 1) continue; result.add(str); } Collections.sort( result, </s> (s1, s2) -> s1.length() - s2.length() </s> ); return result; } </s> java"
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "<s> public static int x_or_y(int n, int x, int y) { if (n == 1) return y; for (int i = 2; i < n; i += 1) { </s> if (n % i == 0) return x; } return y; </s> } </s> java"
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "<s> public static int double_the_difference(double[] lst) { int result = 0; for (Double d : lst) { if ((int) d.doubleValue() == d) { int d_int = (int) d.doubleValue(); if (d_int % 2 == 1 && d_int >= 0) { </s> result += d_int; </s> } } } return result; } </s> java"
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "<s> public static int[] compare(int[] game, int[] guess) { int[] result = new int[game.length]; for (int i = 0; i < game.length; i += 1) { </s> result[i] = Math.floorDiv(game[i], guess[i]); </s> } return result; } </s> java"
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "<s> public static String strongest_extension(String class_name, String[] extensions) { String strong = null; int val = Integer.MIN_VALUE; for (String s : extensions) { int CAP = 0; int SM = 0; for (char c : s.toCharArray()) { </s> if (Character.toUpperCase(c) == c) SM += 1; if (Character.toLowerCase(c) == c) CAP += 1; } val = CAP - SM; strong = s; </s> } return class_name + \".\" + strong; } </s> java"
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "<s> public static boolean cycpattern_check(String a, String b) { int l = b.length(); </s> String pat = b; for (int i = 0; i < a.length(); i += 1) { for (int j = 0; j < l; j += 1) { </s> if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true; } } return false; } </s> java"
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "<s> public static int[] even_odd_count(int num) { int even_count = 0; int odd_count = 0; </s> for (char c : (num + \"\").toCharArray()) { if ((int)c % 2 == 0) even_count += 1; if ((int)c % 2 == 1) odd_count += 1; </s> } return new int[] {even_count, odd_count}; } </s> java"
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "<s> public static String int_to_mini_roman(int number) { int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000}; String[] sym = new String[] { \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\" }; int i = 12; String result = \"\"; while (number > 0) { </s> result += sym[i]; </s> number %= num[i]; i -= 1; } return result.toLowerCase(); } </s> java"
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "<s> public static boolean right_angle_triangle(int a, int b, int c) { </s> return a*a + b*b == c*c; </s> } </s> java"
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "<s> public static String find_max(String[] words) { ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words)); Collections.sort( words_list, (w1, w2) -> { Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1)); Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new); HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2)); </s> return s1.size() - s2.size(); </s> } ); return words_list.get(0); } </s> java"
    },
    "EAT": {
      "loc": "32-33",
      "input": "<s> public static int[] eat(int number, int need, int remaining) { </s> return new int[] {number + need, remaining - need}; </s> } </s> java"
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "<s> public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException { ScriptEngineManager mgr = new ScriptEngineManager(); ScriptEngine engine = mgr.getEngineByName(\"JavaScript\"); </s> String expression = \"\"; for (int i = 0; i < operand.length; i += 1) { expression += operator[i] + operand[i]; </s> } return Double.parseDouble(engine.eval(expression).toString()); } </s> java"
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "<s> public static String solve_string(String s) { int flg = 0; StringBuilder sb = new StringBuilder(); for (char c : s.toCharArray()) { </s> if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c)); else sb.append(Character.toLowerCase(c)); flg = 1; </s> } if (flg == 0) { sb = new StringBuilder(); for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i)); } return sb.toString(); } </s> java"
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "<s> public static String string_to_md5(String text) throws NoSuchAlgorithmException { if (text.equals(\"\")) return null; </s> MessageDigest md = MessageDigest.getInstance(\"SHA-384\"); </s> md.update(text.getBytes()); byte[] digest = md.digest(); return DatatypeConverter.printHexBinary(digest).toLowerCase(); } </s> java"
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "<s> public static ArrayList<Integer> generate_integers(int a, int b) { </s> int lower = Math.max(2, a); int upper = Math.min(8, b); </s> ArrayList<Integer> result = new ArrayList<Integer>(); for (int i = lower; i <= upper; i += 1) { if (i % 2 == 0) result.add(i); } return result; } </s> java"
    }
  }
}