{
  "config": "INCODER_COMPLETE_CODEFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            <|mask:0|>\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}\n<|mask:0|>",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) + numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = distance(numbers.get(i), numbers.get(j));\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.sqrt(Math.pow(numbers.get(i) - numbers.get(j), 2));\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i).distance(numbers.get(j));\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = Math.pow(numbers.get(i) - numbers.get(j), 2);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        <|mask:0|>\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-27,5",
      "output": [
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (')' == c){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (')' == c) {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if(current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if(current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else {\n            current_string += String.valueOf(c);\n        }\n        if (current_depth == 0){\n            result.add(current_string);\n            current_string = \"\";\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if(c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = new BigDecimal(number);\n    bd = bd.setScale(0, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = new BigDecimal(number);\n    bd = bd.setScale(1, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = new BigDecimal(number);\n    bd = bd.setScale(0, BigDecimal.ROUND_HALF_UP);\n    return bd.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = new BigDecimal(number);\n    bd = bd.setScale(1, BigDecimal.ROUND_HALF_UP);\n    return bd.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bigDecimal = new BigDecimal(number);\n    bigDecimal = bigDecimal.setScale(0, RoundingMode.HALF_UP);\n    return bigDecimal.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = BigDecimal.valueOf(number);\n    bd = bd.setScale(0, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = new BigDecimal(number);\n    return bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bd = new BigDecimal(Double.toString(number));\n    bd = bd.setScale(0, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bigDecimal = new BigDecimal(number);\n    bigDecimal = bigDecimal.setScale(0, RoundingMode.HALF_UP);\n    return bigDecimal.doubleValue();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double truncate_number(double number) {\n    BigDecimal bigDecimal = new BigDecimal(number);\n    bigDecimal = bigDecimal.setScale(0, RoundingMode.HALF_UP);\n    return bigDecimal.doubleValue();\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        \n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        System.out.println(balance);\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        \n    }\n    return balance <= 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        \n        if (balance < 0) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        \n    }\n    return balance == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        System.out.println(balance);\n    }\n    return balance <= 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        \n    }\n    return balance > 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        System.out.println(balance);\n    }\n    return balance == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        \n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n        System.out.println(balance);\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        <|mask:0|>\n    }\n    return deviation_sum / numbers.size();\n}\n<|mask:0|>",
      "function range": "6,5-17,5",
      "output": [
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow((number - mean), 2);\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow((number - mean), 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / (numbers.size() - 1));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return deviation_sum / (numbers.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow((number - mean), 2);\n    }\n    return Math.sqrt(deviation_sum / (numbers.size() - 1));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    <|mask:0|>\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-19,5",
      "output": [
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i + 1));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    \n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter + numbers.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++)\n        result.add(delimeter + numbers.get(i));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(0));\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            <|mask:0|>\n        }\n        result.add(max_depth);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-24,5",
      "output": [
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else{\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')') {\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            } else {\n                max_depth = Math.max(max_depth, depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            } else {\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                if (depth == 0){\n                    result.add(max_depth);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                if (depth == 0){\n                    result.add(max_depth);\n                }\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            } else {\n                max_depth = Math.max(max_depth, depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if(c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            } else {\n                max_depth = Math.max(max_depth, depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-13,5",
      "output": [
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean contains = string.contains(substring);\n        if (contains){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean contains = string.contains(substring);\n        if (contains) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean contains = string.contains(substring);\n        if(contains){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean contains = string.contains(substring);\n        if (contains)\n            result.add(string);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean contains = string.contains(substring);\n        if (contains) result.add(string);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                found = true;\n                break;\n            }\n        }\n        if (found)\n            result.add(string);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found)\n            result.add(string);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n    <|mask:0|>\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "6,5-13,5",
      "output": [
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    result[0] = 0;\n    result[1] = 1;\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[]{0,1};\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (Integer n : numbers) {\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    result[0] = 1;\n    result[1] = 1;\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    result[0] = 0;\n    result[1] = 1;\n    for (int n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    for (int i = 0; i < numbers.size(); i++) {\n        result[0] += numbers.get(i);\n        result[1] *= numbers.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    result[0] = 1;\n    result[1] = 1;\n    for (Integer n : numbers){\n        result[0] *= n;\n        result[1] += n;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    result[0] = 0;\n    result[1] = 1;\n    for (Integer n : numbers) {\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n    Integer[] result = new Integer[2];\n    result[0] = 0;\n    result[1] = 1;\n    for (Integer n : numbers){\n        result[0] += n;\n        result[1] *= n;\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        <|mask:0|>\n        result.add(running_max);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = n > running_max ? n : running_max;\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = (running_max == null) ? n : Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n    }\n    result.add(running_max);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = n >= running_max ? n : running_max;\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(running_max, n);\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = Math.max(n, running_max);\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = (running_max != null) ? Math.max(running_max, n) : n;\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = n > running_max ? n : running_max;\n    }\n    result.add(running_max);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n        running_max = max(n,running_max);\n        result.add(running_max);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    <|mask:0|>\n    return result;\n}\n<|mask:0|>",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(beginning_of_suffix, str.length());\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(beginning_of_suffix);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result += str.substring(0, beginning_of_suffix);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        result = str.substring(0, beginning_of_suffix) + result + str.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        result = result + str.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (beginning_of_suffix < str.length()){\n        result = str.substring(0, beginning_of_suffix) + str.substring(beginning_of_suffix, str.length()) + result;\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (beginning_of_suffix < str.length()){\n        result = str.substring(0, beginning_of_suffix) + result + str.substring(beginning_of_suffix);\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (beginning_of_suffix < str.length()){\n        result = str.substring(0, beginning_of_suffix) + result + str.substring(beginning_of_suffix, str.length());\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (beginning_of_suffix < str.length()){\n        result += str.substring(beginning_of_suffix, str.length());\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    beginning_of_suffix += 1;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        result = str.substring(0, beginning_of_suffix) + result + str.substring(beginning_of_suffix, str.length());\n        beginning_of_suffix += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    <|mask:0|>\n    return result;\n}\n<|mask:0|>",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else result += a.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else if(a.charAt(i) != b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else \n        result += \"1\";\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else if(a.charAt(i) != b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else result += \"1\";\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else \n        result += a.charAt(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else if(a.charAt(i) != b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else if(a.charAt(i) != b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else if(a.charAt(i) != b.charAt(i)){\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n    else if(a.charAt(i) != b.charAt(i)){\n        result += \"1\";\n    }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        <|mask:0|>\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}\n<|mask:0|>",
      "function range": "6,5-19,5",
      "output": [
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        length = string.length();\n        if (length > maxlen){\n            maxlen = length;\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        \n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        System.out.println(string);\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        len = string.length();\n        if(len > maxlen){\n            maxlen = len;\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    for (String string : strings){\n        if (string.length() == maxlen){\n            return string;\n        }\n    }\n    return null;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return maxlen;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.get(maxlen);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        length = string.length();\n        if (length > maxlen){\n            maxlen = length;\n        }\n    }\n    return maxlen;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        string = string.trim();\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return maxlen;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        <|mask:0|>\n    }\n    return a;\n}\n<|mask:0|>",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        final int temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        final int c = a % b;\n        a = b;\n        b = c;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long r = a % b;\n        a = b;\n        b = r;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        final int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long t = a % b;\n        a = b;\n        b = t;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        long tmp = a;\n        a = b;\n        b = tmp % b;\n    }\n    return a;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-15,5",
      "output": [
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){\n            result.add(string.substring(0, i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){\n            result.add(string.substring(i, i + 1));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if (Character.isLetter(c)){\n            result.add(string.substring(0, i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)){\n            result.add(string.substring(0, i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){\n            result.add(String.valueOf(c));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')){\n            result.add(string.substring(0, i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')){\n            result.add(String.valueOf(c));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){\n            result.add(string.substring(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char c = string.charAt(i);\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')){\n            result.add(string.substring(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n        char ch = string.charAt(i);\n        if (Character.isLetterOrDigit(ch)){\n            result.add(string.substring(0, i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    \n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result.trim();\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    result += \"\\n\";\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            <|mask:0|>\n    }\n    return distinct.size();\n}\n<|mask:0|>",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c); \n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add((Character.toLowerCase(c)));\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add((char) c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(c);\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    <|mask:0|>\n        result.add(note_map.get(note));\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "8,5-20,5",
      "output": [
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\"\\\\|\");\n    for (String note : notes) {\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\" \");\n    for (String note : notes) {\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(music_string);\n    while (st.hasMoreTokens()) {\n        String note = st.nextToken();\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\" \");\n    for (String note : notes) {\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(music_string, \"|\");\n    while (st.hasMoreTokens()) {\n        String note = st.nextToken();\n        result.add(note_map.get(note));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\"\\\\|\");\n    for (String note : notes) {\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(music_string);\n    while (st.hasMoreTokens()) {\n        String note = st.nextToken();\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\" \");\n    for (String note : notes) {\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        } else {\n            result.add(0);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\"\\\\|\");\n    for (String note : notes) {\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        } else {\n            result.add(0);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    StringTokenizer st = new StringTokenizer(music_string);\n    while (st.hasMoreTokens()) {\n        String note = st.nextToken();\n        if (note_map.containsKey(note)) {\n            result.add(note_map.get(note));\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    <|mask:0|>\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}\n<|mask:0|>",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++){\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++){\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    \n    for (int i = 0; i < string.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string.substring(i, i + substring.length()).equals(substring)){\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++){\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times ++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    \n    for (int i = 0; i < string.length(); i++){\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for(int i = 0; i < string.length(); i++){\n        if (string.substring(i, i + substring.length()).equals(substring)){\n            times += 1;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    <|mask:0|>\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}\n<|mask:0|>",
      "function range": "6,5-27,5",
      "output": [
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n    String result = \"\";\n    for (String number : number_array){\n        result += value_map.get(number) + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Arrays.sort(number_array);\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n    String result = \"\";\n    for (String number : number_array){\n        result += value_map.get(number) + \"\";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array);\n    String result = \"\";\n    for (String number : number_array){\n        result += value_map.get(number) + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String o1, String o2) {\n            Integer i1 = value_map.get(o1);\n            Integer i2 = value_map.get(o2);\n            return i1.compareTo(i2);\n        }\n    });\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String o1, String o2) {\n            Integer i1 = value_map.get(o1);\n            Integer i2 = value_map.get(o2);\n            return Integer.compare(i1, i2);\n        }\n    });\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n        public int compare(String o1, String o2) {\n            Integer i1 = value_map.get(o1);\n            Integer i2 = value_map.get(o2);\n            return i1.compareTo(i2);\n        }\n    });\n\n    String result = \"\";\n    for (String number : number_array){\n        result += number + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        <|mask:0|>\n            double new_distance = Math.abs(numbers[i] - numbers[j]);\n            if (new_distance < distance){\n                distance = new_distance;\n                if (numbers[i] < numbers[j]){\n                    result[0] = numbers[i];\n                    result[1] = numbers[j];\n                } else{\n                    result[0] = numbers[j];\n                    result[1] = numbers[i];\n                }\n            }\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "4,5-24,5",
      "output": [
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[0]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[0];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[0]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[1]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[1];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[j]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[j];\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[i+1]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[i+1];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[(i + 1) % numbers.length]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[(i + 1) % numbers.length];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[0]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[0];\n            result[1] = numbers[i];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[i]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[i];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[i + 1]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[i];\n            result[1] = numbers[i + 1];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n        double new_distance = Math.abs(numbers[i] - numbers[0]);\n        if (new_distance < distance){\n            distance = new_distance;\n            result[0] = numbers[0];\n            result[1] = numbers[0];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        <|mask:0|>\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "4,5-22,5",
      "output": [
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        \n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if(numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        \n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = numbers[i] - min;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = numbers[i] - min;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        else if(numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = numbers[i] - min;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        \n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = numbers[i] / (max - min);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        \n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = numbers[i] / max - min;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        \n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = numbers[i] * (max - min) + min;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        \n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[numbers.length];\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer) value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer)value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer)value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer)value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer)value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        try{\n            result.add((Integer)value);\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer) value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer) value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer)value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n        Integer integer = (Integer)value;\n        result.add(integer);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "public static int strlen(String string){\n    try{\n        return string.length();\n    }catch(Exception e){\n        return 0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    char[] charArray = string.toCharArray();\n    int length = 0;\n    for(int i = 0; i < charArray.length; i++){\n        length++;\n    }\n    return length;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    try{\n        return string.length();\n    }catch(NullPointerException e){\n        return 0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    char[] charArray = string.toCharArray();\n    int length = 0;\n    for(char c : charArray){\n        length++;\n    }\n    return length;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    char[] charArray = string.toCharArray();\n    return charArray.length;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    try{\n        return string.length();\n    }catch(Exception e){\n        return -1;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    try{\n        return string.length();\n    }\n    catch(Exception e){\n        return 0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    try{\n        return string.length();\n    }catch(NullPointerException npe){\n        return 0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    char[] charArray = string.toCharArray();\n    int length = charArray.length;\n    return length;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n    \n    return string.length();\n}",
          "correctness": "plausible"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n    <|mask:0|>\n        if (n % i == 0)\n            return i;\n    }\n    return 1;\n}\n<|mask:0|>",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "7,5-21,5",
      "output": [
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(i);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    \n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    result.add(n);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        <|mask:0|>\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "8,5-22,5",
      "output": [
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n)+1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) > 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : count){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (!count.containsKey(n))\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n)+1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) > 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) == null ? 1 : count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1){\n            result.add(n);\n            count.remove(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        count.put(n, count.get(n) + 1);\n    }\n    for (Integer n : numbers){\n        if (count.get(n) == 1)\n            result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            <|mask:0|>\n        }\n    }\n    return new String(char_list);\n}\n<|mask:0|>",
      "function range": "4,5-17,5",
      "output": [
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n            char_list[i + 1] = Character.toLowerCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i + 1] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)){\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)){\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        } else {\n            char_list[i] = c;\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n            char_list[i + 1] = Character.toLowerCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i + 1] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n    <|mask:0|>\n    for (String string : strings)\n        result += string;\n    return result;\n}\n<|mask:0|>",
      "function range": "4,5-9,5",
      "output": [
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder result = new StringBuilder();\n    for (String string : strings)\n        result.append(string);\n    return result.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder result = new StringBuilder();\n    for (String string : strings)\n        result += string;\n    return result.toString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder builder = new StringBuilder();\n    for (String string : strings)\n        builder.append(string);\n    return builder.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuffer result = new StringBuffer();\n    for (String string : strings)\n        result.append(string);\n    return result.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder result = new StringBuilder();\n    for (String string : strings)\n        result += string;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder sb = new StringBuilder();\n    for (String string : strings)\n        sb.append(string);\n    return sb.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder builder = new StringBuilder();\n    for (String s : strings)\n        builder.append(s);\n    return builder.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder result = new StringBuilder();\n    for (String string : strings)\n        result.append(string).append(\" \");\n    return result.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder result = new StringBuilder();\n    for (String string : strings)\n        result += string;\n    return result.toString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    StringBuilder result = new StringBuilder();\n    for (String string : strings)\n        result.append(string);\n    return result.toString();\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        <|mask:0|>\n            result.add(string);\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        \n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        \n        if (string.startsWith(prefix)) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean isPrefix = string.startsWith(prefix);\n        if (isPrefix){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean isPrefix = string.startsWith(prefix);\n        if (isPrefix){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean isPrefix = string.startsWith(prefix);\n        if (isPrefix) {\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean isPrefix = string.startsWith(prefix);\n        if(isPrefix){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        if (string.startsWith(prefix)){\n            found = true;\n        }\n        if (found){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        \n        if (string.startsWith(prefix)){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean found = false;\n        if (string.startsWith(prefix)){\n            found = true;\n        }\n        if (found){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n        boolean isPrefix = string.startsWith(prefix);\n        if (isPrefix){\n            result.add(string);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        number = Math.abs(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        number = Math.abs(number);\n        result.add(number);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        boolean isPositive = number > 0;\n        if (isPositive) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        number = Math.abs(number);\n        result.add(number);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        number = Math.abs(number);\n        result.add(number);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        number = Math.abs(number);\n        if (number > 0)\n            result.add(number);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        number = Math.abs(number);\n        result.add(number);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        while(number > 0) {\n            result.add(number);\n            number--;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        boolean isPositive = true;\n        if (number < 0) {\n            isPositive = false;\n            number = -number;\n        }\n        result.add(number);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        while(number > 0) {\n            result.add(number);\n            number -= 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    <|mask:0|>\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n<|mask:0|>",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for(int i = 2; i <= Math.sqrt(n); i++){\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    for(int i = 2; i < n; i++){\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for (int i = 2; i < n; i++){\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for (int i = 2; i <= Math.sqrt(n); i++)\n        if (n % i == 0)\n            return false;\n    \n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for (int i = 2; i < n; i++)\n        if (n % i == 0)\n            return false;\n    \n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for(int i = 2; i <= Math.sqrt(n); i++){\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for(int i = 2; i < n; i++){\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0)\n            return false;\n    }\n    \n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    \n    for(int i = 2; i <= Math.sqrt(n); i++){\n        if (n % i == 0)\n            return false;\n    }\n    \n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        <|mask:0|>\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n<|mask:0|>",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double value = poly(xs, center);\n        if (value > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double d = poly(xs, center);\n        if (d > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val == 0) {\n            return center;\n        } else if (val > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val == 0) {\n            return center;\n        } else if (val < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val == 0) {\n            return center;\n        }\n        if (val > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val == 0) {\n            return center;\n        } else if (val > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val == 0) {\n            return center;\n        }\n        if (val > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        double val = poly(xs, center);\n        if (val == 0) {\n            return center;\n        } else if (val > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            <|mask:0|>\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "8,5-25,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            thirds.remove(l.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            thirds.add(l.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            thirds.remove(l.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            Collections.sort(thirds);\n        }\n        if (thirds.contains(l.get(i))){\n            result.add(l.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            Collections.sort(thirds);\n            result.add(thirds.get(i));\n        } else{\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            Collections.sort(thirds);\n        }\n        if (thirds.contains(l.get(i))){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            Collections.sort(thirds);\n        }\n        if (thirds.contains(l.get(i))){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            Collections.sort(thirds);\n        }\n        if (thirds.contains(l.get(i))){\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        <|mask:0|>\n    }\n    Collections.sort(result);\n    return result;\n}\n<|mask:0|>",
      "function range": "8,5-17,5",
      "output": [
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean found = false;\n        for (int i = 0; i < result.size(); i++){\n            if (n == result.get(i)){\n                found = true;\n                break;\n            }\n        }\n        if (!found){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean contains = result.contains(n);\n        if (!contains){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean contains = false;\n        for (int i = 0; i < result.size(); i++){\n            if (n == result.get(i)){\n                contains = true;\n                break;\n            }\n        }\n        if (!contains){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean found = false;\n        for (int i = 0; i < result.size(); i++){\n            if (result.get(i) == n){\n                found = true;\n                break;\n            }\n        }\n        if (!found){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean found = false;\n        for (int j = 0; j < result.size(); j++){\n            if (n == result.get(j)){\n                found = true;\n                break;\n            }\n        }\n        if (!found){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean found = false;\n        for (int i : result){\n            if (i == n){\n                found = true;\n                break;\n            }\n        }\n        if (!found){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean contains = false;\n        for (int i : result){\n            if (n.equals(i)){\n                contains = true;\n                break;\n            }\n        }\n        if (!contains){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean contains = false;\n        for (int i = 0; i < result.size(); i++){\n            if (n.equals(result.get(i))){\n                contains = true;\n                break;\n            }\n        }\n        if (!contains){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean contains = false;\n        for (int i = 0; i < result.size(); i++){\n            if (result.get(i) == n){\n                contains = true;\n                break;\n            }\n        }\n        if (!contains){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n        boolean contains = false;\n        for (int i = 0; i < result.size(); i++){\n            if (n == result.get(i)){\n                contains = true;\n                break;\n            }\n        }\n        if (!contains) {\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n    <|mask:0|>\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}\n<|mask:0|>",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer m = Integer.MIN_VALUE;\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer m = Integer.MIN_VALUE;\n    for (Integer e : l) {\n        if (e < m){\n            m = e;\n        }\n    }\n    return m;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer m = null;\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer m = 0;\n    for (Integer e : l) {\n        if (e > m){\n            m = e;\n        }\n    }\n    return m;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer max = Integer.MIN_VALUE;\n    for (Integer e : l) {\n        if (e > max){\n            max = e;\n        }\n    }\n    return max;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer max = Integer.MIN_VALUE;\n    for (Integer e : l) {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return max;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Collections.sort(l);\n    return l.get(l.size()-1);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer m = Integer.MIN_VALUE;\n    for (Integer e : l) {\n        if (e < m) {\n            m = e;\n        }\n    }\n    return m;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Integer m = null;\n    for (Integer e : l) {\n        if (e < m){\n            m = e;\n        }\n    }\n    return m;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n    Collections.sort(l);\n    return l.size() - 1;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            <|mask:0|>\n                    result += 1;\n            }\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "4,5-16,5",
      "output": [
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 3 == 0 || i % 5 == 0) {\n            result += 1;\n        }\n        if (i % 7 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 5 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 5 == 0) {\n            result += 1;\n        }\n        if (i % 3 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 5 == 0) {\n            result += 1;\n        }\n        if (i % 7 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 3 == 0 || i % 5 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else if (i % 3 == 0 || i % 5 == 0) {\n            result += 1;\n        } else if (i % 7 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 5 == 0 || i % 7 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 15 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 5 == 0 || i % 7 == 0) {\n            result += 1;\n        }\n        if (i % 3 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    <|mask:0|>\n    for (int i = 0; i < l.length; i += 2) {\n        evens[(int) i / 2] = l[i];\n    }\n    Arrays.sort(evens);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "6,5-22,5",
      "output": [
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 2) {\n        result[i] = l[i];\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 2) {\n        result[i / 2] = l[i];\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1) {\n        result[i] = l[i];\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = evens[(int) i / 2];\n        } else{\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = l[i];\n        } else{\n            result[i] = l[i + 1];\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0) {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    int[] evens = new int[l.length / 2];\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0) {\n            result[i] = evens[(int) i / 2];\n        } else {\n            result[i] = l[i];\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = l[i];\n        } else{\n            result[i] = l[i+1];\n        }\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = l[i];\n        } else{\n            result[i] = l[l.length - i - 1];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1) {\n        if (i % 2 == 0){\n            result[i] = l[i];\n        } else{\n            result[i] = l[i - 1];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    <|mask:0|>\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "8,13-26,13",
      "output": [
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i++){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0) {\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i += 3){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group;\n    }\n    if (remain > 0){\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for(int i = 0; i < s.length(); i++){\n        groups.add(s.substring(i, Math.min(s.length(), i + 3)));\n    }\n    int remain = s.length() % 3;\n    String result = \"\";\n    for (String group : groups){\n        result += group.substring(1) + group.substring(0, 1);\n    }\n    if (remain > 0) {\n        result += s.substring(s.length() - remain);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        <|mask:0|>\n            n -= 1;\n        if (n == 0)\n            return fib.get(fib.size() - 1);\n    }\n}\n<|mask:0|>",
      "function range": "16,5-29,5",
      "output": [
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.size() > n)\n            break;\n    }\n    return fib.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) == n)\n            return fib.get(len - 1);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) > n)\n            break;\n    }\n    return fib.get(fib.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) == n)\n            return fib.get(len);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.size() == n)\n            return fib.get(n - 1);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.size() >= n)\n            return fib.get(n - 1);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.size() > n)\n            return fib.get(n - 1);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) > n)\n            break;\n    }\n    return fib.get(len - 1);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.get(len - 1) == n)\n            return fib.get(len - 1);\n        if (fib.get(len - 2) == n)\n            return fib.get(len - 2);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        if (fib.size() > n)\n            fib.remove(fib.size() - 1);\n        if (fib.size() == n)\n            return fib.get(0);\n    }\n}",
          "correctness": "timeout"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        <|mask:0|>\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n<|mask:0|>",
      "function range": "21,5-31,5",
      "output": [
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = Math.abs(numbers[i]);\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0)\n                    return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] += numbers[i];\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] += 0;\n    }\n    return triples_sum_to_zero(numbers);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] += numbers[i];\n    }\n    return numbers[0] == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = Math.abs(numbers[i]);\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] != 0)\n                    return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] += numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] != 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] += numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = Math.abs(numbers[i]);\n    }\n    int sum = 0;\n    for (int i = 0; i < numbers.length; i += 1) {\n        sum += numbers[i];\n    }\n    return sum == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] += numbers[i];\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] < 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = Math.abs(numbers[i]);\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            if (numbers[i] + numbers[j] == 0)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "14,5-16,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        n.increment();\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        n.incrementAndGet();\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        n += 1;\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        n.incr();\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result += n;\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        n.increment();\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        n.increment();\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        Integer next = n + 1;\n        result.add(next);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        Integer next = n+1;\n        result.add(next);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        l.add(n + 1);\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        <|mask:0|>\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}\n<|mask:0|>",
      "function range": "10,5-18,5",
      "output": [
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer first = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer second = l.get(j);\n            if (first + second == 0)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for(int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer a = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer b = l.get(j);\n            if (a + b != 0)\n                return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer a = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer b = l.get(j);\n            if (a + b == 0)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for(int j = i + 1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) != 0)\n                return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer x = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer y = l.get(j);\n            if (x + y == 0)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        for(int j = i+1; j < l.size(); j += 1) {\n            if (l.get(i) + l.get(j) == 0)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer a = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer b = l.get(j);\n            if (a + b != 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer first = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer second = l.get(j);\n            if (first + second != 0)\n                return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n        Integer first = l.get(i);\n        for (int j = i + 1; j < l.size(); j += 1) {\n            Integer second = l.get(j);\n            if (first + second == 0)\n                return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char)(x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char) (x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (x % base) + \"\";\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char) ('0' + x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char)('0' + x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char) ('0' + x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char) ('0' + x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char) ('0' + x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result += (char) ('0' + x % base);\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "8,5-10,5",
      "output": [
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2.0;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2.0;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2.0;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n    double s = (a + b + c) / 2.0;\n    double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    <|mask:0|>\n    return result.get(result.size() - 1);\n}\n<|mask:0|>",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(0);\n    }\n    return result.get(result.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    \n    }\n    return result.get(result.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(0);\n    }\n    return result.get(0);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(0);\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(0);\n    }\n    return result.get(4);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(1);\n    }\n    return result.get(result.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(0);\n    }\n    return result.get(n - 4);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(result.get(0) + result.get(1) + result.get(2) + result.get(3));\n    }\n    return result.get(result.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    result.add(0);\n    }\n    return result.get(result.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    \n    }\n    return result.get(result.size() - 1);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        <|mask:0|>\n    }\n}\n<|mask:0|>",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double median = (list[(int) (list.length / 2)] + list[(int) (list.length / 2) - 1]) / 2;\n        return median;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double lower = list[(list.length / 2) - 1];\n        double upper = list[list.length / 2];\n        return (lower + upper) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double lower = list[(list.length / 2) - 1];\n        double upper = list[list.length / 2];\n        return (lower + upper) / 2;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double lower = list[(int) (list.length / 2)];\n        double upper = list[(int) (list.length / 2) - 1];\n        return (lower + upper) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double a = list[(list.length / 2) - 1];\n        double b = list[list.length / 2];\n        return (a + b) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double a = list[(list.length / 2) - 1];\n        double b = list[list.length / 2];\n        return (a + b) / 2;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double lower = list[(int) (list.length / 2)];\n        double upper = list[(int) (list.length / 2) - 1];\n        return (lower + upper) / 2;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double low = list[(list.length / 2) - 1];\n        double high = list[list.length / 2];\n        return (high + low) / 2;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double low = list[(int) (list.length / 2)];\n        double high = list[(int) (list.length / 2) - 1];\n        return (high + low) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        double low = list[(int) (list.length / 2)];\n        double high = list[(int) (list.length / 2) - 1];\n        return (high + low) / 2;\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - 1 - i)){\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char ch = text.charAt(i);\n        if (ch != text.charAt(text.length() - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - i - 1))\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - 1 - i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - 1 - i))\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char ch = text.charAt(i);\n        if (ch != text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char ch = text.charAt(i);\n        if (ch != text.charAt(text.length() - i - 1))\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        char c = text.charAt(i);\n        if (c != text.charAt(text.length() - 1 - i)){\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= m;\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= MOD;\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= n;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= mod;\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= n;\n        result %= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n    }\n    return result % p;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        <|mask:0|>\n        sb.append(c);\n    }\n    return sb.toString();\n}\n<|mask:0|>",
      "function range": "16,5-23,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        <|mask:0|>\n            continue;\n        sb.append(c);\n    }\n    return sb.toString();\n}\n<|mask:0|>",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                continue;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n        case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                break;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n                continue;\n            default:\n                sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n            sb.append(c);\n            break;\n        default:\n            continue;\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n        case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n            continue;\n        default:\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n        case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n            sb.append(c);\n            break;\n        default:\n            continue;\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n        switch (c) {\n            case 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                sb.append(c);\n                break;\n            default:\n                break;\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "10,5-16,5",
      "output": [
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int v = l[i];\n        if (v < t) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int val = l[i];\n        if (val < t) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int v = l[i];\n        if (v > t) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int v = l[i];\n        if (v >= t) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        System.out.println(l[i]);\n        if (l[i] < t) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int v = l[i];\n        if (v < t)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int v = l[i];\n        if (v < t) {\n            return false;\n        }\n        if (v > t) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        assertTrue(l[i] < t);\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        assertTrue(l[i] < t);\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n        final int v = l[i];\n        if (v < t) {\n            return false;\n        }\n        if (v > t) {\n            return true;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "10,5-12,5",
      "output": [
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    final int sum = x + y;\n    return sum;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    System.out.println(x+y);\n    return x+y;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    System.out.println(x+y);\n    return x + y;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n    x += y;\n    return x;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n    <|mask:0|>\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}\n<|mask:0|>",
      "function range": "20,5-31,5",
      "output": [
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    Set<Character> set1 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<>();\n    Set<Character> set1 = new HashSet<>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    HashSet<Character> set0 = new HashSet<Character>();\n    HashSet<Character> set1 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    Set<Character> set1 = new HashSet<Character>();\n    for (char c : s0.toCharArray()) {\n        set0.add(c);\n    }\n    for (char c : s1.toCharArray()) {\n        set1.add(c);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    Set<Character> set1 = new HashSet<Character>();\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    HashSet<Character> set0 = new HashSet<>();\n    HashSet<Character> set1 = new HashSet<>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    for (char c : s0.toCharArray()) {\n        set0.add(c);\n    }\n    Set<Character> set1 = new HashSet<Character>();\n    for (char c : s1.toCharArray()) {\n        set1.add(c);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    Set<Character> set1 = new HashSet<Character>();\n    for (int i = 0; i < s0.length(); i++) {\n        set0.add(s0.charAt(i));\n        set1.add(s1.charAt(i));\n    }\n    return set0.equals(set1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    Set<Character> set1 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set1.add(c1);\n    }\n    return set0.equals(set1);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n    Set<Character> set0 = new HashSet<Character>();\n    for (char c0 : s0.toCharArray()) {\n        set0.add(c0);\n    }\n    for (char c1 : s1.toCharArray()) {\n        set0.add(c1);\n    }\n    return set0.size() == s1.length();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "public static int fib(int n) {\n    int[] arr = new int[n + 1];\n    arr[0] = 0;\n    arr[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2];\n    }\n    return arr[n];\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] a = new int[n + 1];\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] arr = new int[n + 1];\n    arr[0] = 1;\n    arr[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        arr[i] = arr[i - 1] + arr[i - 2];\n    }\n    return arr[n];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] a = new int[n + 1];\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] arr = new int[n + 1];\n    arr[0] = 0;\n    arr[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      arr[i] = arr[i - 1] + arr[i - 2];\n    }\n    return arr[n];\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] arr = new int[n + 1];\n    arr[0] = 0;\n    arr[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        arr[i] = arr[i - 2] + arr[i - 1];\n    }\n    return arr[n];\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] a = new int[n + 1];\n    a[0] = 1;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] a = new int[n + 1];\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        a[i] = a[i-2] + a[i-1];\n    }\n    return a[n];\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] a = new int[n + 1];\n    a[0] = 0;\n    a[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      a[i] = a[i - 1] + a[i - 2];\n    }\n    return a[n];\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n    int[] arr = new int[n + 1];\n    arr[0] = 0;\n    arr[1] = 1;\n    for (int i = 2; i <= n; i++) {\n      arr[i] = arr[i - 1] + arr[i - 2];\n    }\n    return arr[n];\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "16,5-27,5",
      "output": [
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth < 0) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth < 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth <= 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth == 0)\n            return true;\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth < 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        depth = Math.max(depth, 0);\n    }\n    return depth == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth < 0)\n            return false;\n    }\n    \n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        \n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    <|mask:0|>\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}\n<|mask:0|>",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[i] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[i] = l[i]; \n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    System.arraycopy(l, 0, sorted, 0, l.length);\n    System.arraycopy(l, 0, reverse_sorted, 0, l.length);\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[i] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[l.length - i - 1] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[l.length - i - 1] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[l.length - i - 1] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[l.length - i - 1] = sorted[i];\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[i] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1];\n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[i] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n    Arrays.sort(l);\n    for (int i = 0; i < l.length; i += 1)\n        sorted[l.length - i - 1] = l[i];\n    Arrays.sort(sorted);\n    for (int i = 0; i < l.length; i += 1)\n        reverse_sorted[i] = sorted[l.length - i - 1]; \n    if (Arrays.equals(l, sorted) || Arrays.equals(l, reverse_sorted))\n        return true;\n    return false;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n    <|mask:0|>\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}\n<|mask:0|>",
      "function range": "12,5-29,5",
      "output": [
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    List<Integer> common = new ArrayList<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    List<Integer> common = new ArrayList<>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    List<Integer> common = new ArrayList<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    Set<Integer> common = new HashSet<>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    ArrayList<Integer> common = new ArrayList<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n    List<Integer> common = new ArrayList<Integer>();\n    for (int i = 0; i < l1.length; i += 1){\n        for (int j = 0; j < l2.length; j += 1){\n            if (l1[i] == l2[j])\n                common.add(l1[i]);\n        }\n    }\n    int[] result = new int[common.size()];\n    int index = 0;\n    for (Integer c : common) {\n        result[index] = c;\n        index += 1;\n    }\n    Arrays.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        <|mask:0|>\n        }\n    }\n    return largest;\n}\n<|mask:0|>",
      "function range": "20,5-28,5",
      "output": [
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = Math.max(largest, j);\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = (largest * j) % n;\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = (largest < j) ? j : largest;\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = j > largest ? j : largest;\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = (largest > j) ? largest : j;\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = (largest < j) ? largest : j;\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest *= j;\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = j;\n        for (int i = 2; i <= largest; i += 1) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = j;\n        if (n % j == 0) {\n            while (n % j == 0) {\n                n /= j;\n                largest += 1;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        largest = j;\n        if (n % j == 0) {\n            while (n % j == 0) {\n                n /= j;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "16,5-18,5",
      "output": [
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += i;\n    }\n    return (int) sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n      sum += i;\n    }\n    return (int) sum;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    <|mask:0|>\n    return result;\n}\n<|mask:0|>",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i-1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i-1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(result.get(i - 1) + xs.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(2 * xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i-1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(2 * xs.get(i) - xs.get(i-1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    result.add(xs.get(0));\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    else \n        return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    else \n        return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    else return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fib(n - 1) + fib(n - 2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fibfib(n - 2) + fibfib(n - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fibonacci(n - 1) + fibonacci(n - 2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    \n    return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    <|mask:0|>\n        result += 1;\n    return result;\n}\n<|mask:0|>",
      "function range": "15,5-27,5",
      "output": [
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    \n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    result /= str_chars.length;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    ;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    result *= str_chars.length;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    System.out.println(result);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        <|mask:0|>\n    }\n}\n<|mask:0|>",
      "function range": "12,5-23,5",
      "output": [
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(s.length() - 1 - i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(s.length() - 1 - i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(0));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1) {\n            sb.append(s.charAt(s.length() - 1 - i));\n        }\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i + shift));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1) {\n            sb.append(s.charAt(0));\n        }\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(s.length() - 1 - i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        <|mask:0|>\n        if ('A' <= c && c <= 'Z')\n            result += (int) c;\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "16,5-25,5",
      "output": [
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += (int)c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Integer.parseInt(String.valueOf(c));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.digit(c, 10);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += digit(c);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += (c >= '0' && c <= '9') ? c - '0' : 0;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += (c >= '0' && c <= '9') ? c - '0' : -1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_count(str);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, result);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, n - 1);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, 1);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += Integer.parseInt(str);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n        result += fruit_distribution(str, n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n    <|mask:0|>\n    for (int i = 0; i < arr.length; i += 1) {\n        if (arr[i] % 2 == 0 && arr[i] < min_even) {\n            min_even = arr[i];\n            index = i;\n        }\n    }\n    if (index == -1)\n        return new int[]{};\n    return new int[] {min_even, index};\n}\n<|mask:0|>",
      "function range": "36,5-49,5",
      "output": [
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length; i += 1) {\n        result[i] = arr[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] ret = new int[arr.length];\n    for (int i = 0; i < arr.length; i += 1) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        result[i] = arr[i];\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] ret = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        ret[i] = arr[i];\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] res = new int[arr.length];\n    for (int i = 0; i < arr.length; i += 1) {\n        res[i] = arr[i];\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length; ++i) {\n        result[i] = arr[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] res = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n        res[i] = arr[i];\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] ret = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n        ret[i] = arr[i];\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n    int[] result = new int[arr.length];\n    for (int i = 0; i < arr.length; i += 1) {\n        result[i] = arr[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    <|mask:0|>\n    return result;\n}\n<|mask:0|>",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            found = true;\n            result = i;\n            break;\n        }\n    }\n    return found ? result : -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            result = i;\n            found = true;\n            break;\n        }\n    }\n    return found ? result : -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            found = true;\n            break;\n        }\n    }\n    if (found)\n        result = max;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            found = true;\n            result = i;\n            break;\n        }\n    }\n    if (!found)\n        return -1;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            result = i;\n            found = true;\n            break;\n        }\n    }\n    if (!found)\n        return -1;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            result = i;\n            found = true;\n            break;\n        }\n    }\n    if (!found)\n        result = -1;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            found = true;\n            result = i;\n            break;\n        }\n    }\n    return found ? result : -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            found = true;\n            break;\n        }\n    }\n    if (found)\n        result = max;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            result = i;\n            found = true;\n            break;\n        }\n    }\n    return found ? result : -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    boolean found = false;\n    for (Integer i : lst) {\n        if (i == max) {\n            found = true;\n            result = i;\n            break;\n        }\n    }\n    if (!found)\n        return -1;\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    <|mask:0|>\n    return result;\n}\n<|mask:0|>",
      "function range": "17,5-29,5",
      "output": [
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = !switched;\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = !switched;\n    lst.clear();\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = ! switched;\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = !switched;\n    lst.subList(0, lst.size()).clear();\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = !switched;\n    lst.remove(Collections.min(lst));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = !switched;\n    lst.clear();\n    lst.addAll(result);\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n    switched = !switched;\n    lst.subList(0, lst.size() - 1).clear();\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n<|mask:0|>\n    if (a + b <= c || a + c <= b || b + c <= a)\n        return -1;\n    double s = (a + b + c) / 2.;\n    double result = Math.pow(s, 0.5);\n    BigDecimal bd = BigDecimal.valueOf(result);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.doubleValue();\n}\n<|mask:0|>",
      "function range": "16,5-26,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    <|mask:0|>\n    return true;\n}\n<|mask:0|>",
      "function range": "20,5-34,5",
      "output": [
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n    j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i++; j--;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i++;\n    j--;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n    j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i = i + 1;\n    j = j - 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n    j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n    j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n    j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n    i += 1;\n    j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    <|mask:0|>\n            result += 1;\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "13,5-21,5",
      "output": [
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for(int i : arr) {\n        result += i;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] - arr[i - 1] > result) {\n            result = arr[i] - arr[i - 1];\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 1; i < arr.length; i++) {\n        result += arr[i] - arr[i - 1];\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length; i++) {\n        result += arr[i] - arr[0];\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 1; i < arr.length; i++) {\n        result += arr[i] - arr[i-1];\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for(int i = 1; i < arr.length; i++) {\n        if(arr[i] > arr[i-1]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            result = arr[i + 1] - arr[i];\n            break;\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            result = arr[i + 1] - arr[i];\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    Arrays.sort(arr);\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > arr[i - 1]) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    <|mask:0|>\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}\n<|mask:0|>",
      "function range": "18,5-29,5",
      "output": [
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 > l2)\n        return lst2;\n    return lst1;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 < l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 == l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 < l2)\n        return lst2;\n    return lst1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 > l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    Collections.sort(lst2);\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 > l2)\n        return lst2;\n    return lst1;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for(String st : lst2)\n        l2 += st.length();\n    if (l1 <= l2)\n        return lst1;\n    return lst2;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            <|mask:0|>\n                if (! is_prime(k)) continue;\n                if (i * j * k == a)\n                    return true;\n            }\n        }\n    }\n    return false;\n}\n<|mask:0|>",
      "function range": "19,5-31,5",
      "output": [
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if(i * j == a) return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if(i * j == a)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            int k = j + i;\n            if (! is_prime(k)) continue;\n            if (i * j * k == a)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if(!is_prime(j)) continue;\n            if (i * j == a)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if(!is_prime(j)) continue;\n            if (i * j == a) return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            int k = j + i;\n            if (! is_prime(k)) continue;\n            if (i * j * k == a) return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if(!is_prime(j)) continue;\n            if (i * j == a) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            int k = j + i;\n            if (! is_prime(k)) continue;\n            if (i * j * k == a) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            int k = j + i;\n            if (! is_prime(k)) continue;\n            if (i * j * k == a)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            int k = j + i;\n            if (! is_prime(k)) continue;\n            if (i * j * k == a)\n                return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n    <|mask:0|>\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}\n<|mask:0|>",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = true;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = false;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = false;\n    while (n > 0) {\n        if (x % n == 0) {\n            result = true;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = false;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = true;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = true;\n    while (n > 0) {\n        if (x % n == 0) {\n            result = false;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = false;\n    while (n > 0) {\n        if (x % n == 0) {\n            result = true;\n            break;\n        }\n        n--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = true;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = false;\n            break;\n        }\n        n--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = false;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = true;\n            break;\n        }\n        n--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = true;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = false;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = false;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = true;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n    boolean result = false;\n    while (n > 1) {\n        if (x % n == 0) {\n            result = true;\n            break;\n        }\n        n /= 2;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n    <|mask:0|>\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}\n<|mask:0|>",
      "function range": "18,5-24,5",
      "output": [
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    double root = Math.sqrt(a);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(a);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(a);\n    int round_a = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_a, 3)) == a;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    double root = Math.sqrt(a);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 2)) == a;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    BigDecimal bd = BigDecimal.valueOf(a);\n    int round_a = bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_a, 3)) == a;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n    double root = Math.sqrt(a);\n    BigDecimal bd = BigDecimal.valueOf(root);\n    int round_root = (int) bd.setScale(0, RoundingMode.HALF_UP).doubleValue();\n    return ((int) Math.pow(round_root, 3)) == a;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        <|mask:0|>\n            result += 1;\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "21,5-28,5",
      "output": [
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result *= 16;\n        result += c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result += Integer.parseInt(String.valueOf(c), 16);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result += Character.digit(c, 16);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result <<= 4;\n        result += (c - '0');\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result *= 16;\n        result += Integer.parseInt(String.valueOf(c), 16);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result *= 16;\n        result += Integer.parseInt(String.valueOf(c));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result *= 16;\n        result += Integer.parseInt(String.format(\"%02X\", c), 16);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result <<= 4;\n        result += Integer.parseInt(Character.toString(c), 16);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n        result <<= 4;\n        result += Integer.parseInt(Character.toString(c));\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n    <|mask:0|>\n    return \"db\" + result + \"db\";\n}\n<|mask:0|>",
      "function range": "15,5-18,5",
      "output": [
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    return bd.toBinaryString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    return bd.toBinaryString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    return bd.toBinaryString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bigDecimal = new BigDecimal(decimal);\n    return bigDecimal.toString(2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.toPlainString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    return bd.toBigInteger().toString(2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    return bd.toPlainString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    return bd.toString(2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    StringBuilder sb = new StringBuilder();\n    while (decimal > 0) {\n      sb.append(decimal % 2);\n      decimal /= 2;\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n    BigDecimal bd = new BigDecimal(decimal);\n    bd = bd.setScale(2, RoundingMode.HALF_UP);\n    return bd.toBigIntegerString();\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        <|mask:0|>\n            return false;\n    }\n    return true;\n}\n<|mask:0|>",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if (c < '0' || c > '9')\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if (!Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F'))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if ((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c1 = s.charAt(i);\n        char c2 = s.charAt(i + 1);\n        if (c1 != c2)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if (c < '0' || c > '9')\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if ((c < '0' || c > '9') && (c < 'a' || c > 'f'))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        char c = s.charAt(i);\n        if ((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        <|mask:0|>\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}\n<|mask:0|>",
      "function range": "26,5-59,5",
      "output": [
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if(gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if(gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if(gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if(gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if(gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if (gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if(gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if(gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if(gpa > 0.3)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if(gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if(gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if(gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if(gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if(gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if(gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if(gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if(gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if(gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if(gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else if(gpa > 0.0)\n            letter_grade[i] = \"D-\";\n        else\n            letter_grade[i] = \"E\";\n    }\n    return letter_grade;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        <|mask:0|>\n            return false;\n    }\n    return true;\n}\n<|mask:0|>",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(l - i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(i - 1);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(i);\n        if (Character.isDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(l - i);\n        if (c == ' ')\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(l - i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(l - i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        char c = string.charAt(i);\n        if (Character.isLetterOrDigit(c))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "7,5-11,5",
      "output": [
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n % 2) == 0)\n        return starts_one_ends(n / 2);\n    else\n        return starts_one_ends(n / 2) + 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n % 2) == 0)\n        return starts_one_ends(n / 2) + 1;\n    else\n        return starts_one_ends(n / 2) - 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n % 2) == 0)\n        return starts_one_ends(n / 2) + 1;\n    else\n        return starts_one_ends(n / 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n & 1) == 0)\n        return starts_one_ends(n >> 1);\n    else\n        return starts_one_ends(n >> 1) + 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n & 1) == 0)\n        return 0;\n    else\n        return starts_one_ends(n >> 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n & -n) == n)\n        return 1;\n    else\n        return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n % 2) == 0)\n        return starts_one_ends(n / 2) + 1;\n    else\n        return starts_one_ends(n / 2) + 2;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n & -n) == n)\n        return 0;\n    else\n        return 1 + starts_one_ends(n >> 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n % 2) == 0)\n        return starts_one_ends(n / 2) + 1;\n    else\n        return starts_one_ends(n / 2) + 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    else if ((n & 1) == 0)\n        return 0;\n    else\n        return starts_one_ends(n >> 1) + 1;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        <|mask:0|>\n    }\n    return Integer.toBinaryString(sum);\n}\n<|mask:0|>",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(\"\" + N.charAt(i));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(String.valueOf((N + \"\").charAt(i)));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(String.valueOf(N.charAt(i)));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(\"\" + N + \"\".substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(\"\".substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(Character.toString((N + \"\").charAt(i)));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(String.valueOf(N).substring(i, i + 1));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum = sum + Integer.parseInt(\"\" + N.charAt(i));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum = sum + Integer.parseInt(String.valueOf((N + \"\").charAt(i)));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(String.valueOf((N + \"\").charAt(i)));\n    }\n    return Integer.toBinaryString(sum);\n}",
          "correctness": "plausible"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    <|mask:0|>\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}\n<|mask:0|>",
      "function range": "8,5-15,5",
      "output": [
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    Arrays.sort(lst);\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for(int i : lst) {\n        if (i % 2 == 0)\n            sum += i;\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    Arrays.sort(lst);\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 != 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for(int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for(int i : lst) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    \n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "17,5-25,5",
      "output": [
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += String.valueOf(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += chars.toString();\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \"\\n\";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n        result += \" \";\n    }\n    result = result.trim();\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        <|mask:0|>\n            }\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "22,5-33,5",
      "output": [
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n            row.add(lst.get(i).get(j));\n        }\n        result.add(new Tuple(row, x));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n            row.add(lst.get(i).get(j));\n        }\n        result.add(new Tuple(row));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = lst.get(i);\n        result.add(new Tuple(row.get(x), row.get(x + 1)));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = new ArrayList<Integer>();\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n            row.add(lst.get(i).get(j));\n        }\n        result.add(new Tuple(x, row));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> list = lst.get(i);\n        for (int j = 0; j < list.size(); j += 1) {\n            if (list.get(j) == x) {\n                result.add(new Tuple(i, j));\n                break;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = lst.get(i);\n        for (int j = 0; j < row.size(); j += 1) {\n            if (row.get(j) == x) {\n                result.add(new Tuple(i, j));\n                break;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = lst.get(i);\n        for (int j = 0; j < row.size(); j += 1) {\n            if (j == x) {\n                result.add(new Tuple(row.get(j)));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> list = lst.get(i);\n        for (int j = 0; j < list.size(); j += 1) {\n            if (list.get(j) == x) {\n                result.add(new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = lst.get(i);\n        result.add(new Tuple(row.get(x), row.get(x + 1), row.get(x + 2)));\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        ArrayList<Integer> row = lst.get(i);\n        for (int j = 0; j < row.size(); j += 1) {\n            if (row.get(j) == x) {\n                result.add(new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            <|mask:0|>\n        }\n        return array;\n    }\n}\n<|mask:0|>",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = tmp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - (i + 1)];\n            array[array.length - (i + 1)] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[i + array.length / 2];\n            array[i + array.length / 2] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[i + 1];\n            array[i + 1] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            swap(array, i, array.length - 1 - i);\n        }\n        return array;\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                <|mask:0|>\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n<|mask:0|>",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((int) (c - 'a'))\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((int) (c - 'a'))\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n                d.charAt((int) (c - 'A'))\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(\n                    (c - 'a' + d.length()) % d.length()\n                )\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((c - 'a') % 26)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt(\n                    (d.indexOf(c) + 13) % d.length()\n                )\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((c - 'a') % 26)\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n                d.charAt((c - 'A') + 26)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((c - 'a' + d.length()) % d.length())\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((c - 'a' + d.length()) % d.length()));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((int) (c - 'a'))\n            );\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(\n                d.charAt((int) (c - 'A') + 26)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n                d.charAt((int) (c - 'a')));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n    <|mask:0|>\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}\n<|mask:0|>",
      "function range": "15,5-25,5",
      "output": [
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[1];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    ArrayList<Integer> numbers = new ArrayList<>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    if (no_duplicate.length < 2)\n        return null;\n    return no_duplicate[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    return no_duplicate[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    Arrays.sort(lst);\n    return lst[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<Integer>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    return no_duplicate[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    List<Integer> numbers = new ArrayList<>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    return no_duplicate[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    Set<Integer> numbers = new HashSet<Integer>();\n    for (Integer n : lst)\n        numbers.add(n);\n    Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n    Arrays.sort(no_duplicate);\n    return no_duplicate[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    Arrays.sort(lst);\n    if (lst.length < 2)\n        return null;\n    return lst[1];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n    Arrays.sort(lst);\n    return lst[lst.length - 1];\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        <|mask:0|>\n            result += 1;\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        result += is_bored(sentence);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"bored\")) {\n                result = 1;\n                break;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (word.equalsIgnoreCase(\"bored\")) {\n                result = 1;\n                break;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"bored\")) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (word.equalsIgnoreCase(\"bored\")) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"bored\")) {\n                result = 1;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            if (word.equalsIgnoreCase(\"bored\")) {\n                result = 1;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        String[] words = sentence.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.equalsIgnoreCase(\"bored\")) {\n                result = 1;\n                break;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n    <|mask:0|>\n            return true;\n    }\n    return false;\n}\n<|mask:0|>",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        <|mask:0|>\n            c = Character.toUpperCase(c);\n        }\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}\n<|mask:0|>",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        \n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U') {\n            c = (char) ((int) c + 2);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "22,5-35,5",
      "output": [
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int) c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int)c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Integer.parseInt(String.valueOf(c));\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (c - '0');\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Integer.parseInt(Character.toString(c));\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += Character.getNumericValue(c);\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            <|mask:0|>\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}\n<|mask:0|>",
      "function range": "16,5-43,5",
      "output": [
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (!state.equals(\"mixed\")) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (!(state.equals(\"upper\") || state.equals(\"lower\"))) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && (str_key.toUpperCase().equals(str_key))) {\n                state = \"lower\";\n            } else if ((state.equals(\"lower\")) && (str_key.toLowerCase().equals(str_key))) {\n                state = \"upper\";\n            } else {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && (str_key.toUpperCase().equals(str_key))) {\n                state = \"upper\";\n            } else if ((state.equals(\"lower\")) && (str_key.toLowerCase().equals(str_key))) {\n                state = \"lower\";\n            } else {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (!state.equals(\"upper\") && !state.equals(\"lower\")) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && (str_key.toUpperCase().equals(str_key))) {\n                state = \"lower\";\n            } else if ((state.equals(\"lower\")) && (str_key.toLowerCase().equals(str_key))) {\n                state = \"upper\";\n            } else {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && (str_key.toUpperCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            } else if ((state.equals(\"lower\")) && (str_key.toLowerCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && (str_key.toUpperCase().equals(str_key))) {\n                state = \"upper\";\n            } else if ((state.equals(\"lower\")) && (str_key.toLowerCase().equals(str_key))) {\n                state = \"lower\";\n            } else {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if ((state.equals(\"upper\")) && (str_key.toUpperCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            } else if ((state.equals(\"lower\")) && (str_key.toLowerCase().equals(str_key))) {\n                state = \"mixed\";\n                break;\n            } else {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\")) || (state.equals(\"lower\"));\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (!(state.equals(\"upper\") || state.equals(\"lower\"))) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return (state.equals(\"upper\"));\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        <|mask:0|>\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}\n<|mask:0|>",
      "function range": "17,5-30,5",
      "output": [
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j++){\n            if (i % j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i % j != 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = false;\n        for (int j = 2; j < i; j += 1){\n            if (i % j == 0){\n                is_prime = true;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j++){\n            if (i % j == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if ((i % j) == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        boolean is_prime = true;\n        for (int j = 2; j < i; j += 1){\n            if (i%j == 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) primes.add(i);\n    }\n    return primes;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "public static int multiply(int a, int b) {\n    System.out.println(a * b);\n    return a * b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    System.out.println(a * b);\n    return a * b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    System.out.println(a * b);\n    return a * b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    BigInteger result = BigInteger.valueOf(a);\n    result = result.multiply(BigInteger.valueOf(b));\n    return result.intValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    System.out.println(a);\n    System.out.println(b);\n    return a * b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    BigInteger result = BigInteger.valueOf(a);\n    result.multiply(BigInteger.valueOf(b));\n    return result.intValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    BigInteger result = BigInteger.valueOf(a);\n    result = result.multiply(BigInteger.valueOf(b));\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    System.out.println(a * b);\n    return a * b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    BigInteger result = BigInteger.valueOf(a);\n    result.multiply(b);\n    return result.intValue();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n    System.out.println(a * b);\n    return a * b;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        <|mask:0|>\n            count += 1;\n    }\n    return count;\n}\n<|mask:0|>",
      "function range": "11,5-19,5",
      "output": [
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += Character.isUpperCase(c) ? 1 : 0;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += (c >= 'A' && c <= 'Z') ? 1 : 0;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += Character.isUpperCase(c);\n    }\n    return count;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += Character.isUpperCase(c) ? 1 : 0;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += (c >= 'A' && c <= 'Z');\n    }\n    return count;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += Character.isUpperCase(c) ? 2 : 1;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += (Character.isUpperCase(c)) ? 1 : 0;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n    }\n    return count;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1 : 0;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        count += (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1 : -1;\n    }\n    return count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    <|mask:0|>\n    } else if (value.length() > 0){\n        result = (int)Math.round(num);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  <|mask:0|>\n\t}\n\treturn pile;\n}\n<|mask:0|>",
      "function range": "20,2-26,2",
      "output": [
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n  \tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n <|mask:0|>\n\tfor(char c : s.toCharArray()) {\n\t\tif(c == ',') {\n\t\t\ts_list += ' ';\n\t\t} else {\n\t\t\ts_list += c;\n\t\t}\n\t}\n\tString[] result_array = s_list.trim().split(\"\\\\s+\");\n\tfor(String r : result_array) {\n\t\tresult.add(r);\n\t}\n\treturn result;\n}\n<|mask:0|>",
      "function range": "15,2-30,2",
      "output": [
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n \tString s_list = \"\";\n \tfor(char c : s.toCharArray()) {\n \t\tif(c == ',') {\n \t\t\ts_list += ' ';\n \t\t} else {\n \t\t\ts_list += c;\n \t\t}\n \t}\n \tString[] result_array = s_list.trim().split(\"\\\\s+\");\n \tfor(String r : result_array) {\n \t\tresult.add(r);\n \t}\n \treturn result;\n }",
          "correctness": "wrong"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n    <|mask:0|>\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}\n<|mask:0|>",
      "function range": "14,5-19,5",
      "output": [
        {
          "patch": "public static int choose_num(int x, int y) {\n    System.out.println(x);\n    System.out.println(y);\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return y - 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    Random rand = new Random();\n    return rand.nextInt((y - x) + 1) + x;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    System.out.println(x);\n    System.out.println(y);\n    if((y % 2) == 0) return y;\n    if(x == y) return -1;\n    return x - 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    Random rand = new Random();\n    return rand.nextInt((y - x + 1) + 1) + x;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    Random rand = new Random();\n    return rand.nextInt((x - y) + 1) + y;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    Random rand = new Random();\n    return rand.nextInt();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    System.out.println(x);\n    System.out.println(y);\n    if((y % 2) == 0) return x;\n    if(x == y) return -1;\n    return x - 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    Random rand = new Random();\n    return rand.nextInt(y) + x;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    System.out.println(x);\n    System.out.println(y);\n    if((y % 2) == 0) return x;\n    if(x == y) return -1;\n    return x + 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    System.out.println(x);\n    System.out.println(y);\n    if(x == y) return -1;\n    return y - 1;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        <|mask:0|>\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}\n<|mask:0|>",
      "function range": "15,5-30,5",
      "output": [
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.round(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else if(rem >= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.round(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.round(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.round(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int)Math.ceil(avg);\n    } else {\n        avg_rounded = (int)Math.floor(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else if(rem > 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.round(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor((double) avg);\n    } else {\n        avg_rounded = (int) Math.ceil((double) avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toBinaryString(avg_rounded);\n}",
          "correctness": "plausible"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            <|mask:0|>\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}\n<|mask:0|>",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                break;\n            }\n            all_odd = false;\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                break;\n            }\n            num /= 10;\n        }\n        if(!all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n            } else {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!(res.contains(curr_digit))) {\n                res.add(curr_digit);\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    Collections.sort(res);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                break;\n            }\n            num /= 10;\n        }\n        if(!all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(!res.contains(curr_digit)) {\n                res.add(curr_digit);\n                break;\n            }\n            num /= 10;\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        <|mask:0|>\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "31,5-50,5",
      "output": [
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        digit_map.remove(num);\n        result.add(digit_map.get(num));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        System.out.println(num);\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        System.out.println(num);\n        if (digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        while(num > 0) {\n            result.add(digit_map.get(num % 10));\n            num /= 10;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        while(num > 0) {\n            result.add(digit_map.get(num % 10));\n            num = num / 10;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        StringBuilder sb = new StringBuilder();\n        while(num > 0) {\n            sb.append(digit_map.get(num % 10));\n            num /= 10;\n        }\n        result.add(sb.toString());\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        System.out.println(num);\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        digit_map.remove(num);\n        if(digit_map.isEmpty()) {\n            break;\n        }\n        result.add(digit_map.get(num));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        System.out.println(num);\n        if(digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        System.out.println(num);\n        if (digit_map.containsKey(num)) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            <|mask:0|>\n            ret.add(x);\n        }\n    }\n    return ret;\n}\n<|mask:0|>",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x++;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x /= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x = x * j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i / 2; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 2; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i/2; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        <|mask:0|>\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}\n<|mask:0|>",
      "function range": "39,5-47,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i; j > 0; j--) {\n            if(i % j != 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i; j >= 0; j--) {\n            if(i % j == 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = 1; j < i; j++) {\n            if(i % j == 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i; j > 0; j--) {\n            if(i % j == 1) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i + 1; j < n; j++) {\n            if(i % j == 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i; j > 0; j--) {\n            if(i % j != 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i; j > 0; j--) {\n            if(i % j != 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        for(int j = i; j > 0; j--) {\n            if(i % j == 0) {\n                even_palindrome_count++;\n                break;\n            }\n        }\n        for(int j = i; j > 0; j--) {\n            if(i % j != 0) {\n                odd_palindrome_count++;\n                break;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        <|mask:0|>\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}\n<|mask:0|>",
      "function range": "6,5-20,5",
      "output": [
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        boolean pos = num > 0;\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        if(neg) num *= -1;\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) count -= num_string.charAt(i) - '0';\n            else count += num_string.charAt(i) - '0';\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum == 0) count++;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) count--;\n            else count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        num = Math.abs(num);\n        if(neg) num *= -1;\n        String num_string = Integer.toString(num);\n        int sum = 0;\n        for(int i = 0; i < num_string.length(); i++) {\n            if((i == 0) && neg) sum -= num_string.charAt(i) - '0';\n            else sum += num_string.charAt(i) - '0';\n        }\n        if(sum > 0) count++;\n    }\n    return count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    <|mask:0|>\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n<|mask:0|>",
      "function range": "7,5-29,5",
      "output": [
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = 0; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(sorted_arr.get(i) != arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    Integer min_value = sorted_arr.get(0);\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    Integer min_value = sorted_arr.get(0);\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    Integer min_value = sorted_arr.get(0);\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = min_index; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) != arr_after_move.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = 0; i < arr.size(); i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < sorted_arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    Integer min_value = sorted_arr.get(0);\n    int min_index = 0;\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == min_value) min_index = i;\n    }\n    ArrayList<Integer> arr_after_move = new ArrayList<>();\n    for(int i = 0; i < min_index; i++) {\n        arr_after_move.add(arr.get(i));\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr_after_move.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) != sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    for(int i = 0; i < arr.size(); i++) {\n        arr.remove(i);\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    <|mask:0|>\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n<|mask:0|>",
      "function range": "20,5-32,5",
      "output": [
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 0) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) != 0) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 0) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) odd++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 0) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 1) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 0) even++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 1) odd++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 0) even++;\n        else odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n        else odd++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 1) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n    for(int i : lst1) {\n        if((i % 2) == 0) odd++;\n    }\n    for(int i : lst2) {\n        if((i % 2) == 0) even++;\n    }\n    if(even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
          "correctness": "wrong"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        <|mask:0|>\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}\n<|mask:0|>",
      "function range": "19,5-40,5",
      "output": [
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    res.clear();\n    res.put((char) ('a' + most_count), most_count);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), count_letter[i]);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    return res;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? i : most_count;\n    }\n    res.clear();\n    res.put((char) ('a' + most_count), most_count);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    res.clear();\n    res.put((char) ('a' + most_count), most_count);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n        if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] != most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        } else if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n        if(count_letter[i] == most_count) {\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        most_count = count_letter[i] > count_letter[most_count] ? count_letter[i] : count_letter[most_count];\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] != most_count) {\n            most_count = count_letter[i];\n            res.clear();\n            res.put((char) ('a' + i), most_count);\n        }\n    }\n    if(most_count == 0) res.clear();\n    return res;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        <|mask:0|>\n            new_s += s.charAt(i);\n        }\n    }\n    String reverse_s = \"\";\n    for(int i = new_s.length() - 1; i >= 0; i--) {\n        reverse_s += new_s.charAt(i);\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(reverse_s.equals(new_s));\n    return res;\n}\n<|mask:0|>",
      "function range": "17,5-32,5",
      "output": [
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if(ch != c) {\n            new_s += ch;\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    return res;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if(ch != c) {\n            new_s += ch;\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(new_s.equals(s));\n    return res;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0; j < c.length(); j++) {\n            if(s.charAt(i) == c.charAt(j)) {\n                new_s += s.charAt(i);\n            }\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(new_s.equals(s));\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0; j < c.length(); j++) {\n            if(s.charAt(i) == c.charAt(j)) {\n                new_s += s.charAt(i);\n            }\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0; j < c.length(); j++) {\n            if(s.charAt(i) == c.charAt(j)) {\n                new_s += s.charAt(i);\n                break;\n            }\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(new_s.equals(s));\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0; j < c.length(); j++) {\n            if(s.charAt(i) == c.charAt(j)) {\n                new_s += s.charAt(i);\n            }\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(s.equals(new_s));\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        if(ch != c) {\n            new_s += ch;\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(s.equals(new_s));\n    return res;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0; j < c.length(); j++) {\n            if(s.charAt(i) == c.charAt(j)) {\n                new_s += s.charAt(i);\n                break;\n            }\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if(!c.equals(c)) {\n            new_s += c;\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(new_s.equals(s));\n    return res;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0; j < c.length(); j++) {\n            if(s.charAt(i) == c.charAt(j)) {\n                new_s += s.charAt(i);\n                break;\n            }\n        }\n    }\n    ArrayList<Object> res = new ArrayList<>();\n    res.add(new_s);\n    res.add(s.equals(new_s));\n    return res;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            <|mask:0|>\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) != 0) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) == 1) {\n                n += 1;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit % 2) == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) == 1) {\n                n += 1;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit & 1) != 0) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit % 2) == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if((digit % 2) == 1) {\n                n++;\n            }\n        }\n        result.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\");\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        <|mask:0|>\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}\n<|mask:0|>",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > 0) {\n            max_sum = Math.max(s, max_sum);\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s < 0) {\n            s = 0;\n        }\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    return max_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    long min_sum = -max_sum;\n    return min_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n    }\n    return max_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    return max_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(s, max_sum);\n    }\n    if(max_sum == 0) {\n        max_sum = -nums.get(0);\n        for(int i = 1; i < nums.size(); i++) {\n            max_sum = Math.max(max_sum, -nums.get(i));\n        }\n    }\n    return max_sum;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        <|mask:0|>\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "38,5-48,5",
      "output": [
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j].capacity;\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > 0) {\n                row_capacity += grid[i][j];\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j].length;\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] == 0) {\n                row_capacity++;\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                row_capacity = bucket_capacity;\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                return -1;\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            if(grid[i][j] > 0) {\n                row_capacity += grid[i][j];\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                return -1;\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                row_capacity = bucket_capacity;\n            }\n        }\n        result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      <|mask:0|>\n   if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}\n<|mask:0|>",
      "function range": "31,10-42,10",
      "output": [
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      if(o1 < o2) return -1;\n      else if(o1 == o2) return 0;\n      else return 1;\n   }\n   else if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      int num_zeros_o1 = number_zeros(o1);\n      int num_zeros_o2 = number_zeros(o2);\n      if(num_zeros_o1 < num_zeros_o2) return -1;\n      else if(num_zeros_o1 > num_zeros_o2) return 1;\n      else return 0;\n   }\n   else if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      int num_twos_o1 = number_twos(o1);\n      int num_twos_o2 = number_twos(o2);\n      if(num_twos_o1 < num_twos_o2) return -1;\n      else if(num_twos_o1 > num_twos_o2) return 1;\n      else return 0;\n   }\n   else if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      int num_twos_o1 = number_twos(o1);\n      int num_twos_o2 = number_twos(o2);\n      if(num_twos_o1 < num_twos_o2) return -1;\n      else if(num_twos_o1 == num_twos_o2) return 0;\n      else return 1;\n   }\n   else if(num_ones_o1 < num_ones_o2) return -1;\n   else return 1;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      int num_zeros_o1 = number_zeros(o1);\n      int num_zeros_o2 = number_zeros(o2);\n      if(num_zeros_o1 < num_zeros_o2) return -1;\n      else if(num_zeros_o1 > num_zeros_o2) return 1;\n      else return 0;\n   }\n   else {\n      if(num_ones_o1 < num_ones_o2) return -1;\n      else return 1;\n   }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        <|mask:0|>\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < consonants.length; k++) {\n                if(consonants[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants >= n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(!consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        boolean consonant = true;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            boolean consonant = true;\n            for(int k = 0; k < vowels.length; k++) {\n                if(vowels[k] == words[i].charAt(j)) {\n                    consonant = false;\n                    break;\n                }\n            }\n            if(consonant) num_consonants++;\n        }\n        if(num_consonants == n) result.add(words[i]);\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    <|mask:0|>\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}\n<|mask:0|>",
      "function range": "23,5-34,5",
      "output": [
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 1; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); ++i) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length() - 2; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 1; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i - 1)) && !vowels.contains(word.charAt(i + 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i, i + 1);\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(!vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            if(vowels.contains(word.charAt(i + 1)) && !vowels.contains(word.charAt(i - 1))) {\n                return word.substring(i, i + 1);\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    <|mask:0|>\n        result.add(arr.get(i));\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "32,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    Collections.reverse(arr);\n    for (int i = 0; i < arr.size() - k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(arr.get(0));\n    for (int i = 1; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for(int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    for(int i = k; i < arr.size(); i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(arr.get(0));\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr.get(i) - arr.get(i - 1) <= k) {\n            result.add(arr.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(arr.get(0));\n    for (int i = 1; i < arr.size(); i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        <|mask:0|>\n            result += lst.get(i);\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "16,5-24,5",
      "output": [
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result ^= lst.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        result += lst.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst.get(i) > lst.get(j)) {\n                int temp = lst.get(i);\n                lst.set(i, lst.get(j));\n                lst.set(j, temp);\n            }\n        }\n    }\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst.get(i) > 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst.get(i) > lst.get(j)) {\n                int temp = lst.get(i);\n                lst.set(i, lst.get(j));\n                lst.set(j, temp);\n            }\n        }\n    }\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst.get(i) > result) {\n            result = lst.get(i);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst.get(i) > lst.get(j)) {\n                int temp = lst.get(i);\n                lst.set(i, lst.get(j));\n                lst.set(j, temp);\n            }\n        }\n    }\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst.get(i) != 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        for(int j = i + 1; j < lst.size(); j++) {\n            if(lst.get(i) > lst.get(j)) {\n                int temp = lst.get(j);\n                lst.set(j, lst.get(i));\n                lst.set(i, temp);\n            }\n        }\n    }\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst.get(i) > 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        <|mask:0|>\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "21,5-29,5",
      "output": [
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr[i];\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        arr.set(i, arr.get(i) + 1);\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    <|mask:0|>\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}\n<|mask:0|>",
      "function range": "24,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n = n / 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n = n / 2;\n        else n = n * 3 + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = n * 3 + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n = n / 2;\n        else n = n * 3 + 1;\n        result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n = n / 2;\n        else n = n * 3 + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n /= 2;\n        else n = n * 3 + 1;\n        result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) n = n / 2;\n        else n = n * 3 + 1;\n        result.add(n);\n    }\n    Collections.sort(result);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n != 1) {\n        if((n % 2) == 0) n = n / 2;\n        else n = 3 * n + 1;\n        if((n % 2) == 1) result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            <|mask:0|>\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}\n<|mask:0|>",
      "function range": "25,5-50,5",
      "output": [
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i] && (day < 1 || day > 31))) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 30)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i] && day < 1) || (month == month_check1[i] && day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n            if((month == month_check1[i]) && (day < 1 || day > 31)) return false;\n        }\n        int[] month_check2 = {4, 6, 9, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n            if(month == month_check2[i] && (day < 1 || day > 30)) return false;\n        }\n        if(month == 2 && (day < 1 || day > 29)) return false;\n    } catch (Exception e) {\n        return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            <|mask:0|>\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}\n<|mask:0|>",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isWhitespace(curr)) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isLetter(curr)) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if((curr == ' ') || (curr == ',')) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isLetterOrDigit(curr)) {\n                break;\n            }\n            count++;\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        String[] result = {txt};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isWhitespace(curr)) {\n                count++;\n            }\n        }\n        String[] result = {txt};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isLetterOrDigit(curr)) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(!Character.isWhitespace(curr)) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if((curr == ' ') || (curr == ',')) {\n                count++;\n            }\n        }\n        String[] result = {Integer.toString(count)};\n        return result;\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        <|mask:0|>\n    }\n    return true;\n}\n<|mask:0|>",
      "function range": "22,5-37,5",
      "output": [
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) > count_num.get(lst[j])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] < lst[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) < count_num.get(lst[j])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) > count_num.get(lst[j])) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) - 1);\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) < count_num.get(lst[j])) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(count_num.get(lst[i]) > 2 && count_num.get(lst[j]) > 2) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n    <|mask:0|>\n    int length = r - l;\n    if(length > 0 && is_prime(length)) return \"YES\";\n    return \"NO\";\n}\n<|mask:0|>",
      "function range": "33,5-39,5",
      "output": [
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    int[] result = new int[interval1.length + interval2.length];\n    System.arraycopy(interval1, 0, result, 0, interval1.length);\n    System.arraycopy(interval2, 0, result, interval1.length, interval2.length);\n    return Arrays.toString(result);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    int[] intersection = new int[interval1.length + interval2.length];\n    System.arraycopy(interval1, 0, intersection, 0, interval1.length);\n    System.arraycopy(interval2, 0, intersection, interval1.length, interval2.length);\n    return Arrays.toString(intersection);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    int[] intersection = new int[interval1.length + interval2.length];\n    System.arraycopy(interval1, 0, intersection, 0, interval1.length);\n    System.arraycopy(interval2, 0, intersection, interval1.length, interval2.length);\n    return intersection;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    int[] result = new int[interval1.length + interval2.length];\n    System.arraycopy(interval1, 0, result, 0, interval1.length);\n    System.arraycopy(interval2, 0, result, interval1.length, interval2.length);\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    Set<Integer> set1 = new HashSet<>();\n    Set<Integer> set2 = new HashSet<>();\n    set1.addAll(Arrays.asList(interval1));\n    set2.addAll(Arrays.asList(interval2));\n    return intersection(set1, set2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    Set<Integer> set1 = new HashSet<>();\n    Set<Integer> set2 = new HashSet<>();\n    for (int i : interval1) {\n        set1.add(i);\n    }\n    for (int i : interval2) {\n        set2.add(i);\n    }\n    return intersection(set1, set2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    Set<Integer> set1 = new HashSet<>();\n    Set<Integer> set2 = new HashSet<>();\n    for(int i : interval1) {\n        set1.add(i);\n    }\n    for(int i : interval2) {\n        set2.add(i);\n    }\n    return intersection(set1, set2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    Set<Integer> set1 = new HashSet<>();\n    Set<Integer> set2 = new HashSet<>();\n    for(int i : interval1) {\n        set1.add(i);\n    }\n    for(int i : interval2) {\n        set2.add(i);\n    }\n    set1.retainAll(set2);\n    return set1.toString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    Set<Integer> set1 = new HashSet<>();\n    Set<Integer> set2 = new HashSet<>();\n    for (int i : interval1) {\n        set1.add(i);\n    }\n    for (int i : interval2) {\n        set2.add(i);\n    }\n    set1.retainAll(set2);\n    return set1.toString();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n    Set<Integer> set1 = new HashSet<>();\n    Set<Integer> set2 = new HashSet<>();\n    set1.addAll(Arrays.asList(interval1));\n    set2.addAll(Arrays.asList(interval2));\n    Set<Integer> intersection = new HashSet<>();\n    intersection.addAll(set1);\n    intersection.removeAll(set2);\n    return intersection.toString();\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        <|mask:0|>\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n<|mask:0|>",
      "function range": "16,5-28,5",
      "output": [
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        prod*=arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] > 0) prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i + 1; j < arr.length; j++) {\n            prod *= arr[j];\n        }\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else if(arr[i] < 0) prod = -prod;\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i + 1; j < arr.length; j++) prod *= arr[j];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i; j < arr.length; j++) {\n            prod *= arr[j];\n        }\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i + 1; j < arr.length; j++) {\n            prod *= arr[j];\n        }\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i; j < arr.length; j++) {\n            prod *= arr[j];\n        }\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i + 1; j < arr.length; j++) {\n            if(arr[j] == 0) prod = 0;\n        }\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        for(int j = i + 1; j < arr.length; j++) {\n            prod *= arr[j];\n        }\n    }\n    int sum = 0;\n    for(int i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return prod * sum;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                <|mask:0|>\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}\n<|mask:0|>",
      "function range": "35,5-54,5",
      "output": [
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val--;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val--;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val += min_path(grid, k - 1);\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val = Math.max(val, min_path(grid, k + 1));\n                grid[i][j] = 1;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val += min_path(grid, k - 1);\n                grid[i][j] = 0;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val--;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val = Math.max(val, min_path(grid, k - 1));\n                grid[i][j] = 1;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val = Math.min(val, min_path(grid, k + 1));\n                grid[i][j] = 1;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val--;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 0;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                grid[i][j] = 0;\n                val = Math.max(val, min_path(grid, k + 1));\n                grid[i][j] = 1;\n            }\n        }\n    }\n    int[] ans = new int[k];\n    for(int i = 0; i < k; i++) {\n        if((i % 2) == 0) ans[i] = 1;\n        else ans[i] = val;\n    }\n    return ans;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    <|mask:0|>\n    }\n    return sequence;\n}\n<|mask:0|>",
      "function range": "23,5-37,5",
      "output": [
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] * i;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] * i;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] * 3;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] + i;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] * i;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] * 2;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n + 1; i++) {\n        sequence[i] = sequence[i - 1] * i;\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i < n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    <|mask:0|>\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}\n<|mask:0|>",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n != 0) {\n        if(n % 10 == 1) {\n            product *= 10;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        int digit = n % 10;\n        product *= digit;\n        if(digit % 2 == 1) {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        product *= 10;\n        n /= 10;\n        odd_count++;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n != 0) {\n        if(n % 10 == 1) {\n            product *= 10;\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 1;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        int digit = n % 10;\n        product *= digit;\n        if(digit % 2 == 1) {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    if(odd_count == 0) return 1;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        int digit = n % 10;\n        product = product * 10 + digit;\n        n /= 10;\n    }\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        int digit = n % 10;\n        product = product * 10 + digit;\n        n /= 10;\n    }\n    if(odd_count == 0) return 0;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        product *= 10;\n        n /= 10;\n        odd_count++;\n    }\n    if(odd_count == 0) return 1;\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n != 0) {\n        if(n % 10 == 0) {\n            product = product * 10;\n            n /= 10;\n        }\n        else {\n            product = product * 10 + n % 10;\n            n /= 10;\n        }\n    }\n    return product;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    while(n > 0) {\n        int digit = n % 10;\n        product *= digit;\n        if(digit % 2 == 1) {\n            odd_count++;\n        }\n        n /= 10;\n    }\n    return odd_count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    <|mask:0|>\n            i++;\n            cnt++;\n        }\n    }\n    return cnt >= 2;\n}\n<|mask:0|>",
      "function range": "21,5-37,5",
      "output": [
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    opening_brackets.removeAll(closing_brackets);\n    return opening_brackets.size() > 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    Collections.sort(opening_brackets);\n    Collections.sort(closing_brackets);\n    return opening_brackets.size() > closing_brackets.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i) > closing_brackets.get(i)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i) < closing_brackets.get(i)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i) < closing_brackets.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    Collections.sort(opening_brackets);\n    Collections.sort(closing_brackets);\n    return opening_brackets.size() == closing_brackets.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    opening_brackets.remove(closing_brackets.get(0));\n    closing_brackets.remove(opening_brackets.get(0));\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                opening_brackets.remove(i);\n                closing_brackets.remove(j);\n            }\n        }\n    }\n    return opening_brackets.size() > 0 || closing_brackets.size() > 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        for(int j = 0; j < closing_brackets.size(); j++) {\n            if(opening_brackets.get(i) == closing_brackets.get(j)) {\n                opening_brackets.remove(i);\n                closing_brackets.remove(j);\n            }\n        }\n    }\n    return opening_brackets.size() == 0 && closing_brackets.size() == 0;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n    <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long sum = 0;\n    for (double d : lst) {\n        sum += d * d;\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double d : lst) {\n        result += d * d;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (int i = 0; i < lst.length; i++) {\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long sum = 0;\n    for (double x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long result = 0;\n    for (double x : lst) {\n        result += x * x;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n    long sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return false;\n      }\n      last = part;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return true;\n      }\n      last = part;\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return false;\n      }\n      last = part;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return false;\n      }\n      last = part;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    boolean result = false;\n    for (String part : parts) {\n      if (part.equals(last)) {\n        result = true;\n      }\n      last = part;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.length() > 0 && Character.isLetter(part.charAt(0))) {\n        last = part;\n      }\n    }\n    return last.length() > 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return false;\n      }\n      last = part;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return true;\n      }\n      last = part;\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return false;\n      }\n      last = part;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for(String part : parts) {\n      if(part.equals(last)) {\n        return false;\n      }\n      last = part;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n    <|mask:0|>\n    }\n    return ind;\n}\n<|mask:0|>",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++) {\n        for(int j=i+1;j<arr.length;j++) {\n            if(arr[i]>arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr.length;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++) {\n        for(int j=i+1;j<arr.length;j++) {\n            if(arr[i]>arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr[0];\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++) {\n        for(int j=i+1;j<arr.length;j++) {\n            if(arr[i]>arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++){\n        for(int j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                return 0;\n            }\n        }\n    }\n    return 1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++){\n        for(int j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                return 1;\n            }\n        }\n    }\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    Arrays.sort(arr);\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] != i) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++){\n        for(int j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                swap(arr,i,j);\n            }\n        }\n    }\n    return arr[0];\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n    for(int i=0;i<arr.length;i++){\n        for(int j=i+1;j<arr.length;j++){\n            if(arr[i]>arr[j]){\n                swap(arr,i,j);\n            }\n        }\n    }\n    return arr.length;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n    <|mask:0|>\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    if(!negative) max_negative = 0;\n    if(!positive) min_positive = 0;\n    int[] result = {max_negative, min_positive};\n    return result;\n}\n<|mask:0|>",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = false;\n    boolean positive = false;\n    int max_negative = Integer.MIN_VALUE;\n    int min_positive = Integer.MAX_VALUE;\n    for(int i : lst) {\n        if(i < 0) {\n            negative = true;\n            max_negative = Math.max(max_negative, i);\n        } else if(i > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, i);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = false;\n    boolean positive = false;\n    int max_negative = Integer.MIN_VALUE;\n    int min_positive = Integer.MAX_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = true;\n            max_negative = Math.max(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = false;\n    boolean positive = false;\n    int max_negative = Integer.MIN_VALUE;\n    int min_positive = Integer.MAX_VALUE;\n    for(int i = 0; i < lst.length; i++) {\n        if(lst[i] < 0) {\n            negative = true;\n            max_negative = Math.max(max_negative, lst[i]);\n        } else if(lst[i] > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, lst[i]);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    boolean negative = false;\n    boolean positive = false;\n    int max_negative = 0;\n    int min_positive = Integer.MAX_VALUE;\n    for(int i : lst) {\n        if(i < 0) {\n            negative = true;\n            max_negative = Math.max(max_negative, i);\n        } else if(i > 0) {\n            positive = true;\n            min_positive = Math.min(min_positive, i);\n        }\n    }\n    int[] result = {max_negative, min_positive};\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    Arrays.sort(lst);\n    int[] result = new int[2];\n    result[0] = lst[0];\n    result[1] = lst[lst.length-1];\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    Arrays.sort(lst);\n    int[] result = new int[2];\n    result[0] = lst[lst.length-1];\n    result[1] = lst[0];\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    Arrays.sort(lst);\n    int[] result = new int[2];\n    result[0] = lst[lst.length - 1];\n    result[1] = lst[0];\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    int[] result = new int[2];\n    Arrays.sort(lst);\n    result[0] = lst[lst.length-1];\n    result[1] = lst[0];\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    Arrays.sort(lst);\n    int[] result = new int[2];\n    result[0] = lst[0];\n    result[1] = lst[lst.length - 1];\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n    int[] result = new int[2];\n    Arrays.sort(lst);\n    result[0] = lst[0];\n    result[1] = lst[lst.length-1];\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    <|mask:0|>\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}\n<|mask:0|>",
      "function range": "17,5-36,5",
      "output": [
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return null;\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else temp_a = Double.parseDouble(a.toString());\n    temp_b = Double.parseDouble(b.toString());\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return null;\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return Double.compare(temp_a, temp_b);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return 0;\n    if(temp_a == temp_b) return 0;\n    if(temp_a > temp_b) return 1;\n    else return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return null;\n    if(temp_a == temp_b) return 0;\n    if(temp_a > temp_b) return 1;\n    else return -1;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return null;\n    if(temp_a == temp_b) return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    else return null;\n    if(temp_a > temp_b) return a;\n    else return b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n      sum += i;\n      if (sum % 2 == 0) {\n        return true;\n      }\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    long sum = 0;\n    for (int i = 1; i <= n; i++) {\n      sum += i;\n      if (sum % 2 == 0) {\n        return true;\n      }\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 1; i < n; i++) {\n      if (n % i == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 1; i < n; i++) {\n      if (n % i == 0) {\n        result = false;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 1; i < n; i++) {\n      if (n % i == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 2; i <= n; i++) {\n      if (n % i == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 2; i <= n; i++) {\n      if (n % i == 0) {\n        result = false;\n        break;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n    boolean result = true;\n    for (int i = 1; i < n; i++) {\n      if (n % i == 0) {\n        result = false;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    <|mask:0|>\n    }\n    return special_fact;\n}\n<|mask:0|>",
      "function range": "18,5-25,5",
      "output": [
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 1; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 1; i < n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(int i = 1; i < n; i++) {\n        fact_i *= i;\n        special_fact += fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for(long i = 2; i <= n; i++) {\n        fact_i *= i;\n        special_fact *= fact_i;\n    }\n    return special_fact;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    \n    return new_text;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    System.out.println(new_text);\n    return new_text;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    <|mask:0|>\n        return \"No\";\n    int digit_cnt = 0;\n    for (char c : file_name.toCharArray()){\n        if ('0' <= c && c <= '9')\n            digit_cnt += 1;\n    }\n    if (digit_cnt > 3)  return \"No\";\n    return \"Yes\";\n}\n<|mask:0|>",
      "function range": "17,5-35,5",
      "output": [
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    \n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        <|mask:0|>\n            result += lst[i] * lst[i] * lst[i];\n        else result += lst[i];\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += (lst[i] * lst[i]);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i]*lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i]; \n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        <|mask:0|>\n            if (word.length() % i == 0) flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}\n<|mask:0|>",
      "function range": "22,5-34,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n        char[] chars = word.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ')\n                flag = 1;\n        }\n        if (flag == 0 || word.length() == 2)\n            result += word + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    <|mask:0|>\n        return true;\n    return false;\n}\n<|mask:0|>",
      "function range": "15,5-26,5",
      "output": [
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    boolean result = numerator == denom;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    return numerator == denom;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    if (numerator == denom) {\n        return true;\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    return numerator == denom;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    boolean result = false;\n    if (denom != 0) {\n        result = numerator / denom == 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    if (numerator == denom) {\n        return true;\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    if (denom == 0) {\n        return false;\n    }\n    if (numerator % denom == 0) {\n        return true;\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    if (denom == 0) {\n        return false;\n    }\n    if (numerator > denom) {\n        return true;\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    if (denom == 0) {\n        return true;\n    }\n    if (numerator == 0) {\n        return false;\n    }\n    if (numerator > denom) {\n        return true;\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator);\n    System.out.println(denom);\n    if (denom == 0) {\n        return false;\n    }\n    if (numerator % denom == 0) {\n        return true;\n    }\n    return false;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            <|mask:0|>\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}\n<|mask:0|>",
      "function range": "17,5-44,5",
      "output": [
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j]) - '0';\n        }\n        digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j]) - '0';\n        }\n        digits.add(neg * digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += (n % 10) * Math.pow(10, j);\n            n /= 10;\n        }\n        digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += (n % 10) * Math.pow(10, j);\n            n /= 10;\n        }\n        digits.add(neg * digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += (Character.digit((n + \"\").toCharArray()[j], 10) * neg);\n        }\n        digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += (n % 10) * Math.pow(10, j);\n            n = n / 10;\n        }\n        digits.add(neg * digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j]) - '0';\n        }\n        if (digits_number.containsKey(digit))\n            digits_number.get(digit).add(nums[i]);\n        else\n            digits_number.put(digit, new ArrayList<Integer>());\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j]) - '0';\n        }\n        digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n            digit += ((n + \"\").toCharArray()[j]) - '0';\n        }\n        digits.add(digit);\n        if (! digits_number.containsKey(digit))\n            digits_number.put(digit, new ArrayList<Integer>());\n        digits_number.get(digit).add(nums[i]);\n    }\n    Collections.sort(digits);\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < digits.size(); i += 1) {\n        result.addAll(digits_number.get(digits.get(i)));\n    }\n    return result.toArray(new Integer[] {});\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            <|mask:0|>\n                count += 1;\n        }\n    }\n    return count;\n}\n<|mask:0|>",
      "function range": "14,5-26,5",
      "output": [
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] digits = number_as_string.toCharArray();\n            for (char digit : digits) {\n                if (odd_digits.contains(digit)) {\n                    count += 1;\n                }\n            }\n        } else {\n            count += 1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] digits = number_as_string.toCharArray();\n            for (char digit : digits) {\n                if (odd_digits.contains(digit)) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] chars = number_as_string.toCharArray();\n            for (char c : chars) {\n                if (odd_digits.contains(c)) {\n                    count += 1;\n                }\n            }\n        } else {\n            count += 1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] chars = number_as_string.toCharArray();\n            for (int i = 0; i < chars.length; i++) {\n                if (odd_digits.contains(chars[i])) {\n                    count += 1;\n                }\n            }\n        } else {\n            count += 1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] chars = number_as_string.toCharArray();\n            for (char c : chars) {\n                if (odd_digits.contains(c - '0')) {\n                    count += 1;\n                }\n            }\n        } else {\n            count += 1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] chars = number_as_string.toCharArray();\n            for (char c : chars) {\n                if (odd_digits.contains(c)) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] chars = number_as_string.toCharArray();\n            for (int i = 0; i < chars.length; i++) {\n                if (odd_digits.contains(chars[i])) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] digits = number_as_string.toCharArray();\n            for (char digit : digits) {\n                if (odd_digits.contains(Integer.valueOf(digit))) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] digits = number_as_string.toCharArray();\n            for (char digit : digits) {\n                if (odd_digits.contains(digit)) {\n                    count += 1;\n                }\n            }\n        } else {\n            count += 1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            char[] digits = number_as_string.toCharArray();\n            for (char digit : digits) {\n                if (odd_digits.contains(Integer.valueOf(digit))) {\n                    count += 1;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    <|mask:0|>\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = 1; j <= n; j += 1)\n            for (int k = 1; k <= n; k += 1)\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = j + 1; k <= n; k += 1)\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = 1; j <= n; j += 1)\n            for (int k = 1; k <= n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = j + 1; k <= n; k += 1) {\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n            }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = i + 1; k <= n; k += 1)\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = j + 1; k <= n; k += 1)\n                if (A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = j + 1; k < n; k += 1)\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        result += A[i - 1];\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        if ((A[i - 1] + A[i] + A[i + 1]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    Arrays.sort(A);\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i + 1; j <= n; j += 1)\n            for (int k = j + 1; k <= n; k += 1)\n                if ((A[i] + A[j] + A[k]) % 3 == 0) result += 1;\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    <|mask:0|>\n    return result;\n}\n<|mask:0|>",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index + planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index + 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        <|mask:0|>\n    );\n    return result;\n}\n<|mask:0|>",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return Integer.valueOf(o1).compareTo(Integer.valueOf(o2));\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return Integer.valueOf(o1) - Integer.valueOf(o2);\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Integer.valueOf(o1).compareTo(Integer.valueOf(o2));\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Integer.valueOf(o1) - Integer.valueOf(o2);\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return Integer.valueOf(o1).compareTo(Integer.valueOf(o2));\n            }\n        });\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return Integer.valueOf(o1).compareTo(Integer.valueOf(o2));\n            }\n        });\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        <|mask:0|>\n}\n<|mask:0|>",
      "function range": "11,5-17,5",
      "output": [
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= y;\n        y ^= x;\n        x ^= y;\n    }\n    return x;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= y;\n        y ^= x;\n        x ^= y;\n        y ^= x;\n    }\n    return x;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= y;\n        y ^= x;\n        x ^= i;\n        y ^= i;\n    }\n    return x;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= x << i;\n        y ^= y << i;\n    }\n    return x | y;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= x << i;\n        y ^= y << i;\n    }\n    return x ^ y;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= x;\n        y ^= y;\n        x ^= y;\n    }\n    return x;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        n /= i;\n    }\n    return x;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= x;\n        y ^= y;\n    }\n    return x ^ y;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= y;\n        y ^= x;\n        x ^= i;\n        y ^= i;\n    }\n    return y;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n        x ^= y;\n        y ^= x;\n        x ^= y;\n        y ^= x;\n    }\n    return y;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                <|mask:0|>\n            }\n        }\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            } else {\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int / 2;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n            if (d_int % 2 == -1 && d_int >= 0) {\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            } else if (d_int % 2 == -1 && d_int >= 0) {\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            } else {\n                result -= d_int;\n            }\n        } else {\n            return -1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            } else if (d_int % 2 == -1 && d_int >= 0) {\n                result -= d_int;\n            } else if (d_int % 2 == -1 && d_int < 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n            if (d_int % 2 == -1 && d_int >= 0) {\n                result -= d_int;\n            }\n            if (d_int % 2 == -1 && d_int < 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        <|mask:0|>\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                result[i] = 1;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = 0;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                result[i] = j;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = -1;\n        } else {\n            result[i] = 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                found = true;\n                result[i] = j;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                result[i] = 1;\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                found = true;\n                break;\n            }\n        }\n        result[i] = found ? 1 : 0;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = -1;\n        } else {\n            result[i] = 0;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean match = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                match = true;\n                break;\n            }\n        }\n        result[i] = match ? 1 : 0;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            result[i] = 1;\n        } else {\n            result[i] = 0;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n        boolean found = false;\n        for (int j = 0; j < guess.length; j += 1) {\n            if (game[i] == guess[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result[i] = -1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            <|mask:0|>\n    }\n    return class_name + \".\" + strong;\n}\n<|mask:0|>",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            CAP++;\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            CAP++;\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            }\n        }\n        if (CAP > SM) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            }\n        }\n        if (CAP > SM) {\n            val = CAP;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            CAP += Character.isUpperCase(c) ? 1 : 0;\n            SM += Character.isLowerCase(c) ? 1 : 0;\n        }\n        if (CAP > SM) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            if (Character.isUpperCase(c)) {\n                CAP++;\n            }\n        }\n        if (CAP > val) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n        }\n        if (CAP > SM) {\n            val = CAP;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n        }\n        if (CAP > SM) {\n            strong = s;\n            val = CAP;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            CAP += Character.isUpperCase(c) ? 1 : 0;\n            SM += Character.isLowerCase(c) ? 1 : 0;\n        }\n        if (CAP > SM) {\n            val = CAP;\n            strong = s;\n        }\n    }\n    return class_name + \".\" + strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            SM++;\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            }\n        }\n        if (CAP > SM) {\n            if (CAP > val) {\n                strong = s;\n                val = CAP;\n            }\n        }\n    }\n    return strong;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    <|mask:0|>\n            if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n        }\n    }\n    return false;\n}\n<|mask:0|>",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    Matcher m = Pattern.compile(a).matcher(b);\n    return m.matches();\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) != pat.charAt(j)) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) != pat.charAt(j)) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] ca = a.toCharArray();\n    char[] cb = b.toCharArray();\n    for (int i = 0; i < l; i++) {\n        if (ca[i] != cb[i]) return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) != pat.charAt(j)) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] ca = a.toCharArray();\n    char[] cb = b.toCharArray();\n    for (int i = 0; i < ca.length; i++) {\n        for (int j = 0; j < cb.length; j++) {\n            if (ca[i] == cb[j]) return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) == pat.charAt(j)) return true;\n        }\n    }\n    return false;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) != pat.charAt(j)) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) != pat.charAt(j)) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    char[] pat = b.toCharArray();\n    for (int i = 0; i < a.length(); i++) {\n        for (int j = 0; j < pat.length; j++) {\n            if (a.charAt(i) != pat.charAt(j)) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    <|mask:0|>\n    }\n    return new int[] {even_count, odd_count};\n}\n<|mask:0|>",
      "function range": "10,5-19,5",
      "output": [
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < num; i++) {\n        if(i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 1; i <= num; i++) {\n        if(i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < num; i++) {\n        if(i%2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 1; i < num; i++) {\n        if(i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 1; i <= num; i++) {\n        if(i%2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 0; i < num; i++) {\n        if(i % 2 == 0) {\n            even_count++;\n        }\n        else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    \n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 1; i <= num; i++) {\n        if(i % 2 == 0) {\n            even_count++;\n        }\n        else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 1; i <= num; i++) {\n        if((i % 2) == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for(int i = 1; i <= num; i++) {\n        if(i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[] {even_count, odd_count};\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        <|mask:0|>\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}\n<|mask:0|>",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[number % 10];\n        number /= 10;\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i];\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[i--];\n        number %= num[i];\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[num[number % 10]];\n        number /= 10;\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[num[i]];\n        number %= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        number %= num[i];\n        result += sym[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[number % 10];\n        number /= num[i];\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[number % 10];\n        number /= 10;\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[number % 10];\n        number /= 10;\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        result += sym[number % 10];\n        number /= 10;\n        i -= 1;\n    }\n    return result.toLowerCase();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && a + c > b && b + c > a) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && b + c > a && c + a > b) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && a + c > b && b + c > a) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && a + c > b && b + c > a) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && b + c > a && c + a > b) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && a + c > b && b + c > a) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && a + c > b && b + c > a) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && b + c > a && c + a > b) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && a + c > b && b + c > a) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n    boolean result = false;\n    if (a + b > c && b + c > a && c + a > b) {\n      result = true;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            <|mask:0|>\n        }\n    );\n    return words_list.get(0);\n}\n<|mask:0|>",
      "function range": "18,5-31,5",
      "output": [
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            \n            return s1.compareTo(s2);\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            s1.retainAll(s2);\n            return s1.size();\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            Collections.sort(s1);\n            Collections.sort(s2);\n            return s1.compareTo(s2);\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            s1.retainAll(s2);\n            return s1.size() > s2.size();\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            \n            return s1.compareTo(s2);\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            if(!s1.equals(s2)) {\n                return s1.compareTo(s2);\n            }\n            return 0;\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            Collections.sort(s1);\n            Collections.sort(s2);\n            return s1.equals(s2) ? 0 : s1.compareTo(s2);\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            s1.retainAll(s2);\n            return s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            if(!s1.equals(s2)) {\n                return s1.compareTo(s2);\n            } else {\n                return 0;\n            }\n        }\n    );\n    return words_list.get(0);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            Collections.sort(s1);\n            Collections.sort(s2);\n            return s1.compareTo(s2);\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n    <|mask:0|>\n}\n<|mask:0|>",
      "function range": "31,5-33,5",
      "output": [
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n      remaining -= need;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n      need -= remaining;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n      need -= remaining;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n      need -= remaining;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n      need -= remaining;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n    int[] result = new int[number];\n    for (int i = 0; i < number; i++) {\n      result[i] = need;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    <|mask:0|>\n    }\n    return Double.parseDouble(engine.eval(expression).toString());\n}\n<|mask:0|>",
      "function range": "30,5-38,5",
      "output": [
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    engine.put(\"operator\", operator);\n    engine.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(operator, operand)\").asString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(operator, operand)\").asString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(\" + Arrays.toString(operator) + \", \" + Arrays.toString(operand) + \")\").toString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(\" + Arrays.toString(operator) + \",\" + Arrays.toString(operand) + \")\").toString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"algebra(\" + Arrays.toString(operator) + \", \" + Arrays.toString(operand) + \")\").toString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(operator, operand)\", bindings).toString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(operator,operand)\").asString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"algebra(\" + Arrays.toString(operator) + \",\" + Arrays.toString(operand) + \")\").toString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"do_algebra(operator, operand)\").toString());\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n    bindings.put(\"operator\", operator);\n    bindings.put(\"operand\", operand);\n    return Double.parseDouble(engine.eval(\"algebra(\" + Arrays.toString(operand) + \")\").toString());\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        <|mask:0|>\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}\n<|mask:0|>",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n        }\n        if (flg == 0) sb.append(c);\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n            default:\n                if (flg == 0) {\n                    sb.append(c);\n                }\n                break;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n        }\n        if (flg <= 0) sb.append(c);\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n            default:\n                if (flg == 0) sb.append(c);\n                break;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n            default:\n                sb.append(c);\n                break;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '+':\n                flg = 1;\n                break;\n            case '-':\n                flg = 2;\n                break;\n            case '*':\n                flg = 3;\n                break;\n            case '/':\n                flg = 4;\n                break;\n            default:\n                sb.append(c);\n                break;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n        }\n        if (flg == 0) sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n            default:\n                if (flg == 0) sb.append(c);\n                break;\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '(':\n                flg++;\n                break;\n            case ')':\n                flg--;\n                break;\n            default:\n                if (flg == 0) {\n                    sb.append(c);\n                }\n                break;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        switch (c) {\n            case '+':\n                flg = 1;\n                break;\n            case '-':\n                flg = 2;\n                break;\n            case '*':\n                flg = 3;\n                break;\n            case '/':\n                flg = 4;\n                break;\n            default:\n                sb.append(c);\n                break;\n        }\n    }\n    if (flg == 0) {\n        sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1) sb.append(s.charAt(i));\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    <|mask:0|>\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}\n<|mask:0|>",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md;\n    md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"md5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte[] digest = md.digest();\n    return DatatypeConverter.printHexBinary(digest).toLowerCase();\n}",
          "correctness": "plausible"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    <|mask:0|>\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = lower; i <= upper; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}\n<|mask:0|>",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i++) {\n        result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 2) {\n        result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        if (i % 2 == 1) result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for (int i = a; i <= b; i += 1) {\n        if (i % 2 == 0) result.add(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    }
  }
}