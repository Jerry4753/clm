{
  "config": "CODEGEN_COMPLETE_CODEFORM_COMMENTFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean has_close_elements(List<Integer> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            int distance = numbers.get(i) - numbers.get(",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean has_close_elements(List<Double> numbers){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = numbers.get(i) - numbers.get(j);\n            if (distance < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean has_close_elements(List<Integer> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n  }\n}\n",
        "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n// buggy line:            double distance = numbers.get(i) - numbers.get(j);\n            double distance = Math.abs(numbers.get(i) - numbers.get(j));\n            if (distance <= threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {",
      "function range": "7,5-27,5",
      "output": [
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')'){\n            current_depth -= 1;\n            if (current_depth == 0){\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n// buggy line:        } else {\n// buggy line:        }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n\n  public",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    result.add(current_string);\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n// buggy line:        } else {\n// buggy line:        }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string = current_string.substring(0, current_string.length() - 1);\n            }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n// buggy line:        } else {\n// buggy line:        }\n        } else if (c == ')') {\n            current_depth -= 1;\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n// buggy line:        } else {\n// buggy line:        }\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    return result;\n  }\n\n  /**"
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;",
      "function range": "4,5-6,5",
      "output": [
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(byte number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(double number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number / 1.0;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number / 1.0;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number / 1.0;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number / 1.0;\n}\n\npublic static double truncate",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(char number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(byte number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(char number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(float number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(byte number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(char number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(float number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number /",
        "public static double truncate_number(double number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(long number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(short number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(byte number) {\n// buggy line:    return number / 1.0;\nreturn number;\n}\n\npublic static double truncate_number(int number) {\n// buggy line:    return number /"
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;",
      "function range": "6,5-15,5",
      "output": [
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance == 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return true;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance == 0;\n  }\n\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance < 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance < 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance < 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance < 0;\n  }\n\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance == 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance < 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance == 0;\n  }\n}\n",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance < 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance < 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance == 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance < 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance == 0;\n  }\n\n  public static boolean below_one(List<Integer> operations) {\n    int balance",
        "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance > 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance > 0;\n  }\n\n  public static boolean above_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n// buggy line:        if (balance < 0){\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return true;\n    }\n    return balance < 0;\n  }\n\n  public static boolean below_zero(List<Integer> operations) {\n    int balance"
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);",
      "function range": "6,5-17,5",
      "output": [
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n  }\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum /= numbers.size();\n    return Math.sqrt(deviation_sum);\n  }\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation_sum;\n  }\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation_sum;\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum = Math.sqrt(deviation_sum / numbers.size());\n    return mean - deviation_sum;\n  }\n}\n",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation_sum;\n}\n\npublic static double variance(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double variance = 0.;\n    for (Double number : numbers){\n        variance += (number - mean",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation_sum;\n}\n\npublic static double variance(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        dev",
        "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy line:        deviation_sum += (number - mean) * (number - mean);\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    deviation_sum = Math.sqrt(deviation_sum / numbers.size());\n    return mean + deviation_sum;\n  }\n\n  public static double std_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n// buggy"
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {",
      "function range": "7,5-19,5",
      "output": [
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size(); i += 1) {\n        result.add(numbers.get(i",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    if (numbers.size",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n        for (int i = 0",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n\n// buggy line:    for",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n      for (int i = 0",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    result.add(numbers",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    if (numbers.get",
        "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n// buggy line:    for (int i = 0; i < numbers.size(); i += 1) {\n    for (int i = 0; i < numbers.size(); i += 1) {\n        for (int j = 0; j < numbers"
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }",
      "function range": "7,5-24,5",
      "output": [
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(new Integer(max_depth));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n  public static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group :",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n  public static List<String> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<String> result = new ArrayList<String>();\n    for (String paren",
        "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n// buggy line:            }\n            }\n        result.add(max_depth);\n    }\n    return result;\n  }\n\n  public static List<Integer> parse_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group :"
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);",
      "function range": "7,5-13,5",
      "output": [
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int limit) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring, limit)){\n            result.add(string);\n        }\n    ",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring, start, end)){\n            result.add(string);",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)) {\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring, start, end)) {\n            result.add(string);",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n      if (string.contains(substring, start, end)){\n        result.add(string);",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int limit) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int startIndex) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring, startIndex)){\n            result.add(string);\n        }",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.substring(start, end).contains(substring)){\n            result.add",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n  \n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.contains(substring, start, end)){\n            result.add(",
        "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.startsWith(substring)){\n            result.add(string);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_substring(List<String> strings, String substring, int start, int end) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        result.add(string);\n        if (string.startsWith(substring, start, end)){\n            result.add("
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];",
      "function range": "6,5-13,5",
      "output": [
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] += numbers.get(i);\n// result[1] += numbers.get(i);\n// }\n// return result;\n// }\n// }\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n// }\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n//\n// public static Integer[] product(List<Integer> numbers) {\n// Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] += numbers.get(i);\n// result[1] += numbers.get(i);\n// }\n// return result;\n// }\n}\n",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n//\n// public static Integer[] product(List<Integer> numbers) {\n// Integer[] result = new Integer[2];\n// for (int i = 0; i < numbers.size(); i++)",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n//\n// public static List<Integer> product(List<Integer> numbers) {\n// List<Integer> result = new ArrayList<Integer>();\n// for (int i = 0; i <",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n//\n// public static List<Integer> product(List<Integer> numbers) {\n// List<Integer> result = new ArrayList<>();\n// for (int i = 0; i < numbers",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] = result[0] + numbers.get(i);\n// result[1] = result[1] + numbers.get(i);\n// }\n// return result;\n// }\n//\n// public static List<Integer> sum_product(List<Integer> numbers) {\n// List<Integer> result = new ArrayList<Integer>();\n// for (int i = 0;",
        "public static Integer[] sum_product(List<Integer> numbers) {\n// buggy line:    Integer[] result = new Integer[2];\n// result[0] = 0;\n// result[1] = 0;\n// for (int i = 0; i < numbers.size(); i++) {\n// result[0] += numbers.get(i);\n// result[1] += numbers.get(i);\n// }\n// return result;\n// }\n//\n// public static void main(String[] args) {\n// List<Integer> numbers = new ArrayList<Integer>();\n// numbers.add(1);\n// numbers.add(2);\n// numbers.add(3);\n//"
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);",
      "function range": "7,5-16,5",
      "output": [
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        running_max = Math.max(running_max, n);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(running_min, n);\n        running_min = Math.min(running_min, n);\n        result.add",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (n > running_max) {\n            running_max = n;\n        }\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(running_min, n);\n        if (n < running_min) {\n            running_",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (n > running_max) {\n            running_max = n;\n        }\n    }\n    result.add(running_max);\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(running_min, n);\n        if (n < running_min) {\n            ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (n > running_max) {\n            running_max = n;\n        }\n        result.add(running_max);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(running_min, n);\n        if (n < running_min) {\n            ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        running_max = Math.max(running_max, n);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.min(running_max, n);\n        running_max = Math.min(running_max, n);\n        result.add",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (running_max == null){\n            running_max = n;\n        } else {\n            result.add(running_max);\n            running_max = n;\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(running_min, n);\n",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (n > running_max) {\n            running_max = n;\n        }\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      if (n < running_min) {\n        running_min = n;\n      }\n      result.add(n);\n    }\n    ",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        running_max = Math.max(running_max, n);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n      running_min = Math.min(running_min, n);\n      result.add(n);\n    }\n    return result;\n  }\n\n  public static List<",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        running_max = Math.max(running_max, n);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n        running_min = Math.min(running_min, n);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<",
        "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n// buggy line:        running_max = Math.max(running_max, n);\n        if (n > running_max) {\n            running_max = n;\n        }\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> rolling_min(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_min = null;\n    for (Integer n : numbers){\n// buggy line:        running_min = Math.min(running_min, n);\n        if (n < running_min) {\n          running_"
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);",
      "function range": "12,5-24,5",
      "output": [
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix).equals(str.substring",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return false;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix).equals(str.substring",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix).equals(str);\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return false;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix).equals(str);\n}",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.charAt(beginning_of_suffix) == str.charAt(str",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix) == str;\n}\n\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return false;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix) == str;\n}\n\n",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix) == str.substring(0",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.charAt(beginning_of_suffix) == str.charAt(begin",
        "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n// buggy line:    result += str.substring(0, beginning_of_suffix);\n    result += str.substring(beginning_of_suffix);\n    return result;\n}\n\npublic static boolean is_palindrome(String str){\n    if (str.length() == 0)\n        return true;\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    return str.substring(beginning_of_suffix) == str.substring(begin"
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }",
      "function range": "4,5-12,5",
      "output": [
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }\n        else{\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        result += a",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }\n        result += a.charAt(i);\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    }\n        else {\n            result += a.charAt(i);\n        }\n    }\n    return result;\n}\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        if (a",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n            result += a",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"1\";\n        }\n",
        "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n// buggy line:    } else if (a.charAt(i) == b.charAt(i)){\n        result += a.charAt(i);\n// buggy line:    } else if (a.charAt(i) == b."
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();",
      "function range": "6,5-19,5",
      "output": [
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.size() > maxlen? strings.get(maxlen) : \"\";\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.size() > maxlen? strings.subList(0, maxlen) : strings;\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.size() > maxlen? strings.get(maxlen) : \"\";\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.size() > maxlen? strings.subList(0, maxlen) : strings;\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.size() > maxlen? strings.subList(0, maxlen).toString() : \"\";\n  }\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.size() > maxlen? strings.subList(0, maxlen) : strings;\n  }\n\n}\n",
        "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n// buggy line:        if (strings.size() > string.length()){\n// buggy line:            maxlen = strings.size();\n// buggy line:        }\n        int len = string.length();\n        if (len > maxlen){\n            maxlen = len;\n        }\n    }\n    return strings.size() > maxlen? strings.subList(0, maxlen) : strings;\n}\n"
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;",
      "function range": "4,5-10,5",
      "output": [
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        a = a / b;\n        b = b % a;\n    }\n    return a;\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n        c = c / b;\n    }\n    return a",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return 0;\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n        b = b / c;\n    }\n    return a",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n        c = c % b;\n    }\n    return a",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) return a;\n        a = a / b;\n    }\n    return a;\n}\n",
        "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n    }\n    return a;\n}\n\npublic static int greatest_common_divisor(int a, int b, int c){\n    while (c > 0) {\n// buggy line:        a = b;\n// buggy line:        b = a % b;\n        if (b == 0) {\n            return a;\n        }\n        a = a / b;\n        c = c / b;\n    }\n    return a"
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));",
      "function range": "7,5-15,5",
      "output": [
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  ",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i, i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n      result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  ",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n  \n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + string.length()));\n        result.add(string.substring(i, i + string.length()));\n    }\n    return result",
        "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n  public static List<String> all_suffixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n// buggy line:        result.add(string.substring(i + 1));\n        result.add(string.substring(i, i + 1));\n    }\n    return result;\n  }\n  "
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;",
      "function range": "4,5-10,5",
      "output": [
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n  }\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n    System.out.println(string_sequence(8));\n    System.out.println(string_sequence(9));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n    System.out.println(string_sequence(8));\n    System.out.println(string_sequence(9));\n    System.out.println(string_sequence(10));\n    System.out.println(string_sequence(11));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(10));\n    System.out.println(string_sequence(20));\n    System.out.println(string_sequence(30));\n    System.out.println(string_sequence(40));\n    System.out.println(string_sequence(50));\n    System.out.println(string_sequence(60));\n    System.out.println(string_sequence(70));\n    System.out.println(string_sequence",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result.substring(0, result.length() - 1);\n}\n",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(7));\n//    System.out.println(string_",
        "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n// buggy line:    return result;\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(string_sequence(1));\n    System.out.println(string_sequence(2));\n    System.out.println(string_sequence(3));\n    System.out.println(string_sequence(4));\n    System.out.println(string_sequence(5));\n    System.out.println(string_sequence(6));\n    System.out.println(string_sequence(8));\n    System.out.println(string_sequence"
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);",
      "function range": "6,5-14,5",
      "output": [
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(c);\n    }\n    return distinct.size();\n  }\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n}\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n      if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n      if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n        distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_distinct_chars(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n      if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n          distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_distinct_chars(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n      if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.",
        "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n// buggy line:            distinct.add(c);\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n\n  public static int count_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n      if (! distinct.contains(Character.toLowerCase(c)))\n        distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n  }\n}\n"
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){",
      "function range": "8,5-20,5",
      "output": [
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (!note_map.containsKey(note)) {\n        result.add(0);\n      } else {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (!note_map.containsKey(note)) {\n        result.add(0);\n      } else {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      } else {\n        result.add(Integer.parseInt(note));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n      else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n        note_map.remove(note);\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (String note : music_string.split(\" \")){\n    for (String note : music_string.split(\" \")) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      } else {\n        result.add(Integer.parseInt(note));\n      }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {",
      "function range": "4,5-12,5",
      "output": [
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n      if (string.charAt(i) == substring.charAt(i)) {\n        times++;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times++;\n      }\n    }\n    return times;\n  }\n}\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n      if (string.charAt(i) ==",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n\n// buggy line:    for",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n      if (string.substring(i, i",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    int i = 0;\n",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    times = 0;\n    ",
        "public static int how_many_times(String string, String substring) {\n    int times = 0;\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n// buggy line:    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n    for (int i = 0; i < string.length() - substring.length(); i += 1) {\n      if (string.charAt(i + subst"
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);",
      "function range": "6,5-27,5",
      "output": [
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return -1;\n        }\n        if (i2 == null) {\n          return 1;\n        }\n        return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return -1;\n        }\n        if (i2 == null) {\n          return 1;\n        }",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return -1;\n        } else if (i2 == null) {\n          return 1;\n        } else {\n          return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return -1;\n        } else if (i2 == null) {\n          return 1;\n        } else {",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        }\n        if (i1 == null) {\n          return 1;\n        }\n        if (i2 == null) {\n          return -1;\n        }\n        return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return -1;\n        } else if (i2 == null) {\n          return 1;\n        }\n        ",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return 1;\n        } else if (i2 == null) {\n          return -1;\n        } else {",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) {\n          return 0;\n        } else if (i1 == null) {\n          return 1;\n        } else if (i2 == null) {\n          return -1;\n        } else {\n          return i",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null) {\n          i1 = 0;\n        }\n        if (i2 == null) {\n          i2 = 0;\n        }\n        return i1.compareTo(i2);\n      }\n    });\n    return number_",
        "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n// buggy line:    Collections.sort(number_array);\n    Collections.sort(number_array, new Comparator<String>() {\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        if (i1 == null && i2 == null) return 0;\n        if (i1 == null) return -1;\n        if (i2 == null) return 1;\n        return i1.compareTo(i2);\n      }\n    });\n    String"
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){",
      "function range": "4,5-24,5",
      "output": [
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0;",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        result[0] = numbers[i];\n        ",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = 0; j < numbers.",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n      result[0] = numbers[i];\n      ",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n\n// buggy line:        for (int j = 0",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:\n// buggy line:        for (",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        for (int j = 0; j < 2;",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        if (numbers[i] == numbers[j",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n        if (numbers[i] < 0) {",
        "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n// buggy line:        for (int j = 0; j < numbers.length; j += 1){\n      if (numbers[i] < 0) {"
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {",
      "function range": "4,5-22,5",
      "output": [
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n        else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:            min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n        else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n}\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n        else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        } else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n        else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        } else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n    }\n    return new double[]{min, max};\n  }\n}\n",
        "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n// buggy line:        else if (numbers[i] < min) {\n// buggy line:        min = numbers[i];\n        else if (numbers[i] < min) {\n            min = numbers[i];\n        }\n// buggy line:        else if (numbers[i] > max) {\n// buggy line:        max = numbers[i];\n        }\n    }\n    return new double[]{min, max};\n}\n"
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        if (value instanceof Integer) {\n            result.add((Integer) value);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        if (value instanceof String) {\n            result.add((String) value);\n        }\n    }\n    return result;\n  }\n\n  public",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        if (value instanceof Integer) {\n            result.add((Integer) value);\n        }\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new ArrayList<Long>();\n    for (Object value : values){\n// buggy line:        result.add((Long) value);\n        if (value instanceof Long) {\n            result.add((Long) value);\n        }\n    }\n    return result;\n  }\n\n  ",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        result.add((Integer) value);\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        result.add((String) value);\n    }\n    return result;\n  }\n\n  public static List<Boolean> filter_booleans(List<Object> values) {\n    List<Boolean>",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        if (value instanceof Integer){\n            result.add((Integer) value);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        if (value instanceof String){\n            result.add((String) value);\n        }\n    }\n    return result;\n  }\n\n  public static List",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        result.add((Integer) value);\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        result.add((String) value);\n    }\n    return result;\n  }\n\n  public static List<Long> filter_longs(List<Object> values) {\n    List<Long> result = new",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        result.add((Integer) value);\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        result.add((String) value);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        result.add((Integer) value);\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        result.add((String) value);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        result.add((Integer) value);\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        result.add((String) value);\n    }\n    return result;\n  }\n\n  public static List<Double> filter_doubles(List<Object> values) {\n    List<Double> result =",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        if (value instanceof Integer) {\n            result.add((Integer) value);\n        }\n    }\n    return result;\n  }\n\n  public static List<String> filter_strings(List<Object> values) {\n    List<String> result = new ArrayList<String>();\n    for (Object value : values){\n// buggy line:        result.add((String) value);\n        if (value instanceof String) {\n            result.add((String) value);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n// buggy line:        result.add((Integer) value);\n        result.add((Integer) value);\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){\n// buggy line:    return string.length() - 1;",
      "function range": "4,5-6,5",
      "output": [
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n//",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\nreturn string1.compareTo(string2);\n}\npublic static int strcmp(String string1, String string2){\n// buggy line:    return string1.compareTo(string2);\nreturn string1",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length() - 1;\n    }\n\n    public static int strncmp(String string1, String string2, int n) {\n        for (int i = 0; i < n; i++) {\n            if (string1.charAt(i)!= string2.charAt(i)) {\n                return string1.charAt(i) - string2.charAt(i);\n            }\n        }\n        return string1.charAt(n) - string2.charAt(n);\n    }\n\n    public static int strnc",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length() - 1;\n    }\n\n    public static int strncmp(String string1, String string2, int n) {\n        for (int i = 0; i < n; i++) {\n            if (string1.charAt(i)!= string2.charAt(i)) {\n                return string1.charAt(i) - string2.charAt(i);\n            }\n        }\n        return string1.length() - string2.length();\n    }\n\n    public static int strncmp(String string1,",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length() - 1;\n    }\n\n    public static int strncmp(String string1, String string2, int n) {\n        for (int i = 0; i < n; i++) {\n            if (string1.charAt(i)!= string2.charAt(i)) {\n                return string1.charAt(i) - string2.charAt(i);\n            }\n        }\n        return string1.charAt(n) - string2.charAt(n);\n    }\n}\n",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\n}\n",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length() - 1;\n    }\n\n    public static int strncmp(String string1, String string2, int n) {\n        for (int i = 0; i < n; i++) {\n            if (string1.charAt(i)!= string2.charAt(i)) {\n                return string1.charAt(i) - string2.charAt(i);\n            }\n        }\n        return string1.length() - string2.length();\n    }\n}\n",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length() - 1;\n    }\n\n    public static int strncmp(String string1, String string2, int n) {\n        for (int i = 0; i < n; i++) {\n            if (string1.charAt(i)!= string2.charAt(i)) {\n                return string1.charAt(i) - string2.charAt(i);\n            }\n        }\n        return string1.charAt(n) - string2.charAt(n);\n    }\n\n}\n",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strlen(String string){\n// buggy line:    return string.length() - 1;\nreturn string.length() - 1;\n}\npublic static int strncmp(String string1,",
        "public static int strlen(String string){\n// buggy line:    return string.length() - 1;\n        return string.length() - 1;\n    }\n\n    public static int strncmp(String string1, String string2, int n) {\n        for (int i = 0; i < n; i++) {\n            if (string1.charAt(i)!= string2.charAt(i)) {\n                return string1.charAt(i) - string2.charAt(i);\n            }\n        }\n        return string1.charAt(n) - string2.charAt(n);\n    }\n\n    public static void main("
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){",
      "function range": "4,5-10,5",
      "output": [
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n//",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n//",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0;",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n// buggy line:    for (int i = n; i >= 0; i += 1){\n",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n// buggy line:    for (int i = 0; i < n; i += 1){\n",
        "public static int largest_divisor(int n) {\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -= 1){\n// buggy line:    for (int i = n; i >= 0; i -="
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;",
      "function range": "7,5-21,5",
      "output": [
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n    }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n}",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n\n  public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n\n  public static",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n  public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n  public static",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n\n  public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n  public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n}\n",
        "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n\n  public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 1;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n// buggy line:    return result;\n    return result;\n  }\n\n  public static"
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);",
      "function range": "8,5-22,5",
      "output": [
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        result.add(n);\n        count.put(n, count.get(n) + 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)) {\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)){\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)){\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1){\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)) {\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n        if (count.get(n) > 1) {\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)){\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        result.add(entry.getKey());\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)){\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() > 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)) {\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) > 1) {\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)){\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n        if (entry.getValue() == 1){\n            result.add(entry.getKey());\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n// buggy line:        count.put(n, count.get(n) + 1);\n        if (!count.containsKey(n)){\n            count.put(n, 1);\n        } else {\n            count.put(n, count.get(n) + 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) == count.get(n)){\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);",
      "function range": "4,5-17,5",
      "output": [
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return new String(char_list);\n  }\n}",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n  }\n}\n",
        "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n// buggy line:            char_list[i] = Character.toLowerCase(c);\n// buggy line:        }\n// buggy line:        else {\n// buggy line:            char_list[i] = Character.toUpperCase(c);\n// buggy line:        }\n            char_list[i] = Character.toLowerCase(c);\n            char_list[i] = Character.toUpperCase(c);\n        }\n    }\n    return String.copyValueOf(char_list);\n  }\n}\n"
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;",
      "function range": "4,5-9,5",
      "output": [
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n// if (result == null) {\n// result = strings[i];\n// } else {\n// result += strings[i];\n// }\n// }\n// return result;\n// }\n// }\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n// if (result == null) {\n// result = strings[i];\n// } else {\n// result = result + strings[i];\n// }\n// }\n// return result;\n// }\n// }\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result = result + strings[i];\n//     }\n// }\n// return result;\n// }\n// }\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n// result += strings[i];\n// }\n// return result;\n// }\n// }\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result = result + strings[i];\n//     }\n// }\n// return result;\n// }\n//\n// public static String concatenate(String[] strings, String separator) {\n// String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result = result + strings[i];\n//     }\n// }\n// return result;\n// }\n//\n// public static String concatenate(List<String> strings) {\n// for (int i = 0; i < strings.size(); i++) {\n//     if (result == null) {\n//         result = strings.get(i);\n//",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result += strings[i];\n//     }\n// }\n// return result;\n// }\n// }\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result += strings[i];\n//     }\n// }\n// return result;\n// }\n//\n// public static String concatenate(String[] strings, String separator) {\n// String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result = result + strings[i];\n//     }\n// }\n// return result;\n// }\n}\n",
        "public static String concatenate(String[] strings) {\n// buggy line:    String result = null;\n// for (int i = 0; i < strings.length; i++) {\n//     if (result == null) {\n//         result = strings[i];\n//     } else {\n//         result = result + strings[i];\n//     }\n// }\n// return result;\n// }\n//\n// public static String concatenate(List<String> strings) {\n// String result = null;\n// for (int i = 0; i < strings.size(); i++) {\n//     if (result == null) {\n//         result = strings"
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){",
      "function range": "7,5-16,5",
      "output": [
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix)){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix, 1)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix, 1)){\n      if (string.endsWith(suffix, 1)){\n        result.add(string);",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix, 1)){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix, 1)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.endsWith(suffix)){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix, 1)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix, 1)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n// buggy line:        if (string.startsWith(prefix, 1)){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n  public static List<String> filter_by_suffix(List<String> strings, String suffix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.endsWith(suffix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);",
      "function range": "7,5-14,5",
      "output": [
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(-number);\n        if (number < 0) {\n            result.add(-number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(-number);\n      if (number < 0) {\n        result.add(-number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(-number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number < 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(-number);\n        if (number < 0) {\n            result.add(-number);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n      if (number < 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(number);\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> get_negative(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n// buggy line:        result.add(-number);\n        if (number < 0) {\n            result.add(-number);\n        }\n    }\n    return result;\n  }\n\n}\n"
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){",
      "function range": "4,5-12,5",
      "output": [
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n % (k + 5) == 0)\n// buggy line:    if (n % (k + 6) == 0)\n// buggy line:    ",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n    for (int k = 0; k < n; k += 1){\n        if (n % k == 0)\n            return false;\n    }\n    return true;",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n % (k + 5) == 0)\n// buggy line:    if (n % (k + 6) == 0)\n    if (n %",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n %",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n % (k + 5) == 0)\n// buggy line:    if (n % (k + 6) == 0)\n    if (n ==",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n % (k + 5) == 0)\n// buggy line:    if (n % (k + 6) == 0)\n    for (int k",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n % (k + 5) == 0)\n// buggy line:    if (n % (k + 6) == 0)\n    if (n <",
        "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n// buggy line:    for (int k = 0; k < n; k += 1){\n// buggy line:    if (n % k == 0)\n// buggy line:    if (n % (k + 1) == 0)\n// buggy line:    if (n % (k + 2) == 0)\n// buggy line:    if (n % (k + 3) == 0)\n// buggy line:    if (n % (k + 4) == 0)\n// buggy line:    if (n % (k + 5) == 0)\n// buggy line:    if (n % (k + 6) == 0)\n    if (n <="
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {",
      "function range": "14,5-32,5",
      "output": [
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, begin) * poly(xs, center) < 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, center) * poly(xs, center) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, center) * poly(xs, center) < 0) {\n            begin = center;\n            end = center;\n        }\n        else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n            end = center;\n        }\n        else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, center) * poly(xs, center) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    ",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    ",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, center) * poly(xs, center) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = 1.;\n    double end = -1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    ",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, begin) * poly(xs, end) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = 1.;\n    double end = -1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    ",
        "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n// buggy line:        if (poly(xs, begin) * poly(xs, end) < 0) {\n        if (poly(xs, center) * poly(xs, center) < 0) {\n            begin = center;\n            end = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\npublic static double find_one(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) < 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    "
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));",
      "function range": "8,5-25,5",
      "output": [
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i =",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 4){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i =",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i =",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i =",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(l.get(i));\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 1){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i =",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n  }\n\n  public static List<Integer> sort_fourth(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> fourths = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 1){\n        fourths.add(l.get(i));\n    }\n    Collections.sort(fourths);\n    for (int i =",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n            result.add(thirds.get(i + 1));\n            result.add(thirds.get(i + 2));\n        } else if (i % 3 == 1){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n            result.add(thirds.get(i + 1));\n            result.add(thirds.get(i + 2));\n        } else if (i % 3 == 2){\n// buggy line:            result.",
        "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        } else if (i % 3 == 1){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        } else if (i % 3 == 2){\n// buggy line:            result.add(thirds.get(i));\n            result.add(thirds.get(i));\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);",
      "function range": "8,5-17,5",
      "output": [
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)) {\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)) result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)){\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if(!result.contains(n)){\n            result.add(n);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)) {\n            result.add(n);\n        }\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n))\n            result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)) {\n            result.add(n);\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(2);\n    l.add(3);\n    l.add(4);\n    l.add(5);\n    l.add(6);\n    l.add(7);\n    l.add(8);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)){\n            result.add(n);\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> l = new ArrayList<Integer>();\n    l.add(1);\n    l.add(2);\n    l.add(3);\n    l.add(4);\n    l.add(5);\n    l.add(6);\n    l.add(7);\n    l.add(8);\n    l",
        "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n// buggy line:        result.add(n);\n        if (!result.contains(n)) {\n            result.add(n);\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    List<Integer> list = new ArrayList<Integer>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.add(4);\n    list.add(5);\n    list.add(6);\n    list.add(7);\n    list.add(8);\n    list"
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;",
      "function range": "6,5-14,5",
      "output": [
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) > m) {\n//                m = l.get(i);\n//            }\n//        }\n//        return m;\n//    }\n//\n//    public static int min_element(List<Integer> l) {\n//        int m = Integer.MAX_VALUE;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) < m) {",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//            for (int i = 0; i < l.size(); i++) {\n//                if (l.get(i) > m) {\n//                    m = l.get(i);\n//                }\n//            }\n//            return m;\n//        }\n//\n//        public static int min_element(List<Integer> l) {\n//            int m = Integer.MAX_VALUE;\n//            for (int i = 0; i < l.size(); i++) {\n//                if (l.get(i) < m) {",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//    for (int i = 0; i < l.size(); i++) {\n//      if (l.get(i) > m) {\n//        m = l.get(i);\n//      }\n//    }\n//    return m;\n//  }\n//\n//  public static int min_element(List<Integer> l) {\n//    int m = Integer.MAX_VALUE;\n//    for (int i = 0; i < l.size(); i++) {\n//      if (l.get(i) < m) {",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) > m) {\n//                m = l.get(i);\n//            }\n//        }\n//        return m;\n//    }\n//\n//    public static int min_element(List<Integer> l) {\n//        int m = 0;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) < m) {\n//                m",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//            for (int i = 0; i < l.size(); i++) {\n//                if (l.get(i) > m) {\n//                    m = l.get(i);\n//                }\n//            }\n//            return m;\n//        }\n//\n//        public static int min_element(List<Integer> l) {\n//            int m = 0;\n//            for (int i = 0; i < l.size(); i++) {\n//                if (l.get(i) < m) {\n//                    m",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) > m) {\n//                m = l.get(i);\n//            }\n//        }\n//        return m;\n//    }\n//\n//    public static int min_element(List<Integer> l) {\n//        int m = l.get(0);\n//        for (int i = 1; i < l.size(); i++) {\n//            if (l.get(i) < m) {",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//    for (int i = 0; i < l.size(); i++) {\n//      if (l.get(i) > m) {\n//        m = l.get(i);\n//      }\n//    }\n//    return m;\n//  }\n//\n//  public static int min_element(List<Integer> l) {\n//    int m = l.get(0);\n//    for (int i = 1; i < l.size(); i++) {\n//      if (l.get(i) < m) {",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//            for (int i = 0; i < l.size(); i++) {\n//                if (l.get(i) > m) {\n//                    m = l.get(i);\n//                }\n//            }\n//            return m;\n//        }\n//\n//        public static int min_element(List<Integer> l) {\n//            int m = l.get(0);\n//            for (int i = 1; i < l.size(); i++) {\n//                if (l.get(i) < m) {",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) > m) {\n//                m = l.get(i);\n//            }\n//        }\n//        return m;\n//    }\n//\n//    public static int min_element(List<Integer> l) {\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) < m) {\n//                m = l.get(i);\n",
        "public static int max_element(List<Integer> l) {\n// buggy line:    int m = 0;\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) > m) {\n//                m = l.get(i);\n//            }\n//        }\n//        return m;\n//    }\n//\n//    public static int min_element(List<Integer> l) {\n//        for (int i = 0; i < l.size(); i++) {\n//            if (l.get(i) < min_element(l)) {\n//                min_element(l"
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\")",
      "function range": "4,5-16,5",
      "output": [
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"6\") result += 6;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"5\") result += 5;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"4\") result += 4;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"3\") result += 3;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"8\") result += 8;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"9\") result += 9;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"10\") result += 10;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"11\") result += 11;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"5\") result += 5;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"4\") result += 4;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"3\") result += 3;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"2\") result += 2;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"8\") result += 8;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"9\") result += 9;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"0\") result += 0;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"1\") result += 1;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"8\") result += 8;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"9\") result += 9;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"1\") result += 1;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"2\") result += 2;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"8\") result += 8;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"9\") result += 9;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"0\") result += 10;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"1\") result += 11;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"8\") result += 8;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"9\") result += 9;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"10\") result += 10;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"11\") result += 11;\n// buggy line:            }\n",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"5\") result += 5;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"3\") result += 3;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"2\") result += 2;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"1\") result += 1;\n// buggy line:                if (",
        "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n// buggy line:            for (int j = 0; j < i + \"\".length(); j += 1){\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"7\") result += 7;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"8\") result += 8;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"9\") result += 9;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"10\") result += 10;\n// buggy line:                if (i + \"\".substring(j, j + 1) == \"11\") result += 11;\n        } else {\n            if"
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];",
      "function range": "6,5-22,5",
      "output": [
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i += 2) {\n      result[i] = l[i];\n      result[i + 1] = l[i + 1];\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] odds = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i += 2) {\n      result[i] = l[i];\n      result[i + 1] = l[i + 1];\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i += 2) {\n      result[i] = l[i];\n      result[i + 1] = l[i + 1];\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] odds = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i +=",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] odds = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] odds = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++)",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i += 2) {\n      result[i] = l[i];\n      result[i + 1] = l[i + 1];\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i += 2) {\n      result[i] = l[i];\n      result[i + 1] = l[i",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] odds = new int[1 + (int) (l.length / 2.)];\n",
        "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] evens = new int[1 + (int) (l.length / 2.)];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = -l[i];\n      }\n    }\n    return result;\n  }\n\n  public static int[] sort_odd(int[] l) {\n    int[] result = new int[l.length];\n// buggy line:    int[] odds = new int[1 + (int) (l.length / 2.)"
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){",
      "function range": "8,13-26,13",
      "output": [
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0;",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    for (int i = 0; i < s.",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    groups.add(s.substring(i,",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n\n// buggy line:    for (int i = 0",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    groups.add(s.substring(0,",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    groups.add(encode(s.substring",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    for (int i = 0; i < s.length(); i += 3){\n      groups.add(s.substring(i, i + 3));",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    ArrayList<String> groups = new ArrayList<",
        "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n// buggy line:    for (int i = 0; i < s.length(); i += 3){\n    groups.add(encode_cyclic(s"
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1)))",
      "function range": "16,5-29,5",
      "output": [
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1));\n        fib.add(fib.get(len - 2));\n        fib.add(fib.get(len - 3));\n        fib.add(fib.get(len - 4));\n        fib.add(fib.get(len - 5));\n        fib.add(fib.get(len - 6",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1));\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        fib.add(fib.get(len - 1) + fib.get(len - 3));\n        fib.add(fib.get(len - 1) + fib.get(len - 4));\n        fib.add(fib.get(len - 1) + fib.get",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        } else {\n            fib.add(fib.get(len - 1));\n        }\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n        fib.add(fib.get(len - 2) + fib.get(len - 3));\n        fib.add(fib.get(len - 3) + fib.get(len - 4));\n        fib.add(fib.get(len - 4) + fib.get",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1));\n        fib.add(fib.get(len - 1));\n        fib.add(fib.get(len - 1));\n        fib.add(fib.get(len - 1));\n        fib.add(fib.get(len - 1));\n        fib.add(fib.get(len - 1",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        } else {\n            fib.remove(len - 1);\n        }\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1) + fib.get(len - 2));\n    }\n}\n}\n",
        "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n// buggy line:        fib.add(fib.get(len - 1) + fib.get(len));\n// buggy line:        if (is_prime(fib.get(len - 1))) {\n        if (is_prime(fib.get(len - 1))) {\n            return fib.get(len - 1);\n        }\n        fib.add(fib.get(len - 1) + fib.get(len));\n    }\n}\n}\n"
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {",
      "function range": "21,5-31,5",
      "output": [
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int o = n; o < numbers.length; o += 1) {\n// buggy line:            for (int p = o; p < numbers.length; p += 1) {\n// buggy line:            for (",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n      if (numbers[i]!= 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n      if (numbers[i] == 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n      if (numbers[i] == 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int o = n; o < numbers.length; o += 1) {\n// buggy line:            for (int p = o; p < numbers.length; p += 1) {\n      if (numbers[i",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int o = n; o < numbers.length; o += 1) {\n// buggy line:            for (int p = o; p < numbers.length; p += 1) {\n        if (numbers[i",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int o = n; o < numbers.length; o += 1) {\n      if (numbers[i] + numbers[j] + numbers[k] + numbers[l] + numbers[m] + numbers[",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int o = n; o < numbers.length; o += 1) {\n        if (numbers[i] + numbers[j] + numbers[k] + numbers[l] + numbers[m] + numbers[",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int p = n; p < numbers.length; p += 1) {\n// buggy line:            for (int q = p; q < numbers.length; q += 1) {\n// buggy line:            for (",
        "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n// buggy line:        for (int j = i; j < numbers.length; j += 1) {\n// buggy line:            for (int k = j; k < numbers.length; k += 1) {\n// buggy line:            for (int l = k; l < numbers.length; l += 1) {\n// buggy line:            for (int m = l; m < numbers.length; m += 1) {\n// buggy line:            for (int n = m; n < numbers.length; n += 1) {\n// buggy line:            for (int o = n; o < numbers.length; o += 1) {\n// buggy line:            for (int p = o; p < numbers.length; p += 1) {\n      numbers[i] +="
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {\n// buggy line:    return n;",
      "function range": "14,5-16,5",
      "output": [
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision2(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision3(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision4(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision5(int n) {\n// buggy line:    return n;\nreturn n;",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\nreturn n;\n}\npublic static int car_race_collision(int n) {\nreturn n;\n}\npublic static int car_race_collision(int n) {\nreturn n;\n}\npublic static int car_race_collision(int n) {\nreturn n;\n}\npublic static int car_race_collision(int n) {\nreturn n;\n}\npublic static int car_race_collision(int n) {\nreturn",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\n}",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\n//",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\n\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\n\n\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\n\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\n",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n, int m) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n, int m, int p) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n, int m, int p, int q) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n,",
        "public static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\npublic static int car_race_collision(int n) {\n// buggy line:    return n;\nreturn n;\n}\nstatic"
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);",
      "function range": "13,5-20,5",
      "output": [
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n      result.add(n);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n);\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> reverse_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n      result.add(n);\n    }\n    return result;\n  }\n\n  public static List<Integer> reverse_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n      result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n      result.add(n - 1);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n - 1);\n        result.add(n + 1);\n    }\n    return result;\n  }\n\n  public static List<Integer> decr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n// buggy line:        result.add(n + 1);\n        result.add(n - 1);\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){",
      "function range": "10,5-18,5",
      "output": [
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 1) {\n        return false;\n      }\n    }\n    return true;\n  ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 1) {\n        return true;\n      }\n    }\n    return false;\n  ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        if (l.get(i) == 0) {\n            return false;\n        }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        if (l.get(i) == 1) {\n            return false;\n        }\n    }\n    return true;\n  ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        if (l.get(i) == 0) {\n            return true;\n        }\n    }\n    return false;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n        if (l.get(i) == 1) {\n            return true;\n        }\n    }\n    return false;\n  ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i) == 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) == 1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    ",
        "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n// buggy line:        for (int j = 0; j < l.size(); j += 1){\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_one(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean pairs_sum_to_two(List<Integer> l) {\n    "
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;",
      "function range": "14,5-22,5",
      "output": [
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(long x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(double",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(long x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(double",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(long x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(float",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(long x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(float",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(long x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n        result = result + x % base;\n        x = x / base;\n    }\n    return result;\n  }\n}\n",
        "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n\n  public static String change_base(long x, int base) {\n    String result = \"\";\n    while (x > 0) {\n// buggy line:        result = result + x % base;\n// buggy line:        x = x - x / base;\n      result = result + x % base;\n      x = x / base;\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;",
      "function range": "8,5-10,5",
      "output": [
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double c, double d, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\n\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\n\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\n\npublic static double triangle_area(double a, double b, double c, double d, double h) {\n// buggy line:    return a * h;\nreturn a * h",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * b * h;\nreturn a * b * h;\n}\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * b * c * h;\nreturn a * b * c * h;\n}\npublic static double triangle_area(double a, double b, double c, double d, double h) {\n// buggy line:    return",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double c) {\n// buggy line:    return a * b * c;\nreturn a * b * c;\n}\npublic static double triangle_area(double a, double b, double c, double d) {\n// buggy line:    return a * b * c * d;\nreturn a * b * c * d;\n}\npublic static double triangle_area(double a, double b, double c, double d, double e) {\n// buggy line:    return",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\n\npublic static double triangle_area(double a, double b, double c) {\n// buggy line:    return a * b * c;\nreturn a * b * c;\n}\n\npublic static double triangle_area(double a, double b, double c, double d) {\n// buggy line:    return a * b * c * d;\nreturn a * b * c * d;\n}\n\npublic static double triangle_area(double a, double b, double c, double d, double e) {\n// buggy line",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\n\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * b * h;\nreturn a * b * h;\n}\n\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * b * c * h;\nreturn a * b * c * h;\n}\n\npublic static double triangle_area(double a, double b, double c, double d, double h) {\n// buggy line",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double c) {\nreturn a * b * c;\n}\npublic static double triangle_area(double a, double b, double c, double d) {\nreturn a * b * c * d;\n}\npublic static double triangle_area(double a, double b, double c, double d, double e) {\nreturn a * b * c * d * e;\n}\npublic static double triangle_area(double a, double b, double c, double d, double",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * b * h;\nreturn a * b * h;\n}\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * c * h;\nreturn a * c * h;\n}\npublic static double triangle_area(double a, double b, double c, double d, double h) {\n// buggy line:    return a * d *",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double c) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_",
        "public static double triangle_area(double a, double h) {\n// buggy line:    return a * h;\nreturn a * h;\n}\npublic static double triangle_area(double a, double b, double h) {\n// buggy line:    return a * b * h;\nreturn a * b * h;\n}\npublic static double triangle_area(double a, double b, double c, double h) {\n// buggy line:    return a * c * h;\nreturn a * c * h;\n}\npublic static double triangle_area(double a, double b, double c, double d, double h) {\n// buggy line:    return a * c *"
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }",
      "function range": "20,5-35,5",
      "output": [
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n  }\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0)",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n  }\n\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n - 1);\n  }\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n  ",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n  }\n}\n",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n    }\n    return result.get(n);\n  }\n\n  public static int fib5(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 5)\n        return result.get(n);\n    for (int i = 5; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) +",
        "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n// buggy line:    }\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n - 1);"
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;",
      "function range": "12,5-20,5",
      "output": [
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)];\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) +",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    } else {\n// buggy line:        return list[(int) (list.",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return (list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2) / 2;\n    }\n  }\n}\n",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    } else {\n        return list[(int) (list.length / 2)]",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] +",
        "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n        return list[(int) (list.length / 2)] + list[(int) (list.length / 2) + 1] / 2;\n    }\n  }\n\n  public static double median(double[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n// buggy line:    return list[(int) (list.length / 2)] + list[(int) (list.length / 2) +"
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;",
      "function range": "14,5-20,5",
      "output": [
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n        else\n            return false;\n    }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i)!= text.charAt(text.length() - i)){\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i)!= text.charAt(text.length() - i)){\n            return false;\n        }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (text.charAt(i)!= text.charAt(text.length() - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i)){\n            return true;\n        }\n    }\n    return false;\n  }\n}\n",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n        else\n            return false;\n    }\n\n    public static boolean is_palindrome(char[] text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text[i] == text[text.length() - i])\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text[",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n        else\n            return false;\n    }\n\n    public static boolean is_palindrome(char[] text) {\n        for (int i = 0; i < text.length; i += 1){\n// buggy line:        if (text[i] == text[text.length() - i])\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text[",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n        else\n            return false;\n    }\n\n    public static boolean is_palindrome(char[] text) {\n        for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text[i] == text[text.length() - i])\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n            if (text[",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (text.charAt(i) == text.charAt(text.length() - i))\n            return true;\n        else\n            return false;\n    }\n\n    public static boolean is_palindrome(char[] text) {\n        for (int i = 0; i < text.length(); i += 1){\n            if (text[i] == text[text.length() - i])\n                return true;\n            else\n                return false;\n        }\n        return false;\n    }\n\n    public static boolean is_palindrome(",
        "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n// buggy line:        if (text.charAt(i) == text.charAt(text.length() - i))\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (text.charAt(i)!= text.charAt(text.length() - i)){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_palindrome(char[] text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text[i]!= text[text.length() - i]){\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean is_palindrome("
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;",
      "function range": "16,5-22,5",
      "output": [
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        result = result % p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result * p;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        result = (result * p) % n;\n    }\n    return result;\n  }\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n        result = (result * p) % n;\n    }\n    return result;\n}\n",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p) {\n    int result = 1",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result * p;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result * p;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p) {\n    int result = 1",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int mod(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p) {\n    int result = 1;",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int mod(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = result % p;\n    }\n    ",
        "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n\n  public static int mod(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n// buggy line:        result = 2 * result;\n// buggy line:    }\n// buggy line:    return result % p;\n      result = result % p;\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));",
      "function range": "16,5-23,5",
      "output": [
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c -",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n      sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('0')) % 26) + (int)('0'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c -",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c -",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('0')) % 26) + (int)('0'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('9')) % 26) + (int)('9'));\n// buggy line:        c = (char)((((int) c -",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c -",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c -",
        "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('a')) % 26) + (int)('a'));\n// buggy line:        c = (char)((((int) c - 5 - (int)('A')) % 26) + (int)('A'));\n        sb.append(c);\n    }\n    return sb."
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')",
      "function range": "18,5-26,5",
      "output": [
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(' ');\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(c);\n        } else {\n            sb.append(' ');\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            continue;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(c);\n        } else {\n            sb.append(\" \");\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(' ');\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            sb.append(c);\n        } else {\n            sb.append(' ');\n        }\n    }\n    return sb.toString();\n  }\n\n}\n"
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;",
      "function range": "10,5-16,5",
      "output": [
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] >= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] >= t) {\n        ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] >= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] >= t) {\n        ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] > t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] > t) {\n        ",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n        if (l[i] <= t) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t)\n        return true;\n      else\n        return false;\n    }\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  public static boolean above_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] >= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] >=",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
        "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n// buggy line:        if (l[i] <= t)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n      if (l[i] <= t) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n}\n"
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {\n// buggy line:    return x | y;",
      "function range": "10,5-12,5",
      "output": [
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static int mul(int x, int y) {\n// buggy line:    return x * y;\nreturn x * y;\n}\npublic static int div(int x, int y) {\n// buggy line:    return x / y;\nreturn x / y;\n}\npublic static int mod(int x, int y) {\n// buggy line:    return x % y;",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\n\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\n\npublic static int mul(int x, int y) {\n// buggy line:    return x * y;\nreturn x * y;\n}\n\npublic static int div(int x, int y) {\n// buggy line:    return x / y;\nreturn x / y;\n}\n\npublic static int mod(int x, int y) {\n// buggy line:    return",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static int and(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static int or(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int xor(int x, int y) {\n// buggy line:    return x ^ y",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\n        return x | y;\n    }\n\n    public static int sub(int x, int y) {\n// buggy line:    return x & y;\n        return x & y;\n    }\n\n    public static int mul(int x, int y) {\n// buggy line:    return x * y;\n        return x * y;\n    }\n\n    public static int div(int x, int y) {\n// buggy line:    return x / y;\n        return x / y;\n    }\n\n    public static int mod(int x, int y)",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\nreturn x | y | z;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static int sub(int x, int y, int z) {\n// buggy line:    return x & y | z;\nreturn x & y | z;\n}\npublic static int mul(int x, int",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\nreturn x | y | z;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static int sub(int x, int y, int z) {\n// buggy line:    return x & y & z;\nreturn x & y & z;\n}\npublic static int mul(int x, int",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\nreturn x | y | z;\n}\npublic static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\nreturn x | y | z | w;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x - y;\nreturn x - y;\n}\npublic static",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\nreturn x | y | z;\n}\npublic static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\nreturn x | y | z | w;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int add(int x, int y, int z) {\n// buggy line:    return x | y | z;\nreturn x | y | z;\n}\npublic static int add(int x, int y, int z, int w) {\n// buggy line:    return x | y | z | w;\nreturn x | y | z | w;\n}\npublic static int add(int x, int y, int z, int w, int x2) {\n// buggy line:    return x | y | z",
        "public static int add(int x, int y) {\n// buggy line:    return x | y;\nreturn x | y;\n}\npublic static int sub(int x, int y) {\n// buggy line:    return x & y;\nreturn x & y;\n}\npublic static int mul(int x, int y) {\n// buggy line:    return x * y;\nreturn x * y;\n}\npublic static int div(int x, int y) {\n// buggy line:    return x / y;\nreturn x / y;\n}\npublic static int mod(int x, int y) {\n// buggy line:    return (x % y"
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();",
      "function range": "20,5-31,5",
      "output": [
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set3 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set4 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set5 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set6 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set7 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set3 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set4 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set5 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set6 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set7 = new ArrayList<Character>();\n\n",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set2 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n\n",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n//",
        "public static boolean same_chars(String s0, String s1) {\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set1 = new ArrayList<Character>();\n// buggy line:    ArrayList<Character> set0 = new ArrayList<Character>();\n//"
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);",
      "function range": "12,5-14,5",
      "output": [
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15) + fib(n - 16) + fib(n - 17) + fib(",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15);\n// faster line:    return fib(n - 1) + fib(n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15) + fib(n - 16) + fib(n - 17);\n// faster",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15) + fib(n - 16) + fib(n - 17);\n    return",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15) + fib(n - 16);\n// faster line:    return fib(n",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15) + fib(n - 16) + fib(n - 17);\n    if",
        "public static int fib(int n) {\n// buggy line:    return fib(n - 1) + fib(n - 2);\n// faster line:    return fib(n - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4) + fib(n - 5) + fib(n - 6) + fib(n - 7) + fib(n - 8) + fib(n - 9) + fib(n - 10) + fib(n - 11) + fib(n - 12) + fib(n - 13) + fib(n - 14) + fib(n - 15) + fib(n - 16) + fib(n - 17);\n\n//"
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;",
      "function range": "16,5-27,5",
      "output": [
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    }\n    return depth == 0;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    }\n    return depth == 0;\n  }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    }\n    return depth == 0;\n  }\n\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)\n        return true;\n    else\n        return false;\n  }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)\n        return true;\n    else\n        return false;\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)\n        return true;\n    else\n        return false;\n  }\n\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)\n        return true;\n    else\n        return false;\n    }\n}\n",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)\n        return true;\n    else\n        return false;\n  }\n\n  public static boolean correct_parens(String parens) {\n    int depth = 0;\n    for (char b : parens.toCharArray()) {\n        if (b == '(')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (",
        "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)\n        return true;\n    else\n        return false;\n  }\n\n  public static boolean correct_brackets(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '>')\n            depth += 1;\n        else\n            depth -= 1;\n// buggy line:        if (depth >= 0)\n// buggy line:            return true;\n// buggy line:    }\n// buggy line:    return false;\n    if (depth == 0)"
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;",
      "function range": "14,5-28,5",
      "output": [
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l; reverse_sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l; reverse_sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l; reverse_sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] < reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[l.length - 1 - i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] == reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l; reverse_sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < sorted.length; i++) {\n      if (sorted[i] < reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l; reverse_sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] == reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l; reverse_sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    return Arrays.equals(sorted, reverse_sorted);\n  }\n}\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = l[i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        sorted[i] = reverse_sorted[i];\n      }\n    }\n    return",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n      reverse_sorted[i] = l[i];\n    }\n    Arrays.sort(sorted);\n    Arrays.sort(reverse_sorted);\n    return Arrays.equals(sorted, reverse_sorted);\n  }\n}\n",
        "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];\n// buggy line:    sorted = l;\n    for (int i = 0; i < l.length; i++) {\n      sorted[i] = l[i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      reverse_sorted[i] = l[i];\n    }\n    for (int i = 0; i < l.length; i++) {\n      if (sorted[i] > reverse_sorted[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();",
      "function range": "12,5-29,5",
      "output": [
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n\n// buggy line:    Array",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    Array",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line: ArrayList<",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    int[]",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line: ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line: ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line: ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line: ArrayList<Integer>",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line: ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    Array",
        "public static int[] common(int[] l1, int[] l2) {\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n// buggy line:    ArrayList<Integer> common = new ArrayList<Integer>();\n\n// buggy line:    int"
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;",
      "function range": "20,5-28,5",
      "output": [
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            largest = j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (n % j == 0) {\n            largest = j;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            largest = j;\n        }\n    }\n    return largest;\n  }\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (n % j == 0) {\n            largest = j;\n            break;\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            if (n % j == 0) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) largest = j;\n    }\n    return largest;\n  }\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n  }\n}\n",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}",
        "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n// buggy line:        if (is_prime(j)){\n// buggy line:            largest = n % j;\n// buggy line:        }\n        if (is_prime(j)) {\n            if (n % j == 0) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n  }\n}\n"
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);",
      "function range": "16,5-18,5",
      "output": [
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n    return (n + 1) * (n / 2);\n  }\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\nreturn (n + 1) * (n / 2);\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return (n + 1) * (n / 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_to_n(100000));\n        System.out.println(sum_to_n(1000000));\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return (n + 1) * (n / 2);\n    }\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n    return (n + 1) * (n / 2);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_to_n(10));\n    System.out.println(sum_to_n(100));\n    System.out.println(sum_to_n(1000));\n    System.out.println(sum_to_n(10000));\n    System.out.println(sum_to_n(100000));\n    System.out.println(sum_to_n(1000000));\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return (n + 1) * (n / 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_to_n(100000));\n        System.out.println(sum_to_n(10000000));\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n    return (n + 1) * (n / 2);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_to_n(10));\n    System.out.println(sum_to_n(100));\n    System.out.println(sum_to_n(1000));\n    System.out.println(sum_to_n(10000));\n    System.out.println(sum_to_n(100000));\n    System.out.println(sum_to_n(10000000));\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return (n + 1) * (n / 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_to_n(100000));\n    }\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n    return (n + 1) * (n / 2);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(sum_to_n(10));\n    System.out.println(sum_to_n(100));\n    System.out.println(sum_to_n(1000));\n    System.out.println(sum_to_n(10000));\n    System.out.println(sum_to_n(100000));\n  }\n}\n",
        "public static int sum_to_n(int n) {\n// buggy line:    return (n + 1) * (n / 2);\n        return (n + 1) * (n / 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(sum_to_n(10));\n        System.out.println(sum_to_n(100));\n        System.out.println(sum_to_n(1000));\n        System.out.println(sum_to_n(10000));\n        System.out.println(sum_to_n(100000));\n        System.out.println(sum_to_n(1000000));\n"
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));",
      "function range": "15,5-21,5",
      "output": [
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) * xs.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i++) {\n      result.add(xs.get(i) * xs.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) * xs.get(i));\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) - xs.get(i + 1));\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1)\n      result.add(xs.get(i));\n    return result;\n  }\n}\n",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(List<Integer> xs, List<Integer> ys) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(",
        "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs.get(i));\n    for (int i = 0; i < xs.size(); i += 1) {\n      result.add(xs.get(i) * xs.get(i));\n    }\n    return result;\n  }\n\n  public static List<Integer> derivative(List<Integer> xs, List<Integer> ys) {\n    List<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < xs.size(); i += 1)\n// buggy line:        result.add(xs."
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);",
      "function range": "17,5-23,5",
      "output": [
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nint fib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nint fib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) + fibfib(n - 4) + fibfib(n - 5) + fibfib(n - 6) + fibfib(n - 7) + fibfib(n - 8) + fibfib(n - 9) + fibfib(n - 10) + fibfib(n - 11) + fibfib(n - 12) + fibfib(n - 13) + fibfib(n - 14)",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3) + fibfib(n - 4);\n}\n",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n// buggy line:    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n}\n\npublic static void main(String",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n// buggy line:    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n}\n\npublic static int fib(int",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\npublic static int fib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n}\n\npublic static void main(String",
        "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n// buggy line:    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nint fib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n// buggy line:    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n    return fib(n - 1) + fib(n - 2) + fib(n - 3);\n}\n"
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')",
      "function range": "15,5-27,5",
      "output": [
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n  }\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result++;\n    return result;\n  }\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') result += 1;\n    return result;\n  }\n\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 3] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 4] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 5] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 6] == '",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 1] == 'u')\n// buggy line:    if (str_chars[str_chars.length - 1] == 'A')\n// buggy line:    if (str_chars[str_chars.length - 1] == 'E')\n// buggy line:    if (str_chars[str_chars.length - 1] == 'I')\n// buggy line:    if (str_chars[str_chars.length - 1] == '",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') {\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y') {\n// buggy line:    if (str_chars[str_chars.length - 3] == 'y') {\n// buggy line:    if (str_chars[str_chars.length - 4] == 'y') {\n// buggy line:    if (str_chars[str_chars.length - 5] == 'y') {\n// buggy line:    if (str_chars[str_chars.length",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y') {\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 3] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 4] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 5] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 6] ==",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y')\n    return result;\n  }\n}\n",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 2] == '",
        "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n// buggy line:    if (str_chars[str_chars.length - 1] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 2] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 3] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 4] == 'y')\n// buggy line:    if (str_chars[str_chars.length - 5] == 'y')\n    return result;\n  }\n}\n"
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);",
      "function range": "12,5-23,5",
      "output": [
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift);\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(s.length() - shift);\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(s.length() - shift);\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(0, s.length() - shift);\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(0, s.length() - shift - 1);\n    }\n  }\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(0, s.length() - shift);\n    }\n  }\n\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(0, s.length() - shift - 1);\n    }\n  }\n\n}\n",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(0, s.length() - shift - 1);\n    }\n}\n\npublic static void main(String[] args) {\n    System.out.println(circular_shift(10, 1));\n    System.out.println(circular_shift(10, 2));\n    System.out.println(circular_shift(10, 3));\n    System.out.println(circular_shift(10, 4));\n    System.out.println(circ",
        "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n// buggy line:        return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n        return s.substring(0, s.length() - shift) + s.substring(0, s.length() - shift - 1);\n    }\n  }\n\n  public static void main(String[] args) {\n    System.out.println(circular_shift(10, 1));\n    System.out.println(circular_shift(10, 2));\n    System.out.println(circular_shift(10, 3));\n    System.out.println(circular_shift(10, 4));\n    System.out.println("
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c == ' ')\n// buggy line:            break;",
      "function range": "16,5-25,5",
      "output": [
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n      result += c - '0';\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int c : s) {\n// buggy line:",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(byte[] s) {\n    int result = 0;\n    for (byte b : s) {\n// buggy line:",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int i = 0; i < s.length;",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int i : s) {\n// buggy line:",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n}\n",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int i = 0; i < s.length; i++) {\n      result += s[i] - '0';\n    }\n    return",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n      result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(int[] s) {\n    int result = 0;\n    for (int c : s) {\n      result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit",
        "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(char[] s) {\n    int result = 0;\n    for (char c : s) {\n// buggy line:        if (c =='')\n// buggy line:            break;\n        result += c - '0';\n    }\n    return result;\n  }\n\n  public static int digit_sum(int s) {\n    int result = 0;\n    for (int c : s) {\n// buggy line:        "
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;",
      "function range": "15,5-23,5",
      "output": [
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        result -= Integer.parseInt(str);\n    }\n    return result;\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n        int cnt = Integer.parseInt(str);\n        result -= cnt;\n    }\n    return result;\n  }\n\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n// buggy line:        result += Integer.parseInt(str);\n        result -= Integer.parseInt(str);\n        result += Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n// buggy line:        result += Integer.parseInt(str);\n        result -= Integer.parseInt(str);\n    }\n    return result;\n  }\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n// buggy line:        result += Integer.parseInt(str);\n        result -= Integer.parseInt(str);\n        result += Integer.parseInt(str);\n    }\n    return result;\n  }\n\n}\n",
        "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n// buggy line:        int cnt = Integer.parseInt(str);\n// buggy line:        result -= cnt;\n// buggy line:        result += Integer.parseInt(str);\n        result -= Integer.parseInt(str);\n        result += Integer.parseInt(str);\n    }\n    return result;\n}\n"
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;",
      "function range": "36,5-49,5",
      "output": [
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    }\n// buggy line:    index = i;\n// buggy line:    }\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone();\n// buggy line:    return arr.clone",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, min_even, index);\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, 0, min_even);\n// buggy line:    return Arrays.copyOfRange(arr, index, arr.length",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, min_even, index);\n// buggy line:    return Arrays.copyOfRange(arr, 0, index);\n",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, min_even, index);\n// buggy line:    return Arrays.copyOfRange(arr, index + 1, arr",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, 0, index);\n// buggy line:    return Arrays.copyOfRange(arr, index + 1, arr.length",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, 0, min_even);\n// buggy line:    return Arrays.copyOfRange(arr, 0, index);\n",
        "public static int[] pluck(int[] arr) {\n// buggy line:    int min_even = 0;\n// buggy line:    int index = 0;\n// buggy line:    for (int i = 0; i < arr.length; i++) {\n// buggy line:    if (arr[i] % 2 == 0) {\n// buggy line:        min_even = i;\n// buggy line:    } else {\n// buggy line:        index = i;\n// buggy line:    }\n// buggy line:    }\n// buggy line:    return Arrays.copyOfRange(arr, 0, min_even);\n// buggy line:    return Arrays.copyOfRange(arr, min_even, index"
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;",
      "function range": "13,5-26,5",
      "output": [
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    return result;\n  }\n\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1) if (lst[i] > max) result = i;\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] > max)\n            max = lst[i];\n    }\n    return max;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] > max)\n            max = lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] < i) result = i;\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] < i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] < i) result = i;\n// buggy line:    for (int i = 0; i",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n    for (int i = 0; i < lst.length; i += 1) {\n        if (lst[i] > max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n// buggy line:    int[] frq = new int[max];\n// buggy line:    for (int i = 0; i < lst.length; i += 1)  frq[i] += 1;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] < i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] > i) result = i;\n// buggy line:    for (int i = 0; i < frq.length; i += 1) if (frq[i] >= i) result = i;\n// buggy line:    for (int i = 0; i"
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }",
      "function range": "17,5-29,5",
      "output": [
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n        switched =!switched;\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n        switched =!switched;\n    }\n    return result;\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n        switched =!switched;\n        lst = new ArrayList<Integer>(lst);\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n        switched = false;\n    }\n    return result;\n  }",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n        switched = true;\n    }\n    return result;\n  }",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    }\n        switched =!switched;\n        lst = lst.subList(0, result.size());\n    }\n    return result;\n  }\n}\n",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n        switched = true;\n        lst = lst.subList(",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n// buggy line:    result.add(Collections.max(lst));",
        "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n// buggy line:    } else {\n// buggy line:    result.add(Collections.min(lst));\n// buggy line:    result.add(Collections.max(lst));\n        switched = true;\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {",
      "function range": "16,5-26,5",
      "output": [
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_3(double a, double b, double c, double d) {\n//   return sqrt(a*a + b*b + c*c + d*d);\n// }\n\n// buggy line:public static double triangle_area_4(double a, double b, double c, double d, double e) {\n//   return sqrt(a*a + b*b + c*c + d*",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// public static double triangle_area_3(double a, double b, double c, double d) {\n//   return sqrt(a*a + b*b + c*c + d*d);\n// }\n\n// public static double triangle_area_4(double a, double b, double c, double d, double e) {\n//   return sqrt(a*a + b*b + c*c + d*d + e*e);",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_2(double a, double b, double c, double d) {\n//   return sqrt(a*a + b*b + c*c + d*d);\n// }\n\n// buggy line:public static double triangle_area_2(double a, double b, double c, double d, double e) {\n//   return sqrt(a*a + b*b + c*c + d*",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_3(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_4(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// public static double triangle_area_3(double a, double b, double c, double d, double e, double f) {\n//   return sqrt(a*a + b*b + c*c + d*d + e*e + f*f);\n// }\n\n// public static double triangle_area_4(double a, double b, double c, double d, double e, double f, double g, double h) {\n//   return",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// public static double triangle_area_3(double a, double b, double c, double d, double e, double f) {\n//   return sqrt(a*a + b*b + c*c + d*d + e*e + f*f);\n// }\n\n// public static double triangle_area_4(double a, double b, double c, double d, double e, double f, double g) {\n//   return sqrt(",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_3(double a, double b, double c, double d, double e, double f) {\n//   return sqrt(a*a + b*b + c*c + d*d + e*e + f*f);\n// }\n\n// buggy line:public static double triangle_area_4(double a, double b, double c, double d, double e, double f, double g) {\n",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_3(double a, double b, double c, double d, double e, double f) {\n//   return sqrt(a*a + b*b + c*c + d*d + e*e + f*f);\n// }\n\n// buggy line:public static double triangle_area_4(double a, double b, double c, double d, double e, double f, double g, double h",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// buggy line:public static double triangle_area_2(double a, double b, double c, double d) {\n//   return sqrt(a*a + b*b + c*c + d*d);\n// }\n\n// buggy line:public static double triangle_area_3(double a, double b, double c, double d, double e) {\n//   return sqrt(a*a + b*b + c*c + d*",
        "\n// buggy line:public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// public static double triangle_area(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// public static double triangle_area_2(double a, double b, double c) {\n//   return sqrt(a*a + b*b + c*c);\n// }\n\n// public static double triangle_area_3(double a, double b, double c"
      ]
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;\n// buggy line:    }",
      "function range": "20,5-34,5",
      "output": [
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n  }\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    return true;\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n  }\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\npublic static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i <",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    return true;\n  }\n}\n",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    return true;\n}\n\npublic static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;",
        "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n// buggy line:    } else if (q[i] == q[j]) return false;\n        else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    return true;\n}"
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i] != arr[arr.length - i])",
      "function range": "13,5-21,5",
      "output": [
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result++;\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result++;\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result = arr[arr.length - i];\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result = arr[arr.length - i];\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result = arr[i];\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result = arr[i];\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) result++;\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) result++;\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result = arr[arr.length - i];\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result = arr[arr.length - i];\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length;",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result = arr[arr.length - i];\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result = arr[arr.length - i];\n        break;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result++;\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result = arr[i];\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result = arr[i];\n        break;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int smallest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = 0; i < arr.length; i += 1) {\n// buggy line:        if (arr[i]!= arr[arr.length - i]) {\n// buggy line:            result++;\n// buggy line:        }\n    for (int i = 0; i < arr.length; i += 1) {\n      if (arr[i]!= arr[arr.length - i]) {\n        result++;\n      }\n    }\n    return result;\n  }\n\n  public static int largest_change(int[] arr) {\n    int result = 0;\n// buggy line:    for (int i = arr.length - 1; i >= 0; i -= 1) {\n// buggy line:        if (arr"
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();",
      "function range": "18,5-29,5",
      "output": [
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n    for (String st : lst2)\n        l4 += st.length();\n    int l5 = 0;\n    for (String st : lst2)\n        l5 += st.length();\n    int l6 = 0;\n    for (String st : lst2)\n        l6 += st.length();\n    int l7 = 0;\n    for (String st : l",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n    for (String st : lst1)\n        l4 += st.length();\n    int l5 = 0;\n    for (String st : lst2)\n        l5 += st.length();\n    int l6 = 0;\n    for (String st : lst1)\n        l6 += st.length();\n    int l7 = 0;\n    for (String st : l",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l3 = st.length();\n    int l4 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l4 = st.length();\n    int l5 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l5 = st.length();\n    int l6 = 0;\n// buggy line:    for (String st : l",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n    for (String st : lst2)\n        l4 += st.length();\n    int l5 = 0;\n    for (String st : lst1)\n        l5 += st.length();\n    int l6 = 0;\n    for (String st : lst1)\n        l6 += st.length();\n    int l7 = 0;\n    for (String st : l",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n    for (String st : lst2)\n        l4 += st.length();\n    int l5 = 0;\n    for (String st : lst1)\n        l5 += st.length();\n    int l6 = 0;\n    for (String st : lst2)\n        l6 += st.length();\n    int l7 = 0;\n    for (String st : l",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n// buggy line:    for (String st : lst2)\n// buggy line:        l4 = st.length();\n    int l5 = 0;\n    for (String st : lst1)\n        l5 += st.length();\n    int l6 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l6 = st.length();",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n    for (String st : lst2)\n        l4 += st.length();\n    int l5 = 0;\n    for (String st : lst2)\n        l5 += st.length();\n    int l6 = 0;\n    for (String st : lst1)\n        l6 += st.length();\n    int l7 = 0;\n    for (String st : l",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n    for (String st : lst2)\n        l3 += st.length();\n    int l4 = 0;\n// buggy line:    for (String st : lst2)\n// buggy line:        l4 = st.length();\n    int l5 = 0;\n    for (String st : lst1)\n        l5 += st.length();\n    int l6 = 0;\n    for (String st : lst2)\n        l6 += st.length();\n    int l7 = 0;",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    for (String st : lst2)\n        l2 += st.length();\n    return new ArrayList<String>(l1 + l2);\n  }\n}\n",
        "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l2 = st.length();\n    int l3 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l3 = st.length();\n    int l4 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l4 = st.length();\n    int l5 = 0;\n// buggy line:    for (String st : lst1)\n// buggy line:        l5 = st.length();\n    int l6 = 0;\n    int l7 = 0;\n    int l"
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {",
      "function range": "19,5-31,5",
      "output": [
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (is_prime(j)) return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1) {\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (int i = 2; i < a; i += 1) {\n        if (a % i == 0) return false;\n    }\n",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (long i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (is_prime(j)) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (is_prime(i)) return true;\n    }\n    return false;\n}\n\npublic static boolean is_prime(long a) {\n    for (int i = 2; i < a; i += 1){\n        if (is_prime(i)) return true;\n    }\n    return",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (long i = 2; i < a; i += 1) {\n        if (a % i == 0) return false;\n    }\n    ",
        "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n// buggy line:            for (int k = j; k < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean is_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (a % i == 0) return false;\n    }\n    return true;\n}\n\npublic static boolean is_prime(long a) {\n    for (int i = 2; i < a; i += 1) {\n        if (a % i == 0) return false;\n    }\n    "
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;",
      "function range": "15,5-21,5",
      "output": [
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_simple_power(int x, int n) {\n//            int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_simple_power(int x,",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_simple_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (is_simple_power(x, i)) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (is_simple_power(x, i)) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is_power",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == x;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (is_simple_power(x, i)) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is_power",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (is_simple_power(x, i)) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is_simple",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == x;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (is_simple_power(x, i)) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is_simple",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_simple_power(int x, int n) {\n//            int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_simple_power(int x)",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == x;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (!is_simple_power(x, i)) {\n//                    return false;\n//                }\n//            }\n//            return true;\n//        }\n//\n//        public static boolean is_power",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == 1;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (x % i == 0) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is_power(int x,",
        "public static boolean is_simple_power(int x, int n) {\n// buggy line:    int power = 1;\n//            for (int i = 0; i < n; i++) {\n//                power *= x;\n//            }\n//            return power == x;\n//        }\n//\n//        public static boolean is_power(int x, int n) {\n//            for (int i = 0; i < n; i++) {\n//                if (x % i == 0) {\n//                    return true;\n//                }\n//            }\n//            return false;\n//        }\n//\n//        public static boolean is_power(int x,"
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);",
      "function range": "18,5-24,5",
      "output": [
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./4);\n// buggy line:    double root = Math.pow(a, 1./5);\n// buggy line:    double root = Math.pow(a, 1./6);\n// buggy line:    double root = Math.pow(a, 1./7);\n// buggy line:    double root = Math.pow(a, 1./8);\n// buggy line:    double root = Math.pow(a, 1./9);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 2./3);\n// buggy line:    double root = Math.pow(a, 3./3);\n// buggy line:    double root = Math.pow(a, 4./3);\n// buggy line:    double root = Math.pow(a, 5./3);\n// buggy line:    double root = Math.pow(a, 6./3);\n// buggy line:    double root = Math.pow(a, 7./3);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./6);\n// buggy line:    double root = Math.pow(a, 1./9);\n// buggy line:    double root = Math.pow(a, 1./12);\n// buggy line:    double root = Math.pow(a, 1./15);\n// buggy line:    double root = Math.pow(a, 1./18);\n// buggy line:    double root = Math.pow(a, 1./21);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./1);\n// buggy line:    double root = Math.pow(a, 1./0);\n// buggy line:    double root = Math.pow(a, 1./-1);\n// buggy line:    double root = Math.pow(a, 1./-2);\n// buggy line:    double root = Math.pow(a, 1./-3);\n// buggy line:",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./4);\n// buggy line:    double root = Math.pow(a, 1./5);\n// buggy line:    double root = Math.pow(a, 1./6);\n// buggy line:    double root = Math.pow(a, 1./7);\n// buggy line:    double root = Math.pow(a, 1./8);\n// buggy line:    double root = Math.pow(a, 1./10);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./2);\n// buggy line:    double root = Math.pow(a, 2./3);\n// buggy line:    double root = Math.pow(a, 2./2);\n// buggy line:    double root = Math.pow(a, 3./3);\n// buggy line:    double root = Math.pow(a, 3./2);\n// buggy line:    double root = Math.pow(a, 4./3);\n// buggy line:    double root",
        "public static boolean iscude(int a) {\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n// buggy line:    double root = Math.pow(a, 1./3);\n\n// buggy line:    double"
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7')",
      "function range": "21,5-28,5",
      "output": [
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7')",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c >= '0' && c <= '9') {\n            result *= 16;\n            result += c - '0';\n        } else if (c >= 'a' && c <= 'f') {\n            result *= 16;\n            result += c - 'a' + 10;\n        } else if (c >= 'A' && c <= 'F') {\n            result *= 16;\n            result += c - 'A' + 10;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c >= '0' && c <= '9') {\n            result *= 16;\n            result += c - '0';\n        } else if (c >= 'A' && c <= 'F') {\n            result *= 16;\n            result += c - 'A' + 10;\n        } else if (c >= 'a' && c <= 'f') {\n            result *= 16;\n            result += c - 'a' + 10;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n\n  public static int hex_",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c >= '0' && c <= '9') {\n            result *= 16;\n            result += c - '0';\n        } else if (c >= 'a' && c <= 'f') {\n            result *= 16;\n            result += c - 'a' + 10;\n        } else if (c >= 'A' && c <= 'F') {\n            result *= 16;\n            result += c - 'A' + 10;\n        } else {\n            result *= 16;\n            result += c - '0';",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n      if (c >= '0' && c <= '9') {\n        result *= 16;\n        result += c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result *= 16;\n        result += c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result *= 16;\n        result += c - 'A' + 10;\n      }\n    }\n    return result;\n  }\n\n  public static String hex_",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c >= '0' && c <= '9') {\n            result *= 16;\n            result += c - '0';\n        } else if (c >= 'a' && c <= 'f') {\n            result *= 16;\n            result += c - 'a' + 10;\n        } else if (c >= 'A' && c <= 'F') {\n            result *= 16;\n            result += c - 'A' + 10;\n        } else {\n            result *= 16;\n            result += c - 'a'",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c >= '0' && c <= '9') {\n            result *= 16;\n            result += c - '0';\n        } else if (c >= 'a' && c <= 'f') {\n            result *= 16;\n            result += c - 'a' + 10;\n        } else if (c >= 'A' && c <= 'F') {\n            result *= 16;\n            result += c - 'A' + 10;\n        }\n    }\n    return result;\n  }\n\n  public static int hex_",
        "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n// buggy line:        if (c == '2' || c == '3' || c == '5' || c == '7') {\n        if (c >= '0' && c <= '9') {\n            result *= 16;\n            result += c - '0';\n        } else if (c >= 'a' && c <= 'f') {\n            result *= 16;\n            result += c - 'a' + 10;\n        } else if (c >= 'A' && c <= 'F') {\n            result *= 16;\n            result += c - 'A' + 10;\n        }\n    }\n    return result;\n  }\n\n  public static String hex_"
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);",
      "function range": "15,5-18,5",
      "output": [
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinary",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toString(decimal, 8);\n// buggy line:    String result = Integer.toString(decimal, 16);\n// buggy line:    String result = Integer.toString(decimal, 10);\n// buggy line:    String result = Integer.toString(decimal, 8);\n// buggy line:    String result = Integer.toString(",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toCharCode(decimal);\n// buggy line:    String result = Integer.toString(decimal, 8);\n// buggy line:    String result = Integer.toString(decimal, 16);\n// buggy line:    String result = Integer.toString(decimal, 10);\n// buggy line:    String result = Integer.toString(dec",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toCharString(decimal);\n// buggy line:    String result = Integer.toString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toCharString(decimal",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toHex",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toString(decimal, 8);\n// buggy line:    String result = Integer.toString(decimal, 16);\n// buggy line:    String result = Integer.toString(decimal, 8);\n// buggy line:    String result = Integer.toString(decimal, 10);\n// buggy line:    String result = Integer.toString(",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toCharString(decimal);\n// buggy line:    String result = Integer.toString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(dec",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toCharString(decimal);\n// buggy line:    String result = Integer.toString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toString(decimal);",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toOctal",
        "public static String decimal_to_binary(int decimal) {\n// buggy line:    String result = Integer.toHexString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toOctalString(decimal);\n// buggy line:    String result = Integer.toCharString(decimal);\n// buggy line:    String result = Integer.toString(decimal);\n// buggy line:    String result = Integer.toBinaryString(decimal);\n// buggy line:    String result = Integer.toCharString(decimal);\n// buggy line:    String result = Integer.toString(decimal);\n"
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))",
      "function range": "15,5-23,5",
      "output": [
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(is_happy(\"a\"));\n    System.out.println(is_happy(\"b\"));\n    System.out.println(is_happy(\"c\"));\n    System.out.println(is_happy(\"d\")",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(is_happy(\"hello\"));\n    System.out.println(is_happy(\"hello\"));\n    System.out.println(is_happy(\"hello\"));\n    System.out.println(is_happy(\"hello\")",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(is_happy(\"abcd\"));\n    System.out.println(is_happy(\"abcd\"));\n    System.out.println(is_happy(\"abcd\"));\n    System.out.println(is_happy",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    for (int i = 0; i < args.length; i += 1) {\n      System.out.println(is_happy(args[i]));\n    }\n  }\n}\n",
        "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n// buggy line:        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n        if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(is_happy(\"a\"));\n    System.out.println(is_happy(\"ab\"));\n    System.out.println(is_happy(\"abc\"));\n    System.out.println(is_happy(\"abcd"
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";",
      "function range": "26,5-59,5",
      "output": [
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E-\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] =",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"D\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"F",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"F\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"E+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"E-\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"F+\";\n        else if (gpa > 1.0)\n            letter_grade[i]",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E-\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] =",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"E",
        "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"C-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"D+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"C\";\n// buggy line:        else if (gpa > 1.3)\n// buggy line:            letter_grade[i] = \"D-\";\n// buggy line:        else if (gpa > 1.0)\n// buggy line:            letter_grade[i] = \"E+\";\n// buggy line:        else if (gpa > 1.7)\n// buggy line:            letter_grade[i] = \"E-\";\n    }\n    return letter_grade;\n  }\n}\n"
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n// buggy line:        if (l - i == 9)\n//",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n// buggy line:        if (l - i == 9)\n        ",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0) return false;\n        if (string.charAt(i)!= string.charAt(i - 1))\n            return false;\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n        if (l - i == 1)\n            return false;\n        if (l - i == 2)\n            return false;\n        if (l - i == 3)\n            return false;\n        if (l - i == 4)\n            return",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n// buggy line:        if (l - i == 9)\n    ",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n// buggy line:        if (l - i == 9)\n      ",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n        if (l - i == 1)\n            return true;\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n        if (l - i == 1)\n            return false;\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0) return false;\n        if (string.charAt(i)!= string.charAt(i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n// buggy line:        if (l - i == 0)\n// buggy line:        if (l - i == 1)\n// buggy line:        if (l - i == 2)\n// buggy line:        if (l - i == 3)\n// buggy line:        if (l - i == 4)\n// buggy line:        if (l - i == 5)\n// buggy line:        if (l - i == 6)\n// buggy line:        if (l - i == 7)\n// buggy line:        if (l - i == 8)\n// buggy line:        if (l - i == 9)\n\n        "
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));",
      "function range": "7,5-11,5",
      "output": [
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    if (n == 11)\n        return",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 2;\n    if (n == 4)\n        return 3;\n    if (n == 5)\n        return 4;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 6;\n    if (n == 8)\n        return 7;\n    if (n == 9)\n        return 8;\n    if (n == 10)\n        return 9;\n    if (n == 11)\n        return",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 1));\n    if (n == 3)\n        return 3;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 4)\n        return 4;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 1));\n    if (n == 5)",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 1;\n    if (n == 4)\n        return 1;\n    if (n == 5)\n        return 1;\n    if (n == 6)\n        return 1;\n    if (n == 7)\n        return 1;\n    if (n == 8)\n        return 1;\n    if (n == 9)\n        return 1;\n    if (n == 10)\n        return 1;\n    if (n == 11)\n        return",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 1));\n    if (n == 3)\n        return 3;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n));\n    if (n == 4)\n        return 4;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n));\n    if (n == 5)\n        return 5",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n}\n\npublic static",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n  }\n\n  public",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    return 0;\n  }\n}\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n  }\n}\n",
        "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n// buggy line:    return (int) ((10 + 9) * Math.pow(10, n - 2));\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return -1;\n}\n\npublic"
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));",
      "function range": "17,5-23,5",
      "output": [
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return String.valueOf(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt(N + \"\".substring(i + 1));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt(N + \"\".substring(i));\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt(N + \"\").substring(i + 1);\n    }\n    return Integer.toString(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return String.valueOf(sum);\n  }\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toString(sum);\n  }\n\n}\n",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i, i + 1));\n    }\n    return Integer.toString(sum);\n  }\n}",
        "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n// buggy line:        sum += Integer.parseInt((N + \"\").substring(i + 1));\n        sum += Integer.parseInt((N + \"\").substring(i));\n    }\n    return Integer.toString(sum);\n  }\n\n  public static void main(String[] args) {\n    System.out.println(solve(10));\n  }\n}\n"
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {",
      "function range": "8,5-15,5",
      "output": [
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n  public static int add_even_at_even(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) { sum += lst[i]; }\n    for (int i = 0; i < lst.length; i += 1) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n  public static int add_even_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n// buggy line:    sum += lst[i];\n    for (int i = 0; i < lst.length; i += 1) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n  public static int add_even_at_even(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 1) {\n        sum += lst[i];\n      }\n    }",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) { sum += lst[i]; }\n    for (int i = 0; i < lst.length; i += 1) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n\n}\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n  public static int add_even_at_even(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 2) {\n    for (int i = 0; i < lst.length; i += 2) {\n",
        "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n// buggy line:    for (int i = 0; i < lst.length; i += 1) {\n    for (int i = 0; i < lst.length; i += 1) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }\n\n}\n"
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;",
      "function range": "17,5-25,5",
      "output": [
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n  }\n\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += new String(chars);\n    }\n    return result;\n}\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        result += String.valueOf(chars);\n    }\n    return result;\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n    }\n    return result;\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n        return result;\n    }\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        for (int i = 0; i < chars.length; i++) {\n            result += chars[i];\n        }\n    }\n    return result;\n  }\n\n}\n",
        "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n// buggy line:        result += new String(chars);\n// buggy line:    }\n// buggy line:    return result;\n        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n            result += c;\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));",
      "function range": "22,5-33,5",
      "output": [
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:        }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:        }\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n            if (lst.get(i).get(j) == x) {\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n// buggy line:        }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n            if (lst.get(i).get(j) == x) {\n                result.add(new GET_ROW().new Tuple(i",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        ",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new GET_ROW().new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:        }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:        }\n            if (lst.get(i).get(j) == x){\n                result.add(new GET_ROW().new Tuple(i, j));\n            }\n        ",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:        }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:        }\n            if (lst.get(i).get(j) == x) {\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n",
        "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n// buggy line:        for (int j = lst.get(i).size() - 1; j >= 0; j -= 1){\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n// buggy line:            if (lst.get(i).get(j) == x){\n// buggy line:                result.add(new GET_ROW().new Tuple(i, j));\n// buggy line:            }\n            if (lst.get(i).get(j) == x)\n                result.add(new GET_ROW().new Tuple(i, j));\n        }\n    "
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];",
      "function range": "19,5-32,5",
      "output": [
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n        }\n        return array;\n    }\n  }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            array[i] = array[array.length - i - 1];\n        }\n        return array;\n    }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n  }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n  }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = array[i];\n        }\n    }\n    return array;\n  }\n}\n",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
        "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n// buggy line:            array[i] = array[array.length - i - 1];\n// buggy line:            array[array.length - i - 1] = array[i];\n            int tmp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = tmp;\n        }\n        return array;\n    }\n  }\n}\n"
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)",
      "function range": "14,5-27,5",
      "output": [
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2)\n            );\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n            d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n\npublic static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            ",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n            d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n            d.charAt(s.indexOf((int) c) + 2 * 2)\n            );\n        }\n    }\n    return sb.toString();\n  }\n\n  public static String decrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(s.index",
        "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(\n// buggy line:                d.charAt(s.indexOf((int) c) + 2 * 2)\n                    d.charAt(s.indexOf((int) c) + 2)\n            );\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();",
      "function range": "15,5-25,5",
      "output": [
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    numbers.add(lst[0]);\n// buggy line:    numbers.add(lst[1]);\n// buggy line:    numbers.add(lst[2]);\n// buggy line:    numbers.add(lst[3]);\n// buggy line:    numbers.add(lst[4]);\n// buggy line:    numbers.add(lst[5]);\n// buggy line:    numbers.add(lst[6]);\n// buggy line:    numbers.add(lst[7]);",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    numbers.add(1);\n// buggy line:    numbers.add(2);\n// buggy line:    numbers.add(3);\n// buggy line:    numbers.add(4);\n// buggy line:    numbers.add(5);\n// buggy line:    numbers.add(6);\n// buggy line:    numbers.add(7);\n// buggy line:    numbers.add(8);\n// buggy line:    numbers.add(9);\n// buggy line:    numbers.add(",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    numbers.add(0);\n// buggy line:    numbers.add(1);\n// buggy line:    numbers.add(2);\n// buggy line:    numbers.add(3);\n// buggy line:    numbers.add(4);\n// buggy line:    numbers.add(5);\n// buggy line:    numbers.add(6);\n// buggy line:    numbers.add(7);\n// buggy line:    numbers.add(8);\n// buggy line:    numbers.add(",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    List<Integer> numbers = new Array",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>(); numbers.add(1); numbers.add(2); numbers.add(3); numbers.add(4); numbers.add(5); numbers.add(6); numbers.add(7); numbers.add(8); numbers.add(9); numbers.add(10); numbers.add(11); numbers.add(12); numbers.add(13); numbers.add(14); numbers.add(15); numbers.add(16); numbers.add(17); numbers.add(18); numbers.add(19); numbers.add(20); numbers.add(21); numbers.",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n//    numbers.add(1);\n//    numbers.add(2);\n//    numbers.add(3);\n//    numbers.add(4);\n//    numbers.add(5);\n//    numbers.add(6);\n//    numbers.add(7);\n//    numbers.add(8);\n//    numbers.add(9);\n//    numbers.add(10);\n//    numbers.add(11);\n//    numbers.add(12);\n//    numbers.add(",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    numbers.add(1);\n// buggy line:    numbers.add(2);\n// buggy line:    numbers.add(3);\n// buggy line:    numbers.add(4);\n// buggy line:    numbers.add(5);\n// buggy line:    numbers.add(6);\n// buggy line:    numbers.add(7);\n// buggy line:    numbers.add(8);\n// buggy line:    numbers.add(10);\n// buggy line:    numbers.add(",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>(); numbers.add(1); numbers.add(2); numbers.add(3); numbers.add(4); numbers.add(5); numbers.add(6); numbers.add(7); numbers.add(8); numbers.add(9); numbers.add(10); numbers.add(11); numbers.add(12); numbers.add(13); numbers.add(14); numbers.add(15); numbers.add(16); numbers.add(17); numbers.add(18); numbers.add(19); numbers.add(20); numbers.add(21);\n//",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    numbers.add(1);\n// buggy line:    numbers.add(2);\n// buggy line:    numbers.add(3);\n// buggy line:    numbers.add(4);\n// buggy line:    numbers.add(5);\n// buggy line:    numbers.add(6);\n// buggy line:    numbers.add(7);\n// buggy line:    numbers.add(8);\n// buggy line:    numbers.add(9);\n// buggy line:    return numbers.get(",
        "public static Integer next_smallest(int[] lst) {\n// buggy line:    List<Integer> numbers = new ArrayList<Integer>();\n// buggy line:    numbers.add(1);\n// buggy line:    numbers.add(2);\n// buggy line:    numbers.add(3);\n// buggy line:    numbers.add(4);\n// buggy line:    numbers.add(5);\n// buggy line:    numbers.add(6);\n// buggy line:    numbers.add(7);\n// buggy line:    numbers.add(8);\n// buggy line:    numbers.add(9);\n// buggy line:    numbers.add(-"
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))",
      "function range": "14,5-22,5",
      "output": [
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0,",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n      if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n      if (sentence.length() >= 3 && sentence.subSequence(0, 3).equals(\"I \")) result++;\n      if (sentence.length() >= 4 && sentence.subSequence(0, 4).equals(\"I \")) result++;\n      if (sentence.length() >= 5 && sentence.subSequence(0, 5).equals(\"I \")) result++;\n      if (sentence",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n      if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n      if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"O \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"O \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0,",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 3 && sentence.subSequence(0,",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \"))",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0",
        "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n// buggy line:        if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n      if (sentence.length() >= 2 && sentence.subSequence(0, 2).equals(\"I \")) result++;\n      if (sentence.length() >= 3 && sentence.subSequence(0, 3).equals(\"I \")) result++;\n      if (sentence.length() >= 4 && sentence.subSequence(0, 4).equals(\"I \")) result++;\n      if (sentence.length() >= 5 && sentence.subSequence(0, 5).equals(\"I \")) result++;\n    }\n    return"
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y)",
      "function range": "17,5-23,5",
      "output": [
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n// buggy line:        return false;\n",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    }\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    } else {\n// buggy line:        return false;\n// buggy line:    }\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    }\n// buggy line:    return false;\n// buggy line:    }\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == y) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x +",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    } else {\n// buggy line:        return false;\n// buggy line:    }\n// buggy line:    } else {\n// buggy line:    return false;\n// buggy line:    }\n// buggy line:    } else {\n// buggy line:    return false;\n// buggy line:    }\n// buggy line:    } else {\n// buggy line:    return false;\n// buggy line:    }\n// buggy line:    } else {\n// buggy line:    return false;",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) {\n// buggy line:        return true;\n// buggy line:    }\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n// buggy line:    return false;\n\n//",
        "public static boolean any_int(double x, double y, double z) {\n// buggy line:    if ((int)x == x && (int)y == y) {\n// buggy line:        if (x + y == z || x + z == y) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + z == y || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x + y == z || x + z == z) return true;\n// buggy line:        if (x +"
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {",
      "function range": "16,5-32,5",
      "output": [
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n      sb.append(c);\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n// buggy line:        if (Character.isUpperCase(c)) {\n// buggy line:        }\n      sb.append(c);",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isLowerCase(c)) {\n        c = Character.toUpperCase(c);\n      }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n      sb.append(c);\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n      char c = message.charAt(i);\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n      sb.append(c);\n    }\n    return sb.",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            sb.append(c);\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n// buggy line:        if (Character.isLowerCase(c)) {\n// buggy line:            c = Character.toUpperCase(c);\n// buggy line:        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }\n\n  public static String decode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n      if (Character.isUpperCase(c)) {\n        c = Character.toLowerCase(c);\n      }\n// buggy line:        if (Character.isLowerCase(c))"
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;",
      "function range": "22,5-35,5",
      "output": [
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += (int) c;\n    }\n    return result;\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += (int) c;\n    }\n    return result;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n  }\n\n  private static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n      if (n % i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n  }\n\n  public static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n      if (n % i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n  }\n\n  private static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n      if (n % i == 0)\n        return false;\n    }\n    return true;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n  }\n\n  public static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n      if (n % i == 0)\n        return false;\n    }\n    return true;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n  }\n\n  public static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n      if (n % i == 0) return false;\n    }\n    return true;\n  }\n}\n",
        "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n// buggy line:        result += (int) c;\n        result += c;\n    }\n    return result;\n}\n\npublic static boolean is_prime(int n) {\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") && !str_key.toUpperCase().equals(str_key)) {",
      "function range": "16,5-43,5",
      "output": [
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:            }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:            }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"mixed\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:            }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"lower\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            ",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n            } else {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"start\");\n    }\n}\n",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:            }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n            } else if (state.equals(\"lower\")) {\n                if (str_key.toLowerCase().",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:            }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:                state = \"lower\";\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:                state = \"upper\";\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:                state = \"lower\";\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.to",
        "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"upper\") &&!str_key.toUpperCase().equals(str_key)) {\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toLowerCase().equals(str_key)) {\n// buggy line:            }\n            } else if (state.equals(\"upper\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }\n// buggy line:            } else if (state.equals(\"lower\") &&!str_key.toUpper"
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;",
      "function range": "17,5-30,5",
      "output": [
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n        if (is_prime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            } else {\n// buggy line:                primes.add(i);\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            } else {\n// buggy line:                primes.add",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            }\n    }\n    return primes;\n  }\n\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            } else {\n// buggy line:                primes.add(i);\n// buggy line:            }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:        }\n// buggy line:        if (is_prime) {\n// buggy line:            primes.add(i);\n// buggy line:        }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            } else {\n// buggy line:                primes.add(j);\n// buggy line:            }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(j);\n// buggy line:            } else {\n// buggy line:                primes.add(i);\n// buggy line:            }\n    }\n    return primes;\n  }\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            } else {\n// buggy line:                primes.add(i);\n// buggy line:            }\n    }\n    return primes;\n  }\n\n}\n",
        "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n// buggy line:        boolean is_prime = false;\n// buggy line:        for (int j = 2; j < i; j += 1){\n// buggy line:            if (i % j == 0) {\n// buggy line:                is_prime = false;\n// buggy line:            } else {\n// buggy line:                is_prime = true;\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(i);\n// buggy line:            } else {\n// buggy line:                primes.add(i);\n// buggy line:            }\n// buggy line:            if (is_prime) {\n// buggy line:                primes.add(j);\n// buggy line:            } else {\n// buggy line:                primes.add"
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);",
      "function range": "13,5-15,5",
      "output": [
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mul(int a, int b) {\n    return a * b;\n  }\n\n  public static int div(int a, int b) {\n    return a / b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int mod(int a, int b) {\n    return a % b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mul(int a, int b) {\n    return a * b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int subtract(int a, int b) {\n    return a - b;\n  }\n\n  public static int multiply(int a, int b) {\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mult(int a, int b) {\n    return a * b;\n  }\n\n  public static int div(int a, int b) {\n    return a / b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mul(int a, int b) {\n    return a * b;\n  }\n\n  public static int mod(int a, int b) {\n    return a % b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int modulo(int a, int b) {\n    return a % b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mul(int a, int b) {\n    return a * b;",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mod(int a, int b) {\n    return a % b;\n  }\n\n  public static int pow(int a, int b) {\n    return a * b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int mod(int a, int b) {\n    return a % b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int times(int a, int b) {\n    return a * b;\n",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mul(int a, int b) {\n    return a * b;\n  }\n\n  public static int div(int a, int b) {\n    if (b == 0)",
        "public static int multiply(int a, int b) {\n// buggy line:    return (a % 10) * (b % 10);\n    return a * b;\n  }\n\n  public static int divide(int a, int b) {\n    return a / b;\n  }\n\n  public static int add(int a, int b) {\n    return a + b;\n  }\n\n  public static int sub(int a, int b) {\n    return a - b;\n  }\n\n  public static int mul(int a, int b) {\n    return a * b;\n  }\n\n  public static int div(int a, int b) {\n    return (a / b);"
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')",
      "function range": "11,5-19,5",
      "output": [
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == '",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u')\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == '",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'A' || c == 'e' || c == 'I' || c",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == '",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            count++;\n        }\n    }\n    return count;\n  }\n\n  public static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == '",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'a' || c == 'e' || c == 'i",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n}\n\npublic static int count_lower(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c == 'A' || c == 'e' || c == 'I' || c ==",
        "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n// buggy line:        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n        if (c == 'A' || c == 'e' || c == 'I' || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;\n  }\n}\n"
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0 ? (int)Math.floor(num) : (int)Math.ceil(num);",
      "function range": "20,5-35,5",
      "output": [
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (num > 0)\n        result = (int)Math.floor(num);\n    else\n        result = (int)Math.ceil(num);\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (num > 0)\n        result = (int)Math.floor(num);\n    else\n        result = (int)Math.ceil(num);\n    return result;\n  }\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (num > 0) {\n        result = (int)Math.floor(num);\n    } else {\n        result = (int)Math.ceil(num);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '.')\n            value = value.substring(",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '.')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == 'e')\n            value = value.substring(",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    }\n    return result;\n}\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (num > 0) {\n        result = (int)Math.floor(num);\n    } else {\n        result = (int)Math.ceil(num);\n    }\n    return result;\n  }\n}\n",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        result = (int)Math.floor(num);\n    } else {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        result = (int)Math.ceil",
        "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n// buggy line:    if (value.substring(value.length() - 2).equals(\".5\")) {\n// buggy line:        result = num > 0? (int)Math.floor(num) : (int)Math.ceil(num);\n    if (value.substring(value.length() - 2).equals(\".5\")) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '.')\n            value = value.substring(0, value.length() - 1);\n        while (value.charAt(value.length() - 1) == '.')\n            value = value.substring("
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);",
      "function range": "20,2-26,2",
      "output": [
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 *",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i + 1);\n\t\tpile.add(n - 2 * i + 2);\n\t\tpile.add(n - 2 * i + 3);\n\t\tpile.add(n - 2 * i + 4);\n\t\tpile.add(n - 2 * i + 5);\n\t\tpile.add(n - 2 * i + 6);\n\t\tpile.add(n - 2 * i + 7);\n\t\tpile.add(n - 2",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i + 1);\n\t\tpile.add(n - 2 * i + 2);\n\t\tpile.add(n - 2 * i + 3);\n\t\tpile.add(n - 2 * i + 4);\n\t\tpile.add(n - 2 * i + 5);\n\t\tpile.add(n - 2 * i + 6);\n\t\tpile.add(n - 2 * i + 7);\n\t}\n\treturn pile;\n}",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i + 1);\n\t\tpile.add(n - 2 * i + 1);\n\t\tpile.add(n - 2 * i + 2);\n\t\tpile.add(n - 2 * i + 2);\n\t\tpile.add(n - 2 * i + 3);\n\t\tpile.add(n - 2 * i + 3);\n\t\tpile.add(n - 2 * i + 4);\n\t\tpile.add(n - 2",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n\n",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n// buggy line:\t\tpile.add(",
        "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n// buggy line:\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t\tpile.add(n - 2 * i);\n\t}\n\treturn pile;\n}\n"
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";",
      "function range": "15,2-30,2",
      "output": [
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tStringTokenizer st = new StringTokenizer(s);\n\twhile (st.hasMoreTokens()) {\n\t    result.add(st.nextToken());\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(s.substring(i, i + 1));\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t    char c = s.charAt(i);\n\t    if (Character.isLetterOrDigit(c)) {\n\t\tresult.add(c);\n\t    }\n\t}\n\treturn result;\n    }\n}\n",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t} else {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}\n\npublic static ArrayList<String> words(String s) {\n\tArrayList<String> result = new ArrayList<String>();",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(0, i));\n\t\t} else {\n\t\t\tresult.add(s.substring(0, i));\n\t\t}\n\t}\n\tresult.add(s.substring(0, s.length()));\n\treturn result;\n}\n\npublic static ArrayList<String> words(String s) {\n\t",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(0, i));\n\t\t} else {\n\t\t\tresult.add(s.substring(0, i));\n\t\t}\n\t}\n\tresult.add(s.substring(0, s.length()));\n\treturn result;\n}\n\npublic static ArrayList<Integer> words_ints(String s) {",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(0, i));\n\t\t} else {\n\t\t\tresult.add(s.substring(0, i));\n\t\t\tresult.add(c);\n\t\t}\n\t}\n\tresult.add(s);\n\treturn result;\n}\n\npublic static ArrayList<String> words(String s) {\n\tArrayList",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(0, i));\n\t\t} else {\n\t\t\tresult.add(s.substring(0, i));\n\t\t}\n\t}\n\tresult.add(s.substring(0, s.length()));\n\treturn result;\n}\n\npublic static ArrayList<String> words_strings(String s, int",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(0, i));\n\t\t} else {\n\t\t\tresult.add(s.substring(0, i));\n\t\t}\n\t}\n\tresult.add(s.substring(0, s.length()));\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\tArrayList<",
        "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n// buggy line:\tString s_list = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tchar c = s.charAt(i);\n\t\tif (Character.isLetterOrDigit(c)) {\n\t\t\tresult.add(s.substring(0, i));\n\t\t} else {\n\t\t\tresult.add(s.substring(0, i));\n\t\t}\n\t}\n\tresult.add(s.substring(0, s.length()));\n\treturn result;\n}\n\npublic static void main(String[] args) {\n\tSystem.out"
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;",
      "function range": "14,5-19,5",
      "output": [
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x < y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x > y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;\n// buggy line:    if(x == y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(x > y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x >= y) return -1;\n// buggy line:    if(y >= x) return -1;\n// buggy line:    if(x <= y) return -1;\n// buggy line:    if(y <= x) return -1;\n// buggy line:    if(x == y) return -1;",
        "public static int choose_num(int x, int y) {\n// buggy line:    if(x < y) return -1;\n// buggy line:    if(y < x) return -1;\n// buggy line:    if(x > y) return -1;\n// buggy line:    if(y > x) return -1;\n// buggy line:    if(x >= y) return -1;\n// buggy line:    if(y >= x) return -1;\n// buggy line:    if(x <= y) return -1;\n// buggy line:    if(y <= x) return -1;\n// buggy line:    if(x < y) return -1;"
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);",
      "function range": "15,5-30,5",
      "output": [
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = Math.floor(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n}\n",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static String rounded_max(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m +",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n\n  public static String rounded_max(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static String rounded_max(int n, int m) {\n    if(m < n) return \"0\";\n    int summation = 0;\n    for(int i = n; i < m +",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n}\n\npublic static String rounded_max(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = m + 1; i <",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n\n  public static String rounded_max(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = m + 1; i",
        "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n// buggy line:        avg_rounded = (int) Math.ceil(avg);\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n// buggy line:        avg_rounded = (int) Math.floor(avg);\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n  }\n\n  public static String rounded_max(int n, int m) {\n    if(m < n) return \"0\";\n    int summation = 0;\n    for(int i = n; i < m"
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2) != 0) {\n// buggy line:                all_odd = true;",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n    }\n    return res;\n    }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num = num / 10;\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num = num / 10;\n        }\n    }\n    return res;\n    }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n    }\n    return res;\n    }\n}",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n// buggy line:            }\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(curr_digit);\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(num);\n        }\n    }\n    return res;\n  }\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n// buggy line:            }\n        }\n    }\n    return res;\n  }\n\n}\n",
        "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n// buggy line:            if((curr_digit % 2)!= 0) {\n// buggy line:                all_odd = true;\n            if(all_odd) {\n                res.add(curr_digit);\n                all_odd = false;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(curr_digit);\n        }\n    }\n    return res;\n    }\n}\n"
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num) != \"\") {",
      "function range": "31,5-50,5",
      "output": [
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") { result.add(digit_map.get(num)); }\n        result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n      if(digit_map.get(num)!= null) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") { result.add(digit_map.get(num)); }\n        if(digit_map.get(num)!= null) { result.add(digit_map.get(num)); }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n// buggy line:        result.add(digit_map.get(num));\n// buggy line:        }\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n// buggy line:        result.add(digit_map.get(num));\n// buggy line:        }\n        result.add(digit_map.get(num));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n        if(digit_map.get(num)!= null) {\n          result.add(digit_map.get(num));\n        }\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n// buggy line:        result.add(digit_map.get(num));\n// buggy line:        }\n      if(digit_map.get(num)!= null) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") { result.add(digit_map.get(num)); }\n        if(digit_map.get(num)!= null) { result.add(digit_map.get(num)); }\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n// buggy line:        result.add(digit_map.get(num));\n// buggy line:        }\n      if(digit_map.get(num)!= \"\") {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n// buggy line:        if(digit_map.get(num)!= \"\") {\n// buggy line:        result.add(digit_map.get(num));\n// buggy line:        }\n        if(digit_map.get(num)!= null) {\n            result.add(digit_map.get(num));\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;",
      "function range": "16,5-30,5",
      "output": [
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n}\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n  public static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n      if((i % 2) == 0) {\n        int x = 1;\n        for(int j = 1; j <= i; j++) x *= j;",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n  public static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n      int x = 1;\n      for(int j = 1; j <= i; j++) x *= j;\n      ret.add(x);\n    }\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n  public static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n      if(i % 2 == 0) {\n        int x = 1;\n        for(int j = 1; j <= i; j++) x *= j;\n",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n  public static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;",
        "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n// buggy line:            for(int j = 1; j <= i; i++) x -= j;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n  }\n\n  public static ArrayList<Integer> factorial2(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n      if((i % 3) == 0) {\n        int x = 1;\n        for(int j = 1; j <= i; j++) x *= j;"
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;",
      "function range": "39,5-47,5",
      "output": [
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) result.add(i);\n// buggy line:        else if((",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> palindromes = new ArrayList<Integer>();\n    for(int i = 0; i < even_palindrome_count; i++) {\n        palindromes.add(i);\n    }\n    for(int i = 0; i < odd_palind",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> palindromes = new ArrayList<Integer>();\n    for(int i = 1; i <= n; i++) {\n        if(odd_palindrome_count > even_palindrome_count) {\n            palindromes.add(i);\n        }",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    if(odd_palindrome_count > even_palindrome_count) {\n      result.add(n);\n    } else if(odd_palindrome_count == even_palindrome_count) {\n      ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> palindromes = new ArrayList<Integer>();\n    for(int i = 0; i < even_palindrome_count; i++) {\n        palindromes.add(i);\n    }\n    for(int i = even_palindrome_count;",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    if(odd_palindrome_count > even_palindrome_count) {\n        result.add(n);\n    } else if(odd_palindrome_count == even_palindrome_count) {\n        ",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for(int i = 1; i <= n; i++) {\n        if(odd_palindrome_count > even_palindrome_count) {\n            result.add(i);\n        }\n    }\n    return",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    if(odd_palindrome_count > even_palindrome_count) {\n      result.add(n);\n    }\n    else if(odd_palindrome_count == even_palindrome_count) {",
        "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n// buggy line:        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count--;\n// buggy line:        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count--;\n        if((i % 2) == 0 && is_palindrome(i)) odd_palindrome_count++;\n        else if((i % 2) == 1 && is_palindrome(i)) even_palindrome_count++;\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    for(int i = 1; i <= n; i++) {\n        if(odd_palindrome_count > even_palindrome_count) {\n            result.add(i);\n        } else if(odd_pal"
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;",
      "function range": "6,5-20,5",
      "output": [
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        count++;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        count += neg? -num : num;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num *= -1;\n        count++;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        count += neg? -num : num;\n    }\n    return count;\n  }\n\n  public static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        count += neg? -num : num;\n    }\n    return count;\n  }\n\n  public static int count_nums(long[] arr) {\n    int count = 0;\n    for(int",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num = -num;\n        count += num;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num *= -1;\n        count++;\n    }\n    return count;\n  }\n\n  public static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num *= -1;\n        count++;\n    }\n    return count;\n  }\n\n  public static int count_nums(long[] arr) {\n    ",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num = -num;\n        count++;\n    }\n    return count;\n  }\n\n  public static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num = -num;\n        count++;\n    }\n    return count;\n  }\n\n  public static int count_nums(long[] arr) {\n    int count",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num *= -1;\n        count += num;\n    }\n    return count;\n  }\n}\n",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num = -num;\n        count += num;\n    }\n    return count;\n  }\n\n  public static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        if(neg) num = -num;\n        count += num;\n    }\n    return count;\n  }\n\n  public static int count_nums(long[] arr) {",
        "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        count += neg? -num : num;\n    }\n    return count;\n  }\n\n  public static int count_nums(int[] arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n// buggy line:        if(neg) num *= 1;\n        count += neg? -num : num;\n    }\n    return count;\n  }\n\n  public static int count_nums(long[] arr) {\n    int count = 0;\n    for(long"
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);",
      "function range": "7,5-29,5",
      "output": [
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    int max_value = sorted_arr.get(sorted_arr.size() - 1);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      }\n      if(sorted_arr.get(i) > max_value) {\n        max_value = sorted_arr.get(i);\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    int max_value = sorted_arr.get(sorted_arr.size() - 1);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      } else if(sorted_arr.get(i) > max_value) {\n        max_value = sorted_arr.get(i);\n      ",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n// buggy line:    int max_value = sorted_arr.get(sorted_arr.size() - 2);\n    int min_value = sorted_arr.get(0);\n    int max_value = sorted_arr.get(sorted_arr.size() - 1);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      }\n      if(sorted_",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        sorted_arr.set(i, sorted_arr.get(i - 1));\n        sorted_arr.set(i - 1, sorted_arr.get(i));\n        sorted_arr.set(i, sorted_arr.get(i + 1));\n        sorted_arr.set(i +",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n// buggy line:    int max_value = sorted_arr.get(sorted_arr.size() - 2);\n    int min_value = sorted_arr.get(0);\n    int max_value = sorted_arr.get(sorted_arr.size() - 1);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      } else if(sorted_arr",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      }\n    }\n    return sorted_arr.get(sorted_arr.size() - 1) == min_value;\n  }\n}\n",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      }\n    }\n    return move_one_ball(sorted_arr);\n  }\n\n  public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        sorted_arr.set(i, sorted_arr.get(i - 1));\n        sorted_arr.set(i - 1, sorted_arr.get(i));\n        sorted_arr.set(i, sorted_arr.get(i - 1));\n      }\n    }\n    return true;",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        min_value = sorted_arr.get(i);\n      }\n    }\n    for(int i = 0; i < sorted_arr.size() - 1; i++) {\n      if(sorted_arr.get(i) == sorted_arr.get(i + 1)) {\n        sorted_arr",
        "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n// buggy line:    int min_value = sorted_arr.get(sorted_arr.size() - 1);\n    int min_value = sorted_arr.get(0);\n    for(int i = 1; i < sorted_arr.size(); i++) {\n      if(sorted_arr.get(i) < min_value) {\n        sorted_arr.set(i, sorted_arr.get(i - 1));\n        sorted_arr.set(i - 1, sorted_arr.get(i));\n        sorted_arr.set(i, min_value);\n      }\n    }\n    return true;\n  }\n\n  public"
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;",
      "function range": "20,5-32,5",
      "output": [
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst2.size(); i++) {\n      if(lst2.get(i) % 2 == 1) even++;\n      if(lst2.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst2.size(); i++) {\n      if(lst2.get(i) % 2 == 1) odd++;\n      if(lst2.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst2.get(i) % 2 == 1) even++;\n      if(lst2.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst2.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) odd++;\n      if(lst1.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst2.size(); i++) {\n      if(lst2.get(i) % 2 == 1) even--;\n      if(lst2.get(",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i : lst1) {\n      if((i % 2) == 1) even++;\n      if((i % 2) == 0) odd++;\n    }\n    return String.valueOf(odd + even);\n  }\n}\n",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst2.size(); i++) {\n      if(lst2.get(i) % 2 == 0) even++;\n      if(lst2.get(i",
        "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;\n// buggy line:    for(int i : lst2) {\n// buggy line:        if((i % 2) == 1) even++;\n// buggy line:        if((i % 2) == 0) odd++;\n    for(int i = 0; i < lst1.size(); i++) {\n      if(lst1.get(i) % 2 == 1) even++;\n      if(lst1.get(i) % 2 == 0) odd++;\n    }\n    for(int i = 0; i < lst2.size(); i++) {\n      if(lst1.get(i) % 2 == 1) odd++;\n      if(lst1.get(i"
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {",
      "function range": "19,5-40,5",
      "output": [
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n        if(count_letter[i] > most_count) { most_count = count_letter[i]; }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n        if(count_letter[i] > most_count) { most_count = count_letter[i]; }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], most_count);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], most_count);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:        most_count = count_letter[i];\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) { most_count = count_letter[i]; }\n        if(count_letter[i] < most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:        most_count = count_letter[i];\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n\n}\n",
        "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n// buggy line:        if(count_letter[i] < most_count) {\n// buggy line:        most_count = count_letter[i];\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        res.put(list_letters[i], count_letter[i]);\n    }\n    return res;\n  }\n\n  public static HashMap<Character, Integer> histogram2(String s) {\n    HashMap<Character, Integer> res = new HashMap"
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i)) != -1) {",
      "function range": "17,5-32,5",
      "output": [
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n      if(c.indexOf(s.charAt(i))!= -1) {\n        new_s += s.charAt(i);\n      }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += s.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s = new_s + s.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.charAt(i) == s.charAt(i)) {\n            new_s += s.charAt(i);\n        } else {\n            new_s += c.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s = new_s + s.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += s.charAt(i);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.charAt(i) == s.charAt(i)) {\n            new_s += s.charAt(i);\n        } else {\n            new_s += c.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += s.charAt(i);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n\n}\n",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.charAt(i) == s.charAt(i)) {\n            new_s += s.charAt(i);\n        } else {\n            new_s += c.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {",
        "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n// buggy line:        if(c.indexOf(s.charAt(i))!= -1) {\n        if(c.indexOf(s.charAt(i))!= -1) {\n            new_s += s.charAt(i);\n        } else {\n            new_s += s.charAt(i);\n        }\n    }\n    return new ArrayList<Object>(Arrays.asList(new_s.toCharArray()));\n  }\n\n  public static ArrayList<Object> reverse_delete(String s) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++)"
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;",
      "function range": "19,5-32,5",
      "output": [
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s.substring(0, n));\n    }\n    return result;\n  }\n\n  public static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 1) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s.substring(0, n));\n    }\n    return result;\n  }\n\n  public static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n++;\n            }\n// buggy line:            } else if(digit % 2 == 1) {\n// buggy line:                n++;\n            if(digit % 2 == 1) {\n                n++;\n            }\n// buggy line:            } else if(digit % 2 == 2) {\n// buggy line:                n++;\n            if(digit % 2 == 2) {\n                n++;\n            }\n// buggy line:            } else if(digit % 2 == 3) {\n// buggy line:                n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s.substring(0, n));\n    }\n    return result;\n  }\n\n  public static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n      int n = 0;\n      for(int i = 0; i < s.length(); i++) {\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s);\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 1) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s.substring(0, n));\n    }\n    return result;\n  }\n\n  public static ArrayList<String> even_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n      int n = 0;\n      for(int i = 0; i < s.length(); i++) {\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s.substring(0, n));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 1) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s);\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 1) {\n                n++;\n            }\n// buggy line:            }\n        }\n        result.add(s.substring(0, n));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n// buggy line:            if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n++;\n            }\n// buggy line:            } else if(digit % 2 == 1) {\n// buggy line:                n++;\n            if(digit % 2 == 1) {\n                n++;\n            }\n// buggy line:            } else if(digit % 2 == 0) {\n// buggy line:                n--;\n            if(digit % 2 == 0) {\n                n--;\n            }\n// buggy line:            } else if(digit % 2 == 1) {\n// buggy line:"
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;",
      "function range": "14,5-32,5",
      "output": [
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    ",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n}\n\npublic static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s < max_sum) {\n            max_sum = s;\n        }\n    ",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if (s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if (s > max_sum) {\n            max_sum = s;\n        }\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n          max_sum = s;\n        }\n    }\n    return max",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s > max_sum) {\n            max_sum = s;\n        }\n    }\n    return max_sum;\n  }\n\n  public static long max_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        if(s < max_sum) {\n            max_sum = s;\n        }\n",
        "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n// buggy line:        s += num;\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }\n}\n"
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];",
      "function range": "38,5-48,5",
      "output": [
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid.length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = row_capacity;\n            break;\n        }\n    }\n    return result;\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\npublic static int max_fill(int[][] grid) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n// buggy line:        }\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\npublic static int max_fill(int[][] grid) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        for(int j = 0; j < grid[j].length",
        "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        for(int j = 0; j < grid[j].length; j++) {\n// buggy line:            row_capacity += grid[j][i];\n        for(int j = 0; j < grid[j].length; j++) {\n            row_capacity += grid[j][i];\n        }\n        if(row_capacity > bucket_capacity) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n  }\n\n  public static int max_fill(int[][] grid) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n// buggy line:        "
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }",
      "function range": "31,10-42,10",
      "output": [
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   return num_ones_o1 - num_ones_o2;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   if(num_ones_o1 > num_ones_o2) return 1;\n   return 0;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   if(num_ones_o1 > num_ones_o2) return 1;\n   if(num_ones_o1 < num_ones_o2) return -1;\n   return 0;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   return num_ones_o1 - num_ones_o2;\n}\n\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   return num_ones_o1 < num_ones_o2? -1 : 1;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   if(num_ones_o1 < num_ones_o2) return -1;\n   if(num_ones_o1 > num_ones_o2) return 1;\n   return 0;\n}\n\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   }\n   if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   return 0;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   if(num_ones_o1 < num_ones_o2) {\n     return -1;\n   }\n   if(num_ones_o1 > num_ones_o2) {\n     return 1;\n   }\n   return 0;\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return 0;\n   }\n}\n}\n",
        "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n// buggy line:      if(o1 == o2) return 1;\n// buggy line:      if(o1 < o2) return 0;\n// buggy line:      if(o1 > o2) return -1;\n// buggy line:   }\n   else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return 0;\n   }\n}\n}\n"
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};",
      "function range": "20,5-39,5",
      "output": [
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(char c : words[i].toCharArray()) {\n            if(Character.isLetter(c)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants > n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(j)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    ",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants == n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants > n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n",
        "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n// buggy line:        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for(int j = 0; j < vowels.length; j++) {\n            if(vowels[j] == words[i].charAt(0)) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n"
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {",
      "function range": "23,5-34,5",
      "output": [
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) return \"\";\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) return word.charAt(i);\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.charAt(i);\n      }\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i + 1);\n      }\n    }\n    return word;\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) return \"\";\n      vowels.add(c);\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) return c;\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      char c = word.charAt(i);\n      if(vowels.contains(c)) {\n        return c;\n      }\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i);\n      }\n    }\n    return word;\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i + 1);\n      }\n    }\n    return \"\";\n  }\n}\n",
        "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n// buggy line:    for(int i = word.length() - 2; i >= 0; i--) {\n    for(int i = word.length() - 1; i >= 0; i--) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i + 1);\n      }\n    }\n    return word;\n  }\n\n}\n"
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {",
      "function range": "32,5-39,5",
      "output": [
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - k; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--)",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--)",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) { result.add(arr.get(i)); }\n    for(int i = 0; i < arr.size() - k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() -",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - k; i >= 0; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - k; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - k; i >= 0; i--) {\n      if(arr.get(i) > arr.get(i + k)) {\n        result.add(arr.get(i));\n      }\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) { result.add(arr.get(i)); }\n    for(int i = arr.size() - k; i >= 0; i--) { result.add(arr.get(i)); }\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) {\n    for(int i = arr.size() - k; i >= arr.size() - k; i--) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> minimum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - k; i >= arr.size() - k; i--)",
        "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n// buggy line:    for(int i = arr.size() - 1; i >= arr.size() - k; i--) { result.add(arr.get(i)); }\n    for(int i = 0; i < arr.size() - k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {",
      "function range": "16,5-24,5",
      "output": [
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        result += lst.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n      if(lst.get(i) % 2 == 0) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n      if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        result += lst.get(i);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n      if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        result++;\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n      if(lst.get(i) % 2 == 0) {\n        result += lst.get(i);\n      }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(lst.get(i) % 2 == 0) {\n            result++;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n            result++;\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        if(lst.get(i) % 2 == 0) {\n            result += lst.get(i);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n// buggy line:        if((i % 2) == 1 && (lst.get(i) % 2) == 0) {\n        result += lst.get(i);\n// buggy line:        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);",
      "function range": "21,5-29,5",
      "output": [
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n      result += arr.get(i);\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        result += arr.get(i);",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result -= arr.get(i);",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        if(Integer.toString(arr.get(i)).length() >= 2) {\n            result -= arr.get(i);\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n        result -= arr.get(i);",
        "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result -= arr.get(i);\n// buggy line:        }\n        result += arr.get(i);\n    }\n    return result;\n  }\n\n  public static int remove_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n// buggy line:        if(Integer.toString(arr.get(i)).length() >= 2) {\n// buggy line:            result += arr.get(i);\n// buggy line:        }\n      result += arr.get(i);"
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;",
      "function range": "24,5-34,5",
      "output": [
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        if((n % 2) == 1) n /= 2",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n    while(n >= 1) {\n      result.add(n);\n      n /= 2;\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 0) n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 0) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 0) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:    }\n    while(n >= 1) {\n      result.add(n);\n      n /= 2;\n    }\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 0) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) result.add(n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n    return result;\n  }\n}\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        n /= 2;\n// buggy line:        result.add(n);\n\n",
        "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n// buggy line:    while(n >= 1) {\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n// buggy line:        if((n % 2) == 1) n /= 2;\n// buggy line:        result.add(n);\n    return result;\n  }\n\n  public static ArrayList<Integer> get_even"
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month != month_check1[i] && !(day < 1 || day > 31)) return false;",
      "function range": "25,5-50,5",
      "output": [
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        int[]",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        return true",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        int[]",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        return true",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        if(",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        if(",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        return true;\n",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        if(day < 1 || day > 31) return false;\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        int year",
        "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {\n// buggy line:            if(month!= month_check1[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check1[i]) return false;\n        }\n        int[] month_check2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n        for(int i = 0; i < month_check2.length; i++) {\n// buggy line:            if(month!= month_check2[i] &&!(day < 1 || day > 31)) return false;\n            if(month!= month_check2[i]) return false;\n        }\n        int[] month_"
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;",
      "function range": "14,5-28,5",
      "output": [
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n            if(Character.isDigit(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n            if(Character.isDigit(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isDigit(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy line:            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy line:            if(Character.isDigit(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy line:            if(Character.isLetter(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy line:            if(Character.isWhitespace(curr) && ((curr - 'a') % 2) ==",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(cur",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n            if(Character.isLetter(curr",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy line:            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n// buggy line:            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n// buggy line:            if(Character.isLetter(curr) && ((curr - 'a') % 2) == 0) count++;\n// buggy line:            if(Character.isWhitespace(curr) && ((curr -'') % 2) ==",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n            if(curr =='') count",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n        }\n        return new String[count];",
        "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n// buggy line:            if(Character.isUpperCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isUpperCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'a') % 2) == 0) count++;\n            if(Character.isLowerCase(curr) && ((curr - 'A') % 2) == 0) count++;\n            if(Character.isDigit(curr) && ((curr - '0') % 2) == 0) count++;\n        }\n        return new String[]{txt"
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;",
      "function range": "22,5-37,5",
      "output": [
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] < lst[i + 1]) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(count_num.get(lst[i]) > count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(count_num.get(lst[i]) < count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(count_num.get(lst[i]) > count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(count_num.get(lst[i]) > count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n// buggy line:        if(lst[i] <= lst[i + 1]) return false;\n        if(count_num.get(lst[i]) < count_num.get(lst[i + 1])) return false;\n    }\n    return true;\n  }\n\n}\n"
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);",
      "function range": "33,5-39,5",
      "output": [
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int g = Math.min(interval1[6], interval2[6]);\n// buggy line:    int h",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int m = Math.min(interval1[2], interval2[2]);\n// buggy line:    int n = Math.max(interval1[3], interval2[3]);\n// buggy line:    int a = Math.min(interval1[4], interval2[4]);\n// buggy line:    int b = Math.max(interval1[5], interval2[5]);\n// buggy line:    int c = Math.min(interval1[6], interval2[6]);\n// buggy line:    int d",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int g = Math.min(interval1[6], interval2[6]);\n// buggy line:    int b",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int g = Math.min(interval1[6], interval2[6]);\n// buggy line:    int a",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int g = Math.max(interval1[6], interval2[6]);\n// buggy line:    int h",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int m = Math.min(interval1[2], interval2[2]);\n// buggy line:    int n = Math.max(interval1[3], interval2[3]);\n// buggy line:    int i = Math.min(interval1[4], interval2[4]);\n// buggy line:    int j = Math.max(interval1[5], interval2[5]);\n// buggy line:    int k = Math.min(interval1[6], interval2[6]);\n// buggy line:    int l",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int g = Math.min(interval1[6], interval2[6]);\n// buggy line:    int d",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int g = Math.min(interval1[6], interval2[6]);\n// buggy line:    int i",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int e = Math.min(interval1[4], interval2[4]);\n// buggy line:    int f = Math.max(interval1[5], interval2[5]);\n// buggy line:    int a = Math.min(interval1[6], interval2[6]);\n// buggy line:    int b",
        "public static String intersection(int[] interval1, int[] interval2) {\n// buggy line:    int l = Math.min(interval1[0], interval2[0]);\n// buggy line:    int r = Math.max(interval1[1], interval2[1]);\n// buggy line:    int c = Math.min(interval1[2], interval2[2]);\n// buggy line:    int d = Math.max(interval1[3], interval2[3]);\n// buggy line:    int t = Math.min(interval1[4], interval2[4]);\n// buggy line:    int u = Math.max(interval1[5], interval2[5]);\n// buggy line:    int v = Math.min(interval1[6], interval2[6]);\n// buggy line:    int w"
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;",
      "function range": "16,5-28,5",
      "output": [
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else prod *= -1;\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n    }\n    return prod;\n  }\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else prod *= -1;\n    }\n    return prod;\n  }\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n    }\n    return prod;\n  }\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n    }\n    return prod;\n}",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n        else if(arr[i] < 0) prod *= -1;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n// buggy line:        else if(arr[i] < 0) prod *= -1;\n        else prod *= arr[i];\n    }\n    return prod;\n}\n",
        "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n// buggy line:        else if(arr[i] > 0) prod *= 1;\n// buggy line:        else if(arr[i] < 0) prod *= -1;\n        else prod *= arr[i];\n    }\n    return prod;\n  }\n}\n"
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i != 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j != 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i != n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j != n + 1) val = Math.max(val, grid[i][j - 1]);",
      "function range": "35,5-54,5",
      "output": [
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i - 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0)",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(i!= 0)",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j + 1]);\n                return val;\n            }\n        }\n",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j + 1]);\n                val = Math.max(val, grid[",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j + 1]);\n                if(grid[i][j] == 1",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j + 1]);\n                val = Math.min(val, grid[",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i - 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i][j - 1]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0)",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i + 1][j - 1]);\n// buggy line:                if(i!=",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i + 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i + 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                val = Math.min(",
        "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i][j + 1]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= 0) val = Math.max(val, grid[i - 1][j]);\n// buggy line:                if(j!= 0) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(i!= n - 1) val = Math.min(val, grid[i - 1][j]);\n// buggy line:                if(j!= n + 1) val = Math.max(val, grid[i][j - 1]);\n// buggy line:                if(i!= n -"
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;",
      "function range": "23,5-37,5",
      "output": [
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    for(int i = 1; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n  }\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n  }\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n// buggy line:    }\n    for(int i = 1; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n    }\n    return sequence;\n}\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int[] sequence = tri(10);\n    for(int i = 0; i < sequence.length; i++) {\n        System.out.print(sequence[i] + \" \");\n    }\n    ",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int[] sequence = tri(5);\n    for(int i = 0; i < sequence.length; i++) {\n        System.out.print(sequence[i] + \" \");\n    }\n    ",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    System.out.println(tri(4));\n    System.out.println(tri(5));\n    System.out.println(tri(6));\n    System.out.println(tri(7));\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    System.out.println(tri(3));\n    System.out.println(tri(4));\n    System.out.println(tri(5));\n    System.out.println(tri(6));\n",
        "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n// buggy line:    sequence[1] = -3;\n// buggy line:    for(int i = 2; i < n - 1; i--) {\n// buggy line:        if(i % 2 == 0) sequence[i] = i / 2 - 1;\n// buggy line:        else sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    sequence[1] = -3;\n    for(int i = 2; i < n - 1; i++) {\n        sequence[i] = sequence[i - 1] - sequence[i - 2] - (i + 3) / 2;\n    }\n    return sequence;\n}\n\npublic static void main(String[] args) {\n    int n = Integer.parseInt(args[0]);\n    int[] sequence = tri(n);\n    for(int i = 0; i < n; i++) {\n        System.out.print(sequence"
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;",
      "function range": "13,5-26,5",
      "output": [
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    return product;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n /= 10;\n    }\n    return product;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    return product + odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n /= 10;\n    }\n    return product + odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    return product - odd_count;\n  }\n}\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    if(odd_count > 0) {\n      product /= odd_count;\n",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    return product + odd_count;\n  }\n\n  public static void main(String[]",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n /= 10;\n    }\n    return product + odd_count;\n  }\n\n  public static void main(String[] args",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    if(odd_count > 0) {\n      product /= 10;\n    }",
        "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n// buggy line:    while(n >= 0) {\n// buggy line:        int digit = n * 10;\n// buggy line:        if(digit % 2 == 0) {\n// buggy line:            product /= digit;\n// buggy line:            odd_count++;\n// buggy line:        } else {\n// buggy line:            odd_count = 0;\n// buggy line:        }\n    while(n >= 0) {\n      int digit = n * 10;\n      if(digit % 2 == 0) {\n        product /= digit;\n        odd_count++;\n      } else {\n        odd_count = 0;\n      }\n      n = n / 10;\n    }\n    return product - odd_count;\n  }\n\n  public static void main(String[]"
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {",
      "function range": "21,5-37,5",
      "output": [
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0;\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0;\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:        cnt++;\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0;\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.size() == closing_brackets.size();\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.get(opening_brackets.size() - 1) == closing_brackets.get(closing_brackets.size() - 1);\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.get(opening_brackets.size()-1) == closing_brackets.get(closing_brackets.size()-1);\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.get(opening_brackets.size() - 1) == closing_brackets.get(closing_brackets.size() - 1);\n}\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.get(opening_brackets.size() - 1) == closing_brackets.get(closing_brackets.size() - 1);\n  }\n\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:        i++;\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.size() == closing_brackets.size();\n  }\n}\n",
        "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n// buggy line:    Collections.reverse(opening_brackets);\n// buggy line:    int cnt = 0, i = 0, l = opening_brackets.size();\n// buggy line:    for(int idx : closing_brackets) {\n// buggy line:        if(i < l || idx >= opening_brackets.get(i)) {\n// buggy line:            cnt++;\n// buggy line:        }\n// buggy line:    }\n    return opening_brackets.size() > 0 && closing_brackets.size() > 0 && opening_brackets.get(opening_brackets.size() - 1) == closing_brackets.get(closing_brackets.size() - 1);\n}\n"
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));",
      "function range": "16,5-22,5",
      "output": [
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:    i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:    i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return l",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:    i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return l",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return lst.length;\n// buggy line:    return lst.length;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0;\n// buggy line:    return 0",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:        i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n\n// buggy line",
        "public static long sum_squared_nums(double[] lst) {\n// buggy line:    int result = 0, i = 0;\n// buggy line:    for(int j = 0; j < lst.length; j++) {\n// buggy line:        result += (Math.floor((int) lst[i])) * (Math.ceil((int) lst[i]));\n// buggy line:    i++;\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n// buggy line:    return result;\n\n// buggy line"
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) == ' ') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);",
      "function range": "18,5-26,5",
      "output": [
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos);\n  }\n}\n",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_number(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n}",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_first_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String first = \" \";\n// buggy line:    first = parts[0];\n// buggy line:    if(txt.charAt",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    if(txt.charAt(txt.length() - 1) =='')",
        "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n// buggy line:    last = parts[parts.length - 1];\n// buggy line:    if(txt.charAt(txt.length() - 1) =='') last = \" \";\n// buggy line:    if(txt.length() == 1) last = \" \";\n// buggy line:    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n// buggy line:    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) - 'a';\n    return (last.length() == 1) || (0 <= last_char_pos || last_char_pos <= 25);\n  }\n\n  public static boolean check_if_last_char_is_a_digit(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    int last_char_pos = Character.toUpperCase(last.charAt(0)) -"
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;",
      "function range": "16,5-22,5",
      "output": [
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line:    return ind;\n// buggy line",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n//",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n//",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i +",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] > arr[i + 1]) ind = i +",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) return i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) return i + 1;",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] == arr[i + 1]) ind = i +",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    for(int",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] > arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] == arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    for(int",
        "public static int can_arrange(int[] arr) {\n// buggy line:    int ind = 1;\n// buggy line:    for(int i = 0; i < arr.length - 1; i++) {\n// buggy line:        if(arr[i] < arr[i + 1]) ind = i + 1;\n// buggy line:    }\n// buggy line:    return ind;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n// buggy line:    return -1;\n\n"
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);",
      "function range": "16,5-32,5",
      "output": [
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:        }\n// buggy line:    }\n// buggy line:    return",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:            negative = true;\n// buggy line:        }\n// buggy line",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:        }\n// buggy line:    }\n// buggy line:    int",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:        }\n// buggy line:        }\n// buggy line:        if",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:        }\n// buggy line:        }\n// buggy line:    return",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        }\n// buggy line:    }\n// buggy line:    if(negative) {\n// buggy line:        max_negative = Integer.MAX_VALUE",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:            negative = false;\n// buggy line:            max_negative = l",
        "public static int[] largest_smallest_integers(int[] lst) {\n// buggy line:    boolean negative = true, positive = true;\n// buggy line:    int max_negative = Integer.MAX_VALUE, min_positive = Integer.MIN_VALUE; \n// buggy line:    for(int i = 1; i < lst.length; i++) {\n// buggy line:        if(lst[i] < 0) {\n// buggy line:            negative = false;\n// buggy line:            max_negative = Math.min(max_negative, lst[i]);\n// buggy line:            min_positive = Math.max(min_positive, lst[i]);\n// buggy line:        } else if(lst[i] > 0) {\n// buggy line:            positive = false;\n// buggy line:            max_positive = Math.max(max_positive, lst[i]);\n// buggy line:            min_negative = Math.min(min_negative, lst[i]);\n// buggy line:        } else {\n// buggy line:        }\n// buggy line:    }\n// buggy line:\n//"
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;",
      "function range": "17,5-36,5",
      "output": [
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n// buggy line:    if(a instanceof Float) temp_a = (Double) a;\n// buggy line:    if(b instanceof Float) temp_b = (Double) b;\n// buggy line:    if(a instanceof Long) temp_a = (Double) a;\n// buggy line:    if(b instanceof Long) temp_b = (Double) b;\n// buggy line:    if(a instanceof Short) temp_a = (Double) a;\n// buggy line:    if(b instanceof Short) temp_b = (",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n// buggy line:    if(a instanceof Long) temp_a = (Double) a;\n// buggy line:    if(b instanceof Long) temp_b = (Double) b;\n// buggy line:    if(a instanceof Float) temp_a = (Double) a;\n// buggy line:    if(b instanceof Float) temp_b = (Double) b;\n// buggy line:    if(a instanceof Double) temp_a = (Double) a;\n// buggy line:    if(b instanceof Double) temp_b = (",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n// buggy line:    if(a instanceof Long) temp_a = (Double) a;\n// buggy line:    if(b instanceof Long) temp_b = (Double) b;\n// buggy line:    if(a instanceof Float) temp_a = (Double) a;\n// buggy line:    if(b instanceof Float) temp_b = (Double) b;\n// buggy line:    if(a instanceof Short) temp_a = (Double) a;\n// buggy line:    if(b instanceof Short) temp_b = (",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n// buggy line:    if(a instanceof Float) temp_a = ((Integer) b).floatValue();\n// buggy line:    if(b instanceof Float) temp_b = ((Integer) a).floatValue();\n// buggy line:    if(a instanceof Long) temp_a = ((Integer) b).longValue();\n// buggy line:    if(b instanceof Long) temp_b = ((Integer) a).longValue();\n// buggy line:    if(a instanceof Short) temp_a = ((Integer) b).shortValue();\n// buggy",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n// buggy line:    if(a instanceof Float) temp_a = ((Integer) b).floatValue();\n// buggy line:    if(b instanceof Float) temp_b = ((Integer) a).floatValue();\n// buggy line:    if(a instanceof Long) temp_a = ((Integer) b).longValue();\n// buggy line:    if(b instanceof Long) temp_b = ((Integer) a).longValue();\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double) b).doubleValue();\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer) a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer) b).doubleValue();\n    }\n    if(a instanceof String) {\n        temp_a = Double.parseDouble",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double) b).doubleValue();\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer) a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer) b).doubleValue();\n    }\n    if(temp_a > temp_b) {\n        return 1;\n    ",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double) b).doubleValue();\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer) a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer) b).doubleValue();\n    }\n    if(a instanceof Double) {\n        temp_a = ((Double) a",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double) b).doubleValue();\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer) a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer) b).doubleValue();\n    }\n    return temp_a - temp_b;\n}\n\npublic static Object compare_",
        "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n// buggy line:    if(a instanceof Double) temp_a = ((Integer) b).doubleValue();\n// buggy line:    if(b instanceof Double) temp_b = ((Integer) a).doubleValue();\n// buggy line:    if(a instanceof Integer) temp_a = (Double) a;\n// buggy line:    if(b instanceof Integer) temp_b = (Double) b;\n    if(a instanceof Double) {\n        temp_a = ((Double) a).doubleValue();\n    }\n    if(b instanceof Double) {\n        temp_b = ((Double) b).doubleValue();\n    }\n    if(a instanceof Integer) {\n        temp_a = ((Integer) a).doubleValue();\n    }\n    if(b instanceof Integer) {\n        temp_b = ((Integer) b).doubleValue();\n    }\n    return temp_a - temp_b;\n  }\n\n  public static Object compare"
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));",
      "function range": "13,5-15,5",
      "output": [
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_even(long n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 2) ^ (n < 8));\nreturn ((n * 2 == 2) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_even(long n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 2) ^ (n < 8));\nreturn ((n * 2 == 2) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 == 2) ^ (n < 8));\nreturn ((n * 2 == 2) ^ (n < 8));\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 2) ^ (n < 8));\n        return ((n * 2 == 2) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_even(long n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 0) ^ (n < 8));\nreturn ((n * 2 == 0) ^ (n < 8));\n}\npublic static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\nreturn ((n * 2 == 1) ^ (n < 8));\n",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1)",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n    return ((n * 2 == 1) ^ (n < 8));\n  }\n\n  public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n    return ((n * 2 == 1) ^ (n < 8));\n  }\n\n  public static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n    return ((n * 2 == 1)",
        "public static boolean is_equal_to_sum_even(int n) {\n// buggy line:    return ((n * 2 == 1) ^ (n < 8));\n        return ((n * 2 == 1) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_odd(int n) {\n// buggy line:    return ((n * 2 == 2) ^ (n < 8));\n        return ((n * 2 == 2) ^ (n < 8));\n    }\n\n    public static boolean is_equal_to_sum_even_odd(int n) {\n// buggy line:    return ((n * 2 == 2) ^ (n < 8));\n        return ((n * 2 == 2)"
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;",
      "function range": "18,5-25,5",
      "output": [
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = n; i >= 1; i--) {\n      fact_i *= i;\n      special_fact += i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = n; i >= 1; i--) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact += i;\n    }\n    return special_fact;\n  }\n}\n",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = n; i >= 1; i--) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i *",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = n; i >= 1; i--) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i *",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = n; i >= 1; i--) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i;\n// buggy line:        special_fact += i;\n    for(",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n    for(long i = 1; i <= n; i++) {\n      fact_i *= i;\n      special_fact += i * fact_i;\n    }\n    return special_fact;\n  }\n\n  public static long factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i;\n// buggy line:        special_fact += i;\n    for(long",
        "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n// buggy line:    for(long i = n; i >= 1; i--) {\n// buggy line:        fact_i *= i * fact_i;\n// buggy line:        special_fact += i * fact_i;\n// buggy line:    }\n    for(long i = n; i >= 1; i--) {\n        fact_i *= i;\n        special_fact += i;\n    }\n    return special_fact;\n}\n"
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;",
      "function range": "13,5-37,5",
      "output": [
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n  }\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n  }\n\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n\npublic static void main(String[] args) {\n    System.out.println(fix_spaces(\"hello world\"));\n    System.out.println(fix_spaces(\"hello world\"));\n    System.out.println(fix_spaces(\"hello world\"));\n    System.out.println(fix_spaces(\"hello world\"));\n    System.out.println(fix_spaces(\"hello world\"));\n    System.out.println(fix_spaces(\"hello world\"));\n    System.out",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n\npublic static void main(String[] args) {\n    System.out.println(fix_spaces(\"Hello World!\"));\n    System.out.println(fix_spaces(\"Hello World!\"));\n    System.out.println(fix_spaces(\"Hello World!\"));\n    System.out.println(fix_spaces(\"Hello World!\"));\n    System.out.println(fix_spaces(\"Hello World!\"));\n    System.out.println(fix_spaces(\"Hello World!\"));\n    System.out",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    String text = scanner.nextLine();\n    System.out.println(fix_spaces(text));\n}\n}\n",
        "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n// buggy line:    return new_text;\n    return new_text;\n}\n\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    String text = scanner.nextLine();\n    System.out.println(fix_spaces(text));\n    scanner.close();\n}\n}\n"
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')",
      "function range": "17,5-35,5",
      "output": [
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0)",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0)",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' < lst[0].charAt(0) && lst[0].charAt(0) < 'z' || 'A' < lst[0].charAt(0) && lst[0].charAt(0) < 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0)",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0)",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'a' > lst[0].charAt(0) && lst[0].charAt(0)",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z')\n// buggy line:    if ('A' > lst[0].charAt(0) && lst[0",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if (lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[1",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if (lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    if (lst[0",
        "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n// buggy line:    if ('a' > lst[0].charAt(0) && lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n    if (lst[0].charAt(0) > 'z' || 'A' > lst[0].charAt(0) && lst[0].charAt(0) > 'Z')\n        return \"No\";\n    return file_name;\n"
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)",
      "function range": "13,5-24,5",
      "output": [
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n        result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n        result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else\n// buggy line:            result += lst[i] * lst",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n        result += lst[i] * lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n        result += lst[i] * lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:        else if (i % 1 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n// buggy line:",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i] * lst[i];\n        result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n      result += lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n        result += lst[i] * lst[i];\n    }\n    return result;\n  }\n}\n",
        "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n// buggy line:        if (i % 4 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 3 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 2 == 0)\n// buggy line:            result += lst[i] * lst[i];\n// buggy line:        else if (i % 1 == 0)\n// buggy line:            result += lst[i] * lst[i];\n        result += lst[i];\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){",
      "function range": "22,5-34,5",
      "output": [
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            }\n        }\n    }\n    return result;\n    }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += word.charAt(i);\n                flag = 0;\n            }\n        }\n    }\n    return result;\n    }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += word.charAt(i);\n                flag = 0;\n            } else {\n                result += word.charAt(i);\n            }\n        }\n    }\n    return result;\n    }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            } else {\n                result += \" \" + word.charAt(i);\n            }\n        }\n    }\n    return result;\n    }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            } else {\n                result += \" \" + word.charAt(i);\n            }\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \";\n                flag = 0;\n            } else {\n                result += \" \";\n            }\n        }\n    }\n    return result;\n    }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += word.charAt(i);\n                flag = 0;\n            } else {\n                result += word.charAt(i);\n                flag = 0;\n            }\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            } else {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            }\n        }\n    }\n    return result;\n  }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            } else {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            }\n        }\n    }\n    return result;\n    }\n}\n",
        "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;\n// buggy line:        for (int i = 2; i < word.length(); i += 1){\n        for (int i = 0; i < word.length(); i += 1) {\n            if (flag == 0) {\n                result += word.charAt(i);\n                flag = 1;\n            } else if (flag == 1) {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            } else {\n                result += \" \" + word.charAt(i);\n                flag = 0;\n            }\n        }\n    }\n    return result;\n}\n"
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom))",
      "function range": "15,5-26,5",
      "output": [
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) return true;\n    return numerator / denom == (int) (numerator / denom);\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) return true;\n    if (numerator / denom == (int) (numerator / denom)) return true;\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom))\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom))\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    }\n    return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom))\n    if (numerator / denom == (int) (numerator / denom))\n      return true;\n    else\n      return false;\n  }\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n",
        "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n// buggy line:    if (numerator / denom == (int) (numerator / denom)) {\n    if (numerator / denom == (int) (numerator / denom)) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n}\n"
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);",
      "function range": "17,5-44,5",
      "output": [
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits_number.get(n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.put(n, new ArrayList<Integer>());\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(n);\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            dig",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n// buggy line:        digits_number.get(digit).add(n);\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n        }",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits.add(",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.put(n, new ArrayList<Integer>());\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n        }\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n        }\n    }\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits.add(n);\n",
        "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){\n// buggy line:            digit += ((n + \"\").toCharArray()[j] - '0') * neg;\n// buggy line:        }\n// buggy line:        digits.add(digit);\n// buggy line:        digits_number.put(digit, new ArrayList<Integer>());\n            digits.add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits_number.get(n).add(n);\n            digits.add(n);\n            digits_number.get(n).add("
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))",
      "function range": "14,5-26,5",
      "output": [
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            odd_digits.remove(number_as_string.charAt(0));\n            odd_digits.remove(number_as_string.charAt(number_as_string.length()));\n            odd_digits.remove(number_as_string.charAt(0));\n            odd_digits.remove(number_as_string.charAt(number_as_string.length()));\n            odd_digits.remove(number_as_string.charAt(0));\n            odd_digits.remove(number_as_",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            odd_digits.remove(number_as_string.charAt(0));\n            odd_digits.remove(number_as_string.charAt(number_as_string.length()));\n            odd_digits.remove(number_as_string.charAt(number_as_string.length()));\n            odd_digits.remove(number_as_string.charAt(number_as_string.length()));\n            odd_digits.remove(number_as_string.charAt(number_as_string.length()",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1))",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n            }",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                ",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n            ",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length())))\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length() + 1)));\n",
        "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n// buggy line:            if (odd_digits.contains(number_as_string.charAt(0))\n// buggy line:                    && odd_digits.contains(number_as_string.charAt(number_as_string.length()))) {\n            if (odd_digits.contains(number_as_string.charAt(0))) {\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(0)));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length())));\n                odd_digits.remove(odd_digits.indexOf(number_as_string.charAt(number_as_string.length() + 1)));"
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {",
      "function range": "16,5-30,5",
      "output": [
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int o = 0; o < n; o += 1) {\n// buggy line:            for (int p = 0; p < n; p += 1) {\n// buggy line:            for (int q = 0; q < n; q",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int p = 0; p < n; p += 1) {\n// buggy line:            for (int q = 0; q < n; q += 1) {\n// buggy line:            for (int r = 0; r < n; r",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int m = 0; m < n; m",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int o = 0; o < n; o += 1)\n// buggy line:            for (int p = 0; p < n; p += 1)\n// buggy line:            for (int q = 0; q < n; q += 1",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int o = 0; o < n; o += 1) {\n// buggy line:            for (int p = 0; p < n; p += 1)\n// buggy line:            for (int q = 0; q < n; q +=",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1)\n// buggy line:            for (int o = 0; o < n; o += 1)\n// buggy line:            for (int p = 0; p < n; p += 1)\n// buggy line:            for (int q = 0; q < n; q += 1)",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int o = 0; o < n; o += 1)\n// buggy line:            for (int p = 0; p < n; p += 1) {\n// buggy line:            for (int q = 0; q < n; q +=",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int n = 0; n < n; n",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int o = 0; o < n; o += 1) {\n// buggy line:            for (int p = 0; p < n; p += 1) {\n    for (int i = 0; i < n; i += 1) {",
        "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n// buggy line:    for (int i = 0; i < n-2; i += 1) {\n// buggy line:        for (int j = 0; j < n-1; j += 1) {\n// buggy line:            for (int k = 0; k < n; k += 1) {\n// buggy line:            for (int l = 0; l < n; l += 1) {\n// buggy line:            for (int m = 0; m < n; m += 1) {\n// buggy line:            for (int n = 0; n < n; n += 1) {\n// buggy line:            for (int o = 0; o < n; o += 1) {\n// buggy line:            for (int p = 0; p < n; p += 1) {\n// buggy line:            }\n// buggy line:            }\n// buggy line"
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n\n  public static ArrayList<String> bf(String planet1, String planet2, String planet3) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = 0; i < planet1_index; i += 1)\n        result.add(planet_names.get(i));\n    for (int i = 0; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n  }\n\n  public static ArrayList<String> bf(String planet1, String planet2, String planet3) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Ne",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = 0; i < planet1_index; i += 1)\n        result.add(planet_names.get(i));\n    for (int i = 0; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n// buggy line:    for (int i = planet1_index; i < planet2_index; i += 1)\n// buggy line:        result.add(planet_names.get(i));\n    for (int i = planet1_index; i < planet2_index; i += 1)\n        result.add(planet_names.get(i));\n    return result;\n  }\n\n  public static ArrayList<String> bf(String planet) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String>"
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()",
      "function range": "21,5-34,5",
      "output": [
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n          public int compare(String s1, String s2) {\n            return s1.length() - s2.length();\n          }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n  }\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n}\n",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list_min(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n      if (str.length() % 2 == 1) continue;\n      result.add(str);",
        "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n// buggy line:        (s1, s2) -> s1.length() - s2.length()\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n  }\n\n  public static ArrayList<String> sorted_list(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);"
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;",
      "function range": "11,5-17,5",
      "output": [
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n        return y;\n    }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n      return y;\n    }\n    return x;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n      return",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return x;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return y;\n// buggy line:    }\n// buggy line:    return x;\n      if (n % i == 0) return y;\n    }\n    return x;",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n      return y;\n    }\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n  }\n}\n",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (n % i == 0) return x;\n    }\n    return y;\n  }\n\n  public static int x_xor_y(int n, int x, int y) {\n    if (n == 1)",
        "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n        if (n % i == 0) return x;\n    }\n    return y;\n  }\n\n  public static int x_and_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n// buggy line:        if (n % i == 0) return x;\n// buggy line:    }\n// buggy line:    return y;\n      if (n % i == 0) return x;\n    }\n    return y;"
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;",
      "function range": "14,5-25,5",
      "output": [
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            }\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            } else {\n// buggy line:                result -= d_int;\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            }\n        } else {\n            result += d.doubleValue();\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            } else {\n// buggy line:                result -= d_int;\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            } else {\n                result -= d_int;\n            }\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            }\n        } else {\n            result += d.doubleValue();\n        }\n    }\n    return result;\n  }\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            } else {\n// buggy line:                result -= d_int;\n                result -= d_int;\n            }\n        } else {\n            result += d.doubleValue();\n        }\n    }\n    return result;\n}\n",
        "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n// buggy line:                result += d_int;\n                result += d_int;\n            } else {\n// buggy line:                result -= d_int;\n                result -= d_int;\n            }\n        } else {\n            result += d.doubleValue();\n        }\n    }\n    return result;\n  }\n}\n"
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);",
      "function range": "12,5-20,5",
      "output": [
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = Math.floorDiv(guess[i], game[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        result[i] = Math.floorDiv(guess[i], game[i]);\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = game[i] - guess[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n  }\n\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n        result[i] = game[i] - guess[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = Math.floorDiv(guess[i], game[i]);\n    }\n    return result;\n  }\n\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = game[i];\n    }\n    return result;\n  }\n}\n",
        "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n// buggy line:        result[i] = Math.floorDiv(game[i], guess[i]);\n      result[i] = Math.floorDiv(game[i], guess[i]);\n    }\n    return result;\n  }\n\n  public static void main(String[] args) {\n    System.out.println(compare(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}));\n    System.out.println(compare(new int[]{1, 2, 3, 4, 5, 6, 7,"
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;",
      "function range": "20,5-35,5",
      "output": [
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n                CAP = 0;\n                SM = 0;\n                for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n        CAP = 0;\n        SM = 0;\n        for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = SM - CAP;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) CAP += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) SM += 1;\n// buggy line:        }\n// buggy line:        val = SM - CAP;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n                CAP = 0;\n                SM = 0;\n                for (char c : s.toCharArray()) {\n// buggy line:            if (Character.",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) CAP += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) SM += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP + SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {",
        "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n// buggy line:        strong = s;\n            CAP = 0;\n            SM = 0;\n            for (char c : s.toCharArray()) {\n// buggy line:            if (Character.toUpperCase(c) == c) SM += 1;\n// buggy line:            if (Character.toLowerCase(c) == c) CAP += 1;\n// buggy line:        }\n// buggy line:        val = CAP - SM;\n                CAP = 0;\n                SM = 0;\n                for (char c : s.toCharArray()) {\n                    if (Character.toUpperCase"
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {",
      "function range": "12,5-21,5",
      "output": [
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) return false;\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) return false;\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) return false;\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n        if (a.charAt(i)!= b.charAt(i)) return false;\n    }\n    return true;\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n        if (a.charAt(i)!= b.charAt(i)) {\n            return false;\n        }\n    }\n    return true;\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < a.length(); i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) return false;\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check(String a, String b, String c) {\n    int",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern_check2(String a, String b) {\n    int l =",
        "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n// buggy line:    String pat = b;\n// buggy line:    for (int i = 0; i < a.length(); i += 1) {\n// buggy line:        for (int j = 0; j < l; j += 1) {\n// buggy line:        if (a.charAt(i)!= b.charAt(j)) {\n// buggy line:            return false;\n// buggy line:        }\n// buggy line:    }\n    for (int i = 0; i < l; i += 1) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public static boolean cycpattern(String a, String b) {\n    int l = b.length"
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;",
      "function range": "10,5-19,5",
      "output": [
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] { even_count, odd_count };\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n    for (char c : (num + \"\").toCharArray()) {\n        if ((int)c % 2 == 0) even_count += 1;\n        if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] { even_count, odd_count };\n  }\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] { even_count, odd_count };\n  }\n\n}\n",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[] { even_count, odd_count };\n  }\n\n  public static int[] odd_even_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num",
        "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \"\").toCharArray()) {\n// buggy line:        if ((int)c % 2 == 0) even_count += 1;\n// buggy line:        if ((int)c % 2 == 1) odd_count += 1;\n// buggy line:    }\n    for (char c : (num + \"\").toCharArray()) {\n      if ((int)c % 2 == 0) even_count += 1;\n      if ((int)c % 2 == 1) odd_count += 1;\n    }\n    return new int[]{even_count, odd_count};\n  }\n\n  public static int[] odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n// buggy line:    for (char c : (num + \""
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];",
      "function range": "13,5-27,5",
      "output": [
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[i];\n      number /= 10;\n      i++;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[i];\n      number /= 10;\n      i--;\n    }\n    return result;\n  }\n\n  public static String int_to_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\",",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += num[i];\n      i++;\n      number = number / 10;\n    }\n    return result;\n  }\n\n  public static String int_to_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\",",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[i];\n      number /= 10;\n      i--;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += num[i];\n      i++;\n      number = number / 10;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[num[i]];\n      i++;\n      number = number / 10;\n    }\n    return result;\n  }\n\n  public static String int_to_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\",",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[i];\n      number /= 10;\n      i--;\n    }\n    return result;\n  }\n\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[num[i]];\n      i++;\n      number = number / 10;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += String.valueOf(num[i]);\n      i++;\n      number = number / 10;\n    }\n    return result;\n  }\n}\n",
        "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n// buggy line:        result += sym[i];\n      result += sym[i];\n      number /= 10;\n      i--;\n    }\n    return result;\n  }\n\n  public static String int_to_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n      \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\","
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;",
      "function range": "12,5-14,5",
      "output": [
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\nreturn a*a + b*b == c*c;\n}\n\npublic static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\nreturn a*a + b*b == c*c;\n}\n\npublic static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\nreturn a*a + b*b == c*c;",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n}\n\npublic static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n}\n\npublic static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\nreturn a*a + b*b == c*c;\n}\n\npublic static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\nreturn a*a + b*b == c*c;\n}\n\npublic static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\nreturn a*a + b*b == c*c;",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n}\n\npublic static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n}\n\npublic static boolean left_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean left_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean left_angle_triangle(int a, int b, int c) {\n    return a*a + b",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a*a + b",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean left_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b*b == c*c;\n  }\n\n  public static boolean right_angle_triangle(int a, int b, int c) {\n    return a*a + b",
        "public static boolean right_angle_triangle(int a, int b, int c) {\n// buggy line:    return a*a + b*b == c*c;\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean left_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a*a + b*b == c*c;\n    }\n\n    public static boolean right_angle_triangle(int a, int b, int c) {\n        return a*a + b"
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();",
      "function range": "18,5-31,5",
      "output": [
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n  public static String find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s2.size() - s1.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n  public static String find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n  public static int find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    String max = words_list.get(words_list.size() - 1);\n    return max;\n  }\n}\n",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n\n  public static String find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n          Character[] c1 = ((String) w1).chars().mapToObj(c -> (char",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return s1.size() - s2.size();\n        }\n    );\n    String max = words_list.get(words_list.size() - 1);\n    return max;\n  }\n\n  public static String find_min(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().map",
        "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n// buggy line:            return s1.size() - s2.size();\n            return Integer.compare(s1.size(), s2.size());\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }\n}\n"
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};",
      "function range": "31,5-33,5",
      "output": [
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number, remaining - need};\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number, remaining - need};\n    }\n\n    public static int[] eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number) {\n        return eat(number, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number,  remaining - need};\n    }\n\n    public static int[] eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number) {\n        return eat(number, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    ",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number,  remaining - need};\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n    return new int[] {number, remaining - need};\n  }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n    return new int[] {number,  remaining - need};\n  }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number + need,  remaining - need};\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number,  remaining - need};\n    }\n\n    public static int[] eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number) {\n        return eat(number, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need);\n    }\n\n    public static",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number, remaining - need};\n    }\n\n    public static int[] eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number) {\n        return eat(number, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n}\n",
        "public static int[] eat(int number, int need, int remaining) {\n// buggy line:    return new int[] {number + need,  remaining - need};\n        return new int[] {number, remaining - need};\n    }\n\n    public static int[] eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number, int need) {\n        return eat(number, need, 0);\n    }\n\n    public static int eat(int number) {\n        return eat(number, 0);\n    }\n\n    public static int[] eat(int number) {\n        return eat(number, 0);\n    }\n\n    public static int eat(int"
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];",
      "function range": "30,5-38,5",
      "output": [
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    return engine.eval(expression(operator, operand));\n  }\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n\n  public static double do_algebra(String[] operator, double operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n\n  public static double do_algebra(String[] operator, double[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return (Double) engine.eval(expression);\n  }\n}\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n\n  public static double do_algebra(String[] operator, double operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";\n",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n\n  public static double do_algebra(String[] operator, double[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    String expression = \"\";",
        "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n// buggy line:    String expression = \"\";\n// buggy line:    for (int i = 0; i < operand.length; i += 1) {\n// buggy line:        expression += operator[i] + operand[i];\n// buggy line:    }\n    String expression = \"\";\n    for (int i = 0; i < operand.length; i += 1) {\n      expression += operator[i] + operand[i];\n    }\n    return engine.eval(expression);\n  }\n\n  public static double do_algebra(String[] operator, double operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    return engine.eval(do"
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;",
      "function range": "14,5-27,5",
      "output": [
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else sb.append(Character.toUpperCase(c));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));\n        else sb.append(Character.toUpperCase(c));\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) {\n            sb.append(Character.toLowerCase(c));\n        } else {\n            sb.append(Character.toUpperCase(c));\n        }\n    }\n    return sb.toString();\n  }\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(c);\n    }\n    return sb.toString();\n  }\n\n}\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(c);\n    }\n    return sb.toString();\n  }\n}",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else if (Character.isDigit(c)) sb.append(Character.toDigit(c));\n        else if (Character.isLetter(c)) sb.append(Character.toUpperCase(c));\n        else if (Character.isWhitespace(c)) sb.append(c);\n        ",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else if (Character.isDigit(c)) sb.append(Character.toDigit(c));\n        else if (Character.isLetter(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isWhitespace(c)) sb.append(c);\n        else",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else if (Character.isDigit(c)) sb.append(Character.toDigit(c));\n        else if (Character.isLetter(c)) sb.append(Character.toUpperCase(c));\n        else sb.append(c);\n    }\n    return sb.toString();\n",
        "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n// buggy line:        if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));\n// buggy line:        else sb.append(Character.toLowerCase(c));\n// buggy line:        flg = 1;\n        if (Character.isLowerCase(c)) sb.append(Character.toLowerCase(c));\n        else if (Character.isUpperCase(c)) sb.append(Character.toUpperCase(c));\n        else if (Character.isDigit(c)) sb.append(Character.toDigit(c));\n        else sb.append(c);\n    }\n    return sb.toString();\n  }\n}\n"
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");",
      "function range": "13,5-20,5",
      "output": [
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      return null;\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      return null;\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n\n  public static String md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    MessageDigest md;\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      throw new NoSuchAlgorithmException(e.getMessage());\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      return null;\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n\n  public static String md5(String text) throws NoSuchAlgorithmException {\n    return string_to_md5(text);\n  }\n\n  public static String sha1(String text) throws NoSuchAlgorithmException {\n    return string_to_md",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      throw new NoSuchAlgorithmException(e.getMessage());\n    }\n    return md.digest(text.getBytes());\n  }\n}\n",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n\n  public static String md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    MessageDig",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      throw new RuntimeException(e);\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n\n  public static String md5(String text) throws NoSuchAlgorithmException {\n    return string_to_md5(text);\n  }\n\n  public static String sha1(String text) throws NoSuchAlgorithmException {\n    return string",
        "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;\n    try {\n      md = MessageDigest.getInstance(\"SHA-384\");\n    } catch (NoSuchAlgorithmException e) {\n      return null;\n    }\n    return md.digest(text.getBytes(\"UTF-8\"));\n  }\n\n  public static String md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n// buggy line:    MessageDigest md = MessageDigest.getInstance(\"SHA-384\");\n    MessageDigest md;"
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);",
      "function range": "14,5-23,5",
      "output": [
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    list.add(lower);\n// buggy line:    list.add(upper);\n// buggy line:    list.add(a);\n// buggy line:    list.add(b);\n// buggy line:    list.add(a);\n// buggy line:    list.add(b);\n// buggy line:    list.add(a);\n// buggy line:    list.add(b);\n// buggy line:    list.add(a);",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    return list;\n// buggy line:    return list;\n// buggy line:    return list;\n// buggy line:    return list;\n// buggy line:    return list;\n// buggy line:    return list;\n// buggy line:    ",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:        list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> result = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:        result.add(i);\n// buggy line:    }\n// buggy line:    return result;\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line:    return new ArrayList<Integer>();\n// buggy line",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    return new ArrayList<Integer>(list);\n// buggy line:    return new ArrayList<Integer>(list);\n// buggy line:    return new ArrayList<Integer>(list);\n// buggy line:    return new ArrayList<Integer>(list);",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:        list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    return new ArrayList<Integer>(list);\n// buggy line:    return new ArrayList<Integer>(list);\n// buggy line:    return new ArrayList<Integer>(list);\n// buggy line:    return new ArrayList<Integer>(list);",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    list.add(lower);\n// buggy line:    list.add(upper);\n// buggy line:    list.add(a);\n// buggy line:    list.add(b);\n// buggy line:    list.add(a);\n// buggy line:    list.add(b);\n// buggy line:    list.add(lower);\n// buggy line:    list.add(upper);\n// buggy line:    list.add(a);",
        "public static ArrayList<Integer> generate_integers(int a, int b) {\n// buggy line:    int lower = Math.max(2, a);\n// buggy line:    int upper = Math.min(8, b);\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = lower; i <= upper; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n// buggy line:    return list;\n// buggy line:    ArrayList<Integer> list = new ArrayList<Integer>();\n// buggy line:    for (int i = 0; i < a; i++) {\n// buggy line:    list.add(i);\n// buggy line:    }\n"
      ]
    }
  },
  "model": "codegen-350M-multi",
  "time": 748
}