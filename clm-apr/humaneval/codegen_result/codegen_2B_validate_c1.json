{
  "config": "CODEGEN_COMPLETE_CODEFORM_NOCOMMENT",
  "data": {
    "HAS_CLOSE_ELEMENTS": {
      "loc": "9-10",
      "input": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) > threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i) > threshold && numbers.get(j) > threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (numbers.get(i) + numbers.get(j) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold){\n    for (int i = 0; i < numbers.size(); i += 1){\n        for (int j = i + 1; j < numbers.size(); j += 1){\n            if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SEPARATE_PAREN_GROUPS": {
      "loc": "16-17",
      "input": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);",
      "function range": "7,5-27,5",
      "output": [
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else {\n            if (current_depth == 0) {\n                result.add(current_string);\n                current_string = \"\";\n            } else {\n                current_string += String.valueOf(c);\n            }\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    result.add(current_string);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0){\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    if (current_string.length() > 0) {\n        result.add(current_string);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        } else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        } else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        } else {\n            current_string += String.valueOf(c);\n        }\n    }\n    result.add(current_string);\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')') {\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ',' && current_depth == 0) {\n            result.add(current_string);\n            current_string = \"\";\n        }\n        else {\n            current_string += String.valueOf(c);\n        }\n    }\n    result.add(current_string);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<String>();\n    String current_string = \"\";\n    int current_depth = 0;\n    for (char c : paren_string.toCharArray()) {\n        if (c == '('){\n            current_depth += 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ')'){\n            current_depth -= 1;\n            current_string += String.valueOf(c);\n        }\n        else if (c == ',' && current_depth == 0){\n            result.add(current_string);\n            current_string = \"\";\n        }\n        else {\n            current_string += String.valueOf(c);\n        }\n    }\n    result.add(current_string);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TRUNCATE_NUMBER": {
      "loc": "5-6",
      "input": "public static double truncate_number(double number) {",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double truncate_number(double number) {\n        if (number < 0) {\n            return 0;\n        } else if (number > 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "BELOW_ZERO": {
      "loc": "10-15",
      "input": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;",
      "function range": "6,5-15,5",
      "output": [
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_zero(List<Integer> operations) {\n    int balance = 0;\n    for (Integer op : operations){\n        balance += op;\n    }\n    return balance < 0;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MEAN_ABSOLUTE_DEVIATION": {
      "loc": "14-15",
      "input": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){",
      "function range": "6,5-17,5",
      "output": [
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += (number - mean) * (number - mean);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        double deviation = Math.abs(number - mean);\n        deviation_sum += deviation;\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.abs(number - mean);\n    }\n    return deviation_sum / numbers.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double mean_absolute_deviation(List<Double> numbers) {\n    double sum = 0.;\n    for (Double number : numbers){\n        sum += number;\n    }\n    double mean = sum / numbers.size();\n    double deviation_sum = 0.;\n    for (Double number : numbers){\n        deviation_sum += Math.pow(number - mean, 2);\n    }\n    return Math.sqrt(deviation_sum / numbers.size());\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INTERSPERSE": {
      "loc": "13-14",
      "input": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;",
      "function range": "7,5-19,5",
      "output": [
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i - 1));\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i - 1));\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i - 1));\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i - 1));\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        result.add(delimeter);\n    }\n    result.remove(result.size() - 1);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    if (numbers.size() == 0)\n        return result;\n    result.add(numbers.get(0));\n    for (int i = 1; i < numbers.size(); i++) {\n        result.add(numbers.get(i - 1));\n        result.add(delimeter);\n        result.add(numbers.get(i));\n    }\n    result.add(numbers.get(numbers.size() - 1));\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_NESTED_PARENS": {
      "loc": "18-19",
      "input": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);",
      "function range": "7,5-24,5",
      "output": [
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')') {\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            } else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    String[] paren_groups = paren_string.split(\" \");\n    List<Integer> result = new ArrayList<Integer>();\n    for (String paren_group : paren_groups) {\n        int depth = 0;\n        int max_depth = 0;\n        for (char c : paren_group.toCharArray()){\n            if (c == '('){\n                depth += 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n            else if (c == ')'){\n                depth -= 1;\n                max_depth = Math.max(depth, max_depth);\n            }\n        }\n        result.add(max_depth);\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FILTER_BY_SUBSTRING": {
      "loc": "10-11",
      "input": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){",
      "function range": "7,5-13,5",
      "output": [
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.toLowerCase().contains(substring.toLowerCase())){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.toLowerCase().contains(substring.toLowerCase())) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_substring(List<String> strings, String substring) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.contains(substring)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "SUM_PRODUCT": {
      "loc": "7-8",
      "input": "public static Integer[] sum_product(List<Integer> numbers) {",
      "function range": "6,5-13,5",
      "output": [
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] sum_product = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            sum_product[i] = numbers.get(i) * numbers.get(i);\n        }\n        return sum_product;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] sum_product = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            sum_product[i] = numbers.get(i) * numbers.get(i);\n        }\n        return sum_product;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i).intValue() * numbers.get(i).intValue();\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] result = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            result[i] = numbers.get(i) * numbers.get(i);\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer[] sum_product(List<Integer> numbers) {\n        Integer[] sum_product = new Integer[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            sum_product[i] = numbers.get(i) * numbers.get(i);\n        }\n        return sum_product;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "ROLLING_MAX": {
      "loc": "12-13",
      "input": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    for (int i = 1; i < numbers.size(); i++){\n      running_max = null;\n      for (Integer n : numbers){\n        if (running_max == null || n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        result.add(n);\n        running_max = n;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || running_max < n){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    for (int i = 1; i < numbers.size(); i++){\n      running_max = null;\n      for (Integer n : numbers){\n        if (running_max == null || running_max < n){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    for (int i = 1; i < numbers.size(); i++){\n      running_max = null;\n      for (Integer n : numbers){\n        if (running_max == null || n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || running_max < n){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    for (int i = 1; i < numbers.size(); i++){\n      running_max = null;\n      for (Integer n : numbers){\n        if (running_max == null || running_max < n){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    for (int i = 1; i < numbers.size(); i++){\n      running_max = null;\n      for (Integer n : numbers){\n        if (running_max == null || n > running_max){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || running_max < n){\n        running_max = n;\n      }\n    }\n    result.add(running_max);\n    for (int i = 1; i < numbers.size(); i++){\n      running_max = null;\n      for (Integer n : numbers){\n        if (running_max == null || running_max < n){\n          running_max = n;\n        }\n      }\n      result.add(running_max);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> rolling_max(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    Integer running_max = null;\n    for (Integer n : numbers){\n      if (running_max == null || n > running_max){\n        running_max = n;\n      } else {\n        running_max = Math.max(running_max, n);\n      }\n    }\n    result.add(running_max);\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_PALINDROME": {
      "loc": "22-23",
      "input": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;",
      "function range": "12,5-24,5",
      "output": [
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    result = result.substring(0, beginning_of_suffix) + result.substring(beginning_of_suffix);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    result = str.substring(beginning_of_suffix, ending_of_suffix + 1);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    return result.substring(beginning_of_suffix, ending_of_suffix + 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    result = str.substring(beginning_of_suffix, ending_of_suffix + 1);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    result = str.substring(beginning_of_suffix, ending_of_suffix);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    result = str.substring(beginning_of_suffix, ending_of_suffix + 1);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(result.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    return result.substring(beginning_of_suffix, ending_of_suffix + 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, ending_of_suffix + 1);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String make_palindrome(String str){\n    if (str.length() == 0)\n        return \"\";\n    int beginning_of_suffix = 0;\n    while (! is_palindrome(str.substring(beginning_of_suffix))){\n        beginning_of_suffix += 1;\n    }\n    String result = str;\n    int ending_of_suffix = str.length() - 1;\n    while (! is_palindrome(str.substring(ending_of_suffix))){\n        ending_of_suffix -= 1;\n    }\n    result = result.substring(beginning_of_suffix, ending_of_suffix + 1);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_XOR": {
      "loc": "10-11",
      "input": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }\n        else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        }else{\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_xor(String a, String b){\n    String result = \"\";\n    for (int i = 0; i < a.length(); i += 1){\n        if (a.charAt(i) == b.charAt(i)){\n            result += \"0\";\n        } else {\n            result += \"1\";\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "LONGEST": {
      "loc": "9-11",
      "input": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){",
      "function range": "6,5-19,5",
      "output": [
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.stream().map(string -> string.substring(0, maxlen)).collect(Collectors.joining(\" \"));\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n      if (string.length() > maxlen){\n        maxlen = string.length();\n      }\n    }\n    return strings.get(0).substring(0, maxlen);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String longest(List<String> strings){\n    int maxlen = 0;\n    for (String string : strings){\n        if (string.length() > maxlen){\n            maxlen = string.length();\n        }\n    }\n    return strings.get(0).substring(0, maxlen);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GREATEST_COMMON_DIVISOR": {
      "loc": "6-8",
      "input": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int tmp = a % b;\n        a = b;\n        b = tmp;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int t = a % b;\n        a = b;\n        b = t;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        int temp = a % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int greatest_common_divisor(int a, int b){\n    while (b > 0) {\n        if (a > b) {\n            a -= b;\n        } else {\n            b -= a;\n        }\n    }\n    return a;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "ALL_PREFIXES": {
      "loc": "11-12",
      "input": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){",
      "function range": "7,5-15,5",
      "output": [
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> all_prefixes(String string){\n    List<String> result = new ArrayList<String>();\n    for (int i = 0; i < string.length(); i += 1){\n      result.add(string.substring(0, i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_SEQUENCE": {
      "loc": "9-10",
      "input": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String string_sequence(int n) {\n    String result = \"\";\n    for (int i = 0; i <= n; i += 1){\n        result += i + \" \";\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_DISTINCT_CHARACTERS": {
      "loc": "11-12",
      "input": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(Character.toLowerCase(c));\n        }\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c)))\n            distinct.add(Character.toLowerCase(c));\n    }\n    return distinct.size();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int count_distinct_characters(String string) {\n    HashSet<Character> distinct = new HashSet<Character>();\n    for (char c : string.toCharArray()) {\n        if (! distinct.contains(Character.toLowerCase(c))) {\n            distinct.add(c);\n        }\n    }\n    return distinct.size();\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "PARSE_MUSIC": {
      "loc": "16-17",
      "input": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();",
      "function range": "8,5-20,5",
      "output": [
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (String note : note_map.keySet()) {\n      if (music_string.contains(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i + 1))) {\n        result.add(note_map.get(music_string.substring(i, i + 1)));\n      } else {\n        result.add(0);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      char c = music_string.charAt(i);\n      if (note_map.containsKey(String.valueOf(c))) {\n        result.add(note_map.get(String.valueOf(c)));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      String note = music_string.substring(i, i + 1);\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.charAt(i))) {\n        result.add(note_map.get(music_string.charAt(i)));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      if (note_map.containsKey(music_string.substring(i, i+1))) {\n        result.add(note_map.get(music_string.substring(i, i+1)));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    String[] notes = music_string.split(\" \");\n    for (String note : notes) {\n      if (note_map.containsKey(note)) {\n        result.add(note_map.get(note));\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> parse_music(String music_string) {\n    HashMap<String, Integer> note_map = new HashMap<String, Integer>();\n    note_map.put(\"o\", 4);\n    note_map.put(\"o|\", 2);\n    note_map.put(\".|\", 1);\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < music_string.length(); i++) {\n      char c = music_string.charAt(i);\n      if (note_map.containsKey(c + \"\")) {\n        result.add(note_map.get(c + \"\"));\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "HOW_MANY_TIMES": {
      "loc": "6-7",
      "input": "public static int how_many_times(String string, String substring) {\n    int times = 0;",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times++;\n      }\n    }\n    return times;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times++;\n      }\n    }\n    return times;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times++;\n      }\n    }\n    return times;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.substring(i, i + substring.length()).equals(substring)) {\n            times++;\n        }\n    }\n    return times;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length(); i++) {\n      if (string.substring(i).contains(substring)) {\n        times++;\n      }\n    }\n    return times;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int how_many_times(String string, String substring) {\n    int times = 0;\n    for (int i = 0; i < string.length() - substring.length(); i++) {\n      if (string.substring(i, i + substring.length()).equals(substring)) {\n        times++;\n      }\n    }\n    return times;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_NUMBERS": {
      "loc": "20-21",
      "input": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));",
      "function range": "6,5-27,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        return value_map.get(o2).compareTo(value_map.get(o1));\n      }\n    });\n    return String.join(\" \", number_array);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        return value_map.get(o1).compareTo(value_map.get(o2));\n      }\n    });\n    return String.join(\" \", number_array);\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        return value_map.get(o2).compareTo(value_map.get(o1));\n      }\n    });\n    return StringUtils.join(number_array, \" \");\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        return i1.compareTo(i2);\n      }\n    });\n    return String.join(\" \", number_array);\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String s1, String s2) {\n        Integer i1 = value_map.get(s1);\n        Integer i2 = value_map.get(s2);\n        return i1.compareTo(i2);\n      }\n    });\n    return String.join(\" \", number_array);\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String sort_numbers(String numbers) {\n    final HashMap<String, Integer> value_map = new HashMap<String, Integer>();\n    value_map.put(\"zero\", 0);\n    value_map.put(\"one\", 1);\n    value_map.put(\"two\", 2);\n    value_map.put(\"three\", 3);\n    value_map.put(\"four\", 4);\n    value_map.put(\"five\", 5);\n    value_map.put(\"six\", 6);\n    value_map.put(\"seven\", 7);\n    value_map.put(\"eight\", 8);\n    value_map.put(\"nine\", 9);\n    ArrayList<String> number_array = new ArrayList<String>(Arrays.asList(numbers.split(\" \")));\n    Collections.sort(number_array, new Comparator<String>() {\n      @Override\n      public int compare(String o1, String o2) {\n        Integer i1 = value_map.get(o1);\n        Integer i2 = value_map.get(o2);\n        return i1.compareTo(i2);\n      }\n    });\n    return StringUtils.join(number_array, \" \");\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_CLOSEST_ELEMENTS": {
      "loc": "9-10",
      "input": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){",
      "function range": "4,5-24,5",
      "output": [
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double current_distance = Math.abs(numbers[i] - numbers[j]);\n        if (current_distance < distance){\n          distance = current_distance;\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double current_distance = Math.abs(numbers[i] - numbers[j]);\n        if (current_distance < distance){\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n          distance = current_distance;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = 0; j < numbers.length; j += 1){\n        if (i!= j){\n          double d = Math.abs(numbers[i] - numbers[j]);\n          if (d < distance){\n            distance = d;\n            result[0] = numbers[i];\n            result[1] = numbers[j];\n          }\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double current_distance = Math.abs(numbers[i] - numbers[j]);\n        if (current_distance < distance){\n          distance = current_distance;\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < distance){\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = 0; j < numbers.length; j += 1){\n        if (i!= j){\n          double d = Math.abs(numbers[i] - numbers[j]);\n          if (d < distance){\n            distance = d;\n            result[0] = numbers[i];\n            result[1] = numbers[j];\n          }\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double d = distance(numbers[i], numbers[j]);\n        if (d < distance){\n          distance = d;\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double d = distance(numbers[i], numbers[j]);\n        if (d < distance){\n          distance = d;\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double d = distance(numbers[i], numbers[j]);\n        if (d < distance){\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n          distance = d;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static double[] find_closest_elements(double[] numbers) {\n    double[] result = new double[2];\n    double distance = Double.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i += 1){\n      for (int j = i + 1; j < numbers.length; j += 1){\n        double d = distance(numbers[i], numbers[j]);\n        if (d < distance){\n          result[0] = numbers[i];\n          result[1] = numbers[j];\n          distance = d;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "RESCALE_TO_UNIT": {
      "loc": "12-13",
      "input": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }",
      "function range": "4,5-22,5",
      "output": [
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] rescaled = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        rescaled[i] = (numbers[i] - min) / (max - min);\n    }\n    return rescaled;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    double[] rescaled = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        rescaled[i] = (numbers[i] - min) / range;\n    }\n    return rescaled;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        result[i] = (numbers[i] - min) / range;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double[] rescaled = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i += 1) {\n        rescaled[i] = (numbers[i] - min) / (max - min);\n    }\n    return rescaled;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double[] rescale_to_unit(double[] numbers){\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (int i = 0; i < numbers.length; i += 1) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    double range = max - min;\n    for (int i = 0; i < numbers.length; i += 1) {\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FILTER_INTEGERS": {
      "loc": "11-12",
      "input": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer)value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer){\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> filter_integers(List<Object> values) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Object value : values){\n      if (value instanceof Integer) {\n        result.add((Integer) value);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "STRLEN": {
      "loc": "5-6",
      "input": "public static int strlen(String string){",
      "function range": "4,5-6,5",
      "output": [
        {
          "patch": "public static int strlen(String string){\n\t\treturn string.length();\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\r\n\t\treturn string.length();\r\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n\t\treturn string.length();\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\r\n\t\treturn string.length();\r\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\r\n\t\treturn string.length();\r\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n\t\treturn string.length();\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\r\n\t\treturn string.length();\r\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n\t\treturn string.length();\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\r\n\t\treturn string.length();\r\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int strlen(String string){\n\t\treturn string.length();\n\t}",
          "correctness": "plausible"
        }
      ]
    },
    "LARGEST_DIVISOR": {
      "loc": "5-6",
      "input": "public static int largest_divisor(int n) {",
      "function range": "4,5-10,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int largest_divisor(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n % 2 == 0) {\n            return largest_divisor(n / 2);\n        } else {\n            return largest_divisor(n - 1);\n        }\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIZE": {
      "loc": "20-21",
      "input": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }",
      "function range": "7,5-21,5",
      "output": [
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n!= 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n!= 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> factorize(int n){\n    List<Integer> result = new ArrayList<Integer>();\n    int i = 2;\n    while (i <= (int)(Math.sqrt(n) + 1)){\n        if (n % i == 0){\n            result.add(i);\n            n = n / i;\n        } else{\n            i += 1;\n        }\n    }\n    if (n > 1){\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "REMOVE_DUPLICATES": {
      "loc": "13-14",
      "input": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){",
      "function range": "8,5-22,5",
      "output": [
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) == 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n)+1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) == 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n      if (entry.getValue() == 1){\n        result.add(entry.getKey());\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) == 1){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Map.Entry<Integer, Integer> entry : count.entrySet()){\n      result.add(entry.getKey());\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n) + 1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) == 1){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      result.add(n);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n      if (count.containsKey(n)){\n        count.put(n, count.get(n) + 1);\n      } else {\n        count.put(n, 1);\n      }\n    }\n    for (Integer n : count.keySet()){\n      if (count.get(n) == 1){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n)+1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) == 1){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> remove_duplicates(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n    for (Integer n : numbers){\n        if (count.containsKey(n)){\n            count.put(n, count.get(n)+1);\n        } else {\n            count.put(n, 1);\n        }\n    }\n    for (Integer n : count.keySet()){\n        if (count.get(n) == 1){\n            result.add(n);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FLIP_CASE": {
      "loc": "10-14",
      "input": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {",
      "function range": "4,5-17,5",
      "output": [
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return new String(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        }\n        else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String flip_case(String string) {\n    char[] char_list = string.toCharArray();\n    for (int i = 0; i < char_list.length; i += 1){\n        char c = char_list[i];\n        if (Character.isLowerCase(c)) {\n            char_list[i] = Character.toUpperCase(c);\n        } else if (Character.isUpperCase(c)) {\n            char_list[i] = Character.toLowerCase(c);\n        }\n    }\n    return String.valueOf(char_list);\n}",
          "correctness": "plausible"
        }
      ]
    },
    "CONCATENATE": {
      "loc": "5-6",
      "input": "public static String concatenate(String[] strings) {",
      "function range": "4,5-9,5",
      "output": [
        {
          "patch": "public static String concatenate(String[] strings) {\n    if (strings.length == 0) {\n      return \"\";\n    } else if (strings.length == 1) {\n      return strings[0];\n    } else {\n      StringBuilder sb = new StringBuilder();\n      sb.append(strings[0]);\n      for (int i = 1; i < strings.length; i++) {\n        sb.append(strings[i]);\n      }\n      return sb.toString();\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n        if (strings.length == 0) {\n            return \"\";\n        } else if (strings.length == 1) {\n            return strings[0];\n        } else {\n            StringBuilder sb = new StringBuilder();\n            sb.append(strings[0]);\n            for (int i = 1; i < strings.length; i++) {\n                sb.append(strings[i]);\n            }\n            return sb.toString();\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n        if (strings.length == 0) {\n            return \"\";\n        } else if (strings.length == 1) {\n            return strings[0];\n        } else {\n            StringBuilder sb = new StringBuilder();\n            sb.append(strings[0]);\n            for (int i = 1; i < strings.length; i++) {\n                sb.append(\" \").append(strings[i]);\n            }\n            return sb.toString();\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    if (strings.length == 0) {\n      return \"\";\n    } else if (strings.length == 1) {\n      return strings[0];\n    } else {\n      StringBuilder sb = new StringBuilder();\n      sb.append(strings[0]);\n      for (int i = 1; i < strings.length; i++) {\n        sb.append(\" \").append(strings[i]);\n      }\n      return sb.toString();\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    if (strings.length == 0) {\n      return \"\";\n    } else if (strings.length == 1) {\n      return strings[0];\n    } else {\n      StringBuilder sb = new StringBuilder();\n      sb.append(strings[0]);\n      for (int i = 1; i < strings.length; i++) {\n        sb.append(strings[i]);\n      }\n      return sb.toString();\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n        if (strings.length == 0) {\n            return \"\";\n        } else if (strings.length == 1) {\n            return strings[0];\n        } else {\n            StringBuilder sb = new StringBuilder();\n            sb.append(strings[0]);\n            for (int i = 1; i < strings.length; i++) {\n                sb.append(strings[i]);\n            }\n            return sb.toString();\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    if (strings.length == 0) {\n      return \"\";\n    } else if (strings.length == 1) {\n      return strings[0];\n    } else {\n      StringBuilder sb = new StringBuilder();\n      sb.append(strings[0]);\n      for (int i = 1; i < strings.length; i++) {\n        sb.append(\" \").append(strings[i]);\n      }\n      return sb.toString();\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n        if (strings.length == 0) {\n            return \"\";\n        } else if (strings.length == 1) {\n            return strings[0];\n        } else {\n            StringBuilder sb = new StringBuilder();\n            sb.append(strings[0]);\n            for (int i = 1; i < strings.length; i++) {\n                sb.append(\" \").append(strings[i]);\n            }\n            return sb.toString();\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n    if (strings.length == 0) {\n      return \"\";\n    } else if (strings.length == 1) {\n      return strings[0];\n    } else {\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < strings.length; i++) {\n        sb.append(strings[i]);\n      }\n      return sb.toString();\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String concatenate(String[] strings) {\n        if (strings.length == 0) {\n            return \"\";\n        } else if (strings.length == 1) {\n            return strings[0];\n        } else {\n            StringBuilder sb = new StringBuilder();\n            for (String s : strings) {\n                sb.append(s);\n            }\n            return sb.toString();\n        }\n    }",
          "correctness": "plausible"
        }
      ]
    },
    "FILTER_BY_PREFIX": {
      "loc": "11-12",
      "input": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){",
      "function range": "7,5-16,5",
      "output": [
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)){\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<String> filter_by_prefix(List<String> strings, String prefix) {\n    List<String> result = new ArrayList<String>();\n    for (String string : strings){\n      if (string.startsWith(prefix)) {\n        result.add(string);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "GET_POSITIVE": {
      "loc": "11-12",
      "input": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {",
      "function range": "7,5-14,5",
      "output": [
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n      if (number > 0) {\n        result.add(number);\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> get_positive(List<Integer> numbers) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer number : numbers) {\n        if (number > 0) {\n            result.add(number);\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "IS_PRIME": {
      "loc": "7-8",
      "input": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;",
      "function range": "4,5-12,5",
      "output": [
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= Math.sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2 || n == 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= Math.sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2 || n == 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (int i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= Math.sqrt(n); i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i <= Math.sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for (int i = 3; i < n; i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_prime(int n){\n    if (n < 2)\n        return false;\n    if (n == 2 || n == 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "FIND_ZERO": {
      "loc": "25-26",
      "input": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return (begin + end) / 2.;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double find_zero(List<Double> xs){\n    double begin = -1.;\n    double end = 1.;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.;\n        end *= 2.;\n    }\n    while (end - begin > 1e-10) {\n        double center = (begin + end) / 2.;\n        if (poly(xs, center) * poly(xs, begin) * poly(xs, end) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_THIRD": {
      "loc": "19-20",
      "input": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){",
      "function range": "8,5-25,5",
      "output": [
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i/3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else if (i % 3 == 1){\n            result.add(thirds.get(1));\n            thirds.remove(1);\n        } else if (i % 3 == 2){\n            result.add(thirds.get(2));\n            thirds.remove(2);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i / 3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i/3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else if (i % 3 == 1){\n            result.add(thirds.get(1));\n            thirds.remove(1);\n        } else {\n            result.add(thirds.get(2));\n            thirds.remove(2);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else if (i % 3 == 1){\n            result.add(thirds.get(1));\n            thirds.remove(1);\n        } else if (i % 3 == 2){\n            result.add(thirds.get(2));\n            thirds.remove(2);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else if (i % 3 == 1){\n            result.add(thirds.get(1));\n            thirds.remove(1);\n        } else if (i % 3 == 2){\n            result.add(thirds.get(2));\n            thirds.remove(2);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else if (i % 3 == 1){\n            result.add(thirds.get(1));\n            thirds.remove(1);\n        } else {\n            result.add(thirds.get(2));\n            thirds.remove(2);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(i / 3));\n        } else {\n            result.add(l.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> sort_third(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    List<Integer> thirds = new ArrayList<Integer>();\n    for (int i = 0; i < l.size(); i += 3){\n        thirds.add(l.get(i));\n    }\n    Collections.sort(thirds);\n    for (int i = 0; i < l.size(); i += 1){\n        if (i % 3 == 0){\n            result.add(thirds.get(0));\n            thirds.remove(0);\n        } else if (i % 3 == 1){\n            result.add(thirds.get(1));\n            thirds.remove(1);\n        } else {\n            result.add(thirds.get(2));\n            thirds.remove(2);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE": {
      "loc": "12-13",
      "input": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){",
      "function range": "8,5-17,5",
      "output": [
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)) {\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n))\n        result.add(n);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if(!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (result.contains(n)){\n        continue;\n      }\n      result.add(n);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> unique(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l){\n      if (!result.contains(n)){\n        result.add(n);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_ELEMENT": {
      "loc": "7-8",
      "input": "public static int max_element(List<Integer> l) {",
      "function range": "6,5-14,5",
      "output": [
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n\t\tint max = l.get(0);\n\t\tfor (int i = 1; i < l.size(); i++) {\n\t\t\tif (l.get(i) > max) {\n\t\t\t\tmax = l.get(i);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (max < l.get(i)) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int max_element(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }",
          "correctness": "plausible"
        }
      ]
    },
    "FIZZ_BUZZ": {
      "loc": "9-11",
      "input": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {",
      "function range": "4,5-16,5",
      "output": [
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else {\n            result += 2;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else if (i % 5 == 0) {\n            result += 2;\n        } else {\n            result += 3;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        }\n        if (i % 5 == 0) {\n            result += 2;\n        }\n        if (i % 3 == 0) {\n            result += 3;\n        }\n        if (i % 7 == 0) {\n            result += 5;\n        }\n        if (i % 11 == 0) {\n            result += 10;\n        }\n        if (i % 13 == 0) {\n            result += 20;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else if (i % 5 == 0) {\n            result += 2;\n        } else if (i % 3 == 0) {\n            result += 3;\n        } else {\n            result += 1;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else if (i % 5 == 0) {\n            result += 2;\n        } else if (i % 3 == 0) {\n            result += 3;\n        } else {\n            result += i;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fizz_buzz(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 1){\n        if (i % 11 == 0 || i % 13 == 0) {\n            result += 1;\n        } else if (i % 5 == 0) {\n            result += 2;\n        } else if (i % 3 == 0) {\n            result += 3;\n        } else {\n            result += 4;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_EVEN": {
      "loc": "9-10",
      "input": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];",
      "function range": "6,5-22,5",
      "output": [
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = l[i] + 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = l[i] - 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = l[i] * 2;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = l[i] + 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] sort_even(int[] l) {\n    int[] result = new int[l.length];\n    for (int i = 0; i < l.length; i++) {\n      if (l[i] % 2 == 0) {\n        result[i] = l[i];\n      } else {\n        result[i] = l[i] + 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_CYCLIC": {
      "loc": "11-12",
      "input": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();",
      "function range": "8,13-26,13",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n        String group = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s.charAt(j) == s.charAt(i)) {\n                group += s.charAt(j);\n            } else {\n                groups.add(group);\n                group = \"\";\n            }\n        }\n        groups.add(group);\n    }\n    return groups.get(0);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n        String group = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s.charAt(j) == s.charAt(i)) {\n                group += s.charAt(j);\n            } else {\n                groups.add(group);\n                group = \"\";\n            }\n        }\n        groups.add(group);\n    }\n    return groups.get(groups.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n        String group = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s.charAt(j) == s.charAt(i)) {\n                group += s.charAt(j);\n            } else {\n                groups.add(group);\n                group = \"\";\n            }\n        }\n        groups.add(group);\n    }\n    return groups.get(groups.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n        String group = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s.charAt(j) == s.charAt(i)) {\n                group += s.charAt(j);\n            } else {\n                groups.add(group);\n                group = \"\";\n            }\n        }\n        groups.add(group);\n    }\n    return String.join(\"\", groups);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "String encode_cyclic(String s) {\n    ArrayList<String> groups = new ArrayList<String>();\n    for (int i = 0; i < s.length(); i++) {\n        String group = \"\";\n        for (int j = i; j < s.length(); j++) {\n            if (s.charAt(j) == s.charAt(i)) {\n                group += s.charAt(j);\n            } else {\n                groups.add(group);\n                group = \"\";\n            }\n        }\n        groups.add(group);\n    }\n    return groups.toString();\n}",
          "correctness": "timeout"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "PRIME_FIB": {
      "loc": "23-25",
      "input": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();",
      "function range": "16,5-29,5",
      "output": [
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) >= n) {\n            return fib.get(len - 1);\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(n)!= 0) {\n            return fib.get(n);\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) > n) {\n            return -1;\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(len - 1);\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) > n) {\n            break;\n        }\n    }\n    return fib.get(len - 1);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 2; i < len; i++) {\n            fib.add(fib.get(i-1) + fib.get(i-2));\n        }\n        if (fib.get(len-1) >= n) {\n            return fib.get(len-1);\n        }\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) > n) {\n            break;\n        }\n        fib.remove(len - 1);\n    }\n    return fib.get(len - 1);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) > n) {\n            return -1;\n        }\n        if (fib.get(len - 1) == n) {\n            return fib.get(len - 2);\n        }\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) > n) {\n            break;\n        }\n    }\n    return fib.get(len - 1);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) >= n) {\n            return fib.get(len - 1);\n        }\n        fib.remove(len - 1);\n    }\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static int prime_fib(int n){\n    ArrayList<Integer> fib = new ArrayList<Integer>();\n    fib.add(0);\n    fib.add(1);\n    while (true) {\n        int len = fib.size();\n        for (int i = 0; i < len - 1; i++) {\n            fib.add(fib.get(i) + fib.get(i + 1));\n        }\n        if (fib.get(len - 1) > n) {\n            return -1;\n        }\n        if (fib.get(len - 1) == n) {\n            break;\n        }\n    }\n    return fib.get(len - 1);\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRIPLES_SUM_TO_ZERO": {
      "loc": "23-25",
      "input": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {",
      "function range": "21,5-31,5",
      "output": [
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      for (int j = i + 1; j < numbers.length; j += 1) {\n        for (int k = j + 1; k < numbers.length; k += 1) {\n          if (numbers[i] + numbers[j] + numbers[k] == 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      for (int j = i + 1; j < numbers.length; j += 1) {\n        for (int k = j + 1; k < numbers.length; k += 1) {\n          for (int l = k + 1; l < numbers.length; l += 1) {\n            if (numbers[i] + numbers[j] + numbers[k] + numbers[l] == 0) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      for (int j = i + 1; j < numbers.length; j += 1) {\n        for (int k = j + 1; k < numbers.length; k += 1) {\n          if (numbers[i] + numbers[j] + numbers[k] == 0) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                if (numbers[i] + numbers[j] + numbers[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                for (int l = k + 1; l < numbers.length; l += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] + numbers[l] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      for (int j = i + 1; j < numbers.length; j += 1) {\n        for (int k = j + 1; k < numbers.length; k += 1) {\n          int sum = numbers[i] + numbers[j] + numbers[k];\n          if (sum!= 0) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n        for (int j = i + 1; j < numbers.length; j += 1) {\n            for (int k = j + 1; k < numbers.length; k += 1) {\n                for (int l = k + 1; l < numbers.length; l += 1) {\n                    if (numbers[i] + numbers[j] + numbers[k] + numbers[l] == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      for (int j = i + 1; j < numbers.length; j += 1) {\n        for (int k = j + 1; k < numbers.length; k += 1) {\n          if (numbers[i] + numbers[j] + numbers[k] == 0) return true;\n        }\n      }\n    }\n    return false;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean triples_sum_to_zero(int[] numbers) {\n    for (int i = 0; i < numbers.length; i += 1) {\n      for (int j = i + 1; j < numbers.length; j += 1) {\n        for (int k = j + 1; k < numbers.length; k += 1) {\n          for (int l = k + 1; l < numbers.length; l += 1) {\n            if (numbers[i] + numbers[j] + numbers[k] + numbers[l] == 0) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "CAR_RACE_COLLISION": {
      "loc": "15-16",
      "input": "public static int car_race_collision(int n) {",
      "function range": "14,5-16,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 3;\n        } else if (n == 4) {\n            return 4;\n        } else if (n == 5) {\n            return 5;\n        } else if (n == 6) {\n            return 6;\n        } else {\n            return 7;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t} else if (n == 1) {\n\t\t\treturn 1;\n\t\t} else if (n == 2) {\n\t\t\treturn 2;\n\t\t} else if (n == 3) {\n\t\t\treturn 3;\n\t\t} else if (n == 4) {\n\t\t\treturn 4;\n\t\t} else if (n == 5) {\n\t\t\treturn 5;\n\t\t} else if (n == 6) {\n\t\t\treturn 6;\n\t\t} else {\n\t\t\treturn 7;\n\t\t}\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        return 7;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int car_race_collision(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t} else if (n == 1) {\n\t\t\treturn 1;\n\t\t} else if (n == 2) {\n\t\t\treturn 2;\n\t\t} else if (n == 3) {\n\t\t\treturn 3;\n\t\t} else if (n == 4) {\n\t\t\treturn 4;\n\t\t} else if (n == 5) {\n\t\t\treturn 5;\n\t\t} else if (n == 6) {\n\t\t\treturn 6;\n\t\t} else {\n\t\t\treturn 7;\n\t\t}\n\t}",
          "correctness": "wrong"
        }
      ]
    },
    "INCR_LIST": {
      "loc": "17-18",
      "input": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n        result.add(n + 1);\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> incr_list(List<Integer> l) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (Integer n : l) {\n      result.add(n + 1);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "PAIRS_SUM_TO_ZERO": {
      "loc": "12-13",
      "input": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {",
      "function range": "10,5-18,5",
      "output": [
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) == 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) > 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) == 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        int sum = l.get(i) + l.get(j);\n        if (sum!= 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) < 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) == 0) return true;\n      }\n    }\n    return false;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        int sum = l.get(i) + l.get(j);\n        if (sum!= 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i)!= 0) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      if (l.get(i) > 0) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean pairs_sum_to_zero(List<Integer> l) {\n    for (int i = 0; i < l.size(); i += 1) {\n      for (int j = i + 1; j < l.size(); j += 1) {\n        if (l.get(i) + l.get(j) > 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "CHANGE_BASE": {
      "loc": "18-20",
      "input": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = Integer.toString(x % base, base) + result;\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = Integer.toString(x % base, base) + result;\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n        result = Integer.toString(x % base, base) + result;\n        x /= base;\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String change_base(int x, int base) {\n    String result = \"\";\n    while (x > 0) {\n      result = Integer.toString(x % base, base) + result;\n      x /= base;\n    }\n    return result;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "TRIANGLE_AREA": {
      "loc": "9-10",
      "input": "public static double triangle_area(double a, double h) {",
      "function range": "8,5-10,5",
      "output": [
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "timeout"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "timeout"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double triangle_area(double a, double h) {\n\t\treturn Math.sqrt(h * h - a * a);\n\t}",
          "correctness": "wrong"
        }
      ]
    },
    "FIB4": {
      "loc": "33-34",
      "input": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fib4(int n) {\n    ArrayList<Integer> result = new ArrayList<Integer>(); \n    result.add(0);\n    result.add(0);\n    result.add(2);\n    result.add(0);\n    if (n < 4)\n        return result.get(n);\n    for (int i = 4; i < n + 1; i += 1) {\n        result.add(\n            result.get(0) + result.get(1) + result.get(2) + result.get(3)\n        );\n    }\n    return result.get(n);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MEDIAN": {
      "loc": "18-19",
      "input": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2;\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static double median(int[] list) {\n    Arrays.sort(list);\n    if (list.length % 2 == 1) {\n        return list[(int) (list.length / 2)];\n    } else {\n        return (list[(int) (list.length / 2) - 1] + list[(int) (list.length / 2)]) / 2.0;\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "IS_PALINDROME": {
      "loc": "16-20",
      "input": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){",
      "function range": "14,5-20,5",
      "output": [
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - i - 1)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - 1 - i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)){\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - 1 - i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1))\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        for (int j = i + 1; j < text.length(); j += 1){\n            if (text.charAt(i)!= text.charAt(j)){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n      if (text.charAt(i)!= text.charAt(text.length() - i - 1))\n        return false;\n    }\n    return true;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        if (text.charAt(i)!= text.charAt(text.length() - i - 1)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_palindrome(String text) {\n    for (int i = 0; i < text.length(); i += 1){\n        for (int j = i + 1; j < text.length(); j += 1){\n            if (text.charAt(i)!= text.charAt(j)){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MODP": {
      "loc": "19-22",
      "input": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (result * n) % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n      result = (result * n) % p;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = result * n % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (result * n) % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (result * n) % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (result * n) % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (result * n) % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result *= p;\n        result %= p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int modp(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < n; i += 1){\n        result = (result * n) % p;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DECODE_SHIFT": {
      "loc": "19-20",
      "input": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {",
      "function range": "16,5-23,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 10));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append((char) (c - 'A' + 10));\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 10));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append((char) (c - 'A' + 10));\n      } else if (c >= '0' && c <= '9') {\n        sb.append((char) (c - '0'));\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 10));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append((char) (c - 'A' + 10));\n      } else if (c >= '0' && c <= '9') {\n        sb.append((char) (c - '0'));\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 10));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append((char) (c - 'A' + 10));\n      } else if (c >= '0' && c <= '9') {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decode_shift(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c >= 'a' && c <= 'z') {\n        sb.append((char) (c - 'a' + 10));\n      } else if (c >= 'A' && c <= 'Z') {\n        sb.append((char) (c - 'A' + 10));\n      } else {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "REMOVE_VOWELS": {
      "loc": "21-22",
      "input": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (c!= 'a' && c!= 'e' && c!= 'i' && c!= 'o' && c!= 'u' && c!= 'y') {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String remove_vowels(String string) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : string.toCharArray()) {\n      if (!isVowel(c)) {\n        sb.append(c);\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "BELOW_THRESHOLD": {
      "loc": "12-16",
      "input": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {",
      "function range": "10,5-16,5",
      "output": [
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] >= t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return true;\n      }\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] >= t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] < t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean below_threshold(int[] l, int t) {\n    for (int i = 0; i < l.length; i += 1) {\n      if (l[i] > t) return false;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "ADD": {
      "loc": "11-12",
      "input": "public static int add(int x, int y) {",
      "function range": "10,5-12,5",
      "output": [
        {
          "patch": "public static int add(int x, int y) {\r\n\t\treturn x + y;\r\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\r\n        return x + y;\r\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n        return x + y;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n        return x + y;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n        return x + y;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n        return x + y;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n        return x + y;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n\t\treturn x + y;\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n\t\treturn x + y;\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int add(int x, int y) {\n\t\treturn x + y;\n\t}",
          "correctness": "plausible"
        }
      ]
    },
    "SAME_CHARS": {
      "loc": "21-23",
      "input": "public static boolean same_chars(String s0, String s1) {",
      "function range": "20,5-31,5",
      "output": [
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n\t\tif (s0.length()!= s1.length()) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < s0.length(); i++) {\n\t\t\tif (s0.charAt(i)!= s1.charAt(i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null || s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\r\n\t\tif (s0.length()!= s1.length()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (int i = 0; i < s0.length(); i++) {\r\n\t\t\tif (s0.charAt(i)!= s1.charAt(i)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\r\n\t\tif (s0.length()!= s1.length()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tfor (int i = 0; i < s0.length(); i++) {\r\n\t\t\tif (s0.charAt(i)!= s1.charAt(i)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0 == null || s1 == null) {\n            return false;\n        }\n        if (s0.length()!= s1.length()) {\n            return false;\n        }\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length()) return false;\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i)) return false;\n        }\n        return true;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean same_chars(String s0, String s1) {\n        if (s0.length()!= s1.length())\n            return false;\n        for (int i = 0; i < s0.length(); i++) {\n            if (s0.charAt(i)!= s1.charAt(i))\n                return false;\n        }\n        return true;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "FIB": {
      "loc": "13-14",
      "input": "public static int fib(int n) {",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n\t\tif (n == 0) {\n\t\t\treturn 0;\n\t\t} else if (n == 1) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn fib(n - 1) + fib(n - 2);\n\t\t}\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int fib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }\n    }",
          "correctness": "plausible"
        }
      ]
    },
    "CORRECT_BRACKETING": {
      "loc": "23-27",
      "input": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;",
      "function range": "16,5-27,5",
      "output": [
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n    }\n    return depth == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    return depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    if (depth!= 0)\n        return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    if (depth!= 0)\n        return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    if (depth!= 0)\n        return false;\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth == 0;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean correct_bracketing(String brackets) {\n    int depth = 0;\n    for (char b : brackets.toCharArray()) {\n        if (b == '<')\n            depth += 1;\n        else\n            depth -= 1;\n        if (depth < 0)\n            return false;\n    }\n    if (depth!= 0)\n        return false;\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "MONOTONIC": {
      "loc": "18-19",
      "input": "public static boolean monotonic(int[] l) {\n    int[] sorted = new int[l.length];\n    int[] reverse_sorted = new int[l.length];",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "COMMON": {
      "loc": "13-14",
      "input": "public static int[] common(int[] l1, int[] l2) {",
      "function range": "12,5-29,5",
      "output": [
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = l2[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < common.length; i++) {\n\t\t\tcommon[i] = Math.min(l1[i], l2[i]);\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] common(int[] l1, int[] l2) {\n\t\tint[] common = new int[l1.length];\n\t\tfor (int i = 0; i < l1.length; i++) {\n\t\t\tfor (int j = 0; j < l2.length; j++) {\n\t\t\t\tif (l1[i] == l2[j]) {\n\t\t\t\t\tcommon[i] = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn common;\n\t}",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_PRIME_FACTOR": {
      "loc": "23-25",
      "input": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {",
      "function range": "20,5-28,5",
      "output": [
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        while (n % j == 0) {\n            largest = j;\n            n /= j;\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = Math.max(largest, j);\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (largest < j) {\n                largest = j;\n            }\n            n /= j;\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n            while (n % j == 0) {\n                n /= j;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n            n /= j;\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (largest < j) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            largest = j;\n            while (n % j == 0) {\n                n /= j;\n            }\n        }\n    }\n    if (n > 1) {\n        largest = n;\n    }\n    return largest;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        if (n % j == 0) {\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        while (n % j == 0) {\n            n /= j;\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    return largest;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int largest_prime_factor(int n) {\n    int largest = 1;\n    for (int j = 2; j < n; j += 1) {\n        while (n % j == 0) {\n            n /= j;\n            if (j > largest) {\n                largest = j;\n            }\n        }\n    }\n    if (n > 1) {\n        largest = n;\n    }\n    return largest;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SUM_TO_N": {
      "loc": "17-18",
      "input": "public static int sum_to_n(int n) {",
      "function range": "16,5-18,5",
      "output": [
        {
          "patch": "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_to_n(int n) {\n\t\tint sum = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}",
          "correctness": "plausible"
        }
      ]
    },
    "DERIVATIVE": {
      "loc": "18-20",
      "input": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> derivative(List<Integer> xs) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 1; i < xs.size(); i++) {\n      result.add(xs.get(i) - xs.get(i - 1));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FIBFIB": {
      "loc": "22-23",
      "input": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n\n    return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n\n    return fibfib(n-1) + fibfib(n-2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 1;\n    return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if (n == 3)\n        return 1;\n    if (n == 4)\n        return 2;\n    if (n == 5)\n        return 3;\n    if (n == 6)\n        return 5;\n    if (n == 7)\n        return 8;\n    if (n == 8)\n        return 13;\n    if (n == 9)\n        return 21;\n    return fibfib(n - 1) + fibfib(n - 2);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "VOWELS_COUNT": {
      "loc": "24-25",
      "input": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }",
      "function range": "15,5-27,5",
      "output": [
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int vowels_count(String str) {\n    int result = 0;\n    char[] str_chars = str.toCharArray();\n    for (char c : str_chars) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\n                || c == 'U')\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CIRCULAR_SHIFT": {
      "loc": "21-22",
      "input": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {",
      "function range": "12,5-23,5",
      "output": [
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        return s.substring(shift, s.length());\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = shift; i < s.length(); i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length() - shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(s.length() - 1 - i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString() + s.substring(shift);\n    }\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String circular_shift(int x, int shift) {\n    String s = x + \"\";\n    if (shift > s.length()) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i -= 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    } else {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length() - shift; i += 1)\n            sb.append(s.charAt(i));\n        return sb.toString();\n    }\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DIGIT_SUM": {
      "loc": "19-21",
      "input": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {",
      "function range": "16,5-25,5",
      "output": [
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += c - '0';\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += Character.digit(c, 10);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += Character.digit(c, 10);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += (int) c - (int) '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += c - '0';\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digit_sum(String s) {\n    int result = 0;\n    for (char c : s.toCharArray()) {\n      result += c - '0';\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FRUIT_DISTRIBUTION": {
      "loc": "19-21",
      "input": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result -= Integer.parseInt(str);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result *= Integer.parseInt(str);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      if (Integer.parseInt(str) > result) {\n        result = Integer.parseInt(str);\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int fruit_distribution(String s, int n) {\n    int result = n;\n    for (String str : s.split(\" \")) {\n      result = Math.min(result, Integer.parseInt(str));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "PLUCK": {
      "loc": "37-39",
      "input": "public static int[] pluck(int[] arr) {",
      "function range": "36,5-49,5",
      "output": [
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] res = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            res[i] = arr[i];\n        }\n        return res;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] res = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            res[i] = arr[i];\n        }\n        return res;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] pluck(int[] arr) {\n        int[] result = new int[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "SEARCH": {
      "loc": "21-24",
      "input": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (Integer i : lst) {\n        if (i == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            result = i;\n            max = lst[i];\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            result = i;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max)\n            result = i;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (Integer i : lst) {\n        if (i == max)\n            result = i;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int search(int[] lst) {\n    int max = -1;\n    for (Integer i : lst) {\n        if (i > max)\n            max = i;\n    }\n    int result = -1;\n    for (int i = 0; i < lst.length; i++) {\n        if (lst[i] == max) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRANGE_SORT_LIST": {
      "loc": "27-28",
      "input": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }",
      "function range": "17,5-29,5",
      "output": [
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(0);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(0);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(Collections.min(lst));\n        lst.remove(Collections.max(lst));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        Collections.sort(lst);\n    }\n    return result;\n}",
          "correctness": "timeout"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst = lst.subList(1, lst.size());\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst = lst.subList(1, lst.size());\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(result.get(result.size() - 1));\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        lst.remove(result.get(result.size() - 1));\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static List<Integer> strange_sort_list(List<Integer> lst) {\n    List<Integer> result = new ArrayList<Integer>();\n    boolean switched = true;\n    while (lst.size() > 0) {\n        if (switched) {\n            result.add(Collections.min(lst));\n        } else {\n            result.add(Collections.max(lst));\n        }\n        switched =!switched;\n        Collections.sort(lst, Collections.reverseOrder());\n    }\n    return result;\n}",
          "correctness": "timeout"
        }
      ]
    },
    "TRIANGLE_AREA_2": {
      "loc": "16-17",
      "input": "",
      "function range": "16,5-26,5",
      "output": []
    },
    "WILL_IT_FLY": {
      "loc": "32-33",
      "input": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i] != q[j])   return false;",
      "function range": "20,5-34,5",
      "output": [
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i += 1; j -= 1;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean will_it_fly(int[] q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.length; i += 1)\n        sum += q[i];\n    if (sum > w)\n        return false;\n    int i = 0;\n    int j = q.length - 1;\n    while (i < j) {\n        if (q[i]!= q[j])   return false;\n        i++;\n        j--;\n    }\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SMALLEST_CHANGE": {
      "loc": "15-17",
      "input": "public static int smallest_change(int[] arr) {\n    int result = 0;",
      "function range": "13,5-21,5",
      "output": [
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] + arr[j] < arr[j]) {\n                result = Math.max(result, arr[i] + arr[j] - arr[j]);\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n      for (int j = i + 1; j < arr.length; j++) {\n        if (arr[i] + arr[j] < arr[j]) {\n          result = Math.max(result, arr[i] + arr[j] - arr[j]);\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] + arr[j] < arr[j]) {\n                result = Math.max(result, arr[i] + arr[j] - arr[j]);\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                result = Math.max(result, Math.abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                result = Math.max(result, Math.abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            result = Math.max(result, arr[i] - arr[i - 1]);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] + arr[j] < arr[j]) {\n                result = Math.max(result, arr[i] + arr[j]);\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            result = Math.max(result, arr[i] - arr[i - 1]);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i]!= arr[j]) {\n                result = Math.max(result, Math.abs(arr[i] - arr[j]));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int smallest_change(int[] arr) {\n    int result = 0;\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                result = Math.max(result, arr[i] - arr[j]);\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "TOTAL_MATCH": {
      "loc": "23-25",
      "input": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;",
      "function range": "18,5-29,5",
      "output": [
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    if (l1 > l2)\n        return lst1;\n    else\n        return lst2;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return lst1.subList(0, Math.min(l1, l2));\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    return total_match(l1, l2);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> lst = new ArrayList<String>();\n    for (int i = 0; i < Math.max(l1, l2); i++) {\n        if (i < l1)\n            lst.add(lst1.get(i));\n        else\n            lst.add(lst2.get(i - l1));\n    }\n    return lst;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<String> total_match(List<String> lst1, List<String> lst2) {\n    int l1 = 0;\n    for (String st : lst1)\n        l1 += st.length();\n    int l2 = 0;\n    for (String st : lst2)\n        l2 += st.length();\n    List<String> lst = new ArrayList<String>();\n    for (int i = 0; i < Math.max(l1, l2); i++) {\n        if (i < l1)\n            lst.add(lst1.get(i));\n        if (i < l2)\n            lst.add(lst2.get(i));\n    }\n    return lst;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_MULTIPLY_PRIME": {
      "loc": "23-24",
      "input": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {",
      "function range": "19,5-31,5",
      "output": [
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0){\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (a % j == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_multiply_prime(int a) {\n    for (int i = 2; i < a; i += 1){\n        if (! is_prime(i)) continue;\n        for (int j = i; j < a; j += 1) {\n            if (! is_prime(j)) continue;\n            if (a % j == 0) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "IS_SIMPLE_POWER": {
      "loc": "16-17",
      "input": "public static boolean is_simple_power(int x, int n) {",
      "function range": "15,5-21,5",
      "output": [
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(x * 3 + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(3 * x + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(3 * x + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(3 * x + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(x * 3 + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(x * 3 + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(3 * x + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (x == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(3 * x + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_simple_power(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (x == 0) {\n            return true;\n        }\n        if (x == 1) {\n            return false;\n        }\n        if (x % 2 == 0) {\n            return is_simple_power(x / 2, n - 1);\n        } else {\n            return is_simple_power(3 * x + 1, n - 1);\n        }\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "ISCUBE": {
      "loc": "19-20",
      "input": "public static boolean iscude(int a) {",
      "function range": "18,5-24,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n        if (a < 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n            return true;\n        }\n        if (a == 4) {\n            return true;\n        }\n        if (a == 5) {\n            return true;\n        }\n        if (a == 6) {\n            return true;\n        }\n        return false;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean iscude(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a == 2) {\n            return true;\n        }\n        if (a == 3) {\n            return true;\n        }\n        if (a == 4) {\n            return true;\n        }\n        if (a == 5) {\n            return true;\n        }\n        if (a == 6) {\n            return true;\n        }\n        return false;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "HEX_KEY": {
      "loc": "24-25",
      "input": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {",
      "function range": "21,5-28,5",
      "output": [
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + c - 'A' + 10;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      result <<= 4;\n      if (c >= '0' && c <= '9') {\n        result |= c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result |= c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result |= c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int hex_key(String num) {\n    int result = 0;\n    for (char c : num.toCharArray()) {\n      if (c >= '0' && c <= '9') {\n        result = result * 16 + c - '0';\n      } else if (c >= 'a' && c <= 'f') {\n        result = result * 16 + c - 'a' + 10;\n      } else if (c >= 'A' && c <= 'F') {\n        result = result * 16 + c - 'A' + 10;\n      } else {\n        return -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "DECIMAL_TO_BINARY": {
      "loc": "16-17",
      "input": "public static String decimal_to_binary(int decimal) {",
      "function range": "15,5-18,5",
      "output": [
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String decimal_to_binary(int decimal) {\n        if (decimal == 0) {\n            return \"0\";\n        }\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = Integer.toBinaryString(decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "IS_HAPPY": {
      "loc": "19-20",
      "input": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {",
      "function range": "15,5-23,5",
      "output": [
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i) == s.charAt(i + 1) && s.charAt(i) == s.charAt(i + 2)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_happy(String s) {\n    if (s.length() < 3)\n        return false;\n    for (int i = 0; i < s.length() - 2; i += 1) {\n        if (s.charAt(i)!= s.charAt(i + 1) || s.charAt(i)!= s.charAt(i + 2))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NUMERICAL_LETTER_GRADE": {
      "loc": "45-51",
      "input": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";",
      "function range": "26,5-59,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else\n            letter_grade[i] = \"D\";\n    }\n    return letter_grade;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else\n            letter_grade[i] = \"D\";\n    }\n    return letter_grade;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String[] numerical_letter_grade(double[] grades) {\n    String[] letter_grade = new String[grades.length];\n    for (int i = 0; i < grades.length; i += 1) {\n        double gpa = grades[i];\n        if (gpa == 4.0)\n            letter_grade[i] = \"A+\";\n        else if (gpa > 3.7)\n            letter_grade[i] = \"A\";\n        else if (gpa > 3.3)\n            letter_grade[i] = \"A-\";\n        else if (gpa > 3.0)\n            letter_grade[i] = \"B+\";\n        else if (gpa > 2.7)\n            letter_grade[i] = \"B\";\n        else if (gpa > 2.3)\n            letter_grade[i] = \"B-\";\n        else if (gpa > 2.0)\n            letter_grade[i] = \"C+\";\n        else if (gpa > 1.7)\n            letter_grade[i] = \"C\";\n        else if (gpa > 1.3)\n            letter_grade[i] = \"C-\";\n        else if (gpa > 1.0)\n            letter_grade[i] = \"D+\";\n        else if (gpa > 0.7)\n            letter_grade[i] = \"D\";\n        else\n            letter_grade[i] = \"F\";\n    }\n    return letter_grade;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "PRIME_LENGTH": {
      "loc": "17-18",
      "input": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(0))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(0))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(0))\n            return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(0)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (l % i == 0)\n            return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i) == string.charAt(0)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean prime_length(String string) {\n    int l = string.length();\n    if (l <= 1)\n        return false;\n    for (int i = 2; i < l; i += 1) {\n        if (string.charAt(i)!= string.charAt(0))\n            continue;\n        for (int j = i + 1; j < l; j += 1) {\n            if (string.charAt(i) == string.charAt(j))\n                return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STARTS_ONE_ENDS": {
      "loc": "10-11",
      "input": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;",
      "function range": "7,5-11,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int starts_one_ends(int n) {\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    return n;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SOLVE": {
      "loc": "20-21",
      "input": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += (N + \"\").charAt(i);\n    }\n    return sum;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(\"\" + (N + \"\").charAt(i));\n    }\n    return String.valueOf(sum);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(\"\" + (N + \"\").charAt(i));\n    }\n    return \"\" + sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += Integer.parseInt(\"\" + (N + \"\").charAt(i));\n    }\n    return sum;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += (N + \"\").charAt(i) - '0';\n    }\n    return String.valueOf(sum);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n      sum += (N + \"\").charAt(i) - '0';\n    }\n    return sum + \"\";\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve(int N) {\n    int sum = 0;\n    for (int i = 0; i < (N + \"\").length(); i += 1){\n        sum += Integer.parseInt(\"\" + (N + \"\").charAt(i));\n    }\n    return String.valueOf(sum);\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ADD_EVEN_AT_ODD": {
      "loc": "10-11",
      "input": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;",
      "function range": "8,5-15,5",
      "output": [
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (i % 2 == 0) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_even_at_odd(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "ANTI_SHUFFLE": {
      "loc": "22-25",
      "input": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);",
      "function range": "17,5-25,5",
      "output": [
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += new String(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += String.valueOf(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        result += String.valueOf(chars);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        str = String.valueOf(chars);\n        result += str + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        str = new String(chars);\n        result += str + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        str = new String(chars);\n        result += str + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        for (char c : chars) {\n            result += c;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        str = String.valueOf(chars);\n        result += str + \" \";\n    }\n    return result.trim();\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static String anti_shuffle(String s) {\n    String result = \"\";\n    for (String str : s.split(\" \")) {\n        char[] chars = str.toCharArray();\n        Arrays.sort(chars);\n        str = String.valueOf(chars);\n        result += str;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ROW": {
      "loc": "26-29",
      "input": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {",
      "function range": "22,5-33,5",
      "output": [
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n        for (int j = 0; j < lst.get(i).size(); j += 1) {\n            if (lst.get(i).get(j) == x) {\n                result.add(new Tuple(i, j));\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n          break;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n          break;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      for (int j = 0; j < lst.get(i).size(); j += 1) {\n        if (lst.get(i).get(j) == x) {\n          result.add(new Tuple(i, j));\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Tuple> get_row(ArrayList<ArrayList<Integer>> lst, int x) {\n    ArrayList<Tuple> result = new ArrayList<Tuple>();\n    for (int i = 0; i < lst.size(); i += 1) {\n      if (lst.get(i).get(x) == 1) {\n        result.add(new Tuple(i, x));\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        }
      ]
    },
    "SORT_ARRAY": {
      "loc": "27-29",
      "input": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int tmp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = tmp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n    }\n    return array;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n    }\n    return array;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    return array;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] sort_array(int[] array) {\n    if (array.length == 0)\n        return array;\n    Arrays.sort(array);\n    if ((array[0] + array[array.length - 1]) % 2 == 1)\n        return array;\n    else {\n        for (int i = 0; i < array.length / 2; i += 1){\n            int temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n        return array;\n    }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "ENCRYPT": {
      "loc": "20-21",
      "input": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A' + 26));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A' + 26));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        } else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        } else {\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A'));\n        }else{\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encrypt(String s) {\n    StringBuilder sb = new StringBuilder();\n    String d = \"abcdefghijklmnopqrstuvwxyz\";\n    for (char c : s.toCharArray()){\n        if ('a' <= c && c <= 'z'){\n            sb.append(d.charAt(c - 'a'));\n        }else if ('A' <= c && c <= 'Z'){\n            sb.append(d.charAt(c - 'A' + 26));\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "NEXT_SMALLEST": {
      "loc": "16-17",
      "input": "public static Integer next_smallest(int[] lst) {",
      "function range": "15,5-25,5",
      "output": [
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        return Collections.min(Arrays.asList(lst));\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        return Collections.min(Arrays.asList(lst));\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        return Collections.min(Arrays.asList(lst));\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        return Collections.min(Arrays.asList(lst));\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        return Collections.min(Arrays.asList(lst));\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        return Collections.min(Arrays.asList(lst));\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static Integer next_smallest(int[] lst) {\n        if (lst == null || lst.length == 0) {\n            return null;\n        }\n        if (lst.length == 1) {\n            return lst[0];\n        }\n        int min = lst[0];\n        for (int i = 1; i < lst.length; i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return min;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "IS_BORED": {
      "loc": "18-19",
      "input": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {",
      "function range": "14,5-22,5",
      "output": [
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        for (int i = 0; i < sentence.length(); i++) {\n            if (sentence.charAt(i) == '.' || sentence.charAt(i) == '?' || sentence.charAt(i) == '!') {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (is_bored(sentence)) {\n            result++;\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        for (int i = 0; i < sentence.length(); i++) {\n            if (sentence.charAt(i) == '.' || sentence.charAt(i) == '?' || sentence.charAt(i) == '!') {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      result += is_bored(sentence);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (is_bored(sentence)) {\n            result++;\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n      if (is_bored(sentence)) {\n        result++;\n      }\n    }\n    return result;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int is_bored(String S) {\n    String[] sentences = S.split(\"\\\\.|\\\\?|!\");\n    int result = 0;\n    for (String sentence : sentences) {\n        if (is_bored(sentence)) {\n            result++;\n        }\n    }\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "ANY_INT": {
      "loc": "18-20",
      "input": "public static boolean any_int(double x, double y, double z) {",
      "function range": "17,5-23,5",
      "output": [
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return x > y && x > z;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return any_int(x, y, z, 0);\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return any(x, y, z);\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return x > 0 || y > 0 || z > 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return Math.abs(x) + Math.abs(y) + Math.abs(z) > 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return any(x, y, z);\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return x > y && x > z;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return any(x, y, z);\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return Math.abs(x) + Math.abs(y) + Math.abs(z) > 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean any_int(double x, double y, double z) {\n        return x > 0 || y > 0 || z > 0;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "ENCODE": {
      "loc": "22-23",
      "input": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        } else if (Character.isLowerCase(c)) {\n            c = Character.toUpperCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String encode(String message) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : message.toCharArray()) {\n        if (Character.isUpperCase(c)) {\n            c = Character.toLowerCase(c);\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SKJKASDKD": {
      "loc": "32-33",
      "input": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {",
      "function range": "22,5-35,5",
      "output": [
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result *= 10;\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result += (int)c;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result *= 10;\n        result += c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        if (is_prime(c))\n            result += 1;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result = result * 10 + c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int skjkasdkd(int[] lst) {\n    int max = 0;\n    int i = 0;\n    while(i < lst.length) {\n        if (lst[i] > max && is_prime(lst[i]))\n            max = lst[i];\n        i += 1;\n    }\n    int result = 0;\n    for (char c : (max + \"\").toCharArray()) {\n        result = result * 10 + c - '0';\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CHECK_DICT_CASE": {
      "loc": "36-37",
      "input": "public static boolean check_dict_case(HashMap<Object, Object> dict) {\n    if (dict.size() == 0)\n        return false;\n    else {\n        String state = \"start\";\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                state = \"mixed\";\n                break;\n            }\n            String str_key = (String) key;\n            if (state.equals(\"start\")) {\n                if (str_key.toUpperCase().equals(str_key))\n                    state = \"upper\";\n                else if (str_key.toLowerCase().equals(str_key))\n                    state = \"lower\";\n                else {\n                    state = \"mixed\";\n                    break;\n                }",
      "function range": "16,5-43,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_UP_TO": {
      "loc": "21-25",
      "input": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){",
      "function range": "17,5-30,5",
      "output": [
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (isPrime(i)){\n        primes.add(i);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (isPrime(i)) {\n        primes.add(i);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (isPrime(i)){\n        primes.add(i);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      if (isPrime(i)){\n        primes.add(i);\n      }\n    }\n    return primes;\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)){\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)){\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n        if (isPrime(i)){\n            primes.add(i);\n        }\n    }\n    return primes;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static List<Integer> count_up_to(int n) {\n    List<Integer> primes = new ArrayList<Integer>();\n    for (int i = 2; i < n; i += 1){\n      primes.add(i);\n    }\n    return primes;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "MULTIPLY": {
      "loc": "14-15",
      "input": "public static int multiply(int a, int b) {",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\r\n\t\treturn a * b;\r\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\n        return a * b;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\r\n\t\treturn a * b;\r\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int multiply(int a, int b) {\r\n\t\treturn a * b;\r\n\t}",
          "correctness": "wrong"
        }
      ]
    },
    "COUNT_UPPER": {
      "loc": "15-16",
      "input": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);",
      "function range": "11,5-19,5",
      "output": [
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (Character.isUpperCase(c)) {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_upper(String s) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i += 2) {\n        char c = s.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "CLOSEST_INTEGER": {
      "loc": "28-30",
      "input": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE) {\n        result = Integer.MAX_VALUE;\n    } else if (num < Integer.MIN_VALUE) {\n        result = Integer.MIN_VALUE;\n    } else {\n        result = (int) num;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE)\n        result = Integer.MAX_VALUE;\n    else if (num < Integer.MIN_VALUE)\n        result = Integer.MIN_VALUE;\n    else\n        result = (int) num;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE) {\n        result = Integer.MAX_VALUE;\n    } else if (num < Integer.MIN_VALUE) {\n        result = Integer.MIN_VALUE;\n    } else {\n        result = (int) num;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE) {\n        result = Integer.MAX_VALUE;\n    } else if (num < Integer.MIN_VALUE) {\n        result = Integer.MIN_VALUE;\n    } else {\n        result = (int) num;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE)\n        result = Integer.MAX_VALUE;\n    else if (num < Integer.MIN_VALUE)\n        result = Integer.MIN_VALUE;\n    else\n        result = (int) num;\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE) {\n        result = Integer.MAX_VALUE;\n    } else if (num < Integer.MIN_VALUE) {\n        result = Integer.MIN_VALUE;\n    } else {\n        result = (int) Math.round(num);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE) {\n        result = Integer.MAX_VALUE;\n    } else if (num < Integer.MIN_VALUE) {\n        result = Integer.MIN_VALUE;\n    } else {\n        result = (int) num;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > 0) {\n        result = (int) Math.ceil(num);\n    } else {\n        result = (int) Math.floor(num);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num >= 0) {\n        result = (int) Math.floor(num);\n    } else {\n        result = (int) Math.ceil(num);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int closest_integer(String value) {\n    if (value.indexOf('.') >= 0) {\n        while (value.charAt(value.length() - 1) == '0')\n            value = value.substring(0, value.length() - 1);\n    }\n    double num = Double.parseDouble(value);\n    int result = 0;\n    if (num > Integer.MAX_VALUE)\n        result = Integer.MAX_VALUE;\n    else if (num < Integer.MIN_VALUE)\n        result = Integer.MIN_VALUE;\n    else\n        result = (int) Math.round(num);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MAKE_A_PILE": {
      "loc": "23-24",
      "input": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {",
      "function range": "20,2-26,2",
      "output": [
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(0);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(0);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(0);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(0);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> make_a_pile(int n) {\n\tArrayList<Integer> pile = new ArrayList<Integer>();\n\tfor(int i = 0; i < n; i++) {\n\t\tpile.add(i);\n\t}\n\treturn pile;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_STRINGS": {
      "loc": "17-18",
      "input": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();",
      "function range": "15,2-30,2",
      "output": [
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tStringTokenizer st = new StringTokenizer(s);\n\twhile (st.hasMoreTokens()) {\n\t    result.add(st.nextToken());\n\t}\n\treturn result;\n    }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tfor (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isLetter(s.charAt(i))) {\n\t\t\tresult.add(s.substring(i, i + 1));\n\t\t}\n\t}\n\treturn result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tStringTokenizer st = new StringTokenizer(s);\n\twhile (st.hasMoreTokens()) {\n\t\tresult.add(st.nextToken());\n\t}\n\treturn result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> words_strings(String s) {\n\tArrayList<String> result = new ArrayList<String>();\n\tStringTokenizer st = new StringTokenizer(s);\n\twhile (st.hasMoreTokens()) {\n\t\tresult.add(st.nextToken());\n\t}\n\treturn result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "CHOOSE_NUM": {
      "loc": "15-16",
      "input": "public static int choose_num(int x, int y) {",
      "function range": "14,5-19,5",
      "output": [
        {
          "patch": "public static int choose_num(int x, int y) {\n    if (x > y) {\n      return x;\n    } else {\n      return y;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    if (x > y) {\n      return x;\n    } else {\n      return y;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    if (x > y) {\n      return x;\n    } else {\n      return y;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    if (x > y) {\n      return x;\n    } else {\n      return y;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int choose_num(int x, int y) {\n    if (x > y) {\n      return x;\n    } else {\n      return y;\n    }\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "ROUNDED_AVG": {
      "loc": "25-26",
      "input": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {",
      "function range": "15,5-30,5",
      "output": [
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return Integer.toString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return String.valueOf(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return avg_rounded + \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.ceil(avg);\n    } else {\n        avg_rounded = (int) Math.floor(avg);\n    }\n    return Integer.toString(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return String.valueOf(avg_rounded);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String rounded_avg(int n, int m) {\n    if(m < n) return \"-1\";\n    int summation = 0;\n    for(int i = n; i < m + 1; i++) {\n        summation += i;\n    }\n    double avg = ((double) summation)/((double) (m - n + 1));\n    double rem = avg - Math.floor(avg);\n    int avg_rounded = 0;\n    if(rem <= 0.5) {\n        avg_rounded = (int) Math.floor(avg);\n    } else {\n        avg_rounded = (int) Math.ceil(avg);\n    }\n    return avg_rounded + \"\";\n}",
          "correctness": "wrong"
        }
      ]
    },
    "UNIQUE_DIGITS": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit == 0 || curr_digit == 1) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2!= 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) res.add(i);\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd)\n            res.add(i);\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit == 0 || curr_digit == 1) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) res.add(i);\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit == 0 || curr_digit == 1) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd)\n            res.add(i);\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit % 2 == 0) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {\n    ArrayList<Integer> res = new ArrayList<Integer>();\n    for(int i : x) {\n        int num = i;\n        boolean all_odd = true;\n        while(num > 0) {\n            int curr_digit = num % 10;\n            if(curr_digit == 0 || curr_digit == 1) {\n                all_odd = false;\n                break;\n            }\n            num /= 10;\n        }\n        if(all_odd) {\n            res.add(i);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "BY_LENGTH": {
      "loc": "45-46",
      "input": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {",
      "function range": "31,5-50,5",
      "output": [
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        result.add(digit_map.get(num));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        result.add(digit_map.get(num));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n        result.add(digit_map.get(num));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      if(digit_map.containsKey(num)) {\n        result.add(digit_map.get(num));\n      }\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<String> by_length(ArrayList<Integer> a) {\n    Map<Integer, String> digit_map = new HashMap<>();\n    digit_map.put(1, \"One\");\n    digit_map.put(2, \"Two\");\n    digit_map.put(3, \"Three\");\n    digit_map.put(4, \"Four\");\n    digit_map.put(5, \"Five\");\n    digit_map.put(6, \"Six\");\n    digit_map.put(7, \"Seven\");\n    digit_map.put(8, \"Eight\");\n    digit_map.put(9, \"Nine\");\n    Collections.sort(a, Collections.reverseOrder());\n    ArrayList<String> result = new ArrayList<>();\n    for(int num : a) {\n      result.add(digit_map.get(num));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "FACTORIAL": {
      "loc": "25-26",
      "input": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 2; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 2; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> factorial(int n) {\n    ArrayList<Integer> ret = new ArrayList<>();\n    for(int i = 1; i <= n; i++) {\n        if((i % 2) == 0) {\n            int x = 1;\n            for(int j = 1; j <= i; j++) x *= j;\n            ret.add(x);\n        } else {\n            int x = 0;\n            for(int j = 1; j <= i; j++) x += j;\n            ret.add(x);\n        }\n    }\n    return ret;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "EVEN_ODD_PALINDROME": {
      "loc": "42-44",
      "input": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {",
      "function range": "39,5-47,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            if(i % 2 == 0) {\n                even_palindrome_count++;\n            } else {\n                odd_palindrome_count++;\n            }\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_even_palindrome(i)) {\n            even_palindrome_count++;\n        }\n        if(is_odd_palindrome(i)) {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_even_palindrome(i)) {\n            even_palindrome_count++;\n        }\n        if(is_odd_palindrome(i)) {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_even_palindrome(i)) {\n            even_palindrome_count++;\n        }\n        if(is_odd_palindrome(i)) {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_palindrome(i)) {\n            even_palindrome_count++;\n        } else {\n            odd_palindrome_count++;\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<Integer>();\n    result.add(even_palindrome_count);\n    result.add(odd_palindrome_count);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> even_odd_palindrome(int n) {\n    int even_palindrome_count = 0, odd_palindrome_count = 0;\n    for(int i = 1; i <= n; i++) {\n        if(is_even_palindrome(i)) {\n            even_palindrome_count++;\n        }\n        if(is_odd_palindrome(i)) {\n            odd_palindrome_count++;\n        }\n    }\n    return new ArrayList<Integer>(Arrays.asList(even_palindrome_count, odd_palindrome_count));\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "COUNT_NUMS": {
      "loc": "10-11",
      "input": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;",
      "function range": "6,5-20,5",
      "output": [
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num > 0) {\n            count++;\n            num /= 10;\n        }\n        if(neg) {\n            count--;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n        if(neg) {\n            count -= num;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        while(num > 0) {\n            count++;\n            num /= 10;\n        }\n        if(neg) {\n            count--;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n        if(neg) {\n            count -= num;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num *= -1;\n        }\n        count += num;\n        if(neg) {\n            count *= -1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num *= -1;\n        }\n        count += num;\n        if(neg) {\n            num *= -1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num = -num;\n        }\n        count += num;\n        if(neg) {\n            num = -num;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int count_nums(ArrayList<Integer> arr) {\n    int count = 0;\n    for(int num : arr) {\n        boolean neg = num < 0;\n        if(neg) {\n            num *= -1;\n        }\n        count += num;\n        if(neg) {\n            count *= -1;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MOVE_ONE_BALL": {
      "loc": "11-12",
      "input": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);",
      "function range": "7,5-29,5",
      "output": [
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            i--;\n        }\n    }\n    return arr.size() == 0;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n      if(arr.get(i) == sorted_arr.get(i)) {\n        arr.remove(i);\n        return true;\n      }\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i)!= sorted_arr.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean move_one_ball(ArrayList<Integer> arr) {\n    if(arr.size() == 0) return true;\n    ArrayList<Integer> sorted_arr = new ArrayList<>(arr);\n    Collections.sort(sorted_arr);\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr.get(i) == sorted_arr.get(i)) {\n            arr.remove(i);\n            return true;\n        }\n    }\n    return false;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "EXCHANGE": {
      "loc": "22-24",
      "input": "public static String exchange(ArrayList<Integer> lst1, ArrayList<Integer> lst2) {\n    int odd = 0, even = 0;",
      "function range": "20,5-32,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "HISTOGRAM": {
      "loc": "30-31",
      "input": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {",
      "function range": "19,5-40,5",
      "output": [
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n            res.put('a' + i, count_letter[i]);\n        }\n    }\n    return res;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        res.put(c, count_letter[c - 'a']);\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(count_letter[c - 'a'] == most_count) {\n            res.put(c, res.get(c) + 1);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(count_letter[c - 'a'] == most_count) {\n            res.put(c, count_letter[c - 'a']);\n        }\n    }\n    return res;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(count_letter[c - 'a'] == most_count) {\n            res.put(c, res.get(c) + 1);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] == most_count) {\n            res.put(list_letters[i].charAt(0), count_letter[i]);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static HashMap<Character, Integer> histogram(String s) {\n    HashMap<Character, Integer> res = new HashMap<Character, Integer>();\n    if(s.isEmpty()) return res;\n    String[] list_letters = s.split(\" \");\n    int[] count_letter = new int[26];\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        count_letter[c - 'a']++;\n    }\n    int most_count = 0;\n    for(int i = 0; i < 26; i++) {\n        if(count_letter[i] > most_count) {\n            most_count = count_letter[i];\n        }\n    }\n    for(int i = 0; i < list_letters.length; i++) {\n        char c = list_letters[i].charAt(0);\n        if(count_letter[c - 'a'] == most_count) {\n            res.put(c, res.get(c) + 1);\n        }\n    }\n    return res;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "REVERSE_DELETE": {
      "loc": "20-21",
      "input": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {",
      "function range": "17,5-32,5",
      "output": [
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s);\n  }",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(s.charAt(i)!= c.charAt(0)) {\n            new_s += s.charAt(i);\n        }\n    }\n    return reverse_delete(new_s);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Object> reverse_delete(String s, String c) {\n    String new_s = \"\";\n    for(int i = 0; i < s.length(); i++) {\n      if(s.charAt(i)!= c.charAt(0)) {\n        new_s += s.charAt(i);\n      }\n    }\n    return reverse_delete(new_s, c);\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "ODD_COUNT": {
      "loc": "25-27",
      "input": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';",
      "function range": "19,5-32,5",
      "output": [
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2!= 0) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2!= 0) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> odd_count(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<>();\n    for(String s : lst) {\n        int n = 0;\n        for(int i = 0; i < s.length(); i++) {\n            int digit = s.charAt(i) - '0';\n            if(digit % 2 == 1) {\n                n++;\n            }\n        }\n        if(n % 2 == 1) {\n            result.add(s);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_SUBARRAY_SUM": {
      "loc": "18-19",
      "input": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {",
      "function range": "14,5-32,5",
      "output": [
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n        s += num;\n        max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(max_sum, s);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long min_subarray_sum(ArrayList<Long> nums) {\n    long max_sum = 0;\n    long s = 0;\n    for(long num : nums) {\n      s += num;\n      max_sum = Math.max(s, max_sum);\n    }\n    return max_sum;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "MAX_FILL": {
      "loc": "42-44",
      "input": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;",
      "function range": "38,5-48,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result = Math.max(result, bucket_capacity - row_capacity);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity = Math.max(row_capacity, grid[i][j]);\n        }\n        result = Math.max(result, bucket_capacity - row_capacity);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        result = Math.max(result, bucket_capacity - row_capacity);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity = Math.max(row_capacity, grid[i][j]);\n        }\n        result = Math.max(result, bucket_capacity - row_capacity);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n        }\n        if(row_capacity > result) {\n            result = row_capacity;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int max_fill(int[][] grid, int bucket_capacity) {\n    int result = 0;\n    for(int i = 0; i < grid.length; i++) {\n        int row_capacity = 0;\n        for(int j = 0; j < grid[i].length; j++) {\n            row_capacity += grid[i][j];\n            if(row_capacity > bucket_capacity) {\n                row_capacity = bucket_capacity;\n            }\n        }\n        result = Math.max(result, row_capacity);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORT_ARRAY_BINARY": {
      "loc": "36-40",
      "input": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {",
      "function range": "31,10-42,10",
      "output": [
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return -1;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return -1;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   else if(num_ones_o1 < num_ones_o2) {\n      return -1;\n   }\n   else {\n      return 1;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   } else {\n      return -1;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   } else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   else {\n      return num_ones_o1 - num_ones_o2;\n   }\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   return -1;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   return -1;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "@Override\npublic int compare(Integer o1, Integer o2) {\n   int num_ones_o1 = number_ones(o1);\n   int num_ones_o2 = number_ones(o2);\n   if(num_ones_o1 == num_ones_o2) {\n      return o1.compareTo(o2);\n   }\n   else if(num_ones_o1 > num_ones_o2) {\n      return 1;\n   }\n   else {\n      return -1;\n   }\n}",
          "correctness": "plausible"
        }
      ]
    },
    "SELECT_WORDS": {
      "loc": "25-26",
      "input": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;",
      "function range": "20,5-39,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants < n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants >= n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> select_words(String s, int n) {\n    ArrayList<String> result = new ArrayList<>();\n    String[] words = s.split(\" \");\n    for(int i = 0; i < words.length; i++) {\n        int num_consonants = 0;\n        for(int j = 0; j < words[i].length(); j++) {\n            if(Character.isLetter(words[i].charAt(j))) {\n                num_consonants++;\n            }\n        }\n        if(num_consonants < n) {\n            result.add(words[i]);\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_CLOSET_VOWEL": {
      "loc": "26-27",
      "input": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));",
      "function range": "23,5-34,5",
      "output": [
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(0, i);\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(i);\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i);\n      }\n    }\n    return \"\";\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(0, i);\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n      if(vowels.contains(word.charAt(i))) {\n        return word.substring(0, i);\n      }\n    }\n    return \"\";\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(0, i);\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length(); i++) {\n        if(vowels.contains(word.charAt(i))) {\n            return word.substring(0, i);\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            for(int j = i + 1; j < word.length(); j++) {\n                if(!vowels.contains(word.charAt(j))) {\n                    return word.substring(i, j + 1);\n                }\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            for(int j = i + 1; j < word.length(); j++) {\n                if(!vowels.contains(word.charAt(j))) {\n                    return word.substring(i, j + 1);\n                }\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String get_closet_vowel(String word) {\n    if(word.length() < 3) return \"\";\n    ArrayList<Character> vowels = new ArrayList<Character>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));\n    for(int i = 0; i < word.length() - 1; i++) {\n        if(vowels.contains(word.charAt(i))) {\n            for(int j = i + 1; j < word.length(); j++) {\n                if(!vowels.contains(word.charAt(j))) {\n                    return word.substring(i, j + 1);\n                }\n            }\n        }\n    }\n    return \"\";\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MATCH_PARENS": {
      "loc": "7-9",
      "input": "",
      "function range": "",
      "output": []
    },
    "MAXIMUM_K": {
      "loc": "35-36",
      "input": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();",
      "function range": "32,5-39,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n        result.add(arr.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size() - k + 1; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size() - k + 1; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < k; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> maximum_k(ArrayList<Integer> arr, int k) {\n    Collections.sort(arr);\n    ArrayList<Integer> result = new ArrayList<>();\n    for (int i = 0; i < arr.size() - k + 1; i++) {\n      result.add(arr.get(i));\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "SOLUTION": {
      "loc": "19-20",
      "input": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {",
      "function range": "16,5-24,5",
      "output": [
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      for(int j = i+1; j < lst.size(); j++) {\n        if(lst.get(i) > lst.get(j)) {\n          result++;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      for(int j = i + 1; j < lst.size(); j++) {\n        if(lst.get(i) > lst.get(j)) {\n          result++;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      result += lst.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int solution(ArrayList<Integer> lst) {\n    int result = 0;\n    for(int i = 0; i < lst.size(); i++) {\n      for(int j = i+1; j < lst.size(); j++) {\n        if(lst.get(i) == lst.get(j)) {\n          result++;\n        }\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "ADD_ELEMENTS": {
      "loc": "24-26",
      "input": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {",
      "function range": "21,5-29,5",
      "output": [
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n      result += arr.get(i);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int add_elements(ArrayList<Integer> arr, int k) {\n    int result = 0;\n    for(int i = 0; i < k; i++) {\n        result += arr.get(i);\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_ODD_COLLATZ": {
      "loc": "27-29",
      "input": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);",
      "function range": "24,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3*n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if((n % 2) == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3*n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n      if(n % 2 == 0) {\n        n /= 2;\n      } else {\n        n = 3 * n + 1;\n      }\n      result.add(n);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        }\n        else {\n            n = 3 * n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n        if(n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3*n + 1;\n        }\n        result.add(n);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> get_odd_collatz(int n) {\n    ArrayList<Integer> result = new ArrayList<>();\n    if((n % 2) == 1) result.add(n);\n    while(n > 1) {\n      if(n % 2 == 0) {\n        n /= 2;\n      } else {\n        n = 3 * n + 1;\n      }\n      result.add(n);\n    }\n    return result;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "VALID_DATE": {
      "loc": "38-39",
      "input": "public static boolean valid_date(String date) {\n    try {\n        date = date.trim();\n        String[] date_info = date.split(\"-\");\n        if(date_info.length > 3) return false;\n        int month = Integer.parseInt(date_info[0]);\n        int day = Integer.parseInt(date_info[1]);\n        int year = Integer.parseInt(date_info[2]);\n        if(month < 1 || month > 12) return false;\n        int[] month_check1 = {1, 3, 5, 7, 8, 10, 12};\n        for(int i = 0; i < month_check1.length; i++) {",
      "function range": "25,5-50,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPLIT_WORDS": {
      "loc": "23-24",
      "input": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);",
      "function range": "14,5-28,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr!='' && curr!= ',') {\n                count++;\n            }\n        }\n        String[] ret = new String[count];\n        int j = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr!='' && curr!= ',') {\n                ret[j++] = txt.substring(i);\n            }\n        }\n        return ret;\n    }\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String[] split_words(String txt) {\n    if(txt.contains(\" \")) {\n        return txt.split(\" \");\n    } else if(txt.contains(\",\")) {\n        return txt.split(\",\");\n    } else {\n        int count = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr!='' && curr!= ',') {\n                count++;\n            }\n        }\n        String[] ret = new String[count];\n        int j = 0;\n        for(int i = 0; i < txt.length(); i++) {\n            char curr = txt.charAt(i);\n            if(curr!='' && curr!= ',') {\n                ret[j] += curr;\n                j++;\n            }\n        }\n        return ret;\n    }\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "IS_SORTED": {
      "loc": "34-35",
      "input": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {",
      "function range": "22,5-37,5",
      "output": [
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i+1]) return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i+1]) return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i+1]) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        if(lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean is_sorted(int[] lst) {\n    HashMap<Integer, Integer> count_num = new HashMap<>();\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], 0);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        count_num.put(lst[i], count_num.get(lst[i]) + 1);\n    }\n    for(int i = 0; i < lst.length; i++) {\n        if(count_num.get(lst[i]) > 2) return false;\n    }\n    for(int i = 0; i < lst.length - 1; i++) {\n        for(int j = i + 1; j < lst.length; j++) {\n            if(lst[i] > lst[j]) return false;\n        }\n    }\n    return true;\n}",
          "correctness": "plausible"
        }
      ]
    },
    "INTERSECTION": {
      "loc": "34-36",
      "input": "public static String intersection(int[] interval1, int[] interval2) {",
      "function range": "33,5-39,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1 == null || interval2 == null) {\n            return null;\n        }\n        if (interval1.length!= interval2.length) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            if (interval1[i] == interval2[i]) {\n                sb.append(interval1[i]);\n            }\n        }\n        return sb.toString();\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1 == null || interval2 == null) {\n            return null;\n        }\n        if (interval1.length!= interval2.length) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            if (interval1[i] == interval2[i]) {\n                sb.append(interval1[i]);\n            }\n        }\n        return sb.toString();\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n\t\tif (interval1 == null || interval2 == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (interval1.length!= interval2.length) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < interval1.length; i++) {\n\t\t\tif (interval1[i] == interval2[i]) {\n\t\t\t\tsb.append(interval1[i]);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n        if (interval1 == null || interval2 == null) {\n            return null;\n        }\n        if (interval1.length!= interval2.length) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < interval1.length; i++) {\n            if (interval1[i] == interval2[i]) {\n                sb.append(interval1[i]);\n            }\n        }\n        return sb.toString();\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n\t\tif (interval1 == null || interval2 == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (interval1.length!= interval2.length) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < interval1.length; i++) {\n\t\t\tif (interval1[i] == interval2[i]) {\n\t\t\t\tsb.append(interval1[i]);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String intersection(int[] interval1, int[] interval2) {\n\t\tif (interval1 == null || interval2 == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (interval1.length!= interval2.length) {\n\t\t\treturn null;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < interval1.length; i++) {\n\t\t\tif (interval1[i] == interval2[i]) {\n\t\t\t\tsb.append(interval1[i]);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "PROD_SIGNS": {
      "loc": "21-22",
      "input": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;",
      "function range": "16,5-28,5",
      "output": [
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod = prod * arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n        else prod *= arr[i];\n    }\n    return prod;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int prod_signs(int[] arr) {\n    if(arr.length == 0) return -10;\n    int prod = 1;\n    for(int i = 0; i < arr.length; i++) {\n        if(arr[i] == 0) prod = 0;\n    }\n    return prod;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "MIN_PATH": {
      "loc": "41-45",
      "input": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {",
      "function range": "35,5-54,5",
      "output": [
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[] {val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[] {val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k - 1));\n            }\n        }\n    }\n    return new int[] {val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k - 1));\n            }\n        }\n    }\n    return new int[]{val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[] {val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[] {val, k};\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] min_path(int[][] grid, int k) {\n    int n = grid.length;\n    int val = n * n + 1;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < n; j++) {\n            if(grid[i][j] == 1) {\n                val = Math.min(val, min_path(grid, i, j, k));\n            }\n        }\n    }\n    return new int[]{val, k};\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "TRI": {
      "loc": "30-34",
      "input": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;",
      "function range": "23,5-37,5",
      "output": [
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i-1] + sequence[i-2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i-1] + sequence[i-2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] tri(int n) {\n    int[] sequence = new int[n + 1];\n    if(n == 0) {\n        sequence[0] = 1;\n        return sequence;\n    }\n    sequence[0] = 1;\n    sequence[1] = 1;\n    for(int i = 2; i <= n; i++) {\n        sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n    return sequence;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "DIGITS": {
      "loc": "16-20",
      "input": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;",
      "function range": "13,5-26,5",
      "output": [
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      product *= i;\n      if (i % 2 == 1) {\n        odd_count++;\n      }\n    }\n    return odd_count;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 1) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      product *= i;\n      if (i % 2 == 1) {\n        odd_count++;\n      }\n    }\n    if (odd_count % 2 == 1) {\n      product *= 3;\n    }\n    return product;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      if (n % i == 0) {\n        odd_count++;\n        product *= i;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int digits(int n) {\n    int product = 1;\n    int odd_count = 0;\n    for (int i = 1; i <= n; i++) {\n      product *= i;\n      if (i % 2 == 1) {\n        odd_count++;\n      }\n    }\n    if (odd_count % 2 == 0) {\n      return product;\n    } else {\n      return product * 2;\n    }\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "IS_NESTED": {
      "loc": "28-32",
      "input": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }",
      "function range": "21,5-37,5",
      "output": [
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) return false;\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i)!= closing_brackets.get(i)) return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return is_nested(opening_brackets, closing_brackets);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) return false;\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i)!= closing_brackets.get(i)) return false;\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return is_nested(opening_brackets, closing_brackets);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) {\n        return false;\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i)!= closing_brackets.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    if(opening_brackets.size()!= closing_brackets.size()) {\n        return false;\n    }\n    for(int i = 0; i < opening_brackets.size(); i++) {\n        if(opening_brackets.get(i)!= closing_brackets.get(i)) {\n            return false;\n        }\n    }\n    return true;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return is_nested(opening_brackets, closing_brackets);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return is_nested(opening_brackets, closing_brackets);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return is_nested(opening_brackets, closing_brackets);\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static boolean is_nested(String brackets) {\n    ArrayList<Integer> opening_brackets = new ArrayList<>();\n    ArrayList<Integer> closing_brackets = new ArrayList<>();\n    for(int i = 0; i < brackets.length(); i++) {\n        if(brackets.charAt(i) == '[') opening_brackets.add(i);\n        else closing_brackets.add(i);\n    }\n    return is_nested(opening_brackets, closing_brackets);\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "SUM_SQUARED_NUMS": {
      "loc": "17-20",
      "input": "public static long sum_squared_nums(double[] lst) {",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += Math.pow(lst[i], 2);\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long sum_squared_nums(double[] lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.length; i++) {\n            sum += lst[i] * lst[i];\n        }\n        return sum;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "CHECK_IF_LAST_CHAR_IS_A_LETTER": {
      "loc": "21-26",
      "input": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";",
      "function range": "18,5-26,5",
      "output": [
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 1) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 1) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 1) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    }\n    return false;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 1) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    for (int i = 0; i < parts.length; i++) {\n      last = parts[i];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean check_if_last_char_is_a_letter(String txt) {\n    String[] parts = txt.split(\" \");\n    String last = \" \";\n    if (parts.length > 0) {\n      last = parts[parts.length - 1];\n    }\n    if (last.matches(\"[a-zA-Z]\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "CAN_ARRANGE": {
      "loc": "17-20",
      "input": "public static int can_arrange(int[] arr) {",
      "function range": "16,5-22,5",
      "output": [
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[i] > arr[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i]!= max) {\n                return 0;\n            }\n        }\n        return 1;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i]!= max) {\n                return 0;\n            }\n        }\n        return 1;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] < max) {\n                return 0;\n            }\n        }\n        return 1;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == max) {\n                return 1;\n            }\n        }\n        return 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int can_arrange(int[] arr) {\n        if (arr == null || arr.length == 0) {\n            return 0;\n        }\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > max) {\n                return 0;\n            }\n        }\n        return 1;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "LARGEST_SMALLEST_INTEGERS": {
      "loc": "17-23",
      "input": "public static int[] largest_smallest_integers(int[] lst) {",
      "function range": "16,5-32,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            max = Math.max(max, lst[i]);\n            min = Math.min(min, lst[i]);\n        }\n        int[] result = new int[2];\n        result[0] = min;\n        result[1] = max;\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            max = Math.max(max, lst[i]);\n            min = Math.min(min, lst[i]);\n        }\n        int[] result = new int[2];\n        result[0] = max;\n        result[1] = min;\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            max = Math.max(max, lst[i]);\n            min = Math.min(min, lst[i]);\n        }\n        int[] result = new int[2];\n        result[0] = min;\n        result[1] = max;\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] largest_smallest_integers(int[] lst) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > max) {\n                max = lst[i];\n            }\n            if (lst[i] < min) {\n                min = lst[i];\n            }\n        }\n        return new int[]{max, min};\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "COMPARE_ONE": {
      "loc": "29-33",
      "input": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }",
      "function range": "17,5-36,5",
      "output": [
        {
          "patch": "public static Object compare_one(Object a, Object b) {\n    double temp_a = 0, temp_b = 0;\n    if(a instanceof String) {\n        String temp_a_string = a.toString();\n        temp_a_string = temp_a_string.replace(',', '.');\n        temp_a = Double.parseDouble(temp_a_string);\n    }\n    if(b instanceof String) {\n        String temp_b_string = b.toString();\n        temp_b_string = temp_b_string.replace(',', '.');\n        temp_b = Double.parseDouble(temp_b_string);\n    }\n    return temp_a - temp_b;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "IS_EQUAL_TO_SUM_EVEN": {
      "loc": "14-15",
      "input": "public static boolean is_equal_to_sum_even(int n) {",
      "function range": "13,5-15,5",
      "output": [
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        if (n % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean is_equal_to_sum_even(int n) {\n        if (n % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "SPECIAL_FACTORIAL": {
      "loc": "20-23",
      "input": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;",
      "function range": "18,5-25,5",
      "output": [
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n      special_fact *= fact_i / i;\n    }\n    return special_fact;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        special_fact *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        special_fact /= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i /= i;\n    }\n    return special_fact * fact_i;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        special_fact *= fact_i / i;\n    }\n    return special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        special_fact *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        special_fact /= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i /= i;\n    }\n    return special_fact * fact_i;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      special_fact *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n    }\n    return fact_i / special_fact;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        special_fact *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        special_fact /= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i /= i;\n    }\n    return fact_i * special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n      special_fact *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n      fact_i *= i;\n    }\n    return special_fact / fact_i;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static long special_factorial(long n) {\n    long fact_i = 1, special_fact = 1;\n    for (long i = 2; i <= n; i++) {\n        special_fact *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i *= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        special_fact /= i;\n    }\n    for (long i = 2; i <= n; i++) {\n        fact_i /= i;\n    }\n    return fact_i * special_fact;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "FIX_SPACES": {
      "loc": "36-37",
      "input": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) == ' ') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }",
      "function range": "13,5-37,5",
      "output": [
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i);\n    } else {\n        new_text += text.substring(i);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i);\n    } else {\n        new_text += text.substring(i);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String fix_spaces(String text) {\n    String new_text = \"\";\n    int i = 0;\n    int start = 0;\n    int end = 0;\n    while (i < text.length()) {\n        if (text.charAt(i) =='') end += 1;\n        else {\n            if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n            else if (end - start > 0) {\n                for (int j = start; j < end; j += 1) {\n                    new_text += \"_\";\n                }\n                new_text += text.substring(i, i + 1);\n            } else {\n                new_text += text.substring(i, i + 1);\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) new_text += \"-\" + text.substring(i, i + 1);\n    else if (end - start > 0) {\n        for (int j = start; j < end; j += 1) {\n            new_text += \"_\";\n        }\n        new_text += text.substring(i, i + 1);\n    } else {\n        new_text += text.substring(i, i + 1);\n    }\n    return new_text;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "FILE_NAME_CHECK": {
      "loc": "26-27",
      "input": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length != 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";",
      "function range": "17,5-35,5",
      "output": [
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String file_name_check(String file_name) {\n    String[] lst = file_name.split(\"\\\\.\");\n    if (lst.length!= 2)\n        return \"No\";\n    if (! (lst[1].equals(\"txt\") || lst[1].equals(\"exe\") || lst[1].equals(\"dll\")))\n        return \"No\";\n    if (lst[0].length() == 0)\n        return \"No\";\n    return \"Yes\";\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SUM_SQUARES": {
      "loc": "17-20",
      "input": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){",
      "function range": "13,5-24,5",
      "output": [
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n      result += lst[i] * lst[i];\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int sum_squares(int[] lst) {\n    int result = 0;\n    for (int i = 0; i < lst.length; i += 1){\n        result += lst[i] * lst[i];\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "WORDS_IN_SENTENCE": {
      "loc": "27-28",
      "input": "public static String words_in_sentence(String sentence) {\n    String result = \"\";\n    for (String word : sentence.split(\" \")) {\n        int flag = 0;",
      "function range": "22,5-34,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SIMPLIFY": {
      "loc": "23-24",
      "input": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;",
      "function range": "15,5-26,5",
      "output": [
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    return numerator == denom;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom == 0) {\n      return true;\n    }\n    return false;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom!= 0) {\n      return false;\n    } else {\n      return true;\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (denom == 0) {\n      return false;\n    } else {\n      return numerator % denom == 0;\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom!= 0) {\n      return false;\n    }\n    return true;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator + \"/\" + denom);\n    return numerator / denom == 1;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    if (numerator % denom == 0) {\n      return true;\n    }\n    return false;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static boolean simplify(String x, String n) {\n    int a = Integer.parseInt(x.split(\"/\")[0]);\n    int b = Integer.parseInt(x.split(\"/\")[1]);\n    int c = Integer.parseInt(n.split(\"/\")[0]);\n    int d = Integer.parseInt(n.split(\"/\")[1]);\n    int numerator = a * c;\n    int denom = b * d;\n    System.out.println(numerator + \"/\" + denom);\n    if (numerator % denom == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "ORDER_BY_POINTS": {
      "loc": "30-33",
      "input": "public static Integer[] order_by_points(Integer[] nums) {\n    ArrayList<Integer> digits = new ArrayList<Integer>();\n    HashMap<Integer, ArrayList<Integer>> digits_number = new HashMap<Integer, ArrayList<Integer>>();\n    for (int i = 0; i < nums.length; i += 1){\n        int neg = 1;\n        int n = nums[i];\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        int digit = 0;\n        for (int j = 0; j < (n + \"\").toCharArray().length; j += 1){",
      "function range": "17,5-44,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SPECIAL_FILTER": {
      "loc": "20-22",
      "input": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";",
      "function range": "14,5-26,5",
      "output": [
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(Integer.parseInt(number_as_string))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            if (odd_digits.contains(Integer.parseInt(number_as_string))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(number_as_string.charAt(i))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.valueOf(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        } else {\n            count++;\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int special_filter(int[] nums) {\n    int count = 0;\n    ArrayList<Integer> odd_digits = new ArrayList<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n    for (Integer num : nums) {\n        if (num > 10) {\n            String number_as_string = num + \"\";\n            for (int i = 0; i < number_as_string.length(); i++) {\n                if (odd_digits.contains(Integer.valueOf(number_as_string.substring(i, i + 1)))) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "GET_MAX_TRIPLES": {
      "loc": "22-25",
      "input": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;",
      "function range": "16,5-30,5",
      "output": [
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result = Math.max(result, A[i - 1]);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        if (A[i - 1] > result)\n            result = A[i - 1];\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result = Math.max(result, A[i - 1]);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 0; i < n; i += 1)\n        result = Math.max(result, A[i]);\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        result = Math.max(result, A[i - 1]);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        result = max(result, A[i - 1]);\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        result = Math.max(result, A[i - 1]);\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i; j <= n; j += 1) {\n            for (int k = j; k <= n; k += 1) {\n                if (A[i] + A[j] + A[k] > result)\n                    result = A[i] + A[j] + A[k];\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1) {\n        for (int j = i; j <= n; j += 1) {\n            for (int k = j; k <= n; k += 1) {\n                result = Math.max(result, A[i] + A[j] + A[k]);\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int get_max_triples(int n) {\n    int[] A = new int[n];\n    for (int i = 1; i <= n; i += 1)\n        A[i - 1] = i * i - i + 1;\n    int result = 0;\n    for (int i = 1; i <= n; i += 1)\n        for (int j = i; j <= n; j += 1)\n            for (int k = j; k <= n; k += 1)\n                result = Math.max(result, A[i] + A[j] + A[k]);\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "BF": {
      "loc": "31-33",
      "input": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i < planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i <= planet2_index; i++)\n        result.add(planet_names.get(i));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    result.add(planet_names.get(planet1_index));\n    result.add(planet_names.get(planet2_index));\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i < planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    for (int i = planet1_index; i < planet2_index; i++) {\n        result.add(planet_names.get(i));\n    }\n    for (int i = planet2_index; i < planet_names.size(); i++) {\n        result.add(planet_names.get(i));\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<String> bf(String planet1, String planet2) {\n    ArrayList<String> planet_names = new ArrayList<String>(Arrays.asList(\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ));\n    ArrayList<String> result = new ArrayList<String>();\n    if ((! planet_names.contains(planet1)) || (! planet_names.contains(planet2)))\n        return result;\n    int planet1_index = planet_names.indexOf(planet1);\n    int planet2_index = planet_names.indexOf(planet2);\n    if (planet1_index < planet2_index) {\n        for (int i = planet1_index; i < planet2_index; i++) {\n            result.add(planet_names.get(i));\n        }\n    } else {\n        for (int i = planet2_index; i < planet1_index; i++) {\n            result.add(planet_names.get(i));\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "SORTED_LIST_SUM": {
      "loc": "30-31",
      "input": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,",
      "function range": "21,5-34,5",
      "output": [
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.compareTo(o2);\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o2.length() - o1.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                return o1.length() - o2.length();\n            }\n        });\n    return result;\n}",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static ArrayList<String> sorted_list_sum(ArrayList<String> lst) {\n    ArrayList<String> result = new ArrayList<String>();\n    for (String str : lst) {\n        if (str.length() % 2 == 1) continue;\n        result.add(str);\n    }\n    Collections.sort(\n        result,\n        new Comparator<String>() {\n            @Override\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        }\n    );\n    return result;\n}",
          "correctness": "uncompilable"
        }
      ]
    },
    "X_OR_Y": {
      "loc": "14-17",
      "input": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {",
      "function range": "11,5-17,5",
      "output": [
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) return i;\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (n % i == 0) {\n        return x_or_y(n / i, x, y ^ x);\n      }\n    }\n    return x;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) return i;\n    }\n    return -1;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (n % i == 0) {\n        return x_or_y(n / i, x, y ^ x);\n      }\n    }\n    return y;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (n % i == 0 && x % i == 0 && y % i == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int x_or_y(int n, int x, int y) {\n    if (n == 1) return y;\n    for (int i = 2; i < n; i += 1) {\n      if (x % i == 0 && y % i == 0) {\n        return i;\n      }\n    }\n    return 0;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "DOUBLE_THE_DIFFERENCE": {
      "loc": "20-21",
      "input": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {",
      "function range": "14,5-25,5",
      "output": [
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        } else {\n            result++;\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result++;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int double_the_difference(double[] lst) {\n    int result = 0;\n    for (Double d : lst) {\n        if ((int) d.doubleValue() == d) {\n            int d_int = (int) d.doubleValue();\n            if (d_int % 2 == 1 && d_int >= 0) {\n                result += d_int;\n            }\n        }\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "COMPARE": {
      "loc": "16-17",
      "input": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {",
      "function range": "12,5-20,5",
      "output": [
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = game[i] - guess[i];\n    }\n    return result;\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 0;\n      } else {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] == guess[i]) {\n        result[i] = 1;\n      } else {\n        result[i] = 0;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] > guess[i]) {\n        result[i] = 1;\n      } else if (game[i] < guess[i]) {\n        result[i] = -1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      if (game[i] < guess[i]) {\n        result[i] = -1;\n      } else if (game[i] > guess[i]) {\n        result[i] = 1;\n      }\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] compare(int[] game, int[] guess) {\n    int[] result = new int[game.length];\n    for (int i = 0; i < game.length; i += 1) {\n      result[i] = Math.abs(game[i] - guess[i]);\n    }\n    return result;\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "STRONGEST_EXTENSION": {
      "loc": "28-33",
      "input": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {",
      "function range": "20,5-35,5",
      "output": [
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        } else if (SM > val) {\n            val = SM;\n            strong = s;\n        }\n    }\n    return strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String strongest_extension(String class_name, String[] extensions) {\n    String strong = null;\n    int val = Integer.MIN_VALUE;\n    for (String s : extensions) {\n        int CAP = 0;\n        int SM = 0;\n        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n            } else if (c >= 'a' && c <= 'z') {\n                SM++;\n            }\n        }\n        if (CAP > val) {\n            val = CAP;\n            strong = s;\n        }\n        if (SM > val) {\n            val = SM;\n            strong = s;\n        }\n    }\n    return strong;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        }
      ]
    },
    "CYCPATTERN_CHECK": {
      "loc": "14-17",
      "input": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();",
      "function range": "12,5-21,5",
      "output": [
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (l!= a.length()) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (b.charAt(i)!= a.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (l!= a.length()) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (l!= a.length()) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (b.charAt(i)!= a.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (l!= a.length()) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (b.charAt(i)!= a.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    for (int i = 0; i < l; i++) {\n      if (b.charAt(i)!= a.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) {\n      return false;\n    }\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) {\n        return false;\n      }\n    }\n    return true;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean cycpattern_check(String a, String b) {\n    int l = b.length();\n    if (a.length()!= l) return false;\n    for (int i = 0; i < l; i++) {\n      if (a.charAt(i)!= b.charAt(i)) return false;\n    }\n    return true;\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "EVEN_ODD_COUNT": {
      "loc": "14-17",
      "input": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;",
      "function range": "10,5-19,5",
      "output": [
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[] {even_count, odd_count};\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n      if (i % 2 == 0) {\n        even_count++;\n      } else {\n        odd_count++;\n      }\n    }\n    return new int[]{even_count, odd_count};\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 1; i <= num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] even_odd_count(int num) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int i = 0; i < num; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return new int[]{even_count, odd_count};\n}",
          "correctness": "wrong"
        }
      ]
    },
    "INT_TO_MINI_ROMAN": {
      "loc": "22-23",
      "input": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {",
      "function range": "13,5-27,5",
      "output": [
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      while (number >= num[i]) {\n        number -= num[i];\n        result += sym[i];\n      }\n      i--;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      while (number >= num[i]) {\n        number -= num[i];\n        result += sym[i];\n      }\n      i--;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result += sym[i];\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result = sym[i] + result;\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n      while (number >= num[i]) {\n        number -= num[i];\n        result += sym[i];\n      }\n      i--;\n    }\n    return result;\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        while (number >= num[i]) {\n            number -= num[i];\n            result = sym[i] + result;\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String int_to_mini_roman(int number) {\n    int[] num = new int[] {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    String[] sym = new String[] {\n        \"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"\n    };\n    int i = 12;\n    String result = \"\";\n    while (number > 0) {\n        if (number >= num[i]) {\n            result = sym[i] + result;\n            number -= num[i];\n        } else {\n            result = sym[i - 1] + result;\n            number = number * 10 - num[i - 1];\n        }\n        i--;\n    }\n    return result;\n}",
          "correctness": "wrong"
        }
      ]
    },
    "RIGHT_ANGLE_TRIANGLE": {
      "loc": "13-14",
      "input": "public static boolean right_angle_triangle(int a, int b, int c) {",
      "function range": "12,5-14,5",
      "output": [
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b > c || a + c > b || b + c > a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static boolean right_angle_triangle(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "FIND_MAX": {
      "loc": "27-28",
      "input": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));",
      "function range": "18,5-31,5",
      "output": [
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        });\n    return words_list.get(words_list.size() - 1);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        });\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size()-1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return Integer.compare(s1.size(), s2.size());\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return s1.size() - s2.size();\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return Integer.compare(s1.size(), s2.size());\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String find_max(String[] words) {\n    ArrayList<String> words_list = new ArrayList<String>(Arrays.asList(words));\n    Collections.sort(\n        words_list,\n        (w1, w2) -> {\n            Character[] c1 = ((String) w1).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s1 = new HashSet<Character>(Arrays.asList(c1));\n            Character[] c2 = ((String) w2).chars().mapToObj(c -> (char)c).toArray(Character[]::new);\n            HashSet<Character> s2 = new HashSet<Character>(Arrays.asList(c2));\n            return Integer.compare(s1.size(), s2.size());\n        }\n    );\n    return words_list.get(words_list.size() - 1);\n  }",
          "correctness": "wrong"
        }
      ]
    },
    "EAT": {
      "loc": "32-33",
      "input": "public static int[] eat(int number, int need, int remaining) {",
      "function range": "31,5-33,5",
      "output": [
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number /= 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (need > remaining) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number /= 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n\t\tif (remaining < need) {\n\t\t\treturn null;\n\t\t}\n\t\tint[] result = new int[need];\n\t\tfor (int i = 0; i < need; i++) {\n\t\t\tresult[i] = number % 10;\n\t\t\tnumber /= 10;\n\t\t}\n\t\treturn result;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n\t\tif (need > remaining) {\n\t\t\treturn null;\n\t\t}\n\t\tint[] result = new int[need];\n\t\tfor (int i = 0; i < need; i++) {\n\t\t\tresult[i] = number % 10;\n\t\t\tnumber /= 10;\n\t\t}\n\t\treturn result;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number = number / 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number /= 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number /= 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number /= 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number = number / 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static int[] eat(int number, int need, int remaining) {\n        if (remaining < need) {\n            return null;\n        }\n        int[] result = new int[need];\n        for (int i = 0; i < need; i++) {\n            result[i] = number % 10;\n            number /= 10;\n        }\n        return result;\n    }",
          "correctness": "wrong"
        }
      ]
    },
    "DO_ALGEBRA": {
      "loc": "33-36",
      "input": "public static double do_algebra(String[] operator, int[] operand) throws NumberFormatException, ScriptException {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");",
      "function range": "30,5-38,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        }
      ]
    },
    "SOLVE_STRING": {
      "loc": "18-21",
      "input": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {",
      "function range": "14,5-27,5",
      "output": [
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (c == '(') {\n                flg = 1;\n            } else {\n                sb.append(c);\n            }\n        } else if (flg == 1) {\n            if (c == ')') {\n                flg = 0;\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        if (c == '(') {\n          flg = 1;\n        } else {\n          sb.append(c);\n        }\n      } else if (flg == 1) {\n        if (c == ')') {\n          flg = 0;\n        } else {\n          sb.append(c);\n        }\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (c == '(') {\n                flg = 1;\n            } else {\n                sb.append(c);\n            }\n        } else if (flg == 1) {\n            if (c == ')') {\n                flg = 0;\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (c == '(') {\n                flg = 1;\n            } else {\n                sb.append(c);\n            }\n        } else {\n            if (c == ')') {\n                flg = 0;\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        if (c == '(') {\n          flg = 1;\n        } else {\n          sb.append(c);\n        }\n      } else if (flg == 1) {\n        if (c == ')') {\n          flg = 0;\n        } else {\n          sb.append(c);\n        }\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n      if (flg == 0) {\n        if (c == '(') {\n          flg = 1;\n        } else {\n          sb.append(c);\n        }\n      } else {\n        if (c == ')') {\n          flg = 0;\n        } else {\n          sb.append(c);\n        }\n      }\n    }\n    return sb.toString();\n  }",
          "correctness": "wrong"
        },
        {
          "patch": "public static String solve_string(String s) {\n    int flg = 0;\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (flg == 0) {\n            if (c == '(') {\n                flg = 1;\n            } else {\n                sb.append(c);\n            }\n        } else if (flg == 1) {\n            if (c == ')') {\n                flg = 0;\n                sb.append(c);\n            } else {\n                sb.append(c);\n            }\n        }\n    }\n    return sb.toString();\n}",
          "correctness": "wrong"
        }
      ]
    },
    "STRING_TO_MD5": {
      "loc": "16-17",
      "input": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;",
      "function range": "13,5-20,5",
      "output": [
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "",
          "correctness": "uncompilable"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toHexString((byteData[i] & 0xff) | 0x100).substring(1,3));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toHexString((byteData[i] & 0xff) | 0x100).substring(1, 3));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        },
        {
          "patch": "public static String string_to_md5(String text) throws NoSuchAlgorithmException {\n    if (text.equals(\"\")) return null;\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    md.update(text.getBytes());\n    byte byteData[] = md.digest();\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < byteData.length; i++) {\n      sb.append(Integer.toHexString((byteData[i] & 0xff) | 0x100).substring(1,3));\n    }\n    return sb.toString();\n  }",
          "correctness": "plausible"
        }
      ]
    },
    "GENERATE_INTEGERS": {
      "loc": "15-17",
      "input": "public static ArrayList<Integer> generate_integers(int a, int b) {",
      "function range": "14,5-23,5",
      "output": [
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\tfor (int i = a; i <= b; i++) {\n\t\t\tlist.add(i);\n\t\t}\n\t\treturn list;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> integers = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> integers = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n\t\tArrayList<Integer> integers = new ArrayList<Integer>();\n\t\tfor (int i = a; i <= b; i++) {\n\t\t\tintegers.add(i);\n\t\t}\n\t\treturn integers;\n\t}",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> integers = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i < b; i++) {\n            list.add(i);\n        }\n        return list;\n    }",
          "correctness": "wrong"
        },
        {
          "patch": "public static ArrayList<Integer> generate_integers(int a, int b) {\n        ArrayList<Integer> integers = new ArrayList<Integer>();\n        for (int i = a; i < b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }",
          "correctness": "wrong"
        }
      ]
    }
  }
}